<#@ include file="EF.Reverse.POCO.Core.ttinclude" #>
<#
    // v2.17.2
    // Please make changes to the settings below.
    // All you have to do is save this file, and the output file(s) is/are generated. Compiling does not regenerate the file(s).

    // Main settings **********************************************************************************************************************
    Namespace = "EntityFramework_Reverse_POCO_Generator.SqlCe4"; // Override the default namespace here
    DbContextName = "MyDbContextSqlCE4";
    DbContextInterfaceBaseClasses = "IDisposable";    // Specify what the base classes are for your database context interface
    ConnectionStringName = "MyDbContextSqlCE4";  // Searches for this connection string in config files listed below
    TargetFrameworkVersion = "4.51"; // Please set this to your .NET framework version, 4.0, 4.5, 4.51, etc.
    ConfigurationClassName = "Configuration"; // Configuration, Mapping, Map, etc. This is appended to the Poco class name to configure the mappings.
    ConfigFilenameSearchOrder = new[] { "app.config", "web.config", "app.config.transform", "web.config.transform" }; // Add more here if required. The config files are searched for in the local project first, then the whole solution second.
    MakeClassesPartial = false;
    GenerateSeparateFiles = false;
    UseCamelCase = true;    // This will rename the tables & fields to use CamelCase. If false table & field names will be left alone.
    IncludeComments = true; // Adds comments to the generated code
    IncludeExtendedPropertyComments = ExtendedPropertyCommentsStyle.InSummaryBlock; // Adds extended properties as comments to the generated code
    IncludeViews = true;
    DisableGeographyTypes = false; // Turns off use of System.Data.Entity.Spatial.DbGeography and System.Data.Entity.Spatial.DbGeometry as OData doesn't support entities with geometry/geography types.
    CollectionType = "List";  // Determines the type of collection for the Navigation Properties. "ObservableCollection" for example. Add "System.Collections.ObjectModel" to AdditionalNamespaces if setting the CollectionType = "ObservableCollection".
    AddUnitTestingDbContext = true; // Will add a FakeDbContext and FakeDbSet for easy unit testing
    AdditionalNamespaces = new[] { "System" };  // To include extra namespaces, include them here. i.e. "Microsoft.AspNet.Identity.EntityFramework"
    AdditionalContextInterfaceItems = new[] // To include extra db context interface items, include them here. Also set MakeClassesPartial=true, and implement the partial DbContext class functions.
    {
        ""  //  example: "void SetAutoDetectChangesEnabled(bool flag);"
    };
    // If you need to serialize your entities with the JsonSerializer from Newtonsoft, this would serialize
    // all properties including the Reverse Navigation and Foreign Keys. The simplest way to exclude them is
    // to use the data annotation [JsonIgnore] on reverse navigation and foreign keys.
    AdditionalReverseNavigationsDataAnnotations = new string[] // Data Annotations for ReverseNavigationProperty.
    {
        // "JsonIgnore"
    };  
    AdditionalForeignKeysDataAnnotations = new string[] // Data Annotations for ForeignKeys.
    {
        // "JsonIgnore"
    };  
    
    // Migrations *************************************************************************************************************************
    MigrationConfigurationFileName = ""; // null or empty to not create migrations
    MigrationStrategy = "MigrateDatabaseToLatestVersion"; // MigrateDatabaseToLatestVersion, CreateDatabaseIfNotExists or DropCreateDatabaseIfModelChanges
    ContextKey = ""; // Sets the string used to distinguish migrations belonging to this configuration from migrations belonging to other configurations using the same database. This property enables migrations from multiple different models to be applied to applied to a single database.
    AutomaticMigrationsEnabled = true;
    AutomaticMigrationDataLossAllowed = true; // if true, can drop fields and lose data during automatic migration

    // Pluralization **********************************************************************************************************************
    // To turn off pluralization, use:
    //      Inflector.PluralizationService = null;
    // Default pluralization, use:
    //      Inflector.PluralizationService = new EnglishPluralizationService();
    // For Spanish pluralization:
    //      1. Intall the "EF6.Contrib" Nuget Package.
    //      2. Add the following to the top of this file and adjust path, and remove the space between the angle bracket and # at the beginning and end.
    //         < #@ assembly name="your full path to \EntityFramework.Contrib.dll" # >
    //      3. Change the line below to: Inflector.PluralizationService = new SpanishPluralizationService();
    Inflector.PluralizationService = new EnglishPluralizationService(new[]
    {
        // Create custom ("Singular", "Plural") forms for one-off words as needed
        new CustomPluralizationEntry("LiveQuiz", "LiveQuizzes"),
        new CustomPluralizationEntry("Course", "Courses"),
        new CustomPluralizationEntry("CustomerStatus", "CustomerStatus"), // Use same value to prevent pluralisation
        new CustomPluralizationEntry("EmployeeStatus", "EmployeeStatus")
    });
    
    
    // Elements to generate ***************************************************************************************************************
    // Add the elements that should be generated when the template is executed.
    // Multiple projects can now be used that separate the different concerns.
    ElementsToGenerate =  Elements.Poco | Elements.Context | Elements.UnitOfWork | Elements.PocoConfiguration;

    // Use these namespaces to specify where the different elements now live. These may even be in different assemblies.
    // Please note this does not create the files in these locations, it only adds a using statement to say where they are.
    // I show how this works on the video from 26:08 onwards.
    // The way to do this is to add the "EntityFramework Reverse POCO Code First Generator" into each of these folders.
    // Then set the .tt to only generate the relevant section you need by setting
    //      ElementsToGenerate = Elements.Poco; in your Entity folder,
    //      ElementsToGenerate = Elements.Context | Elements.UnitOfWork; in your Context folder,
    //      ElementsToGenerate = Elements.PocoConfiguration; in your Maps folder.
    //      PocoNamespace = "YourProject.Entities";
    //      ContextNamespace = "YourProject.Context";
    //      UnitOfWorkNamespace = "YourProject.Context";	
    //      PocoConfigurationNamespace = "YourProject.Maps";
    // You also need to set the following to the namespace where they now live:
    PocoNamespace = "";
    ContextNamespace = "";
    UnitOfWorkNamespace = "";	
    PocoConfigurationNamespace = "";

    
    // Schema *****************************************************************************************************************************
    // If there are multiple schemas, then the table name is prefixed with the schema, except for dbo.
    // Ie. dbo.hello will be Hello.
    //     abc.hello will be AbcHello.
    PrependSchemaName = true;   // Control if the schema name is prepended to the table name


    // Filtering **************************************************************************************************************************
    // Use the following table/view name regex filters to include or exclude tables/views
    // Exclude filters are checked first and tables matching filters are removed.
    //  * If left null, none are excluded.
    //  * If not null, any tables matching the regex are excluded.
    // Include filters are checked second.
    //  * If left null, all are included.
    //  * If not null, only the tables matching the regex are included.
    //  Example:    TableFilterExclude = new Regex(".*auto.*");
    //              TableFilterInclude = new Regex("(.*_FR_.*)|(data_.*)");
    //              TableFilterInclude = new Regex("^table_name1$|^table_name2$|etc");
    //              ColumnFilterExclude = new Regex("^FK_.*$");
    SchemaFilterExclude = null;
    SchemaFilterInclude = null;
    TableFilterExclude = null;
    TableFilterInclude = null;
    ColumnFilterExclude = null;


    // Table renaming *********************************************************************************************************************
    // Use the following function to rename tables such as tblOrders to Orders, Shipments_AB to Shipments, etc.
    // Example:
    /*TableRename = (name, schema) =>
    {
        if (name.StartsWith("tbl"))
            name = name.Remove(0, 3);
        return name.Replace("_AB", "");
    };*/
    TableRename = (name, schema) => name;   // Do nothing by default

    // Column modification*****************************************************************************************************************
    // Use the following list to replace column byte types with Enums.
    // As long as the type can be mapped to your new type, all is well.
    //EnumsDefinitions.Add(new EnumDefinition { Schema = "dbo", Table = "match_table_name", Column = "match_column_name", EnumType = "name_of_enum" });
    //EnumsDefinitions.Add(new EnumDefinition { Schema = "dbo", Table = "OrderHeader", Column = "OrderStatus", EnumType = "OrderStatusType" }); // This will replace OrderHeader.OrderStatus type to be an OrderStatusType enum
    
    // Use the following function if you need to apply additional modifications to a column
    // eg. normalise names etc.
    UpdateColumn = (Column column, Table table) => 
    {
        // Example
        //if (column.NameHumanCase == "PkId")
        //    column.NameHumanCase = "Id";

        // Perform Enum property type replacement
        var enumDefinition = EnumsDefinitions.FirstOrDefault(e =>
            (e.Schema.ToLowerInvariant() == table.Schema.ToLowerInvariant()) &&
            (e.Table == table.Name || e.Table == table.NameHumanCase) &&
            (e.Column == column.Name || e.Column == column.NameHumanCase));

        if (enumDefinition != null)
            column.PropertyType = enumDefinition.EnumType;
        
        return column;
    };


    // WCF ********************************************************************************************************************************
    // This is only intended as a helper, to get you started creating WCF contracts, and to save a lot of typing.
    AddWcfDataAttributes = false;
    ExtraWcfDataContractAttributes = "";    // This string is inserted into the  [DataContract] attribute, before the closing square bracket.
    // Example: "";                                           = [DataContract]
    //          "(Namespace = \"http://www.contoso.com\")";   = [DataContract(Namespace = "http://www.contoso.com")]
    //          "(Namespace = Constants.ServiceNamespace)";   = [DataContract(Namespace = Constants.ServiceNamespace)]
    

    // Callbacks **********************************************************************************************************************
    // This method will be called right before we write the POCO header.
    Action<Table> WritePocoClassAttributes = t =>
    {
        // Do nothing by default
        // Example:
        // if(t.ClassName.StartsWith("Order"))
        //     WriteLine("    [SomeAttribute]");
    };

    // Writes optional base classes
    Func<Table, string> WritePocoBaseClasses = t =>
    {
        //if (t.ClassName == "User")
        //    return ": IdentityUser<int, CustomUserLogin, CustomUserRole, CustomUserClaim>";
        return "";
    };

    // Writes any boilerplate stuff
    Action<Table> WritePocoBaseClassBody = t =>
    {
        // Do nothing by default
        // Example:
        // WriteLine("        // " + t.ClassName);
    };

    Func<Column, string> WritePocoColumn = c => c.Entity;

    
    // That's it, nothing else to configure ***********************************************************************************************
    
    // Stored procedure are not supported in SqlCE - create dummy functions
    StoredProcedureRename = (name, schema) => name;
    Func<StoredProcedure, string> WriteStoredProcFunctionName = null;
    Func<StoredProcedure, bool, string> WriteStoredProcFunctionParams = null;
    Func<StoredProcedure, string> WriteStoredProcFunctionOverloadCall = null;
    Func<StoredProcedure, string> WriteStoredProcFunctionSqlAtParams = null;
    Func<StoredProcedureParameter, string> WriteStoredProcSqlParameterName = null;
    Func<StoredProcedure, string> WriteStoredProcFunctionDeclareSqlParameter = null;
    Func<StoredProcedure, string> WriteTableValuedFunctionDeclareSqlParameter = null;
    Func<StoredProcedure, string> WriteStoredProcFunctionSqlParameterAnonymousArray = null;
    Func<StoredProcedure, string> WriteTableValuedFunctionSqlParameterAnonymousArray = null;
    Func<StoredProcedure, bool, string> WriteStoredProcFunctionSetSqlParameters = null;
    Func<StoredProcedure, string> WriteStoredProcReturnModelName = null;
    Func<StoredProcedure, string> WriteStoredProcReturnType = null;
    Func<DataColumn, string> WriteStoredProcReturnColumn = null;
    
    // Read schema
    IsSqlCe = true;
    var tables = LoadTables(GetDbProviderFactory());
    var storedProcs = new List<StoredProcedure>();
    
    // Generate output
    if (tables.Count > 0)
    {
#>
<#@ include file="EF.Reverse.POCO.ttinclude" #>
<# } #>