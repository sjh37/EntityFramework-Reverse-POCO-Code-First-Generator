// <auto-generated>
// ReSharper disable All

using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.ChangeTracking;
using Microsoft.Extensions.Configuration;
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;
using System.Data.SqlTypes;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;

namespace Tester.Integration.EfCore2
{
    public class MyDbContext : DbContext, IMyDbContext
    {
        private readonly IConfiguration _configuration;

        public MyDbContext()
        {
        }

        public MyDbContext(DbContextOptions<MyDbContext> options)
            : base(options)
        {
        }

        public MyDbContext(IConfiguration configuration)
        {
            _configuration = configuration;
        }

        public DbSet<A> A { get; set; } // A
        public DbSet<Aaref> Aarefs { get; set; } // AAREF
        public DbSet<AbOrderLinesAb> AbOrderLinesAbs { get; set; } // AB_OrderLinesAB_
        public DbSet<AbOrdersAb> AbOrdersAbs { get; set; } // AB_OrdersAB_
        public DbSet<Alpha_Harish3485> Alpha_Harish3485 { get; set; } // Harish3485
        public DbSet<Alpha_Workflow> Alpha_Workflows { get; set; } // workflow
        public DbSet<App_UserFacilityServiceRole> App_UserFacilityServiceRoles { get; set; } // UserFacilityServiceRole
        public DbSet<AppUser> AppUsers { get; set; } // AppUser
        public DbSet<Attendee> Attendees { get; set; } // Attendee
        public DbSet<BatchTest> BatchTests { get; set; } // BatchTest
        public DbSet<Beta_Harish3485> Beta_Harish3485 { get; set; } // Harish3485
        public DbSet<Beta_ToAlpha> Beta_ToAlphas { get; set; } // ToAlpha
        public DbSet<Beta_Workflow> Beta_Workflows { get; set; } // workflow
        public DbSet<Bitfiddlerallcap> Bitfiddlerallcaps { get; set; } // BITFIDDLERALLCAPS
        public DbSet<BitFiddlerCategoRy> BitFiddlerCategoRies { get; set; } // BitFiddlerCATEGORIES
        public DbSet<BitFiddlerCurrenCy> BitFiddlerCurrenCies { get; set; } // BitFiddlerCURRENCIES
        public DbSet<Blah> Blahs { get; set; } // Blah
        public DbSet<BlahBlahLink> BlahBlahLinks { get; set; } // BlahBlahLink
        public DbSet<BlahBlahLinkReadonly> BlahBlahLinkReadonlies { get; set; } // BlahBlahLink_readonly
        public DbSet<BlahBlahLinkV2> BlahBlahLinkV2 { get; set; } // BlahBlahLink_v2
        public DbSet<BlahBlargLink> BlahBlargLinks { get; set; } // BlahBlargLink
        public DbSet<Blarg> Blargs { get; set; } // Blarg
        public DbSet<Burak1> Burak1 { get; set; } // Burak1
        public DbSet<Burak2> Burak2 { get; set; } // Burak2
        public DbSet<CalculatedColumnNotNull> CalculatedColumnNotNulls { get; set; } // CalculatedColumnNotNull
        public DbSet<Car> Cars { get; set; } // Car
        public DbSet<CarToColour> CarToColours { get; set; } // CarToColour
        public DbSet<ClientCreationState> ClientCreationStates { get; set; } // ClientCreationState
        public DbSet<CmsFile> CmsFiles { get; set; } // CMS_File
        public DbSet<CmsFileTag> CmsFileTags { get; set; } // CMS_FileTag
        public DbSet<CmsTag> CmsTags { get; set; } // CMS_Tag
        public DbSet<CodeMeetingTopicDetail> CodeMeetingTopicDetails { get; set; } // CODE_MeetingTopicDetails
        public DbSet<CodeObject> CodeObjects { get; set; } // CodeObject
        public DbSet<CodeParamMeetingTopicDetailSource> CodeParamMeetingTopicDetailSources { get; set; } // CODE_PARAM_MeetingTopicDetailSource
        public DbSet<Colour> Colours { get; set; } // Colour
        public DbSet<ColumnNameAndType> ColumnNameAndTypes { get; set; } // ColumnNameAndTypes
        public DbSet<ComplexView> ComplexViews { get; set; } // ComplexView
        public DbSet<Country> Countries { get; set; } // Country
        public DbSet<DateTimeDefaultTest> DateTimeDefaultTests { get; set; } // DateTimeDefaultTest
        public DbSet<dcg_RovColumnDefinition> dcg_RovColumnDefinitions { get; set; } // rov_ColumnDefinitions
        public DbSet<DefaultCheckForNull> DefaultCheckForNulls { get; set; } // DefaultCheckForNull
        public DbSet<DsOpe> DsOpes { get; set; } // DSOpe
        public DbSet<EnumsWithStringAsValue> EnumsWithStringAsValues { get; set; } // EnumsWithStringAsValue
        public DbSet<EnumTest_DaysOfWeek> EnumTest_DaysOfWeeks { get; set; } // DaysOfWeek
        public DbSet<EnumTest_OpenDay> EnumTest_OpenDays { get; set; } // OpenDays
        public DbSet<EnumWithDefaultValue> EnumWithDefaultValues { get; set; } // EnumWithDefaultValue
        public DbSet<EventProcessor> EventProcessors { get; set; } // EventProcessor
        public DbSet<EventProcessorEventFilter> EventProcessorEventFilters { get; set; } // EventProcessorEventFilter
        public DbSet<FFRS_Cv> FFRS_Cvs { get; set; } // CV
        public DbSet<FinancialInstitutionOffice> FinancialInstitutionOffices { get; set; } // FinancialInstitutionOffice
        public DbSet<FkTest_SmallDecimalTestAttribute> FkTest_SmallDecimalTestAttributes { get; set; } // SmallDecimalTestAttribute
        public DbSet<Footer> Footers { get; set; } // footer
        public DbSet<ForeignKeyIsNotEnforced> ForeignKeyIsNotEnforceds { get; set; } // ForeignKeyIsNotEnforced
        public DbSet<ForeignKeyIsNotEnforcedItem> ForeignKeyIsNotEnforcedItems { get; set; } // ForeignKeyIsNotEnforcedItem
        public DbSet<HasPrincipalKeyTestChild> HasPrincipalKeyTestChilds { get; set; } // HasPrincipalKeyTestChild
        public DbSet<HasPrincipalKeyTestParent> HasPrincipalKeyTestParents { get; set; } // HasPrincipalKeyTestParent
        public DbSet<Header> Headers { get; set; } // header
        public DbSet<HierarchyTest> HierarchyTests { get; set; } // hierarchy_test
        public DbSet<Issue47_Role> Issue47_Roles { get; set; } // Role
        public DbSet<Issue47_User> Issue47_Users { get; set; } // Users
        public DbSet<Issue47_UserRole> Issue47_UserRoles { get; set; } // UserRoles
        public DbSet<MultipleKey> MultipleKeys { get; set; } // MultipleKeys
        public DbSet<OneEightSix_Issue> OneEightSix_Issues { get; set; } // Issue
        public DbSet<OneEightSix_IssueUploadedFile> OneEightSix_IssueUploadedFiles { get; set; } // IssueUploadedFile
        public DbSet<OneEightSix_UploadedFile> OneEightSix_UploadedFiles { get; set; } // UploadedFile
        public DbSet<PeriodTestTable> PeriodTestTables { get; set; } // PeriodTestTable
        public DbSet<Person> People { get; set; } // Person
        public DbSet<PersonPost> PersonPosts { get; set; } // PersonPosts
        public DbSet<PkOrdinalTest> PkOrdinalTests { get; set; } // pk_ordinal_test
        public DbSet<PropertyTypesToAdd> PropertyTypesToAdds { get; set; } // PropertyTypesToAdd
        public DbSet<SequenceTest> SequenceTests { get; set; } // SequenceTest
        public DbSet<SmallDecimalTest> SmallDecimalTests { get; set; } // SmallDecimalTest
        public DbSet<SmallDecimalTestView> SmallDecimalTestViews { get; set; } // SmallDecimalTestView
        public DbSet<Stafford_Boo> Stafford_Boos { get; set; } // Boo
        public DbSet<Stafford_ComputedColumn> Stafford_ComputedColumns { get; set; } // ComputedColumns
        public DbSet<Stafford_Foo> Stafford_Foos { get; set; } // Foo
        public DbSet<Synonyms_Child> Synonyms_Children { get; set; } // Child
        public DbSet<Synonyms_Parent> Synonyms_Parents { get; set; } // Parent
        public DbSet<TableA> TableAs { get; set; } // TableA
        public DbSet<TableB> TableBs { get; set; } // TableB
        public DbSet<TableMappingWithSpace> TableMappingWithSpaces { get; set; } // table mapping with space
        public DbSet<TableWithDuplicateColumnName> TableWithDuplicateColumnNames { get; set; } // table with duplicate column names
        public DbSet<TableWithSpace> TableWithSpaces { get; set; } // table with space
        public DbSet<TableWithSpaceAndInColumn> TableWithSpaceAndInColumns { get; set; } // table with space and in columns
        public DbSet<TableWithSpaceInColumnOnly> TableWithSpaceInColumnOnlies { get; set; } // TableWithSpaceInColumnOnly
        public DbSet<TadeuszSobol> TadeuszSobols { get; set; } // TadeuszSobol
        public DbSet<Task1> Task1 { get; set; } // Task
        public DbSet<TblOrder> TblOrders { get; set; } // tblOrders
        public DbSet<TblOrderError> TblOrderErrors { get; set; } // tblOrderErrors
        public DbSet<TblOrderErrorsAb> TblOrderErrorsAbs { get; set; } // tblOrderErrorsAB_
        public DbSet<TblOrderLine> TblOrderLines { get; set; } // tblOrderLines
        public DbSet<ThisIsMemoryOptimised> ThisIsMemoryOptimiseds { get; set; } // ThisIsMemoryOptimised
        public DbSet<Ticket> Tickets { get; set; } // Ticket
        public DbSet<TimestampNotNull> TimestampNotNulls { get; set; } // TimestampNotNull
        public DbSet<TimestampNullable> TimestampNullables { get; set; } // TimestampNullable
        public DbSet<Token> Tokens { get; set; } // Token
        public DbSet<User> Users { get; set; } // User
        public DbSet<User309> User309 { get; set; } // User309
        public DbSet<UserDocument> UserDocuments { get; set; } // User_Document
        public DbSet<Versioned> Versioneds { get; set; } // Versioned
        public DbSet<VersionedNullable> VersionedNullables { get; set; } // VersionedNullable
        public DbSet<ViewWithSpace> ViewWithSpaces { get; set; } // view with space
        public DbSet<WVN_Article> WVN_Articles { get; set; } // Articles
        public DbSet<Брендытовара> Брендытовара { get; set; } // Бренды товара

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured && _configuration != null)
            {
                optionsBuilder.UseSqlServer(_configuration.GetConnectionString(@"MyDbContext"), x => x.UseNetTopologySuite());
            }
        }

        public bool IsSqlParameterNull(SqlParameter param)
        {
            var sqlValue = param.SqlValue;
            var nullableValue = sqlValue as INullable;
            if (nullableValue != null)
                return nullableValue.IsNull;
            return (sqlValue == null || sqlValue == DBNull.Value);
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);

            modelBuilder.HasSequence<int>("CountBy1", "dbo").StartsAt(1).IncrementsBy(1).IsCyclic(false);
            modelBuilder.HasSequence<long>("CountByBigInt", "dbo").StartsAt(22).IncrementsBy(234).IsCyclic(true).HasMin(1).HasMax(9876543);
            modelBuilder.HasSequence<decimal>("CountByDecimal", "dbo").StartsAt(593).IncrementsBy(82).IsCyclic(false).HasMin(5).HasMax(777777);
            modelBuilder.HasSequence<decimal>("CountByNumeric", "dbo").StartsAt(789).IncrementsBy(987).IsCyclic(false).HasMin(345).HasMax(999999999999999999);
            modelBuilder.HasSequence<short>("CountBySmallInt", "dbo").StartsAt(44).IncrementsBy(456).IsCyclic(true);
            modelBuilder.HasSequence<byte>("CountByTinyInt", "dbo").StartsAt(33).IncrementsBy(3).IsCyclic(false);

            modelBuilder.ApplyConfiguration(new AConfiguration());
            modelBuilder.ApplyConfiguration(new AarefConfiguration());
            modelBuilder.ApplyConfiguration(new AbOrderLinesAbConfiguration());
            modelBuilder.ApplyConfiguration(new AbOrdersAbConfiguration());
            modelBuilder.ApplyConfiguration(new Alpha_Harish3485Configuration());
            modelBuilder.ApplyConfiguration(new Alpha_WorkflowConfiguration());
            modelBuilder.ApplyConfiguration(new App_UserFacilityServiceRoleConfiguration());
            modelBuilder.ApplyConfiguration(new AppUserConfiguration());
            modelBuilder.ApplyConfiguration(new AttendeeConfiguration());
            modelBuilder.ApplyConfiguration(new BatchTestConfiguration());
            modelBuilder.ApplyConfiguration(new Beta_Harish3485Configuration());
            modelBuilder.ApplyConfiguration(new Beta_ToAlphaConfiguration());
            modelBuilder.ApplyConfiguration(new Beta_WorkflowConfiguration());
            modelBuilder.ApplyConfiguration(new BitfiddlerallcapConfiguration());
            modelBuilder.ApplyConfiguration(new BitFiddlerCategoRyConfiguration());
            modelBuilder.ApplyConfiguration(new BitFiddlerCurrenCyConfiguration());
            modelBuilder.ApplyConfiguration(new BlahConfiguration());
            modelBuilder.ApplyConfiguration(new BlahBlahLinkConfiguration());
            modelBuilder.ApplyConfiguration(new BlahBlahLinkReadonlyConfiguration());
            modelBuilder.ApplyConfiguration(new BlahBlahLinkV2Configuration());
            modelBuilder.ApplyConfiguration(new BlahBlargLinkConfiguration());
            modelBuilder.ApplyConfiguration(new BlargConfiguration());
            modelBuilder.ApplyConfiguration(new Burak1Configuration());
            modelBuilder.ApplyConfiguration(new Burak2Configuration());
            modelBuilder.ApplyConfiguration(new CalculatedColumnNotNullConfiguration());
            modelBuilder.ApplyConfiguration(new CarConfiguration());
            modelBuilder.ApplyConfiguration(new CarToColourConfiguration());
            modelBuilder.ApplyConfiguration(new ClientCreationStateConfiguration());
            modelBuilder.ApplyConfiguration(new CmsFileConfiguration());
            modelBuilder.ApplyConfiguration(new CmsFileTagConfiguration());
            modelBuilder.ApplyConfiguration(new CmsTagConfiguration());
            modelBuilder.ApplyConfiguration(new CodeMeetingTopicDetailConfiguration());
            modelBuilder.ApplyConfiguration(new CodeObjectConfiguration());
            modelBuilder.ApplyConfiguration(new CodeParamMeetingTopicDetailSourceConfiguration());
            modelBuilder.ApplyConfiguration(new ColourConfiguration());
            modelBuilder.ApplyConfiguration(new ColumnNameAndTypeConfiguration());
            modelBuilder.ApplyConfiguration(new ComplexViewConfiguration());
            modelBuilder.ApplyConfiguration(new CountryConfiguration());
            modelBuilder.ApplyConfiguration(new DateTimeDefaultTestConfiguration());
            modelBuilder.ApplyConfiguration(new dcg_RovColumnDefinitionConfiguration());
            modelBuilder.ApplyConfiguration(new DefaultCheckForNullConfiguration());
            modelBuilder.ApplyConfiguration(new DsOpeConfiguration());
            modelBuilder.ApplyConfiguration(new EnumsWithStringAsValueConfiguration());
            modelBuilder.ApplyConfiguration(new EnumTest_DaysOfWeekConfiguration());
            modelBuilder.ApplyConfiguration(new EnumTest_OpenDayConfiguration());
            modelBuilder.ApplyConfiguration(new EnumWithDefaultValueConfiguration());
            modelBuilder.ApplyConfiguration(new EventProcessorConfiguration());
            modelBuilder.ApplyConfiguration(new EventProcessorEventFilterConfiguration());
            modelBuilder.ApplyConfiguration(new FFRS_CvConfiguration());
            modelBuilder.ApplyConfiguration(new FinancialInstitutionOfficeConfiguration());
            modelBuilder.ApplyConfiguration(new FkTest_SmallDecimalTestAttributeConfiguration());
            modelBuilder.ApplyConfiguration(new FooterConfiguration());
            modelBuilder.ApplyConfiguration(new ForeignKeyIsNotEnforcedConfiguration());
            modelBuilder.ApplyConfiguration(new ForeignKeyIsNotEnforcedItemConfiguration());
            modelBuilder.ApplyConfiguration(new HasPrincipalKeyTestChildConfiguration());
            modelBuilder.ApplyConfiguration(new HasPrincipalKeyTestParentConfiguration());
            modelBuilder.ApplyConfiguration(new HeaderConfiguration());
            modelBuilder.ApplyConfiguration(new HierarchyTestConfiguration());
            modelBuilder.ApplyConfiguration(new Issue47_RoleConfiguration());
            modelBuilder.ApplyConfiguration(new Issue47_UserConfiguration());
            modelBuilder.ApplyConfiguration(new Issue47_UserRoleConfiguration());
            modelBuilder.ApplyConfiguration(new MultipleKeyConfiguration());
            modelBuilder.ApplyConfiguration(new OneEightSix_IssueConfiguration());
            modelBuilder.ApplyConfiguration(new OneEightSix_IssueUploadedFileConfiguration());
            modelBuilder.ApplyConfiguration(new OneEightSix_UploadedFileConfiguration());
            modelBuilder.ApplyConfiguration(new PeriodTestTableConfiguration());
            modelBuilder.ApplyConfiguration(new PersonConfiguration());
            modelBuilder.ApplyConfiguration(new PersonPostConfiguration());
            modelBuilder.ApplyConfiguration(new PkOrdinalTestConfiguration());
            modelBuilder.ApplyConfiguration(new PropertyTypesToAddConfiguration());
            modelBuilder.ApplyConfiguration(new SequenceTestConfiguration());
            modelBuilder.ApplyConfiguration(new SmallDecimalTestConfiguration());
            modelBuilder.ApplyConfiguration(new SmallDecimalTestViewConfiguration());
            modelBuilder.ApplyConfiguration(new Stafford_BooConfiguration());
            modelBuilder.ApplyConfiguration(new Stafford_ComputedColumnConfiguration());
            modelBuilder.ApplyConfiguration(new Stafford_FooConfiguration());
            modelBuilder.ApplyConfiguration(new Synonyms_ChildConfiguration());
            modelBuilder.ApplyConfiguration(new Synonyms_ParentConfiguration());
            modelBuilder.ApplyConfiguration(new TableAConfiguration());
            modelBuilder.ApplyConfiguration(new TableBConfiguration());
            modelBuilder.ApplyConfiguration(new TableMappingWithSpaceConfiguration());
            modelBuilder.ApplyConfiguration(new TableWithDuplicateColumnNameConfiguration());
            modelBuilder.ApplyConfiguration(new TableWithSpaceConfiguration());
            modelBuilder.ApplyConfiguration(new TableWithSpaceAndInColumnConfiguration());
            modelBuilder.ApplyConfiguration(new TableWithSpaceInColumnOnlyConfiguration());
            modelBuilder.ApplyConfiguration(new TadeuszSobolConfiguration());
            modelBuilder.ApplyConfiguration(new Task1Configuration());
            modelBuilder.ApplyConfiguration(new TblOrderConfiguration());
            modelBuilder.ApplyConfiguration(new TblOrderErrorConfiguration());
            modelBuilder.ApplyConfiguration(new TblOrderErrorsAbConfiguration());
            modelBuilder.ApplyConfiguration(new TblOrderLineConfiguration());
            modelBuilder.ApplyConfiguration(new ThisIsMemoryOptimisedConfiguration());
            modelBuilder.ApplyConfiguration(new TicketConfiguration());
            modelBuilder.ApplyConfiguration(new TimestampNotNullConfiguration());
            modelBuilder.ApplyConfiguration(new TimestampNullableConfiguration());
            modelBuilder.ApplyConfiguration(new TokenConfiguration());
            modelBuilder.ApplyConfiguration(new UserConfiguration());
            modelBuilder.ApplyConfiguration(new User309Configuration());
            modelBuilder.ApplyConfiguration(new UserDocumentConfiguration());
            modelBuilder.ApplyConfiguration(new VersionedConfiguration());
            modelBuilder.ApplyConfiguration(new VersionedNullableConfiguration());
            modelBuilder.ApplyConfiguration(new ViewWithSpaceConfiguration());
            modelBuilder.ApplyConfiguration(new WVN_ArticleConfiguration());
            modelBuilder.ApplyConfiguration(new БрендытовараConfiguration());

            modelBuilder.Query<ColourPivotReturnModel>();
            modelBuilder.Query<ColumnNameAndTypesProcReturnModel>();
            modelBuilder.Query<DboProcDataFromFfrsReturnModel>();
            modelBuilder.Query<DboProcDataFromFfrsAndDboReturnModel>();
            modelBuilder.Query<DsOpeProcReturnModel>();
            modelBuilder.Query<FFRS_CvDataReturnModel>();
            modelBuilder.Query<FFRS_DataFromDboReturnModel>();
            modelBuilder.Query<FFRS_DataFromDboAndFfrsReturnModel>();
            modelBuilder.Query<FkTest_HelloReturnModel>();
            modelBuilder.Query<GetSmallDecimalTestReturnModel>();
            modelBuilder.Query<SpatialTypesNoParamsReturnModel>();
            modelBuilder.Query<SpatialTypesWithParamsReturnModel>();
            modelBuilder.Query<StpNoParamsTestReturnModel>();
            modelBuilder.Query<StpNullableParamsTestReturnModel>();
            modelBuilder.Query<StpTestReturnModel>();
            modelBuilder.Query<StpTestUnderscoreTestReturnModel>();
            modelBuilder.Query<Synonyms_SimpleStoredProcReturnModel>();
            modelBuilder.Query<TestReturnStringReturnModel>();
            modelBuilder.Query<XmlDataV1ReturnModel>();
        }


        // Stored Procedures
        public int AddTwoValues(int? a, int? b)
        {
            var aParam = new SqlParameter { ParameterName = "@a", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = a.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!a.HasValue)
                aParam.Value = DBNull.Value;

            var bParam = new SqlParameter { ParameterName = "@b", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = b.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!b.HasValue)
                bParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };

            Database.ExecuteSqlCommand("EXEC @procResult = [dbo].[AddTwoValues] @a, @b", aParam, bParam, procResultParam);

            return (int)procResultParam.Value;
        }

        // AddTwoValuesAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public int AddTwoValuesWithResult(int? a, int? b, out int? result, out int? result2)
        {
            var aParam = new SqlParameter { ParameterName = "@a", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = a.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!a.HasValue)
                aParam.Value = DBNull.Value;

            var bParam = new SqlParameter { ParameterName = "@b", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = b.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!b.HasValue)
                bParam.Value = DBNull.Value;

            var resultParam = new SqlParameter { ParameterName = "@result", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output, Precision = 10, Scale = 0 };
            var result2Param = new SqlParameter { ParameterName = "@result2", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output, Precision = 10, Scale = 0 };
            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };

            Database.ExecuteSqlCommand("EXEC @procResult = [dbo].[AddTwoValuesWithResult] @a, @b, @result OUTPUT, @result2 OUTPUT", aParam, bParam, resultParam, result2Param, procResultParam);

            if (IsSqlParameterNull(resultParam))
                result = null;
            else
                result = (int) resultParam.Value;

            if (IsSqlParameterNull(result2Param))
                result2 = null;
            else
                result2 = (int) result2Param.Value;

            return (int)procResultParam.Value;
        }

        // AddTwoValuesWithResultAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public int Alpha_Overclock(DateTime? parameter)
        {
            var parameterParam = new SqlParameter { ParameterName = "@Parameter", SqlDbType = SqlDbType.DateTime, Direction = ParameterDirection.Input, Value = parameter.GetValueOrDefault() };
            if (!parameter.HasValue)
                parameterParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };

            Database.ExecuteSqlCommand("EXEC @procResult = [Alpha].[Overclock] @Parameter", parameterParam, procResultParam);

            return (int)procResultParam.Value;
        }

        // Alpha_OverclockAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public int App_UspCmtUserFsrUpdate(int? userId, int? fsrId, out int? ufsrId)
        {
            var userIdParam = new SqlParameter { ParameterName = "@userId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = userId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!userId.HasValue)
                userIdParam.Value = DBNull.Value;

            var fsrIdParam = new SqlParameter { ParameterName = "@fsrId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = fsrId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!fsrId.HasValue)
                fsrIdParam.Value = DBNull.Value;

            var ufsrIdParam = new SqlParameter { ParameterName = "@ufsrId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output, Precision = 10, Scale = 0 };
            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };

            Database.ExecuteSqlCommand("EXEC @procResult = [App].[usp_CMTUserFSRUpdate] @userId, @fsrId, @ufsrId OUTPUT", userIdParam, fsrIdParam, ufsrIdParam, procResultParam);

            if (IsSqlParameterNull(ufsrIdParam))
                ufsrId = null;
            else
                ufsrId = (int) ufsrIdParam.Value;

            return (int)procResultParam.Value;
        }

        // App_UspCmtUserFsrUpdateAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public int ASimpleExample()
        {
            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };

            Database.ExecuteSqlCommand("EXEC @procResult = [dbo].[aSimpleExample] ", procResultParam);

            return (int)procResultParam.Value;
        }

        // ASimpleExampleAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public int Beta_Overclock(DateTime? parameter)
        {
            var parameterParam = new SqlParameter { ParameterName = "@Parameter", SqlDbType = SqlDbType.DateTime, Direction = ParameterDirection.Input, Value = parameter.GetValueOrDefault() };
            if (!parameter.HasValue)
                parameterParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };

            Database.ExecuteSqlCommand("EXEC @procResult = [Beta].[Overclock] @Parameter", parameterParam, procResultParam);

            return (int)procResultParam.Value;
        }

        // Beta_OverclockAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        // public C182Test2ReturnModel C182Test2(int? flag) Cannot be created as EF Core does not yet support stored procedures with multiple result sets.

        // public async Task<C182Test2ReturnModel> C182Test2Async(int? flag) Cannot be created as EF Core does not yet support stored procedures with multiple result sets.

        // public CheckIfApplicationIsCompleteReturnModel CheckIfApplicationIsComplete(int? applicationId, out bool? isApplicationComplete) Cannot be created as EF Core does not yet support stored procedures with multiple result sets.

        // CheckIfApplicationIsCompleteAsync() cannot be created due to having out parameters, or is relying on the procedure result (CheckIfApplicationIsCompleteReturnModel)

        public List<ColourPivotReturnModel> ColourPivot()
        {
            int procResult;
            return ColourPivot(out procResult);
        }

        public List<ColourPivotReturnModel> ColourPivot(out int procResult)
        {
            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };
            const string sqlCommand = "EXEC @procResult = [dbo].[ColourPivot]";
            var procResultData = Query<ColourPivotReturnModel>()
                .FromSql(sqlCommand, procResultParam)
                .ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async Task<List<ColourPivotReturnModel>> ColourPivotAsync()
        {
            const string sqlCommand = "EXEC [dbo].[ColourPivot]";
            var procResultData = await Query<ColourPivotReturnModel>()
                .FromSql(sqlCommand)
                .ToListAsync();

            return procResultData;
        }

        public List<ColumnNameAndTypesProcReturnModel> ColumnNameAndTypesProc()
        {
            int procResult;
            return ColumnNameAndTypesProc(out procResult);
        }

        public List<ColumnNameAndTypesProcReturnModel> ColumnNameAndTypesProc(out int procResult)
        {
            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };
            const string sqlCommand = "EXEC @procResult = [dbo].[ColumnNameAndTypesProc]";
            var procResultData = Query<ColumnNameAndTypesProcReturnModel>()
                .FromSql(sqlCommand, procResultParam)
                .ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async Task<List<ColumnNameAndTypesProcReturnModel>> ColumnNameAndTypesProcAsync()
        {
            const string sqlCommand = "EXEC [dbo].[ColumnNameAndTypesProc]";
            var procResultData = await Query<ColumnNameAndTypesProcReturnModel>()
                .FromSql(sqlCommand)
                .ToListAsync();

            return procResultData;
        }

        public int ConvertToString(int? someValue, out string someString)
        {
            var someValueParam = new SqlParameter { ParameterName = "@someValue", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = someValue.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!someValue.HasValue)
                someValueParam.Value = DBNull.Value;

            var someStringParam = new SqlParameter { ParameterName = "@someString", SqlDbType = SqlDbType.VarChar, Direction = ParameterDirection.Output, Size = 20 };
            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };

            Database.ExecuteSqlCommand("EXEC @procResult = [dbo].[ConvertToString] @someValue, @someString OUTPUT", someValueParam, someStringParam, procResultParam);

            if (IsSqlParameterNull(someStringParam))
                someString = default(string);
            else
                someString = (string) someStringParam.Value;

            return (int)procResultParam.Value;
        }

        // ConvertToStringAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public List<DboProcDataFromFfrsReturnModel> DboProcDataFromFfrs(int? maxId)
        {
            int procResult;
            return DboProcDataFromFfrs(maxId, out procResult);
        }

        public List<DboProcDataFromFfrsReturnModel> DboProcDataFromFfrs(int? maxId, out int procResult)
        {
            var maxIdParam = new SqlParameter { ParameterName = "@maxId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = maxId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!maxId.HasValue)
                maxIdParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };
            const string sqlCommand = "EXEC @procResult = [dbo].[dbo_proc_data_from_ffrs] @maxId";
            var procResultData = Query<DboProcDataFromFfrsReturnModel>()
                .FromSql(sqlCommand, maxIdParam, procResultParam)
                .ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async Task<List<DboProcDataFromFfrsReturnModel>> DboProcDataFromFfrsAsync(int? maxId)
        {
            var maxIdParam = new SqlParameter { ParameterName = "@maxId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = maxId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!maxId.HasValue)
                maxIdParam.Value = DBNull.Value;

            const string sqlCommand = "EXEC [dbo].[dbo_proc_data_from_ffrs] @maxId";
            var procResultData = await Query<DboProcDataFromFfrsReturnModel>()
                .FromSql(sqlCommand, maxIdParam)
                .ToListAsync();

            return procResultData;
        }

        public List<DboProcDataFromFfrsAndDboReturnModel> DboProcDataFromFfrsAndDbo()
        {
            int procResult;
            return DboProcDataFromFfrsAndDbo(out procResult);
        }

        public List<DboProcDataFromFfrsAndDboReturnModel> DboProcDataFromFfrsAndDbo(out int procResult)
        {
            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };
            const string sqlCommand = "EXEC @procResult = [dbo].[dbo_proc_data_from_ffrs_and_dbo]";
            var procResultData = Query<DboProcDataFromFfrsAndDboReturnModel>()
                .FromSql(sqlCommand, procResultParam)
                .ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async Task<List<DboProcDataFromFfrsAndDboReturnModel>> DboProcDataFromFfrsAndDboAsync()
        {
            const string sqlCommand = "EXEC [dbo].[dbo_proc_data_from_ffrs_and_dbo]";
            var procResultData = await Query<DboProcDataFromFfrsAndDboReturnModel>()
                .FromSql(sqlCommand)
                .ToListAsync();

            return procResultData;
        }

        public List<DsOpeProcReturnModel> DsOpeProc()
        {
            int procResult;
            return DsOpeProc(out procResult);
        }

        public List<DsOpeProcReturnModel> DsOpeProc(out int procResult)
        {
            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };
            const string sqlCommand = "EXEC @procResult = [dbo].[DSOpeProc]";
            var procResultData = Query<DsOpeProcReturnModel>()
                .FromSql(sqlCommand, procResultParam)
                .ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async Task<List<DsOpeProcReturnModel>> DsOpeProcAsync()
        {
            const string sqlCommand = "EXEC [dbo].[DSOpeProc]";
            var procResultData = await Query<DsOpeProcReturnModel>()
                .FromSql(sqlCommand)
                .ToListAsync();

            return procResultData;
        }

        public List<FFRS_CvDataReturnModel> FFRS_CvData(int? maxId)
        {
            int procResult;
            return FFRS_CvData(maxId, out procResult);
        }

        public List<FFRS_CvDataReturnModel> FFRS_CvData(int? maxId, out int procResult)
        {
            var maxIdParam = new SqlParameter { ParameterName = "@maxId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = maxId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!maxId.HasValue)
                maxIdParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };
            const string sqlCommand = "EXEC @procResult = [FFRS].[cv_data] @maxId";
            var procResultData = Query<FFRS_CvDataReturnModel>()
                .FromSql(sqlCommand, maxIdParam, procResultParam)
                .ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async Task<List<FFRS_CvDataReturnModel>> FFRS_CvDataAsync(int? maxId)
        {
            var maxIdParam = new SqlParameter { ParameterName = "@maxId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = maxId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!maxId.HasValue)
                maxIdParam.Value = DBNull.Value;

            const string sqlCommand = "EXEC [FFRS].[cv_data] @maxId";
            var procResultData = await Query<FFRS_CvDataReturnModel>()
                .FromSql(sqlCommand, maxIdParam)
                .ToListAsync();

            return procResultData;
        }

        public List<FFRS_DataFromDboReturnModel> FFRS_DataFromDbo()
        {
            int procResult;
            return FFRS_DataFromDbo(out procResult);
        }

        public List<FFRS_DataFromDboReturnModel> FFRS_DataFromDbo(out int procResult)
        {
            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };
            const string sqlCommand = "EXEC @procResult = [FFRS].[data_from_dbo]";
            var procResultData = Query<FFRS_DataFromDboReturnModel>()
                .FromSql(sqlCommand, procResultParam)
                .ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async Task<List<FFRS_DataFromDboReturnModel>> FFRS_DataFromDboAsync()
        {
            const string sqlCommand = "EXEC [FFRS].[data_from_dbo]";
            var procResultData = await Query<FFRS_DataFromDboReturnModel>()
                .FromSql(sqlCommand)
                .ToListAsync();

            return procResultData;
        }

        public List<FFRS_DataFromDboAndFfrsReturnModel> FFRS_DataFromDboAndFfrs()
        {
            int procResult;
            return FFRS_DataFromDboAndFfrs(out procResult);
        }

        public List<FFRS_DataFromDboAndFfrsReturnModel> FFRS_DataFromDboAndFfrs(out int procResult)
        {
            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };
            const string sqlCommand = "EXEC @procResult = [FFRS].[data_from_dbo_and_ffrs]";
            var procResultData = Query<FFRS_DataFromDboAndFfrsReturnModel>()
                .FromSql(sqlCommand, procResultParam)
                .ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async Task<List<FFRS_DataFromDboAndFfrsReturnModel>> FFRS_DataFromDboAndFfrsAsync()
        {
            const string sqlCommand = "EXEC [FFRS].[data_from_dbo_and_ffrs]";
            var procResultData = await Query<FFRS_DataFromDboAndFfrsReturnModel>()
                .FromSql(sqlCommand)
                .ToListAsync();

            return procResultData;
        }

        public List<FkTest_HelloReturnModel> FkTest_Hello()
        {
            int procResult;
            return FkTest_Hello(out procResult);
        }

        public List<FkTest_HelloReturnModel> FkTest_Hello(out int procResult)
        {
            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };
            const string sqlCommand = "EXEC @procResult = [FkTest].[Hello]";
            var procResultData = Query<FkTest_HelloReturnModel>()
                .FromSql(sqlCommand, procResultParam)
                .ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async Task<List<FkTest_HelloReturnModel>> FkTest_HelloAsync()
        {
            const string sqlCommand = "EXEC [FkTest].[Hello]";
            var procResultData = await Query<FkTest_HelloReturnModel>()
                .FromSql(sqlCommand)
                .ToListAsync();

            return procResultData;
        }

        public List<GetSmallDecimalTestReturnModel> GetSmallDecimalTest(int? maxId)
        {
            int procResult;
            return GetSmallDecimalTest(maxId, out procResult);
        }

        public List<GetSmallDecimalTestReturnModel> GetSmallDecimalTest(int? maxId, out int procResult)
        {
            var maxIdParam = new SqlParameter { ParameterName = "@maxId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = maxId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!maxId.HasValue)
                maxIdParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };
            const string sqlCommand = "EXEC @procResult = [dbo].[GetSmallDecimalTest] @maxId";
            var procResultData = Query<GetSmallDecimalTestReturnModel>()
                .FromSql(sqlCommand, maxIdParam, procResultParam)
                .ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async Task<List<GetSmallDecimalTestReturnModel>> GetSmallDecimalTestAsync(int? maxId)
        {
            var maxIdParam = new SqlParameter { ParameterName = "@maxId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = maxId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!maxId.HasValue)
                maxIdParam.Value = DBNull.Value;

            const string sqlCommand = "EXEC [dbo].[GetSmallDecimalTest] @maxId";
            var procResultData = await Query<GetSmallDecimalTestReturnModel>()
                .FromSql(sqlCommand, maxIdParam)
                .ToListAsync();

            return procResultData;
        }

        public int InsertRecord(string data, out int? insertedId)
        {
            var dataParam = new SqlParameter { ParameterName = "@Data", SqlDbType = SqlDbType.VarChar, Direction = ParameterDirection.Input, Value = data, Size = 256 };
            if (dataParam.Value == null)
                dataParam.Value = DBNull.Value;

            var insertedIdParam = new SqlParameter { ParameterName = "@InsertedId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output, Precision = 10, Scale = 0 };
            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };

            Database.ExecuteSqlCommand("EXEC @procResult = [dbo].[InsertRecord] @Data, @InsertedId OUTPUT", dataParam, insertedIdParam, procResultParam);

            if (IsSqlParameterNull(insertedIdParam))
                insertedId = null;
            else
                insertedId = (int) insertedIdParam.Value;

            return (int)procResultParam.Value;
        }

        // InsertRecordAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public int InsertRecordThree(string data, out int? insertedId, int? someId, out int? anotherInsertedId)
        {
            var dataParam = new SqlParameter { ParameterName = "@Data", SqlDbType = SqlDbType.VarChar, Direction = ParameterDirection.Input, Value = data, Size = 256 };
            if (dataParam.Value == null)
                dataParam.Value = DBNull.Value;

            var insertedIdParam = new SqlParameter { ParameterName = "@InsertedId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output, Precision = 10, Scale = 0 };
            var someIdParam = new SqlParameter { ParameterName = "@SomeId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = someId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!someId.HasValue)
                someIdParam.Value = DBNull.Value;

            var anotherInsertedIdParam = new SqlParameter { ParameterName = "@AnotherInsertedId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output, Precision = 10, Scale = 0 };
            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };

            Database.ExecuteSqlCommand("EXEC @procResult = [dbo].[InsertRecordThree] @Data, @InsertedId OUTPUT, @SomeId, @AnotherInsertedId OUTPUT", dataParam, insertedIdParam, someIdParam, anotherInsertedIdParam, procResultParam);

            if (IsSqlParameterNull(insertedIdParam))
                insertedId = null;
            else
                insertedId = (int) insertedIdParam.Value;

            if (IsSqlParameterNull(anotherInsertedIdParam))
                anotherInsertedId = null;
            else
                anotherInsertedId = (int) anotherInsertedIdParam.Value;

            return (int)procResultParam.Value;
        }

        // InsertRecordThreeAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public int InsertRecordTwo(string data, out int? insertedId, out int? anotherInsertedId)
        {
            var dataParam = new SqlParameter { ParameterName = "@Data", SqlDbType = SqlDbType.VarChar, Direction = ParameterDirection.Input, Value = data, Size = 256 };
            if (dataParam.Value == null)
                dataParam.Value = DBNull.Value;

            var insertedIdParam = new SqlParameter { ParameterName = "@InsertedId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output, Precision = 10, Scale = 0 };
            var anotherInsertedIdParam = new SqlParameter { ParameterName = "@AnotherInsertedId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output, Precision = 10, Scale = 0 };
            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };

            Database.ExecuteSqlCommand("EXEC @procResult = [dbo].[InsertRecordTwo] @Data, @InsertedId OUTPUT, @AnotherInsertedId OUTPUT", dataParam, insertedIdParam, anotherInsertedIdParam, procResultParam);

            if (IsSqlParameterNull(insertedIdParam))
                insertedId = null;
            else
                insertedId = (int) insertedIdParam.Value;

            if (IsSqlParameterNull(anotherInsertedIdParam))
                anotherInsertedId = null;
            else
                anotherInsertedId = (int) anotherInsertedIdParam.Value;

            return (int)procResultParam.Value;
        }

        // InsertRecordTwoAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public int MinTripSequenceStart(out DateTime? minTripSequenceStartParam)
        {
            var minTripSequenceStartParamParam = new SqlParameter { ParameterName = "@minTripSequenceStartParam", SqlDbType = SqlDbType.DateTime2, Direction = ParameterDirection.Output };
            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };

            Database.ExecuteSqlCommand("EXEC @procResult = [dbo].[MinTripSequenceStart] @minTripSequenceStartParam OUTPUT", minTripSequenceStartParamParam, procResultParam);

            if (IsSqlParameterNull(minTripSequenceStartParamParam))
                minTripSequenceStartParam = null;
            else
                minTripSequenceStartParam = (DateTime) minTripSequenceStartParamParam.Value;

            return (int)procResultParam.Value;
        }

        // MinTripSequenceStartAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public int MinTripSequenceStartNull(out DateTime? minTripSequenceStartParam)
        {
            var minTripSequenceStartParamParam = new SqlParameter { ParameterName = "@minTripSequenceStartParam", SqlDbType = SqlDbType.DateTime2, Direction = ParameterDirection.Output };
            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };

            Database.ExecuteSqlCommand("EXEC @procResult = [dbo].[MinTripSequenceStartNull] @minTripSequenceStartParam OUTPUT", minTripSequenceStartParamParam, procResultParam);

            if (IsSqlParameterNull(minTripSequenceStartParamParam))
                minTripSequenceStartParam = null;
            else
                minTripSequenceStartParam = (DateTime) minTripSequenceStartParamParam.Value;

            return (int)procResultParam.Value;
        }

        // MinTripSequenceStartNullAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public int NvarcharTest(string maxOutputParam, string normalOutputParam)
        {
            var maxOutputParamParam = new SqlParameter { ParameterName = "@maxOutputParam", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = maxOutputParam, Size = -1 };
            if (maxOutputParamParam.Value == null)
                maxOutputParamParam.Value = DBNull.Value;

            var normalOutputParamParam = new SqlParameter { ParameterName = "@normalOutputParam", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = normalOutputParam, Size = 20 };
            if (normalOutputParamParam.Value == null)
                normalOutputParamParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };

            Database.ExecuteSqlCommand("EXEC @procResult = [dbo].[NvarcharTest] @maxOutputParam, @normalOutputParam", maxOutputParamParam, normalOutputParamParam, procResultParam);

            return (int)procResultParam.Value;
        }

        // NvarcharTestAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public int Omega_Overclock(DateTime? parameter)
        {
            var parameterParam = new SqlParameter { ParameterName = "@Parameter", SqlDbType = SqlDbType.DateTime, Direction = ParameterDirection.Input, Value = parameter.GetValueOrDefault() };
            if (!parameter.HasValue)
                parameterParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };

            Database.ExecuteSqlCommand("EXEC @procResult = [Omega].[Overclock] @Parameter", parameterParam, procResultParam);

            return (int)procResultParam.Value;
        }

        // Omega_OverclockAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public int ProcTestDecimalOutput(out decimal? perfectNumber)
        {
            var perfectNumberParam = new SqlParameter { ParameterName = "@PerfectNumber", SqlDbType = SqlDbType.Decimal, Direction = ParameterDirection.Output, Precision = 18, Scale = 2 };
            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };

            Database.ExecuteSqlCommand("EXEC @procResult = [dbo].[proc_TestDecimalOutput] @PerfectNumber OUTPUT", perfectNumberParam, procResultParam);

            if (IsSqlParameterNull(perfectNumberParam))
                perfectNumber = null;
            else
                perfectNumber = (decimal) perfectNumberParam.Value;

            return (int)procResultParam.Value;
        }

        // ProcTestDecimalOutputAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public int ProcTestDecimalOutputV2(out decimal? perfectNumber)
        {
            var perfectNumberParam = new SqlParameter { ParameterName = "@PerfectNumber", SqlDbType = SqlDbType.Decimal, Direction = ParameterDirection.Output, Precision = 12, Scale = 8 };
            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };

            Database.ExecuteSqlCommand("EXEC @procResult = [dbo].[proc_TestDecimalOutputV2] @PerfectNumber OUTPUT", perfectNumberParam, procResultParam);

            if (IsSqlParameterNull(perfectNumberParam))
                perfectNumber = null;
            else
                perfectNumber = (decimal) perfectNumberParam.Value;

            return (int)procResultParam.Value;
        }

        // ProcTestDecimalOutputV2Async() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public int ProcTestDecimalOutputV3Default(out decimal? perfectNumber)
        {
            var perfectNumberParam = new SqlParameter { ParameterName = "@PerfectNumber", SqlDbType = SqlDbType.Decimal, Direction = ParameterDirection.Output, Precision = 18, Scale = 0 };
            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };

            Database.ExecuteSqlCommand("EXEC @procResult = [dbo].[proc_TestDecimalOutputV3Default] @PerfectNumber OUTPUT", perfectNumberParam, procResultParam);

            if (IsSqlParameterNull(perfectNumberParam))
                perfectNumber = null;
            else
                perfectNumber = (decimal) perfectNumberParam.Value;

            return (int)procResultParam.Value;
        }

        // ProcTestDecimalOutputV3DefaultAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public List<SpatialTypesNoParamsReturnModel> SpatialTypesNoParams()
        {
            int procResult;
            return SpatialTypesNoParams(out procResult);
        }

        public List<SpatialTypesNoParamsReturnModel> SpatialTypesNoParams(out int procResult)
        {
            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };
            const string sqlCommand = "EXEC @procResult = [dbo].[SpatialTypesNoParams]";
            var procResultData = Query<SpatialTypesNoParamsReturnModel>()
                .FromSql(sqlCommand, procResultParam)
                .ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async Task<List<SpatialTypesNoParamsReturnModel>> SpatialTypesNoParamsAsync()
        {
            const string sqlCommand = "EXEC [dbo].[SpatialTypesNoParams]";
            var procResultData = await Query<SpatialTypesNoParamsReturnModel>()
                .FromSql(sqlCommand)
                .ToListAsync();

            return procResultData;
        }

        public List<SpatialTypesWithParamsReturnModel> SpatialTypesWithParams(NetTopologySuite.Geometries.Geometry geometry, NetTopologySuite.Geometries.Point geography)
        {
            int procResult;
            return SpatialTypesWithParams(geometry, geography, out procResult);
        }

        public List<SpatialTypesWithParamsReturnModel> SpatialTypesWithParams(NetTopologySuite.Geometries.Geometry geometry, NetTopologySuite.Geometries.Point geography, out int procResult)
        {
            var geometryParam = new SqlParameter { ParameterName = "@geometry", SqlDbType = SqlDbType.VarChar, Direction = ParameterDirection.Input, Value = geometry, Size = -1 };
            if (geometryParam.Value == null)
                geometryParam.Value = DBNull.Value;

            var geographyParam = new SqlParameter { ParameterName = "@geography", SqlDbType = SqlDbType.VarChar, Direction = ParameterDirection.Input, Value = geography, Size = -1 };
            if (geographyParam.Value == null)
                geographyParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };
            const string sqlCommand = "EXEC @procResult = [dbo].[SpatialTypesWithParams] @geometry, @geography";
            var procResultData = Query<SpatialTypesWithParamsReturnModel>()
                .FromSql(sqlCommand, geometryParam, geographyParam, procResultParam)
                .ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async Task<List<SpatialTypesWithParamsReturnModel>> SpatialTypesWithParamsAsync(NetTopologySuite.Geometries.Geometry geometry, NetTopologySuite.Geometries.Point geography)
        {
            var geometryParam = new SqlParameter { ParameterName = "@geometry", SqlDbType = SqlDbType.VarChar, Direction = ParameterDirection.Input, Value = geometry, Size = -1 };
            if (geometryParam.Value == null)
                geometryParam.Value = DBNull.Value;

            var geographyParam = new SqlParameter { ParameterName = "@geography", SqlDbType = SqlDbType.VarChar, Direction = ParameterDirection.Input, Value = geography, Size = -1 };
            if (geographyParam.Value == null)
                geographyParam.Value = DBNull.Value;

            const string sqlCommand = "EXEC [dbo].[SpatialTypesWithParams] @geometry, @geography";
            var procResultData = await Query<SpatialTypesWithParamsReturnModel>()
                .FromSql(sqlCommand, geometryParam, geographyParam)
                .ToListAsync();

            return procResultData;
        }

        // public StpMultipleIdenticalResultsReturnModel StpMultipleIdenticalResults(int? someVar) Cannot be created as EF Core does not yet support stored procedures with multiple result sets.

        // public async Task<StpMultipleIdenticalResultsReturnModel> StpMultipleIdenticalResultsAsync(int? someVar) Cannot be created as EF Core does not yet support stored procedures with multiple result sets.

        // public StpMultipleMultipleResultsWithParamsReturnModel StpMultipleMultipleResultsWithParams(int? firstVal, int? secondVal, int? thirdVal) Cannot be created as EF Core does not yet support stored procedures with multiple result sets.

        // public async Task<StpMultipleMultipleResultsWithParamsReturnModel> StpMultipleMultipleResultsWithParamsAsync(int? firstVal, int? secondVal, int? thirdVal) Cannot be created as EF Core does not yet support stored procedures with multiple result sets.

        // public StpMultipleResultsReturnModel StpMultipleResults() Cannot be created as EF Core does not yet support stored procedures with multiple result sets.

        // public async Task<StpMultipleResultsReturnModel> StpMultipleResultsAsync() Cannot be created as EF Core does not yet support stored procedures with multiple result sets.

        // public StpMultipleResultsWithParamsReturnModel StpMultipleResultsWithParams(int? firstVal, int? secondVal) Cannot be created as EF Core does not yet support stored procedures with multiple result sets.

        // public async Task<StpMultipleResultsWithParamsReturnModel> StpMultipleResultsWithParamsAsync(int? firstVal, int? secondVal) Cannot be created as EF Core does not yet support stored procedures with multiple result sets.

        public List<StpNoParamsTestReturnModel> StpNoParamsTest()
        {
            int procResult;
            return StpNoParamsTest(out procResult);
        }

        public List<StpNoParamsTestReturnModel> StpNoParamsTest(out int procResult)
        {
            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };
            const string sqlCommand = "EXEC @procResult = [dbo].[stp_no_params_test]";
            var procResultData = Query<StpNoParamsTestReturnModel>()
                .FromSql(sqlCommand, procResultParam)
                .ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async Task<List<StpNoParamsTestReturnModel>> StpNoParamsTestAsync()
        {
            const string sqlCommand = "EXEC [dbo].[stp_no_params_test]";
            var procResultData = await Query<StpNoParamsTestReturnModel>()
                .FromSql(sqlCommand)
                .ToListAsync();

            return procResultData;
        }

        public int StpNoReturnFields()
        {
            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };

            Database.ExecuteSqlCommand("EXEC @procResult = [dbo].[stp_no_return_fields] ", procResultParam);

            return (int)procResultParam.Value;
        }

        // StpNoReturnFieldsAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public List<StpNullableParamsTestReturnModel> StpNullableParamsTest(int? aVal, int? bVal)
        {
            int procResult;
            return StpNullableParamsTest(aVal, bVal, out procResult);
        }

        public List<StpNullableParamsTestReturnModel> StpNullableParamsTest(int? aVal, int? bVal, out int procResult)
        {
            var aValParam = new SqlParameter { ParameterName = "@a_val", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = aVal.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!aVal.HasValue)
                aValParam.Value = DBNull.Value;

            var bValParam = new SqlParameter { ParameterName = "@b_val", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = bVal.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!bVal.HasValue)
                bValParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };
            const string sqlCommand = "EXEC @procResult = [dbo].[stp_nullable_params_test] @a_val, @b_val";
            var procResultData = Query<StpNullableParamsTestReturnModel>()
                .FromSql(sqlCommand, aValParam, bValParam, procResultParam)
                .ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async Task<List<StpNullableParamsTestReturnModel>> StpNullableParamsTestAsync(int? aVal, int? bVal)
        {
            var aValParam = new SqlParameter { ParameterName = "@a_val", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = aVal.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!aVal.HasValue)
                aValParam.Value = DBNull.Value;

            var bValParam = new SqlParameter { ParameterName = "@b_val", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = bVal.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!bVal.HasValue)
                bValParam.Value = DBNull.Value;

            const string sqlCommand = "EXEC [dbo].[stp_nullable_params_test] @a_val, @b_val";
            var procResultData = await Query<StpNullableParamsTestReturnModel>()
                .FromSql(sqlCommand, aValParam, bValParam)
                .ToListAsync();

            return procResultData;
        }

        public List<StpTestReturnModel> StpTest(string strDateFrom, string strDateTo, out bool? retBool)
        {
            int procResult;
            return StpTest(strDateFrom, strDateTo, out retBool, out procResult);
        }

        public List<StpTestReturnModel> StpTest(string strDateFrom, string strDateTo, out bool? retBool, out int procResult)
        {
            var strDateFromParam = new SqlParameter { ParameterName = "@strDateFROM", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = strDateFrom, Size = 20 };
            if (strDateFromParam.Value == null)
                strDateFromParam.Value = DBNull.Value;

            var strDateToParam = new SqlParameter { ParameterName = "@strDateTo", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = strDateTo, Size = 20 };
            if (strDateToParam.Value == null)
                strDateToParam.Value = DBNull.Value;

            var retBoolParam = new SqlParameter { ParameterName = "@retBool", SqlDbType = SqlDbType.Bit, Direction = ParameterDirection.Output };
            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };
            const string sqlCommand = "EXEC @procResult = [dbo].[stp_test] @strDateFROM, @strDateTo, @retBool OUTPUT";
            var procResultData = Query<StpTestReturnModel>()
                .FromSql(sqlCommand, strDateFromParam, strDateToParam, retBoolParam, procResultParam)
                .ToList();

            if (IsSqlParameterNull(retBoolParam))
                retBool = null;
            else
                retBool = (bool) retBoolParam.Value;

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        // StpTestAsync() cannot be created due to having out parameters, or is relying on the procedure result (List<StpTestReturnModel>)

        public List<StpTestUnderscoreTestReturnModel> StpTestUnderscoreTest(string strDateFrom, string strDateTo)
        {
            int procResult;
            return StpTestUnderscoreTest(strDateFrom, strDateTo, out procResult);
        }

        public List<StpTestUnderscoreTestReturnModel> StpTestUnderscoreTest(string strDateFrom, string strDateTo, out int procResult)
        {
            var strDateFromParam = new SqlParameter { ParameterName = "@str_Date_FROM", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = strDateFrom, Size = 20 };
            if (strDateFromParam.Value == null)
                strDateFromParam.Value = DBNull.Value;

            var strDateToParam = new SqlParameter { ParameterName = "@str_date_to", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = strDateTo, Size = 20 };
            if (strDateToParam.Value == null)
                strDateToParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };
            const string sqlCommand = "EXEC @procResult = [dbo].[stp_test_underscore_test] @str_Date_FROM, @str_date_to";
            var procResultData = Query<StpTestUnderscoreTestReturnModel>()
                .FromSql(sqlCommand, strDateFromParam, strDateToParam, procResultParam)
                .ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async Task<List<StpTestUnderscoreTestReturnModel>> StpTestUnderscoreTestAsync(string strDateFrom, string strDateTo)
        {
            var strDateFromParam = new SqlParameter { ParameterName = "@str_Date_FROM", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = strDateFrom, Size = 20 };
            if (strDateFromParam.Value == null)
                strDateFromParam.Value = DBNull.Value;

            var strDateToParam = new SqlParameter { ParameterName = "@str_date_to", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = strDateTo, Size = 20 };
            if (strDateToParam.Value == null)
                strDateToParam.Value = DBNull.Value;

            const string sqlCommand = "EXEC [dbo].[stp_test_underscore_test] @str_Date_FROM, @str_date_to";
            var procResultData = await Query<StpTestUnderscoreTestReturnModel>()
                .FromSql(sqlCommand, strDateFromParam, strDateToParam)
                .ToListAsync();

            return procResultData;
        }

        public int StupidStoredProcedureParams(string reqType, short? dept, short? @class, short? item)
        {
            var reqTypeParam = new SqlParameter { ParameterName = "@ReqType", SqlDbType = SqlDbType.VarChar, Direction = ParameterDirection.Input, Value = reqType, Size = 25 };
            if (reqTypeParam.Value == null)
                reqTypeParam.Value = DBNull.Value;

            var deptParam = new SqlParameter { ParameterName = "@Dept", SqlDbType = SqlDbType.SmallInt, Direction = ParameterDirection.Input, Value = dept.GetValueOrDefault(), Precision = 5, Scale = 0 };
            if (!dept.HasValue)
                deptParam.Value = DBNull.Value;

            var @classParam = new SqlParameter { ParameterName = "@Class", SqlDbType = SqlDbType.SmallInt, Direction = ParameterDirection.Input, Value = @class.GetValueOrDefault(), Precision = 5, Scale = 0 };
            if (!@class.HasValue)
                @classParam.Value = DBNull.Value;

            var itemParam = new SqlParameter { ParameterName = "@Item", SqlDbType = SqlDbType.SmallInt, Direction = ParameterDirection.Input, Value = item.GetValueOrDefault(), Precision = 5, Scale = 0 };
            if (!item.HasValue)
                itemParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };

            Database.ExecuteSqlCommand("EXEC @procResult = [dbo].[StupidStoredProcedureParams] @ReqType, @Dept, @Class, @Item", reqTypeParam, deptParam, @classParam, itemParam, procResultParam);

            return (int)procResultParam.Value;
        }

        // StupidStoredProcedureParamsAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public int StupidStoredProcedureParams2(string @override, short? @readonly, short? @class, short? @enum)
        {
            var @overrideParam = new SqlParameter { ParameterName = "@override", SqlDbType = SqlDbType.VarChar, Direction = ParameterDirection.Input, Value = @override, Size = 25 };
            if (@overrideParam.Value == null)
                @overrideParam.Value = DBNull.Value;

            var @readonlyParam = new SqlParameter { ParameterName = "@readonly", SqlDbType = SqlDbType.SmallInt, Direction = ParameterDirection.Input, Value = @readonly.GetValueOrDefault(), Precision = 5, Scale = 0 };
            if (!@readonly.HasValue)
                @readonlyParam.Value = DBNull.Value;

            var @classParam = new SqlParameter { ParameterName = "@class", SqlDbType = SqlDbType.SmallInt, Direction = ParameterDirection.Input, Value = @class.GetValueOrDefault(), Precision = 5, Scale = 0 };
            if (!@class.HasValue)
                @classParam.Value = DBNull.Value;

            var @enumParam = new SqlParameter { ParameterName = "@enum", SqlDbType = SqlDbType.SmallInt, Direction = ParameterDirection.Input, Value = @enum.GetValueOrDefault(), Precision = 5, Scale = 0 };
            if (!@enum.HasValue)
                @enumParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };

            Database.ExecuteSqlCommand("EXEC @procResult = [dbo].[StupidStoredProcedureParams2] @override, @readonly, @class, @enum", @overrideParam, @readonlyParam, @classParam, @enumParam, procResultParam);

            return (int)procResultParam.Value;
        }

        // StupidStoredProcedureParams2Async() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public List<Synonyms_SimpleStoredProcReturnModel> Synonyms_SimpleStoredProc(int? inputInt)
        {
            int procResult;
            return Synonyms_SimpleStoredProc(inputInt, out procResult);
        }

        public List<Synonyms_SimpleStoredProcReturnModel> Synonyms_SimpleStoredProc(int? inputInt, out int procResult)
        {
            var inputIntParam = new SqlParameter { ParameterName = "@InputInt", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = inputInt.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!inputInt.HasValue)
                inputIntParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };
            const string sqlCommand = "EXEC @procResult = [Synonyms].[SimpleStoredProc] @InputInt";
            var procResultData = Query<Synonyms_SimpleStoredProcReturnModel>()
                .FromSql(sqlCommand, inputIntParam, procResultParam)
                .ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async Task<List<Synonyms_SimpleStoredProcReturnModel>> Synonyms_SimpleStoredProcAsync(int? inputInt)
        {
            var inputIntParam = new SqlParameter { ParameterName = "@InputInt", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = inputInt.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!inputInt.HasValue)
                inputIntParam.Value = DBNull.Value;

            const string sqlCommand = "EXEC [Synonyms].[SimpleStoredProc] @InputInt";
            var procResultData = await Query<Synonyms_SimpleStoredProcReturnModel>()
                .FromSql(sqlCommand, inputIntParam)
                .ToListAsync();

            return procResultData;
        }

        public List<TestReturnStringReturnModel> TestReturnString()
        {
            int procResult;
            return TestReturnString(out procResult);
        }

        public List<TestReturnStringReturnModel> TestReturnString(out int procResult)
        {
            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };
            const string sqlCommand = "EXEC @procResult = [dbo].[TestReturnString]";
            var procResultData = Query<TestReturnStringReturnModel>()
                .FromSql(sqlCommand, procResultParam)
                .ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async Task<List<TestReturnStringReturnModel>> TestReturnStringAsync()
        {
            const string sqlCommand = "EXEC [dbo].[TestReturnString]";
            var procResultData = await Query<TestReturnStringReturnModel>()
                .FromSql(sqlCommand)
                .ToListAsync();

            return procResultData;
        }

        public int UserDefinedTypeSampleStoredProc(int? a, DataTable type, int? b)
        {
            var aParam = new SqlParameter { ParameterName = "@a", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = a.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!a.HasValue)
                aParam.Value = DBNull.Value;

            var typeParam = new SqlParameter { ParameterName = "@type", SqlDbType = SqlDbType.Structured, Direction = ParameterDirection.Input, Value = type, TypeName = "dbo.UserDefinedTypeSample" };
            if (typeParam.Value == null)
                typeParam.Value = DBNull.Value;

            var bParam = new SqlParameter { ParameterName = "@b", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = b.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!b.HasValue)
                bParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };

            Database.ExecuteSqlCommand("EXEC @procResult = [dbo].[UserDefinedTypeSampleStoredProc] @a, @type, @b", aParam, typeParam, bParam, procResultParam);

            return (int)procResultParam.Value;
        }

        // UserDefinedTypeSampleStoredProcAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public List<XmlDataV1ReturnModel> XmlDataV1()
        {
            int procResult;
            return XmlDataV1(out procResult);
        }

        public List<XmlDataV1ReturnModel> XmlDataV1(out int procResult)
        {
            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };
            const string sqlCommand = "EXEC @procResult = [dbo].[XmlDataV1]";
            var procResultData = Query<XmlDataV1ReturnModel>()
                .FromSql(sqlCommand, procResultParam)
                .ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async Task<List<XmlDataV1ReturnModel>> XmlDataV1Async()
        {
            const string sqlCommand = "EXEC [dbo].[XmlDataV1]";
            var procResultData = await Query<XmlDataV1ReturnModel>()
                .FromSql(sqlCommand)
                .ToListAsync();

            return procResultData;
        }

        public int XmlDataV2()
        {
            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };

            Database.ExecuteSqlCommand("EXEC @procResult = [dbo].[XmlDataV2] ", procResultParam);

            return (int)procResultParam.Value;
        }

        // XmlDataV2Async() cannot be created due to having out parameters, or is relying on the procedure result (int)

    }
}
// </auto-generated>
