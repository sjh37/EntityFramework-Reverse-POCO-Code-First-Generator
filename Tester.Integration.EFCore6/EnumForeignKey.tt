<#@ include file ="..\EntityFramework.Reverse.POCO.Generator\EF.Reverse.POCO.v3.ttinclude" #>
<#
    Settings.TemplateType         = TemplateType.EfCore6;
    Settings.ConnectionString     = "Data Source=(local);Initial Catalog=EfrpgTest;Integrated Security=True;Application Name=EntityFramework Reverse POCO Generator";
    Settings.ConnectionStringName = "EnumForeignKey"; // ConnectionString key as specified in your app.config/web.config/appsettings.json. Not used by the generator, but is placed into the generated DbContext constructor.
    Settings.DbContextName        = "EnumForeignKey"; // Class name for the DbContext to be generated.
    Settings.Namespace            = "EnumForeignKey"; // Override the default namespace here. Please use double quotes, example: "Accounts.Billing"

    FilterSettings.Reset();
    FilterSettings.AddDefaults();
    FilterSettings.IncludeViews                 = false;
    FilterSettings.IncludeSynonyms              = false;
    FilterSettings.IncludeStoredProcedures      = false;
    FilterSettings.IncludeTableValuedFunctions  = false;
    FilterSettings.IncludeScalarValuedFunctions = false;

    FilterSettings.SchemaFilters.Add(new RegexIncludeFilter("EnumTest")); // This includes only dbo schema
    

    // Elements to generate ***************************************************************************************************************
    // Add the elements that should be generated when the template is executed.
    // Multiple projects can be used that separate the different concerns.
    Settings.ElementsToGenerate = Elements.Poco | Elements.Enum;
    
    // Enumerations ***********************************************************************************************************************
    // Create enumerations from database tables
    // List the enumeration tables you want read and generated for
    // Also look at the AddEnum callback below to add your own during reverse generation of tables.
    Settings.Enumerations = new List<EnumerationSettings>
    {
        // Example
        new EnumerationSettings
        {
            Name       = "DaysOfWeek",          // Enum to generate. e.g. "DaysOfWeek" would result in "public enum DaysOfWeek {...}" if the GroupField is set to a value then {GroupField} must be used in this name. e.g. "DaysOfWeek{GroupField}"
            Table      = "EnumTest.DaysOfWeek", // Database table containing enum values. e.g. "DaysOfWeek"
            NameField  = "TypeName",            // Column containing the name for the enum. e.g. "TypeName"
            ValueField = "TypeId",              // Column containing the values for the enum. e.g. "TypeId"
            GroupField = string.Empty           // [optional] Column containing the group name for the enum. This is used if multiple Enums are in the same table. if this is populated, use {GroupField} in the Name property. e.g. "{GroupField}Enum"
        }
    };

    // Column modification ****************************************************************************************************************
    // Use the following list to replace column byte types with Enums.
    // As long as the type can be mapped to your new type, all is well.
    Settings.AddEnumDefinitions = delegate(List<EnumDefinition> enumDefinitions)
    {
        enumDefinitions.Add(new EnumDefinition { Schema = "EnumTest", Table = "OpenDays", Column = "EnumId", EnumType = "DaysOfWeek" });
        enumDefinitions.Add(new EnumDefinition { Schema = "EnumTest", Table = "DaysOfWeek", Column = "TypeId", EnumType = "DaysOfWeek" });
    };

    // Use the following function if you need to apply additional modifications to a column
    // eg. normalise names etc.
    Settings.UpdateColumn = delegate(Column column, Table table, List<EnumDefinition> enumDefinitions)
    {
        // Perform Enum property type replacement
        if (enumDefinitions != null)
        {
            var enumDefinition = enumDefinitions.FirstOrDefault(e =>
                (e.Schema.Equals(table.Schema.DbName, StringComparison.InvariantCultureIgnoreCase)) && 
                (e.Table == "*" || e.Table.Equals(table.DbName, StringComparison.InvariantCultureIgnoreCase) || e.Table.Equals(table.NameHumanCase, StringComparison.InvariantCultureIgnoreCase)) &&
                (e.Column.Equals(column.DbName, StringComparison.InvariantCultureIgnoreCase) || e.Column.Equals(column.NameHumanCase, StringComparison.InvariantCultureIgnoreCase)));

            if (enumDefinition != null)
            {
                column.PropertyType = enumDefinition.EnumType;
                if (!string.IsNullOrEmpty(column.Default))
                    column.Default = "(" + enumDefinition.EnumType + ") " + column.Default;
            }
        }
    };

    // In order to use this function, Settings.ElementsToGenerate must contain both Elements.Poco and Elements.Enum;
    Settings.AddEnum = delegate (Table table)
    {
        /*if (table.HasPrimaryKey && table.PrimaryKeys.Count() == 1 && table.Columns.Any(x => x.PropertyType == "string"))
        {
            // Example: choosing tables with certain naming conventions for enums. Please use your own conventions.
            if (table.NameHumanCase.StartsWith("Enum", StringComparison.InvariantCultureIgnoreCase) ||
                table.NameHumanCase.EndsWith("Enum", StringComparison.InvariantCultureIgnoreCase))
            {
                try
                {
                    Settings.Enumerations.Add(new EnumerationSettings
                    {
                        Name       = table.NameHumanCase.Replace("Enum","").Replace("Enum","") + "Enum",
                        Table      = table.Schema.DbName + "." + table.DbName,
                        NameField  = table.Columns.First(x => x.PropertyType == "string").DbName, // Or specify your own
                        ValueField = table.PrimaryKeys.Single().DbName, // Or specify your own
                        GroupField = string.Empty // Or specify your own
                    });

                    // This will cause this table to not be reverse-engineered.
                    // This means it was only required to generate an enum and can now be removed.
                    table.RemoveTable = true; // Remove this line if you want to keep it in your dbContext.
                }
                catch
                {
                    // Swallow exception
                }
            }
        }*/
    };

    // Use the following function if you need to apply additional modifications to a enum
    // Called just before UpdateEnumMember
    Settings.UpdateEnum = delegate (Enumeration enumeration)
    {
        //enumeration.EnumAttributes.Add("[DataContract]");
    };

    // Use the following function if you need to apply additional modifications to a enum member
    Settings.UpdateEnumMember = delegate (EnumerationMember enumerationMember)
    {
        //enumerationMember.Attributes.Add("[EnumMember]");
        //enumerationMember.Attributes.Add("[SomeAttribute(\"" + enumerationMember.AllValues["SomeName"] + " \")]");
    };


    FilterSettings.CheckSettings();
    Inflector.IgnoreWordsThatEndWith = new List<string> { "Status", "To", "Data" };
    Inflector.PluralisationService = new EnglishPluralizationService();
    var outer = (GeneratedTextTransformation) this;
    var fileManagement = new FileManagementService(outer);
    var generator = GeneratorFactory.Create(fileManagement, FileManagerFactory.GetFileManagerType());
    if (generator != null && generator.InitialisationOk)
    {
        // Show where the machine.config file is
        // fileManagement.WriteLine("// " + System.Runtime.InteropServices.RuntimeEnvironment.SystemConfigurationFile);

        generator.ReadDatabase();
        generator.GenerateCode();
    }
    fileManagement.Process(true);#>
