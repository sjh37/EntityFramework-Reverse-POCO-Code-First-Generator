// <auto-generated>

using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.ChangeTracking;
using Microsoft.EntityFrameworkCore.Infrastructure;
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Linq.Expressions;
using System.Threading;
using System.Threading.Tasks;

namespace Tester.Integration.EFCore6.Single_context_many_files
{
    public class FakeEfCoreDbContext : IEfCoreDbContext
    {
        public DbSet<A> A { get; set; } // A
        public DbSet<Aaref> Aarefs { get; set; } // AAREF
        public DbSet<AbOrderLinesAb> AbOrderLinesAbs { get; set; } // AB_OrderLinesAB_
        public DbSet<AbOrdersAb> AbOrdersAbs { get; set; } // AB_OrdersAB_
        public DbSet<AllColumnsNull> AllColumnsNulls { get; set; } // AllColumnsNull
        public DbSet<Alpha_Harish3485> Alpha_Harish3485 { get; set; } // Harish3485
        public DbSet<Alpha_Workflow> Alpha_Workflows { get; set; } // workflow
        public DbSet<App_UserFacilityServiceRole> App_UserFacilityServiceRoles { get; set; } // UserFacilityServiceRole
        public DbSet<AppUser> AppUsers { get; set; } // AppUser
        public DbSet<Attendee> Attendees { get; set; } // Attendee
        public DbSet<BatchTest> BatchTests { get; set; } // BatchTest
        public DbSet<Beta_Harish3485> Beta_Harish3485 { get; set; } // Harish3485
        public DbSet<Beta_ToAlpha> Beta_ToAlphas { get; set; } // ToAlpha
        public DbSet<Beta_Workflow> Beta_Workflows { get; set; } // workflow
        public DbSet<Bitfiddlerallcap> Bitfiddlerallcaps { get; set; } // BITFIDDLERALLCAPS
        public DbSet<BitFiddlerCategoRy> BitFiddlerCategoRies { get; set; } // BitFiddlerCATEGORIES
        public DbSet<BitFiddlerCurrenCy> BitFiddlerCurrenCies { get; set; } // BitFiddlerCURRENCIES
        public DbSet<Blah> Blahs { get; set; } // Blah
        public DbSet<BlahBlahLink> BlahBlahLinks { get; set; } // BlahBlahLink
        public DbSet<BlahBlahLinkReadonly> BlahBlahLinkReadonlies { get; set; } // BlahBlahLink_readonly
        public DbSet<BlahBlahLinkV2> BlahBlahLinkV2 { get; set; } // BlahBlahLink_v2
        public DbSet<BlahBlargLink> BlahBlargLinks { get; set; } // BlahBlargLink
        public DbSet<Blarg> Blargs { get; set; } // Blarg
        public DbSet<Burak1> Burak1 { get; set; } // Burak1
        public DbSet<Burak2> Burak2 { get; set; } // Burak2
        public DbSet<CalculatedColumnNotNull> CalculatedColumnNotNulls { get; set; } // CalculatedColumnNotNull
        public DbSet<Car> Cars { get; set; } // Car
        public DbSet<CarToColour> CarToColours { get; set; } // CarToColour
        public DbSet<ClientCreationState> ClientCreationStates { get; set; } // ClientCreationState
        public DbSet<CmsFile> CmsFiles { get; set; } // CMS_File
        public DbSet<CmsFileTag> CmsFileTags { get; set; } // CMS_FileTag
        public DbSet<CmsTag> CmsTags { get; set; } // CMS_Tag
        public DbSet<CodeMeetingTopicDetail> CodeMeetingTopicDetails { get; set; } // CODE_MeetingTopicDetails
        public DbSet<CodeObject> CodeObjects { get; set; } // CodeObject
        public DbSet<CodeParamMeetingTopicDetailSource> CodeParamMeetingTopicDetailSources { get; set; } // CODE_PARAM_MeetingTopicDetailSource
        public DbSet<Colour> Colours { get; set; } // Colour
        public DbSet<ColumnNameAndType> ColumnNameAndTypes { get; set; } // ColumnNameAndTypes
        public DbSet<ComplexView> ComplexViews { get; set; } // ComplexView
        public DbSet<Country> Countries { get; set; } // Country
        public DbSet<DateTimeDefaultTest> DateTimeDefaultTests { get; set; } // DateTimeDefaultTest
        public DbSet<dcg_RovColumnDefinition> dcg_RovColumnDefinitions { get; set; } // rov_ColumnDefinitions
        public DbSet<DefaultCheckForNull> DefaultCheckForNulls { get; set; } // DefaultCheckForNull
        public DbSet<DsOpe> DsOpes { get; set; } // DSOpe
        public DbSet<EventProcessor> EventProcessors { get; set; } // EventProcessor
        public DbSet<EventProcessorEventFilter> EventProcessorEventFilters { get; set; } // EventProcessorEventFilter
        public DbSet<FFRS_Cv> FFRS_Cvs { get; set; } // CV
        public DbSet<FinancialInstitutionOffice> FinancialInstitutionOffices { get; set; } // FinancialInstitutionOffice
        public DbSet<FkTest_SmallDecimalTestAttribute> FkTest_SmallDecimalTestAttributes { get; set; } // SmallDecimalTestAttribute
        public DbSet<Footer> Footers { get; set; } // footer
        public DbSet<ForeignKeyIsNotEnforced> ForeignKeyIsNotEnforceds { get; set; } // ForeignKeyIsNotEnforced
        public DbSet<ForeignKeyIsNotEnforcedItem> ForeignKeyIsNotEnforcedItems { get; set; } // ForeignKeyIsNotEnforcedItem
        public DbSet<HasPrincipalKeyTestChild> HasPrincipalKeyTestChilds { get; set; } // HasPrincipalKeyTestChild
        public DbSet<HasPrincipalKeyTestParent> HasPrincipalKeyTestParents { get; set; } // HasPrincipalKeyTestParent
        public DbSet<Header> Headers { get; set; } // header
        public DbSet<HierarchyTest> HierarchyTests { get; set; } // hierarchy_test
        public DbSet<InflectorData> InflectorData { get; set; } // InflectorData
        public DbSet<InflectorStatus> InflectorStatus { get; set; } // InflectorStatus
        public DbSet<InflectorTo> InflectorTo { get; set; } // InflectorTo
        public DbSet<Issue47_Role> Issue47_Roles { get; set; } // Role
        public DbSet<Issue47_User> Issue47_Users { get; set; } // Users
        public DbSet<Issue47_UserRole> Issue47_UserRoles { get; set; } // UserRoles
        public DbSet<MultipleKey> MultipleKeys { get; set; } // MultipleKeys
        public DbSet<OneEightSix_Issue> OneEightSix_Issues { get; set; } // Issue
        public DbSet<OneEightSix_IssueUploadedFile> OneEightSix_IssueUploadedFiles { get; set; } // IssueUploadedFile
        public DbSet<OneEightSix_UploadedFile> OneEightSix_UploadedFiles { get; set; } // UploadedFile
        public DbSet<PeriodTable> PeriodTables { get; set; } // Period.Table
        public DbSet<PeriodTestTable> PeriodTestTables { get; set; } // PeriodTestTable
        public DbSet<Person> People { get; set; } // Person
        public DbSet<PersonPost> PersonPosts { get; set; } // PersonPosts
        public DbSet<PkOrdinalTest> PkOrdinalTests { get; set; } // pk_ordinal_test
        public DbSet<PropertyTypesToAdd> PropertyTypesToAdds { get; set; } // PropertyTypesToAdd
        public DbSet<SequenceTest> SequenceTests { get; set; } // SequenceTest
        public DbSet<SequenceTestPartTwo> SequenceTestPartTwoes { get; set; } // SequenceTestPartTwo
        public DbSet<SmallDecimalTest> SmallDecimalTests { get; set; } // SmallDecimalTest
        public DbSet<SmallDecimalTestView> SmallDecimalTestViews { get; set; } // SmallDecimalTestView
        public DbSet<Stafford_Boo> Stafford_Boos { get; set; } // Boo
        public DbSet<Stafford_ComputedColumn> Stafford_ComputedColumns { get; set; } // ComputedColumns
        public DbSet<Stafford_Foo> Stafford_Foos { get; set; } // Foo
        public DbSet<Synonyms_Child> Synonyms_Children { get; set; } // Child
        public DbSet<Synonyms_Parent> Synonyms_Parents { get; set; } // Parent
        public DbSet<TableA> TableAs { get; set; } // TableA
        public DbSet<TableB> TableBs { get; set; } // TableB
        public DbSet<TableMappingWithSpace> TableMappingWithSpaces { get; set; } // table mapping with space
        public DbSet<TableWithDuplicateColumnName> TableWithDuplicateColumnNames { get; set; } // table with duplicate column names
        public DbSet<TableWithMultiplePeriod> TableWithMultiplePeriods { get; set; } // table.with.multiple.periods
        public DbSet<TableWithSpace> TableWithSpaces { get; set; } // table with space
        public DbSet<TableWithSpaceAndInColumn> TableWithSpaceAndInColumns { get; set; } // table with space and in columns
        public DbSet<TableWithSpaceInColumnOnly> TableWithSpaceInColumnOnlies { get; set; } // TableWithSpaceInColumnOnly
        public DbSet<TadeuszSobol> TadeuszSobols { get; set; } // TadeuszSobol
        public DbSet<Task1> Task1 { get; set; } // Task
        public DbSet<TblOrder> TblOrders { get; set; } // tblOrders
        public DbSet<TblOrderError> TblOrderErrors { get; set; } // tblOrderErrors
        public DbSet<TblOrderErrorsAb> TblOrderErrorsAbs { get; set; } // tblOrderErrorsAB_
        public DbSet<TblOrderLine> TblOrderLines { get; set; } // tblOrderLines
        public DbSet<TemporalDepartment> TemporalDepartments { get; set; } // TemporalDepartment
        public DbSet<TemporalDepartmentHistory> TemporalDepartmentHistories { get; set; } // TemporalDepartmentHistory
        public DbSet<ThisIsMemoryOptimised> ThisIsMemoryOptimiseds { get; set; } // ThisIsMemoryOptimised
        public DbSet<Ticket> Tickets { get; set; } // Ticket
        public DbSet<TimestampNotNull> TimestampNotNulls { get; set; } // TimestampNotNull
        public DbSet<TimestampNullable> TimestampNullables { get; set; } // TimestampNullable
        public DbSet<Token> Tokens { get; set; } // Token
        public DbSet<User> Users { get; set; } // User
        public DbSet<User309> User309 { get; set; } // User309
        public DbSet<UserDocument> UserDocuments { get; set; } // User_Document
        public DbSet<Versioned> Versioneds { get; set; } // Versioned
        public DbSet<VersionedNullable> VersionedNullables { get; set; } // VersionedNullable
        public DbSet<ViewWithMultiplePeriod> ViewWithMultiplePeriods { get; set; } // view.with.multiple.periods
        public DbSet<ViewWithSpace> ViewWithSpaces { get; set; } // view with space
        public DbSet<WVN_Article> WVN_Articles { get; set; } // Articles
        public DbSet<WVN_VArticle> WVN_VArticles { get; set; } // v_Articles
        public DbSet<Брендытовара> Брендытовара { get; set; } // Бренды товара

        public FakeEfCoreDbContext()
        {
            _database = new FakeDatabaseFacade(new EfCoreDbContext());

            A = new FakeDbSet<A>("AId");
            Aarefs = new FakeDbSet<Aaref>("C1", "C2");
            AbOrderLinesAbs = new FakeDbSet<AbOrderLinesAb>("Id");
            AbOrdersAbs = new FakeDbSet<AbOrdersAb>("Id");
            AllColumnsNulls = new FakeDbSet<AllColumnsNull>();
            Alpha_Harish3485 = new FakeDbSet<Alpha_Harish3485>("Id");
            Alpha_Workflows = new FakeDbSet<Alpha_Workflow>("Id");
            App_UserFacilityServiceRoles = new FakeDbSet<App_UserFacilityServiceRole>("UserId", "AppId", "FsrId");
            AppUsers = new FakeDbSet<AppUser>("Id");
            Attendees = new FakeDbSet<Attendee>("AttendeeId");
            BatchTests = new FakeDbSet<BatchTest>("Code");
            Beta_Harish3485 = new FakeDbSet<Beta_Harish3485>("Id");
            Beta_ToAlphas = new FakeDbSet<Beta_ToAlpha>("Id");
            Beta_Workflows = new FakeDbSet<Beta_Workflow>("Id");
            Bitfiddlerallcaps = new FakeDbSet<Bitfiddlerallcap>("Id");
            BitFiddlerCategoRies = new FakeDbSet<BitFiddlerCategoRy>("Id");
            BitFiddlerCurrenCies = new FakeDbSet<BitFiddlerCurrenCy>("Id");
            Blahs = new FakeDbSet<Blah>("BlahId");
            BlahBlahLinks = new FakeDbSet<BlahBlahLink>("BlahId", "BlahId2");
            BlahBlahLinkReadonlies = new FakeDbSet<BlahBlahLinkReadonly>("BlahId", "BlahId2");
            BlahBlahLinkV2 = new FakeDbSet<BlahBlahLinkV2>("BlahId", "BlahId2");
            BlahBlargLinks = new FakeDbSet<BlahBlargLink>("BlahId", "BlargId");
            Blargs = new FakeDbSet<Blarg>("BlargId");
            Burak1 = new FakeDbSet<Burak1>("Id");
            Burak2 = new FakeDbSet<Burak2>("Id");
            CalculatedColumnNotNulls = new FakeDbSet<CalculatedColumnNotNull>("Id");
            Cars = new FakeDbSet<Car>("Id");
            CarToColours = new FakeDbSet<CarToColour>("CarId", "ColourId");
            ClientCreationStates = new FakeDbSet<ClientCreationState>("Id");
            CmsFiles = new FakeDbSet<CmsFile>("FileId");
            CmsFileTags = new FakeDbSet<CmsFileTag>("FileId", "TagId");
            CmsTags = new FakeDbSet<CmsTag>("TagId");
            CodeMeetingTopicDetails = new FakeDbSet<CodeMeetingTopicDetail>("Id");
            CodeObjects = new FakeDbSet<CodeObject>("CodeObjectNo");
            CodeParamMeetingTopicDetailSources = new FakeDbSet<CodeParamMeetingTopicDetailSource>("Id");
            Colours = new FakeDbSet<Colour>("Id");
            ColumnNameAndTypes = new FakeDbSet<ColumnNameAndType>("C36");
            ComplexViews = new FakeDbSet<ComplexView>();
            Countries = new FakeDbSet<Country>("CountryId");
            DateTimeDefaultTests = new FakeDbSet<DateTimeDefaultTest>("Id");
            dcg_RovColumnDefinitions = new FakeDbSet<dcg_RovColumnDefinition>();
            DefaultCheckForNulls = new FakeDbSet<DefaultCheckForNull>("Id");
            DsOpes = new FakeDbSet<DsOpe>("Id");
            EventProcessors = new FakeDbSet<EventProcessor>("Id");
            EventProcessorEventFilters = new FakeDbSet<EventProcessorEventFilter>("Id");
            FFRS_Cvs = new FakeDbSet<FFRS_Cv>("BatchUid", "Cvid");
            FinancialInstitutionOffices = new FakeDbSet<FinancialInstitutionOffice>("FinancialInstitutionCode");
            FkTest_SmallDecimalTestAttributes = new FakeDbSet<FkTest_SmallDecimalTestAttribute>("FkId");
            Footers = new FakeDbSet<Footer>("Id");
            ForeignKeyIsNotEnforceds = new FakeDbSet<ForeignKeyIsNotEnforced>("Id");
            ForeignKeyIsNotEnforcedItems = new FakeDbSet<ForeignKeyIsNotEnforcedItem>("Id");
            HasPrincipalKeyTestChilds = new FakeDbSet<HasPrincipalKeyTestChild>("Id");
            HasPrincipalKeyTestParents = new FakeDbSet<HasPrincipalKeyTestParent>("Id");
            Headers = new FakeDbSet<Header>("Id", "AnotherId");
            HierarchyTests = new FakeDbSet<HierarchyTest>("Id");
            InflectorData = new FakeDbSet<InflectorData>("Id");
            InflectorStatus = new FakeDbSet<InflectorStatus>("Id");
            InflectorTo = new FakeDbSet<InflectorTo>("Id");
            Issue47_Roles = new FakeDbSet<Issue47_Role>("RoleId");
            Issue47_Users = new FakeDbSet<Issue47_User>("UserId");
            Issue47_UserRoles = new FakeDbSet<Issue47_UserRole>("UserRoleId");
            MultipleKeys = new FakeDbSet<MultipleKey>("UserId", "FavouriteColourId", "BestHolidayTypeId");
            OneEightSix_Issues = new FakeDbSet<OneEightSix_Issue>("Id");
            OneEightSix_IssueUploadedFiles = new FakeDbSet<OneEightSix_IssueUploadedFile>("UploadedFileId", "IssueId");
            OneEightSix_UploadedFiles = new FakeDbSet<OneEightSix_UploadedFile>("Id");
            PeriodTables = new FakeDbSet<PeriodTable>("Id");
            PeriodTestTables = new FakeDbSet<PeriodTestTable>("Id");
            People = new FakeDbSet<Person>("Id");
            PersonPosts = new FakeDbSet<PersonPost>("Id");
            PkOrdinalTests = new FakeDbSet<PkOrdinalTest>("C3", "C1");
            PropertyTypesToAdds = new FakeDbSet<PropertyTypesToAdd>("Id");
            SequenceTests = new FakeDbSet<SequenceTest>("Id");
            SequenceTestPartTwoes = new FakeDbSet<SequenceTestPartTwo>("Id");
            SmallDecimalTests = new FakeDbSet<SmallDecimalTest>("Id");
            SmallDecimalTestViews = new FakeDbSet<SmallDecimalTestView>();
            Stafford_Boos = new FakeDbSet<Stafford_Boo>("Id");
            Stafford_ComputedColumns = new FakeDbSet<Stafford_ComputedColumn>("Id");
            Stafford_Foos = new FakeDbSet<Stafford_Foo>("Id");
            Synonyms_Children = new FakeDbSet<Synonyms_Child>("ChildId");
            Synonyms_Parents = new FakeDbSet<Synonyms_Parent>("ParentId");
            TableAs = new FakeDbSet<TableA>("TableAId");
            TableBs = new FakeDbSet<TableB>("TableBId", "TableAId");
            TableMappingWithSpaces = new FakeDbSet<TableMappingWithSpace>("Id", "IdValue");
            TableWithDuplicateColumnNames = new FakeDbSet<TableWithDuplicateColumnName>("Id");
            TableWithMultiplePeriods = new FakeDbSet<TableWithMultiplePeriod>("Id");
            TableWithSpaces = new FakeDbSet<TableWithSpace>("Id");
            TableWithSpaceAndInColumns = new FakeDbSet<TableWithSpaceAndInColumn>("IdValue");
            TableWithSpaceInColumnOnlies = new FakeDbSet<TableWithSpaceInColumnOnly>("IdValue");
            TadeuszSobols = new FakeDbSet<TadeuszSobol>("Id");
            Task1 = new FakeDbSet<Task1>("TaskId");
            TblOrders = new FakeDbSet<TblOrder>("Id");
            TblOrderErrors = new FakeDbSet<TblOrderError>("Id");
            TblOrderErrorsAbs = new FakeDbSet<TblOrderErrorsAb>("Id");
            TblOrderLines = new FakeDbSet<TblOrderLine>("Id");
            TemporalDepartments = new FakeDbSet<TemporalDepartment>("DeptId");
            TemporalDepartmentHistories = new FakeDbSet<TemporalDepartmentHistory>("DeptId", "DeptName", "SysStartTime", "SysEndTime");
            ThisIsMemoryOptimiseds = new FakeDbSet<ThisIsMemoryOptimised>("Id");
            Tickets = new FakeDbSet<Ticket>("Id");
            TimestampNotNulls = new FakeDbSet<TimestampNotNull>("Id");
            TimestampNullables = new FakeDbSet<TimestampNullable>("Id");
            Tokens = new FakeDbSet<Token>("Id");
            Users = new FakeDbSet<User>("Id");
            User309 = new FakeDbSet<User309>("UserId");
            UserDocuments = new FakeDbSet<UserDocument>("Id");
            Versioneds = new FakeDbSet<Versioned>("Id");
            VersionedNullables = new FakeDbSet<VersionedNullable>("Id");
            ViewWithMultiplePeriods = new FakeDbSet<ViewWithMultiplePeriod>();
            ViewWithSpaces = new FakeDbSet<ViewWithSpace>();
            WVN_Articles = new FakeDbSet<WVN_Article>("PkArticle");
            WVN_VArticles = new FakeDbSet<WVN_VArticle>();
            Брендытовара = new FakeDbSet<Брендытовара>("Кодбренда");

        }

        public int SaveChangesCount { get; private set; }
        public virtual int SaveChanges()
        {
            ++SaveChangesCount;
            return 1;
        }

        public virtual int SaveChanges(bool acceptAllChangesOnSuccess)
        {
            return SaveChanges();
        }

        public virtual Task<int> SaveChangesAsync(CancellationToken cancellationToken)
        {
            ++SaveChangesCount;
            return Task<int>.Factory.StartNew(() => 1, cancellationToken);
        }
        public virtual Task<int> SaveChangesAsync(bool acceptAllChangesOnSuccess, CancellationToken cancellationToken)
        {
            ++SaveChangesCount;
            return Task<int>.Factory.StartNew(x => 1, acceptAllChangesOnSuccess, cancellationToken);
        }

        protected virtual void Dispose(bool disposing)
        {
        }

        public void Dispose()
        {
            Dispose(true);
        }

        private DatabaseFacade _database;
        public DatabaseFacade Database { get { return _database; } }

        public DbSet<TEntity> Set<TEntity>() where TEntity : class
        {
            throw new NotImplementedException();
        }

        public override string ToString()
        {
            throw new NotImplementedException();
        }

        public virtual EntityEntry Add(object entity)
        {
            throw new NotImplementedException();
        }

        public virtual EntityEntry<TEntity> Add<TEntity>(TEntity entity) where TEntity : class
        {
            throw new NotImplementedException();
        }

        public virtual Task AddRangeAsync(params object[] entities)
        {
            throw new NotImplementedException();
        }

        public virtual async Task AddRangeAsync(IEnumerable<object> entities, CancellationToken cancellationToken = default)
        {
            await Task.CompletedTask;
            throw new NotImplementedException();
        }

        public virtual async ValueTask<EntityEntry<TEntity>> AddAsync<TEntity>(TEntity entity, CancellationToken cancellationToken = default) where TEntity : class
        {
            await Task.CompletedTask;
            throw new NotImplementedException();
        }

        public virtual async ValueTask<EntityEntry> AddAsync(object entity, CancellationToken cancellationToken = default)
        {
            await Task.CompletedTask;
            throw new NotImplementedException();
        }

        public virtual void AddRange(IEnumerable<object> entities)
        {
            throw new NotImplementedException();
        }

        public virtual void AddRange(params object[] entities)
        {
            throw new NotImplementedException();
        }

        public virtual EntityEntry Attach(object entity)
        {
            throw new NotImplementedException();
        }

        public virtual EntityEntry<TEntity> Attach<TEntity>(TEntity entity) where TEntity : class
        {
            throw new NotImplementedException();
        }

        public virtual void AttachRange(IEnumerable<object> entities)
        {
            throw new NotImplementedException();
        }

        public virtual void AttachRange(params object[] entities)
        {
            throw new NotImplementedException();
        }

        public virtual EntityEntry Entry(object entity)
        {
            throw new NotImplementedException();
        }

        public virtual EntityEntry<TEntity> Entry<TEntity>(TEntity entity) where TEntity : class
        {
            throw new NotImplementedException();
        }

        public virtual TEntity Find<TEntity>(params object[] keyValues) where TEntity : class
        {
            throw new NotImplementedException();
        }

        public virtual ValueTask<TEntity> FindAsync<TEntity>(object[] keyValues, CancellationToken cancellationToken) where TEntity : class
        {
            throw new NotImplementedException();
        }

        public virtual ValueTask<TEntity> FindAsync<TEntity>(params object[] keyValues) where TEntity : class
        {
            throw new NotImplementedException();
        }

        public virtual ValueTask<object> FindAsync(Type entityType, object[] keyValues, CancellationToken cancellationToken)
        {
            throw new NotImplementedException();
        }

        public virtual ValueTask<object> FindAsync(Type entityType, params object[] keyValues)
        {
            throw new NotImplementedException();
        }

        public virtual object Find(Type entityType, params object[] keyValues)
        {
            throw new NotImplementedException();
        }

        public virtual EntityEntry Remove(object entity)
        {
            throw new NotImplementedException();
        }

        public virtual EntityEntry<TEntity> Remove<TEntity>(TEntity entity) where TEntity : class
        {
            throw new NotImplementedException();
        }

        public virtual void RemoveRange(IEnumerable<object> entities)
        {
            throw new NotImplementedException();
        }

        public virtual void RemoveRange(params object[] entities)
        {
            throw new NotImplementedException();
        }

        public virtual EntityEntry Update(object entity)
        {
            throw new NotImplementedException();
        }

        public virtual EntityEntry<TEntity> Update<TEntity>(TEntity entity) where TEntity : class
        {
            throw new NotImplementedException();
        }

        public virtual void UpdateRange(IEnumerable<object> entities)
        {
            throw new NotImplementedException();
        }

        public virtual void UpdateRange(params object[] entities)
        {
            throw new NotImplementedException();
        }

        public virtual IQueryable<TResult> FromExpression<TResult> (Expression<Func<IQueryable<TResult>>> expression)
        {
            throw new NotImplementedException();
        }


        // Stored Procedures

        public int AddTwoValues(int? a = null, int? b = null)
        {
            return 0;
        }

        public Task<int> AddTwoValuesAsync(int? a = null, int? b = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            return Task.FromResult(0);
        }

        public int AddTwoValuesWithResult(int? a, int? b, out int? result, out int? result2)
        {
            result = default(int);
            result2 = default(int);
            return 0;
        }

        // AddTwoValuesWithResultAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public int Alpha_Overclock(DateTime? parameter = null)
        {
            return 0;
        }

        public Task<int> Alpha_OverclockAsync(DateTime? parameter = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            return Task.FromResult(0);
        }

        public int App_UspCmtUserFsrUpdate(int? userId, int? fsrId, out int? ufsrId)
        {
            ufsrId = default(int);
            return 0;
        }

        // App_UspCmtUserFsrUpdateAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public DbSet<ASimpleExampleReturnModel> ASimpleExampleReturnModel { get; set; }
        public List<ASimpleExampleReturnModel> ASimpleExample()
        {
            int procResult;
            return ASimpleExample(out procResult);
        }

        public List<ASimpleExampleReturnModel> ASimpleExample(out int procResult)
        {
            procResult = 0;
            return new List<ASimpleExampleReturnModel>();
        }

        public Task<List<ASimpleExampleReturnModel>> ASimpleExampleAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            int procResult;
            return Task.FromResult(ASimpleExample(out procResult));
        }

        public int Beta_Overclock(DateTime? parameter = null)
        {
            return 0;
        }

        public Task<int> Beta_OverclockAsync(DateTime? parameter = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            return Task.FromResult(0);
        }

        public DbSet<C182Test2ReturnModel> C182Test2ReturnModel { get; set; }
        public C182Test2ReturnModel C182Test2(int? flag = null)
        {
            int procResult;
            return C182Test2(flag, out procResult);
        }

        public C182Test2ReturnModel C182Test2(int? flag, out int procResult)
        {
            procResult = 0;
            return new C182Test2ReturnModel();
        }

        // C182Test2Async() cannot be created due to having out parameters, or is relying on the procedure result (C182Test2ReturnModel)

        public DbSet<CheckIfApplicationIsCompleteReturnModel> CheckIfApplicationIsCompleteReturnModel { get; set; }
        public List<CheckIfApplicationIsCompleteReturnModel> CheckIfApplicationIsComplete(int? applicationId, out bool? isApplicationComplete)
        {
            int procResult;
            return CheckIfApplicationIsComplete(applicationId, out isApplicationComplete, out procResult);
        }

        public List<CheckIfApplicationIsCompleteReturnModel> CheckIfApplicationIsComplete(int? applicationId, out bool? isApplicationComplete, out int procResult)
        {
            isApplicationComplete = default(bool);
            procResult = 0;
            return new List<CheckIfApplicationIsCompleteReturnModel>();
        }

        // CheckIfApplicationIsCompleteAsync() cannot be created due to having out parameters, or is relying on the procedure result (List<CheckIfApplicationIsCompleteReturnModel>)

        public DbSet<ColourPivotReturnModel> ColourPivotReturnModel { get; set; }
        public List<ColourPivotReturnModel> ColourPivot()
        {
            int procResult;
            return ColourPivot(out procResult);
        }

        public List<ColourPivotReturnModel> ColourPivot(out int procResult)
        {
            procResult = 0;
            return new List<ColourPivotReturnModel>();
        }

        public Task<List<ColourPivotReturnModel>> ColourPivotAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            int procResult;
            return Task.FromResult(ColourPivot(out procResult));
        }

        public DbSet<ColumnNameAndTypesProcReturnModel> ColumnNameAndTypesProcReturnModel { get; set; }
        public List<ColumnNameAndTypesProcReturnModel> ColumnNameAndTypesProc()
        {
            int procResult;
            return ColumnNameAndTypesProc(out procResult);
        }

        public List<ColumnNameAndTypesProcReturnModel> ColumnNameAndTypesProc(out int procResult)
        {
            procResult = 0;
            return new List<ColumnNameAndTypesProcReturnModel>();
        }

        public Task<List<ColumnNameAndTypesProcReturnModel>> ColumnNameAndTypesProcAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            int procResult;
            return Task.FromResult(ColumnNameAndTypesProc(out procResult));
        }

        public int ConvertToString(int? someValue, out string someString)
        {
            someString = default(string);
            return 0;
        }

        // ConvertToStringAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public DbSet<DboProcDataFromFfrsReturnModel> DboProcDataFromFfrsReturnModel { get; set; }
        public List<DboProcDataFromFfrsReturnModel> DboProcDataFromFfrs(int? maxId = null)
        {
            int procResult;
            return DboProcDataFromFfrs(maxId, out procResult);
        }

        public List<DboProcDataFromFfrsReturnModel> DboProcDataFromFfrs(int? maxId, out int procResult)
        {
            procResult = 0;
            return new List<DboProcDataFromFfrsReturnModel>();
        }

        public Task<List<DboProcDataFromFfrsReturnModel>> DboProcDataFromFfrsAsync(int? maxId = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            int procResult;
            return Task.FromResult(DboProcDataFromFfrs(maxId, out procResult));
        }

        public DbSet<DboProcDataFromFfrsAndDboReturnModel> DboProcDataFromFfrsAndDboReturnModel { get; set; }
        public List<DboProcDataFromFfrsAndDboReturnModel> DboProcDataFromFfrsAndDbo()
        {
            int procResult;
            return DboProcDataFromFfrsAndDbo(out procResult);
        }

        public List<DboProcDataFromFfrsAndDboReturnModel> DboProcDataFromFfrsAndDbo(out int procResult)
        {
            procResult = 0;
            return new List<DboProcDataFromFfrsAndDboReturnModel>();
        }

        public Task<List<DboProcDataFromFfrsAndDboReturnModel>> DboProcDataFromFfrsAndDboAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            int procResult;
            return Task.FromResult(DboProcDataFromFfrsAndDbo(out procResult));
        }

        public DbSet<DsOpeProcReturnModel> DsOpeProcReturnModel { get; set; }
        public List<DsOpeProcReturnModel> DsOpeProc()
        {
            int procResult;
            return DsOpeProc(out procResult);
        }

        public List<DsOpeProcReturnModel> DsOpeProc(out int procResult)
        {
            procResult = 0;
            return new List<DsOpeProcReturnModel>();
        }

        public Task<List<DsOpeProcReturnModel>> DsOpeProcAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            int procResult;
            return Task.FromResult(DsOpeProc(out procResult));
        }

        public DbSet<FFRS_CvDataReturnModel> FFRS_CvDataReturnModel { get; set; }
        public List<FFRS_CvDataReturnModel> FFRS_CvData(int? maxId = null)
        {
            int procResult;
            return FFRS_CvData(maxId, out procResult);
        }

        public List<FFRS_CvDataReturnModel> FFRS_CvData(int? maxId, out int procResult)
        {
            procResult = 0;
            return new List<FFRS_CvDataReturnModel>();
        }

        public Task<List<FFRS_CvDataReturnModel>> FFRS_CvDataAsync(int? maxId = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            int procResult;
            return Task.FromResult(FFRS_CvData(maxId, out procResult));
        }

        public DbSet<FFRS_DataFromDboReturnModel> FFRS_DataFromDboReturnModel { get; set; }
        public List<FFRS_DataFromDboReturnModel> FFRS_DataFromDbo()
        {
            int procResult;
            return FFRS_DataFromDbo(out procResult);
        }

        public List<FFRS_DataFromDboReturnModel> FFRS_DataFromDbo(out int procResult)
        {
            procResult = 0;
            return new List<FFRS_DataFromDboReturnModel>();
        }

        public Task<List<FFRS_DataFromDboReturnModel>> FFRS_DataFromDboAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            int procResult;
            return Task.FromResult(FFRS_DataFromDbo(out procResult));
        }

        public DbSet<FFRS_DataFromDboAndFfrsReturnModel> FFRS_DataFromDboAndFfrsReturnModel { get; set; }
        public List<FFRS_DataFromDboAndFfrsReturnModel> FFRS_DataFromDboAndFfrs()
        {
            int procResult;
            return FFRS_DataFromDboAndFfrs(out procResult);
        }

        public List<FFRS_DataFromDboAndFfrsReturnModel> FFRS_DataFromDboAndFfrs(out int procResult)
        {
            procResult = 0;
            return new List<FFRS_DataFromDboAndFfrsReturnModel>();
        }

        public Task<List<FFRS_DataFromDboAndFfrsReturnModel>> FFRS_DataFromDboAndFfrsAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            int procResult;
            return Task.FromResult(FFRS_DataFromDboAndFfrs(out procResult));
        }

        public DbSet<FkTest_HelloReturnModel> FkTest_HelloReturnModel { get; set; }
        public List<FkTest_HelloReturnModel> FkTest_Hello()
        {
            int procResult;
            return FkTest_Hello(out procResult);
        }

        public List<FkTest_HelloReturnModel> FkTest_Hello(out int procResult)
        {
            procResult = 0;
            return new List<FkTest_HelloReturnModel>();
        }

        public Task<List<FkTest_HelloReturnModel>> FkTest_HelloAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            int procResult;
            return Task.FromResult(FkTest_Hello(out procResult));
        }

        public DbSet<GetSmallDecimalTestReturnModel> GetSmallDecimalTestReturnModel { get; set; }
        public List<GetSmallDecimalTestReturnModel> GetSmallDecimalTest(int? maxId = null)
        {
            int procResult;
            return GetSmallDecimalTest(maxId, out procResult);
        }

        public List<GetSmallDecimalTestReturnModel> GetSmallDecimalTest(int? maxId, out int procResult)
        {
            procResult = 0;
            return new List<GetSmallDecimalTestReturnModel>();
        }

        public Task<List<GetSmallDecimalTestReturnModel>> GetSmallDecimalTestAsync(int? maxId = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            int procResult;
            return Task.FromResult(GetSmallDecimalTest(maxId, out procResult));
        }

        public int InsertRecord(string data, out int? insertedId)
        {
            insertedId = default(int);
            return 0;
        }

        // InsertRecordAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public int InsertRecordThree(string data, out int? insertedId, int? someId, out int? anotherInsertedId)
        {
            insertedId = default(int);
            anotherInsertedId = default(int);
            return 0;
        }

        // InsertRecordThreeAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public int InsertRecordTwo(string data, out int? insertedId, out int? anotherInsertedId)
        {
            insertedId = default(int);
            anotherInsertedId = default(int);
            return 0;
        }

        // InsertRecordTwoAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public int MinTripSequenceStart(out DateTime? minTripSequenceStartParam)
        {
            minTripSequenceStartParam = default(DateTime);
            return 0;
        }

        // MinTripSequenceStartAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public int MinTripSequenceStartNull(out DateTime? minTripSequenceStartParam)
        {
            minTripSequenceStartParam = default(DateTime);
            return 0;
        }

        // MinTripSequenceStartNullAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public int MultipleReturnColumnsFromTempTable()
        {
            return 0;
        }

        public Task<int> MultipleReturnColumnsFromTempTableAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            return Task.FromResult(0);
        }

        public int NvarcharTest(string maxOutputParam, string normalOutputParam)
        {
            return 0;
        }

        public Task<int> NvarcharTestAsync(string maxOutputParam, string normalOutputParam, CancellationToken cancellationToken = default(CancellationToken))
        {
            return Task.FromResult(0);
        }

        public int Omega_Overclock(DateTime? parameter = null)
        {
            return 0;
        }

        public Task<int> Omega_OverclockAsync(DateTime? parameter = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            return Task.FromResult(0);
        }

        public int ProcTestDecimalOutput(out decimal? perfectNumber)
        {
            perfectNumber = default(decimal);
            return 0;
        }

        // ProcTestDecimalOutputAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public int ProcTestDecimalOutputV2(out decimal? perfectNumber)
        {
            perfectNumber = default(decimal);
            return 0;
        }

        // ProcTestDecimalOutputV2Async() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public int ProcTestDecimalOutputV3Default(out decimal? perfectNumber)
        {
            perfectNumber = default(decimal);
            return 0;
        }

        // ProcTestDecimalOutputV3DefaultAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public DbSet<SpatialTypesNoParamsReturnModel> SpatialTypesNoParamsReturnModel { get; set; }
        public List<SpatialTypesNoParamsReturnModel> SpatialTypesNoParams()
        {
            int procResult;
            return SpatialTypesNoParams(out procResult);
        }

        public List<SpatialTypesNoParamsReturnModel> SpatialTypesNoParams(out int procResult)
        {
            procResult = 0;
            return new List<SpatialTypesNoParamsReturnModel>();
        }

        public Task<List<SpatialTypesNoParamsReturnModel>> SpatialTypesNoParamsAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            int procResult;
            return Task.FromResult(SpatialTypesNoParams(out procResult));
        }

        public DbSet<SpatialTypesWithParamsReturnModel> SpatialTypesWithParamsReturnModel { get; set; }
        public List<SpatialTypesWithParamsReturnModel> SpatialTypesWithParams(NetTopologySuite.Geometries.Geometry geometry, NetTopologySuite.Geometries.Point geography)
        {
            int procResult;
            return SpatialTypesWithParams(geometry, geography, out procResult);
        }

        public List<SpatialTypesWithParamsReturnModel> SpatialTypesWithParams(NetTopologySuite.Geometries.Geometry geometry, NetTopologySuite.Geometries.Point geography, out int procResult)
        {
            procResult = 0;
            return new List<SpatialTypesWithParamsReturnModel>();
        }

        public Task<List<SpatialTypesWithParamsReturnModel>> SpatialTypesWithParamsAsync(NetTopologySuite.Geometries.Geometry geometry, NetTopologySuite.Geometries.Point geography, CancellationToken cancellationToken = default(CancellationToken))
        {
            int procResult;
            return Task.FromResult(SpatialTypesWithParams(geometry, geography, out procResult));
        }

        public DbSet<StpMultipleIdenticalResultsReturnModel> StpMultipleIdenticalResultsReturnModel { get; set; }
        public List<StpMultipleIdenticalResultsReturnModel> StpMultipleIdenticalResults(int? someVar = null)
        {
            int procResult;
            return StpMultipleIdenticalResults(someVar, out procResult);
        }

        public List<StpMultipleIdenticalResultsReturnModel> StpMultipleIdenticalResults(int? someVar, out int procResult)
        {
            procResult = 0;
            return new List<StpMultipleIdenticalResultsReturnModel>();
        }

        public Task<List<StpMultipleIdenticalResultsReturnModel>> StpMultipleIdenticalResultsAsync(int? someVar = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            int procResult;
            return Task.FromResult(StpMultipleIdenticalResults(someVar, out procResult));
        }

        public DbSet<StpMultipleMultipleResultsWithParamsReturnModel> StpMultipleMultipleResultsWithParamsReturnModel { get; set; }
        public StpMultipleMultipleResultsWithParamsReturnModel StpMultipleMultipleResultsWithParams(int? firstVal = null, int? secondVal = null, int? thirdVal = null)
        {
            int procResult;
            return StpMultipleMultipleResultsWithParams(firstVal, secondVal, thirdVal, out procResult);
        }

        public StpMultipleMultipleResultsWithParamsReturnModel StpMultipleMultipleResultsWithParams(int? firstVal, int? secondVal, int? thirdVal, out int procResult)
        {
            procResult = 0;
            return new StpMultipleMultipleResultsWithParamsReturnModel();
        }

        // StpMultipleMultipleResultsWithParamsAsync() cannot be created due to having out parameters, or is relying on the procedure result (StpMultipleMultipleResultsWithParamsReturnModel)

        public DbSet<StpMultipleResultsReturnModel> StpMultipleResultsReturnModel { get; set; }
        public StpMultipleResultsReturnModel StpMultipleResults()
        {
            int procResult;
            return StpMultipleResults(out procResult);
        }

        public StpMultipleResultsReturnModel StpMultipleResults(out int procResult)
        {
            procResult = 0;
            return new StpMultipleResultsReturnModel();
        }

        // StpMultipleResultsAsync() cannot be created due to having out parameters, or is relying on the procedure result (StpMultipleResultsReturnModel)

        public DbSet<StpMultipleResultsWithParamsReturnModel> StpMultipleResultsWithParamsReturnModel { get; set; }
        public StpMultipleResultsWithParamsReturnModel StpMultipleResultsWithParams(int? firstVal = null, int? secondVal = null)
        {
            int procResult;
            return StpMultipleResultsWithParams(firstVal, secondVal, out procResult);
        }

        public StpMultipleResultsWithParamsReturnModel StpMultipleResultsWithParams(int? firstVal, int? secondVal, out int procResult)
        {
            procResult = 0;
            return new StpMultipleResultsWithParamsReturnModel();
        }

        // StpMultipleResultsWithParamsAsync() cannot be created due to having out parameters, or is relying on the procedure result (StpMultipleResultsWithParamsReturnModel)

        public DbSet<StpNoParamsTestReturnModel> StpNoParamsTestReturnModel { get; set; }
        public List<StpNoParamsTestReturnModel> StpNoParamsTest()
        {
            int procResult;
            return StpNoParamsTest(out procResult);
        }

        public List<StpNoParamsTestReturnModel> StpNoParamsTest(out int procResult)
        {
            procResult = 0;
            return new List<StpNoParamsTestReturnModel>();
        }

        public Task<List<StpNoParamsTestReturnModel>> StpNoParamsTestAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            int procResult;
            return Task.FromResult(StpNoParamsTest(out procResult));
        }

        public int StpNoReturnFields()
        {
            return 0;
        }

        public Task<int> StpNoReturnFieldsAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            return Task.FromResult(0);
        }

        public DbSet<StpNullableParamsTestReturnModel> StpNullableParamsTestReturnModel { get; set; }
        public List<StpNullableParamsTestReturnModel> StpNullableParamsTest(int? aVal = null, int? bVal = null)
        {
            int procResult;
            return StpNullableParamsTest(aVal, bVal, out procResult);
        }

        public List<StpNullableParamsTestReturnModel> StpNullableParamsTest(int? aVal, int? bVal, out int procResult)
        {
            procResult = 0;
            return new List<StpNullableParamsTestReturnModel>();
        }

        public Task<List<StpNullableParamsTestReturnModel>> StpNullableParamsTestAsync(int? aVal = null, int? bVal = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            int procResult;
            return Task.FromResult(StpNullableParamsTest(aVal, bVal, out procResult));
        }

        public DbSet<StpTestReturnModel> StpTestReturnModel { get; set; }
        public List<StpTestReturnModel> StpTest(string strDateFrom, string strDateTo, out bool? retBool)
        {
            int procResult;
            return StpTest(strDateFrom, strDateTo, out retBool, out procResult);
        }

        public List<StpTestReturnModel> StpTest(string strDateFrom, string strDateTo, out bool? retBool, out int procResult)
        {
            retBool = default(bool);
            procResult = 0;
            return new List<StpTestReturnModel>();
        }

        // StpTestAsync() cannot be created due to having out parameters, or is relying on the procedure result (List<StpTestReturnModel>)

        public DbSet<StpTestUnderscoreTestReturnModel> StpTestUnderscoreTestReturnModel { get; set; }
        public List<StpTestUnderscoreTestReturnModel> StpTestUnderscoreTest(string strDateFrom, string strDateTo)
        {
            int procResult;
            return StpTestUnderscoreTest(strDateFrom, strDateTo, out procResult);
        }

        public List<StpTestUnderscoreTestReturnModel> StpTestUnderscoreTest(string strDateFrom, string strDateTo, out int procResult)
        {
            procResult = 0;
            return new List<StpTestUnderscoreTestReturnModel>();
        }

        public Task<List<StpTestUnderscoreTestReturnModel>> StpTestUnderscoreTestAsync(string strDateFrom, string strDateTo, CancellationToken cancellationToken = default(CancellationToken))
        {
            int procResult;
            return Task.FromResult(StpTestUnderscoreTest(strDateFrom, strDateTo, out procResult));
        }

        public int StupidStoredProcedureParams(string reqType, short? dept = null, short? @class = null, short? item = null)
        {
            return 0;
        }

        public Task<int> StupidStoredProcedureParamsAsync(string reqType, short? dept = null, short? @class = null, short? item = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            return Task.FromResult(0);
        }

        public int StupidStoredProcedureParams2(string @override, short? @readonly = null, short? @class = null, short? @enum = null)
        {
            return 0;
        }

        public Task<int> StupidStoredProcedureParams2Async(string @override, short? @readonly = null, short? @class = null, short? @enum = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            return Task.FromResult(0);
        }

        public DbSet<Synonyms_SimpleStoredProcReturnModel> Synonyms_SimpleStoredProcReturnModel { get; set; }
        public List<Synonyms_SimpleStoredProcReturnModel> Synonyms_SimpleStoredProc(int? inputInt = null)
        {
            int procResult;
            return Synonyms_SimpleStoredProc(inputInt, out procResult);
        }

        public List<Synonyms_SimpleStoredProcReturnModel> Synonyms_SimpleStoredProc(int? inputInt, out int procResult)
        {
            procResult = 0;
            return new List<Synonyms_SimpleStoredProcReturnModel>();
        }

        public Task<List<Synonyms_SimpleStoredProcReturnModel>> Synonyms_SimpleStoredProcAsync(int? inputInt = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            int procResult;
            return Task.FromResult(Synonyms_SimpleStoredProc(inputInt, out procResult));
        }

        public DbSet<TestReturnStringReturnModel> TestReturnStringReturnModel { get; set; }
        public List<TestReturnStringReturnModel> TestReturnString()
        {
            int procResult;
            return TestReturnString(out procResult);
        }

        public List<TestReturnStringReturnModel> TestReturnString(out int procResult)
        {
            procResult = 0;
            return new List<TestReturnStringReturnModel>();
        }

        public Task<List<TestReturnStringReturnModel>> TestReturnStringAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            int procResult;
            return Task.FromResult(TestReturnString(out procResult));
        }

        public int ThisHasMixedOutParameters(DateTime? foo, out int? firstOutParam, DateTime? bar, out int? secondOutParam, DateTime? baz = null)
        {
            firstOutParam = default(int);
            secondOutParam = default(int);
            return 0;
        }

        // ThisHasMixedOutParametersAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public int UserDefinedTypeSampleStoredProc(int? a, DataTable type, int? b = null)
        {
            return 0;
        }

        public Task<int> UserDefinedTypeSampleStoredProcAsync(int? a, DataTable type, int? b = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            return Task.FromResult(0);
        }

        public DbSet<XmlDataV1ReturnModel> XmlDataV1ReturnModel { get; set; }
        public List<XmlDataV1ReturnModel> XmlDataV1()
        {
            int procResult;
            return XmlDataV1(out procResult);
        }

        public List<XmlDataV1ReturnModel> XmlDataV1(out int procResult)
        {
            procResult = 0;
            return new List<XmlDataV1ReturnModel>();
        }

        public Task<List<XmlDataV1ReturnModel>> XmlDataV1Async(CancellationToken cancellationToken = default(CancellationToken))
        {
            int procResult;
            return Task.FromResult(XmlDataV1(out procResult));
        }

        public int XmlDataV2()
        {
            return 0;
        }

        public Task<int> XmlDataV2Async(CancellationToken cancellationToken = default(CancellationToken))
        {
            return Task.FromResult(0);
        }

        // Table Valued Functions

        // dbo.182_test1
        public IQueryable<C182Test1ReturnModel> C182Test1(int? test = null)
        {
            return new List<C182Test1ReturnModel>().AsQueryable();
        }

        // dbo.CsvToInt
        public IQueryable<CsvToIntReturnModel> CsvToInt(string array, string array2)
        {
            return new List<CsvToIntReturnModel>().AsQueryable();
        }

        // CustomSchema.CsvToIntWithSchema
        public IQueryable<CustomSchema_CsvToIntWithSchemaReturnModel> CustomSchema_CsvToIntWithSchema(string array, string array2)
        {
            return new List<CustomSchema_CsvToIntWithSchemaReturnModel>().AsQueryable();
        }

        // FFRS.CsvToInt2
        public IQueryable<FFRS_CsvToInt2ReturnModel> FFRS_CsvToInt2(string array, string array2)
        {
            return new List<FFRS_CsvToInt2ReturnModel>().AsQueryable();
        }

        // Scalar Valued Functions

        // dbo.udfNetSale
        public decimal UdfNetSale(int? quantity = null, decimal? listPrice = null, decimal? discount = null)
        {
            return default(decimal);
        }
    }
}
// </auto-generated>
