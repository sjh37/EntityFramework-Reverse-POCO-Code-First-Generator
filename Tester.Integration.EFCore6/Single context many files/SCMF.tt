<#@ include file ="..\..\EntityFramework.Reverse.POCO.Generator\EF.Reverse.POCO.v3.ttinclude" #>
<#
    // Single context many files
    Settings.DatabaseType          = DatabaseType.SqlServer; // SqlCe, Plugin. Coming next: PostgreSQL, MySql, Oracle
    Settings.TemplateType          = TemplateType.EfCore6; // Ef6, EfCore2, EfCore3, FileBased. FileBased specify folder using Settings.TemplateFolder
    Settings.GeneratorType         = GeneratorType.EfCore; // Ef6, EfCore, Custom. Custom edit GeneratorCustom class to provide your own implementation
    Settings.FileManagerType       = FileManagerType.EfCore; // VisualStudio = .NET project; EfCore = .NET Core project; Null = No output (testing only)
    Settings.ConnectionString      = "Data Source=(local);Initial Catalog=EfrpgTest;Integrated Security=True;Encrypt=false;TrustServerCertificate=true";
    Settings.ConnectionStringName  = "EfCoreDatabase"; // ConnectionString key as specified in your app.config/web.config/appsettings.json
    Settings.DbContextName         = "EfCoreDbContext"; // Class name for the DbContext to be generated.
    Settings.OnConfiguration       = OnConfiguration.Configuration; // EFCore only. Determines the code generated within DbContext.OnConfiguration(). Please read https://github.com/sjh37/EntityFramework-Reverse-POCO-Code-First-Generator/wiki/OnConfiguration    Settings.GenerateSeparateFiles   = false;
    Settings.GenerateSeparateFiles = true;
    Settings.Namespace             = DefaultNamespace; // Override the default namespace here
    
    FilterSettings.Reset();
    FilterSettings.AddDefaults();
    FilterSettings.IncludeTableValuedFunctions = true;
    FilterSettings.IncludeScalarValuedFunctions = true;
    FilterSettings.SchemaFilters.Add(new RegexExcludeFilter("Enum"));
    FilterSettings.TableFilters.Add(new RegexExcludeFilter("Enum"));
    FilterSettings.CheckSettings();

    // Generate files in sub-folders ******************************************************************************************************
    // Only activated if Settings.GenerateSeparateFiles = true && Settings.FileManagerType = FileManagerType.EfCore
    Settings.ContextFolder           = @"Contexts";      // Sub-folder you would like your DbContext to be added to.              e.g. @"Data"
    Settings.InterfaceFolder         = @"Interfaces";    // Sub-folder you would like your Interface to be added to.              e.g. @"Data\Interface"
    Settings.PocoFolder              = @"Entities";      // Sub-folder you would like your Poco's to be added to.                 e.g. @"Data\Entities"
    Settings.PocoConfigurationFolder = @"Configuration"; // Sub-folder you would like your Configuration mappings to be added to. e.g. @"Data\Configuration"

    Settings.Enumerations = new List<EnumerationSettings>
    {
        // Example
        new EnumerationSettings
        {
            Name       = "DaysOfWeek",          // Enum to generate. e.g. "DaysOfWeek" would result in "public enum DaysOfWeek {...}" if the GroupField is set to a value then {GroupField} must be used in this name. e.g. "DaysOfWeek{GroupField}"
            Table      = "EnumTest.DaysOfWeek", // Database table containing enum values. e.g. "DaysOfWeek"
            NameField  = "TypeName",            // Column containing the name for the enum. e.g. "TypeName"
            ValueField = "TypeId",              // Column containing the values for the enum. e.g. "TypeId"
            GroupField = string.Empty           // [optional] Column containing the group name for the enum. This is used if multiple Enums are in the same table. if this is populated, use {GroupField} in the Name property. e.g. "{GroupField}Enum"
        },
        new EnumerationSettings
        {
            Name       = "CarOptions",
            Table      = "EnumsWithStringAsValue",
            NameField  = "enum_name",
            ValueField = "value"
        }
    };

    Inflector.IgnoreWordsThatEndWith = new List<string> { "Status", "To", "Data" };
    Inflector.PluralisationService = new EnglishPluralizationService();
    var outer = (GeneratedTextTransformation) this;
    var fileManagement = new FileManagementService(outer);
    var generator = GeneratorFactory.Create(fileManagement, FileManagerFactory.GetFileManagerType());
    if (generator != null && generator.InitialisationOk)
    {
        generator.ReadDatabase();
        generator.GenerateCode();
    }
    fileManagement.Process(true);#>
