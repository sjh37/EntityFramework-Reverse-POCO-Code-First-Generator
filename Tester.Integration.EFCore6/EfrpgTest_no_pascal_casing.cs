// <auto-generated>

using Microsoft.Data.SqlClient;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.ChangeTracking;
using Microsoft.EntityFrameworkCore.Design;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata.Builders;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlTypes;
using System.Linq;
using System.Linq.Expressions;
using System.Threading;
using System.Threading.Tasks;

namespace V6_Efrpg_Test
{
    #region Database context interface

    public interface IV6_Efrpg_Test_Db_Context : IDisposable
    {
        DbSet<A> A { get; set; } // A
        DbSet<AAREF> AAREFs { get; set; } // AAREF
        DbSet<AB_OrderLinesAB> AB_OrderLinesABs { get; set; } // AB_OrderLinesAB_
        DbSet<AB_OrdersAB> AB_OrdersABs { get; set; } // AB_OrdersAB_
        DbSet<AllColumnsNull> AllColumnsNulls { get; set; } // AllColumnsNull
        DbSet<Alpha_Harish3485> Alpha_Harish3485 { get; set; } // Harish3485
        DbSet<Alpha_workflow> Alpha_workflows { get; set; } // workflow
        DbSet<alpha_workflow_synonym> alpha_workflow_synonyms { get; set; } // alpha_workflow_synonym
        DbSet<App_UserFacilityServiceRole> App_UserFacilityServiceRoles { get; set; } // UserFacilityServiceRole
        DbSet<AppUser> AppUsers { get; set; } // AppUser
        DbSet<Attendee> Attendees { get; set; } // Attendee
        DbSet<BatchTest> BatchTests { get; set; } // BatchTest
        DbSet<Beta_Harish3485> Beta_Harish3485 { get; set; } // Harish3485
        DbSet<Beta_ToAlpha> Beta_ToAlphas { get; set; } // ToAlpha
        DbSet<Beta_workflow> Beta_workflows { get; set; } // workflow
        DbSet<BITFIDDLERALLCAP> BITFIDDLERALLCAPs { get; set; } // BITFIDDLERALLCAPS
        DbSet<BitFiddlerCATEGORy> BitFiddlerCATEGORies { get; set; } // BitFiddlerCATEGORIES
        DbSet<BitFiddlerCURRENCy> BitFiddlerCURRENCies { get; set; } // BitFiddlerCURRENCIES
        DbSet<Blah> Blahs { get; set; } // Blah
        DbSet<BlahBlahLink_v2> BlahBlahLink_v2 { get; set; } // BlahBlahLink_v2
        DbSet<Blarg> Blargs { get; set; } // Blarg
        DbSet<Burak1> Burak1 { get; set; } // Burak1
        DbSet<Burak2> Burak2 { get; set; } // Burak2
        DbSet<CalculatedColumnNotNull> CalculatedColumnNotNulls { get; set; } // CalculatedColumnNotNull
        DbSet<Car> Cars { get; set; } // Car
        DbSet<ClientCreationState> ClientCreationStates { get; set; } // ClientCreationState
        DbSet<CMS_File> CMS_Files { get; set; } // CMS_File
        DbSet<CMS_Tag> CMS_Tags { get; set; } // CMS_Tag
        DbSet<CODE_MeetingTopicDetail> CODE_MeetingTopicDetails { get; set; } // CODE_MeetingTopicDetails
        DbSet<CODE_PARAM_MeetingTopicDetailSource> CODE_PARAM_MeetingTopicDetailSources { get; set; } // CODE_PARAM_MeetingTopicDetailSource
        DbSet<CodeObject> CodeObjects { get; set; } // CodeObject
        DbSet<Colour> Colours { get; set; } // Colour
        DbSet<ColumnNameAndType> ColumnNameAndTypes { get; set; } // ColumnNameAndTypes
        DbSet<ComplexView> ComplexViews { get; set; } // ComplexView
        DbSet<Country> Countries { get; set; } // Country
        DbSet<cross_database_synonym> cross_database_synonyms { get; set; } // cross_database_synonym
        DbSet<DateTimeDefaultTest> DateTimeDefaultTests { get; set; } // DateTimeDefaultTest
        DbSet<dcg_rov_ColumnDefinition> dcg_rov_ColumnDefinitions { get; set; } // rov_ColumnDefinitions
        DbSet<DefaultCheckForNull> DefaultCheckForNulls { get; set; } // DefaultCheckForNull
        DbSet<DSOpe> DSOpes { get; set; } // DSOpe
        DbSet<EnumsWithStringAsValue> EnumsWithStringAsValues { get; set; } // EnumsWithStringAsValue
        DbSet<EnumTest_DaysOfWeek> EnumTest_DaysOfWeeks { get; set; } // DaysOfWeek
        DbSet<EnumTest_OpenDay> EnumTest_OpenDays { get; set; } // OpenDays
        DbSet<EnumWithDefaultValue> EnumWithDefaultValues { get; set; } // EnumWithDefaultValue
        DbSet<EventProcessor> EventProcessors { get; set; } // EventProcessor
        DbSet<EventProcessorEventFilter> EventProcessorEventFilters { get; set; } // EventProcessorEventFilter
        DbSet<FFRS_CV> FFRS_CVs { get; set; } // CV
        DbSet<FinancialInstitutionOffice> FinancialInstitutionOffices { get; set; } // FinancialInstitutionOffice
        DbSet<FkTest_SmallDecimalTestAttribute> FkTest_SmallDecimalTestAttributes { get; set; } // SmallDecimalTestAttribute
        DbSet<footer> footers { get; set; } // footer
        DbSet<ForeignKeyIsNotEnforced> ForeignKeyIsNotEnforceds { get; set; } // ForeignKeyIsNotEnforced
        DbSet<ForeignKeyIsNotEnforcedItem> ForeignKeyIsNotEnforcedItems { get; set; } // ForeignKeyIsNotEnforcedItem
        DbSet<HasPrincipalKeyTestChild> HasPrincipalKeyTestChilds { get; set; } // HasPrincipalKeyTestChild
        DbSet<HasPrincipalKeyTestParent> HasPrincipalKeyTestParents { get; set; } // HasPrincipalKeyTestParent
        DbSet<header> headers { get; set; } // header
        DbSet<hierarchy_test> hierarchy_tests { get; set; } // hierarchy_test
        DbSet<InflectorData> InflectorData { get; set; } // InflectorData
        DbSet<InflectorStatus> InflectorStatus { get; set; } // InflectorStatus
        DbSet<InflectorTo> InflectorTo { get; set; } // InflectorTo
        DbSet<Issue47_Role> Issue47_Roles { get; set; } // Role
        DbSet<Issue47_User> Issue47_Users { get; set; } // Users
        DbSet<Issue47_UserRole> Issue47_UserRoles { get; set; } // UserRoles
        DbSet<MultipleKey> MultipleKeys { get; set; } // MultipleKeys
        DbSet<OneEightSix_Issue> OneEightSix_Issues { get; set; } // Issue
        DbSet<OneEightSix_UploadedFile> OneEightSix_UploadedFiles { get; set; } // UploadedFile
        DbSet<Period_Table> Period_Tables { get; set; } // Period.Table
        DbSet<PeriodTestTable> PeriodTestTables { get; set; } // PeriodTestTable
        DbSet<Person> People { get; set; } // Person
        DbSet<PersonPost> PersonPosts { get; set; } // PersonPosts
        DbSet<pk_ordinal_test> pk_ordinal_tests { get; set; } // pk_ordinal_test
        DbSet<PropertyTypesToAdd> PropertyTypesToAdds { get; set; } // PropertyTypesToAdd
        DbSet<SequenceTest> SequenceTests { get; set; } // SequenceTest
        DbSet<SequenceTestPartTwo> SequenceTestPartTwoes { get; set; } // SequenceTestPartTwo
        DbSet<SmallDecimalTest> SmallDecimalTests { get; set; } // SmallDecimalTest
        DbSet<SmallDecimalTestView> SmallDecimalTestViews { get; set; } // SmallDecimalTestView
        DbSet<Stafford_Boo> Stafford_Boos { get; set; } // Boo
        DbSet<Stafford_ComputedColumn> Stafford_ComputedColumns { get; set; } // ComputedColumns
        DbSet<Stafford_Foo> Stafford_Foos { get; set; } // Foo
        DbSet<Synonyms_Child> Synonyms_Children { get; set; } // Child
        DbSet<Synonyms_Parent> Synonyms_Parents { get; set; } // Parent
        DbSet<table_with_multiple_period> table_with_multiple_periods { get; set; } // table.with.multiple.periods
        DbSet<TableA> TableAs { get; set; } // TableA
        DbSet<TableB> TableBs { get; set; } // TableB
        DbSet<tablewithduplicatecolumnname> tablewithduplicatecolumnnames { get; set; } // table with duplicate column names
        DbSet<tablewithspace> tablewithspaces { get; set; } // table with space
        DbSet<tablewithspaceandincolumn> tablewithspaceandincolumns { get; set; } // table with space and in columns
        DbSet<TableWithSpaceInColumnOnly> TableWithSpaceInColumnOnlies { get; set; } // TableWithSpaceInColumnOnly
        DbSet<TadeuszSobol> TadeuszSobols { get; set; } // TadeuszSobol
        DbSet<Task1> Task1 { get; set; } // Task
        DbSet<tblOrder> tblOrders { get; set; } // tblOrders
        DbSet<tblOrderError> tblOrderErrors { get; set; } // tblOrderErrors
        DbSet<tblOrderErrorsAB> tblOrderErrorsABs { get; set; } // tblOrderErrorsAB_
        DbSet<tblOrderLine> tblOrderLines { get; set; } // tblOrderLines
        DbSet<TemporalDepartment> TemporalDepartments { get; set; } // TemporalDepartment
        DbSet<TemporalDepartmentHistory> TemporalDepartmentHistories { get; set; } // TemporalDepartmentHistory
        DbSet<ThisIsMemoryOptimised> ThisIsMemoryOptimiseds { get; set; } // ThisIsMemoryOptimised
        DbSet<Ticket> Tickets { get; set; } // Ticket
        DbSet<TimestampNotNull> TimestampNotNulls { get; set; } // TimestampNotNull
        DbSet<TimestampNullable> TimestampNullables { get; set; } // TimestampNullable
        DbSet<Token> Tokens { get; set; } // Token
        DbSet<User> Users { get; set; } // User
        DbSet<User_Document> User_Documents { get; set; } // User_Document
        DbSet<User309> User309 { get; set; } // User309
        DbSet<Versioned> Versioneds { get; set; } // Versioned
        DbSet<VersionedNullable> VersionedNullables { get; set; } // VersionedNullable
        DbSet<view_with_multiple_period> view_with_multiple_periods { get; set; } // view.with.multiple.periods
        DbSet<viewwithspace> viewwithspaces { get; set; } // view with space
        DbSet<WVN_Article> WVN_Articles { get; set; } // Articles
        DbSet<WVN_v_Article> WVN_v_Articles { get; set; } // v_Articles
        DbSet<Брендытовара> Брендытовара { get; set; } // Бренды товара

        int SaveChanges();
        int SaveChanges(bool acceptAllChangesOnSuccess);
        Task<int> SaveChangesAsync(CancellationToken cancellationToken = default(CancellationToken));
        Task<int> SaveChangesAsync(bool acceptAllChangesOnSuccess, CancellationToken cancellationToken = default(CancellationToken));
        DatabaseFacade Database { get; }
        DbSet<TEntity> Set<TEntity>() where TEntity : class;
        string ToString();

        EntityEntry Add(object entity);
        EntityEntry<TEntity> Add<TEntity>(TEntity entity) where TEntity : class;
        Task AddRangeAsync(params object[] entities);
        Task AddRangeAsync(IEnumerable<object> entities, CancellationToken cancellationToken = default);
        ValueTask<EntityEntry<TEntity>> AddAsync<TEntity>(TEntity entity, CancellationToken cancellationToken = default) where TEntity : class;
        ValueTask<EntityEntry> AddAsync(object entity, CancellationToken cancellationToken = default);
        void AddRange(IEnumerable<object> entities);
        void AddRange(params object[] entities);

        EntityEntry Attach(object entity);
        EntityEntry<TEntity> Attach<TEntity>(TEntity entity) where TEntity : class;
        void AttachRange(IEnumerable<object> entities);
        void AttachRange(params object[] entities);

        EntityEntry Entry(object entity);
        EntityEntry<TEntity> Entry<TEntity>(TEntity entity) where TEntity : class;

        TEntity Find<TEntity>(params object[] keyValues) where TEntity : class;
        ValueTask<TEntity> FindAsync<TEntity>(object[] keyValues, CancellationToken cancellationToken) where TEntity : class;
        ValueTask<TEntity> FindAsync<TEntity>(params object[] keyValues) where TEntity : class;
        ValueTask<object> FindAsync(Type entityType, object[] keyValues, CancellationToken cancellationToken);
        ValueTask<object> FindAsync(Type entityType, params object[] keyValues);
        object Find(Type entityType, params object[] keyValues);

        EntityEntry Remove(object entity);
        EntityEntry<TEntity> Remove<TEntity>(TEntity entity) where TEntity : class;
        void RemoveRange(IEnumerable<object> entities);
        void RemoveRange(params object[] entities);

        EntityEntry Update(object entity);
        EntityEntry<TEntity> Update<TEntity>(TEntity entity) where TEntity : class;
        void UpdateRange(IEnumerable<object> entities);
        void UpdateRange(params object[] entities);

        IQueryable<TResult> FromExpression<TResult> (Expression<Func<IQueryable<TResult>>> expression);

        // Stored Procedures
        int AddTwoValues(int? a, int? b);
        Task<int> AddTwoValuesAsync(int? a, int? b, CancellationToken cancellationToken = default(CancellationToken));

        int AddTwoValuesWithResult(int? a, int? b, out int? result, out int? result2);
        // AddTwoValuesWithResultAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        int Alpha_Overclock(DateTime? parameter);
        Task<int> Alpha_OverclockAsync(DateTime? parameter, CancellationToken cancellationToken = default(CancellationToken));

        int App_usp_CMTUserFSRUpdate(int? userId, int? fsrId, out int? ufsrId);
        // App_usp_CMTUserFSRUpdateAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        List<aSimpleExampleReturnModel> aSimpleExample();
        List<aSimpleExampleReturnModel> aSimpleExample(out int procResult);
        Task<List<aSimpleExampleReturnModel>> aSimpleExampleAsync(CancellationToken cancellationToken = default(CancellationToken));

        int Beta_Overclock(DateTime? parameter);
        Task<int> Beta_OverclockAsync(DateTime? parameter, CancellationToken cancellationToken = default(CancellationToken));

        // C182_test2ReturnModel C182_test2(int? flag); Cannot be created as EF Core does not yet support stored procedures with multiple result sets.
        // Task<C182_test2ReturnModel> C182_test2Async(int? flag); Cannot be created as EF Core does not yet support stored procedures with multiple result sets.

        List<CheckIfApplicationIsCompleteReturnModel> CheckIfApplicationIsComplete(int? applicationId, out bool? isApplicationComplete);
        List<CheckIfApplicationIsCompleteReturnModel> CheckIfApplicationIsComplete(int? applicationId, out bool? isApplicationComplete, out int procResult);
        // CheckIfApplicationIsCompleteAsync() cannot be created due to having out parameters, or is relying on the procedure result (List<CheckIfApplicationIsCompleteReturnModel>)

        List<ColourPivotReturnModel> ColourPivot();
        List<ColourPivotReturnModel> ColourPivot(out int procResult);
        Task<List<ColourPivotReturnModel>> ColourPivotAsync(CancellationToken cancellationToken = default(CancellationToken));

        List<ColumnNameAndTypesProcReturnModel> ColumnNameAndTypesProc();
        List<ColumnNameAndTypesProcReturnModel> ColumnNameAndTypesProc(out int procResult);
        Task<List<ColumnNameAndTypesProcReturnModel>> ColumnNameAndTypesProcAsync(CancellationToken cancellationToken = default(CancellationToken));

        int ConvertToString(int? someValue, out string someString);
        // ConvertToStringAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        List<dbo_proc_data_from_ffrsReturnModel> dbo_proc_data_from_ffrs(int? maxId);
        List<dbo_proc_data_from_ffrsReturnModel> dbo_proc_data_from_ffrs(int? maxId, out int procResult);
        Task<List<dbo_proc_data_from_ffrsReturnModel>> dbo_proc_data_from_ffrsAsync(int? maxId, CancellationToken cancellationToken = default(CancellationToken));

        List<dbo_proc_data_from_ffrs_and_dboReturnModel> dbo_proc_data_from_ffrs_and_dbo();
        List<dbo_proc_data_from_ffrs_and_dboReturnModel> dbo_proc_data_from_ffrs_and_dbo(out int procResult);
        Task<List<dbo_proc_data_from_ffrs_and_dboReturnModel>> dbo_proc_data_from_ffrs_and_dboAsync(CancellationToken cancellationToken = default(CancellationToken));

        List<DSOpeProcReturnModel> DSOpeProc();
        List<DSOpeProcReturnModel> DSOpeProc(out int procResult);
        Task<List<DSOpeProcReturnModel>> DSOpeProcAsync(CancellationToken cancellationToken = default(CancellationToken));

        List<FFRS_cv_dataReturnModel> FFRS_cv_data(int? maxId);
        List<FFRS_cv_dataReturnModel> FFRS_cv_data(int? maxId, out int procResult);
        Task<List<FFRS_cv_dataReturnModel>> FFRS_cv_dataAsync(int? maxId, CancellationToken cancellationToken = default(CancellationToken));

        List<FFRS_data_from_dboReturnModel> FFRS_data_from_dbo();
        List<FFRS_data_from_dboReturnModel> FFRS_data_from_dbo(out int procResult);
        Task<List<FFRS_data_from_dboReturnModel>> FFRS_data_from_dboAsync(CancellationToken cancellationToken = default(CancellationToken));

        List<FFRS_data_from_dbo_and_ffrsReturnModel> FFRS_data_from_dbo_and_ffrs();
        List<FFRS_data_from_dbo_and_ffrsReturnModel> FFRS_data_from_dbo_and_ffrs(out int procResult);
        Task<List<FFRS_data_from_dbo_and_ffrsReturnModel>> FFRS_data_from_dbo_and_ffrsAsync(CancellationToken cancellationToken = default(CancellationToken));

        List<FkTest_HelloReturnModel> FkTest_Hello();
        List<FkTest_HelloReturnModel> FkTest_Hello(out int procResult);
        Task<List<FkTest_HelloReturnModel>> FkTest_HelloAsync(CancellationToken cancellationToken = default(CancellationToken));

        List<GetSmallDecimalTestReturnModel> GetSmallDecimalTest(int? maxId);
        List<GetSmallDecimalTestReturnModel> GetSmallDecimalTest(int? maxId, out int procResult);
        Task<List<GetSmallDecimalTestReturnModel>> GetSmallDecimalTestAsync(int? maxId, CancellationToken cancellationToken = default(CancellationToken));

        int InsertRecord(string data, out int? insertedId);
        // InsertRecordAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        int InsertRecordThree(string data, out int? insertedId, int? someId, out int? anotherInsertedId);
        // InsertRecordThreeAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        int InsertRecordTwo(string data, out int? insertedId, out int? anotherInsertedId);
        // InsertRecordTwoAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        int MinTripSequenceStart(out DateTime? minTripSequenceStartParam);
        // MinTripSequenceStartAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        int MinTripSequenceStartNull(out DateTime? minTripSequenceStartParam);
        // MinTripSequenceStartNullAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        int MultipleReturnColumnsFromTempTable();
        Task<int> MultipleReturnColumnsFromTempTableAsync(CancellationToken cancellationToken = default(CancellationToken));

        int NvarcharTest(string maxOutputParam, string normalOutputParam);
        Task<int> NvarcharTestAsync(string maxOutputParam, string normalOutputParam, CancellationToken cancellationToken = default(CancellationToken));

        int Omega_Overclock(DateTime? parameter);
        Task<int> Omega_OverclockAsync(DateTime? parameter, CancellationToken cancellationToken = default(CancellationToken));

        int proc_TestDecimalOutput(out decimal? perfectNumber);
        // proc_TestDecimalOutputAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        int proc_TestDecimalOutputV2(out decimal? perfectNumber);
        // proc_TestDecimalOutputV2Async() cannot be created due to having out parameters, or is relying on the procedure result (int)

        int proc_TestDecimalOutputV3Default(out decimal? perfectNumber);
        // proc_TestDecimalOutputV3DefaultAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        List<SpatialTypesNoParamsReturnModel> SpatialTypesNoParams();
        List<SpatialTypesNoParamsReturnModel> SpatialTypesNoParams(out int procResult);
        Task<List<SpatialTypesNoParamsReturnModel>> SpatialTypesNoParamsAsync(CancellationToken cancellationToken = default(CancellationToken));

        List<SpatialTypesWithParamsReturnModel> SpatialTypesWithParams(NetTopologySuite.Geometries.Geometry geometry, NetTopologySuite.Geometries.Point geography);
        List<SpatialTypesWithParamsReturnModel> SpatialTypesWithParams(NetTopologySuite.Geometries.Geometry geometry, NetTopologySuite.Geometries.Point geography, out int procResult);
        Task<List<SpatialTypesWithParamsReturnModel>> SpatialTypesWithParamsAsync(NetTopologySuite.Geometries.Geometry geometry, NetTopologySuite.Geometries.Point geography, CancellationToken cancellationToken = default(CancellationToken));

        List<stp_multiple_identical_resultsReturnModel> stp_multiple_identical_results(int? someVar);
        List<stp_multiple_identical_resultsReturnModel> stp_multiple_identical_results(int? someVar, out int procResult);
        Task<List<stp_multiple_identical_resultsReturnModel>> stp_multiple_identical_resultsAsync(int? someVar, CancellationToken cancellationToken = default(CancellationToken));

        // stp_multiple_multiple_results_with_paramsReturnModel stp_multiple_multiple_results_with_params(int? firstval, int? secondval, int? thirdval); Cannot be created as EF Core does not yet support stored procedures with multiple result sets.
        // Task<stp_multiple_multiple_results_with_paramsReturnModel> stp_multiple_multiple_results_with_paramsAsync(int? firstval, int? secondval, int? thirdval); Cannot be created as EF Core does not yet support stored procedures with multiple result sets.

        // stp_multiple_resultsReturnModel stp_multiple_results(); Cannot be created as EF Core does not yet support stored procedures with multiple result sets.
        // Task<stp_multiple_resultsReturnModel> stp_multiple_resultsAsync(); Cannot be created as EF Core does not yet support stored procedures with multiple result sets.

        // stp_multiple_results_with_paramsReturnModel stp_multiple_results_with_params(int? firstval, int? secondval); Cannot be created as EF Core does not yet support stored procedures with multiple result sets.
        // Task<stp_multiple_results_with_paramsReturnModel> stp_multiple_results_with_paramsAsync(int? firstval, int? secondval); Cannot be created as EF Core does not yet support stored procedures with multiple result sets.

        List<stp_no_params_testReturnModel> stp_no_params_test();
        List<stp_no_params_testReturnModel> stp_no_params_test(out int procResult);
        Task<List<stp_no_params_testReturnModel>> stp_no_params_testAsync(CancellationToken cancellationToken = default(CancellationToken));

        int stp_no_return_fields();
        Task<int> stp_no_return_fieldsAsync(CancellationToken cancellationToken = default(CancellationToken));

        List<stp_nullable_params_testReturnModel> stp_nullable_params_test(int? aval, int? bval);
        List<stp_nullable_params_testReturnModel> stp_nullable_params_test(int? aval, int? bval, out int procResult);
        Task<List<stp_nullable_params_testReturnModel>> stp_nullable_params_testAsync(int? aval, int? bval, CancellationToken cancellationToken = default(CancellationToken));

        List<stp_testReturnModel> stp_test(string strDateFROM, string strDateTo, out bool? retBool);
        List<stp_testReturnModel> stp_test(string strDateFROM, string strDateTo, out bool? retBool, out int procResult);
        // stp_testAsync() cannot be created due to having out parameters, or is relying on the procedure result (List<stp_testReturnModel>)

        List<stp_test_underscore_testReturnModel> stp_test_underscore_test(string strDateFROM, string strdateto);
        List<stp_test_underscore_testReturnModel> stp_test_underscore_test(string strDateFROM, string strdateto, out int procResult);
        Task<List<stp_test_underscore_testReturnModel>> stp_test_underscore_testAsync(string strDateFROM, string strdateto, CancellationToken cancellationToken = default(CancellationToken));

        int StupidStoredProcedureParams(string reqType, short? dept, short? @class, short? item);
        Task<int> StupidStoredProcedureParamsAsync(string reqType, short? dept, short? @class, short? item, CancellationToken cancellationToken = default(CancellationToken));

        int StupidStoredProcedureParams2(string @override, short? @readonly, short? @class, short? @enum);
        Task<int> StupidStoredProcedureParams2Async(string @override, short? @readonly, short? @class, short? @enum, CancellationToken cancellationToken = default(CancellationToken));

        List<Synonyms_SimpleStoredProcReturnModel> Synonyms_SimpleStoredProc(int? inputInt);
        List<Synonyms_SimpleStoredProcReturnModel> Synonyms_SimpleStoredProc(int? inputInt, out int procResult);
        Task<List<Synonyms_SimpleStoredProcReturnModel>> Synonyms_SimpleStoredProcAsync(int? inputInt, CancellationToken cancellationToken = default(CancellationToken));

        List<TestReturnStringReturnModel> TestReturnString();
        List<TestReturnStringReturnModel> TestReturnString(out int procResult);
        Task<List<TestReturnStringReturnModel>> TestReturnStringAsync(CancellationToken cancellationToken = default(CancellationToken));

        int ThisHasMixedOutParameters(DateTime? foo, out int? firstOutParam, DateTime? bar, out int? secondOutParam, DateTime? baz);
        // ThisHasMixedOutParametersAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        int UserDefinedTypeSampleStoredProc(int? a, DataTable type, int? b);
        Task<int> UserDefinedTypeSampleStoredProcAsync(int? a, DataTable type, int? b, CancellationToken cancellationToken = default(CancellationToken));

        List<XmlDataV1ReturnModel> XmlDataV1();
        List<XmlDataV1ReturnModel> XmlDataV1(out int procResult);
        Task<List<XmlDataV1ReturnModel>> XmlDataV1Async(CancellationToken cancellationToken = default(CancellationToken));

        int XmlDataV2();
        Task<int> XmlDataV2Async(CancellationToken cancellationToken = default(CancellationToken));


        // Table Valued Functions
        IQueryable<C182_test1ReturnModel> C182_test1(int? test); // dbo.182_test1
        IQueryable<CsvToIntReturnModel> CsvToInt(string array, string array2); // dbo.CsvToInt
        IQueryable<CustomSchema_CsvToIntWithSchemaReturnModel> CustomSchema_CsvToIntWithSchema(string array, string array2); // CustomSchema.CsvToIntWithSchema
        IQueryable<FFRS_CsvToInt2ReturnModel> FFRS_CsvToInt2(string array, string array2); // FFRS.CsvToInt2

        // Scalar Valued Functions
        decimal udfNetSale(int? quantity, decimal? list_price, decimal? discount); // dbo.udfNetSale
    }

    #endregion

    #region Database context

    public class V6_Efrpg_Test_Db_Context : DbContext, IV6_Efrpg_Test_Db_Context
    {
        public V6_Efrpg_Test_Db_Context()
        {
        }

        public V6_Efrpg_Test_Db_Context(DbContextOptions<V6_Efrpg_Test_Db_Context> options)
            : base(options)
        {
        }

        public DbSet<A> A { get; set; } // A
        public DbSet<AAREF> AAREFs { get; set; } // AAREF
        public DbSet<AB_OrderLinesAB> AB_OrderLinesABs { get; set; } // AB_OrderLinesAB_
        public DbSet<AB_OrdersAB> AB_OrdersABs { get; set; } // AB_OrdersAB_
        public DbSet<AllColumnsNull> AllColumnsNulls { get; set; } // AllColumnsNull
        public DbSet<Alpha_Harish3485> Alpha_Harish3485 { get; set; } // Harish3485
        public DbSet<Alpha_workflow> Alpha_workflows { get; set; } // workflow
        public DbSet<alpha_workflow_synonym> alpha_workflow_synonyms { get; set; } // alpha_workflow_synonym
        public DbSet<App_UserFacilityServiceRole> App_UserFacilityServiceRoles { get; set; } // UserFacilityServiceRole
        public DbSet<AppUser> AppUsers { get; set; } // AppUser
        public DbSet<Attendee> Attendees { get; set; } // Attendee
        public DbSet<BatchTest> BatchTests { get; set; } // BatchTest
        public DbSet<Beta_Harish3485> Beta_Harish3485 { get; set; } // Harish3485
        public DbSet<Beta_ToAlpha> Beta_ToAlphas { get; set; } // ToAlpha
        public DbSet<Beta_workflow> Beta_workflows { get; set; } // workflow
        public DbSet<BITFIDDLERALLCAP> BITFIDDLERALLCAPs { get; set; } // BITFIDDLERALLCAPS
        public DbSet<BitFiddlerCATEGORy> BitFiddlerCATEGORies { get; set; } // BitFiddlerCATEGORIES
        public DbSet<BitFiddlerCURRENCy> BitFiddlerCURRENCies { get; set; } // BitFiddlerCURRENCIES
        public DbSet<Blah> Blahs { get; set; } // Blah
        public DbSet<BlahBlahLink_v2> BlahBlahLink_v2 { get; set; } // BlahBlahLink_v2
        public DbSet<Blarg> Blargs { get; set; } // Blarg
        public DbSet<Burak1> Burak1 { get; set; } // Burak1
        public DbSet<Burak2> Burak2 { get; set; } // Burak2
        public DbSet<CalculatedColumnNotNull> CalculatedColumnNotNulls { get; set; } // CalculatedColumnNotNull
        public DbSet<Car> Cars { get; set; } // Car
        public DbSet<ClientCreationState> ClientCreationStates { get; set; } // ClientCreationState
        public DbSet<CMS_File> CMS_Files { get; set; } // CMS_File
        public DbSet<CMS_Tag> CMS_Tags { get; set; } // CMS_Tag
        public DbSet<CODE_MeetingTopicDetail> CODE_MeetingTopicDetails { get; set; } // CODE_MeetingTopicDetails
        public DbSet<CODE_PARAM_MeetingTopicDetailSource> CODE_PARAM_MeetingTopicDetailSources { get; set; } // CODE_PARAM_MeetingTopicDetailSource
        public DbSet<CodeObject> CodeObjects { get; set; } // CodeObject
        public DbSet<Colour> Colours { get; set; } // Colour
        public DbSet<ColumnNameAndType> ColumnNameAndTypes { get; set; } // ColumnNameAndTypes
        public DbSet<ComplexView> ComplexViews { get; set; } // ComplexView
        public DbSet<Country> Countries { get; set; } // Country
        public DbSet<cross_database_synonym> cross_database_synonyms { get; set; } // cross_database_synonym
        public DbSet<DateTimeDefaultTest> DateTimeDefaultTests { get; set; } // DateTimeDefaultTest
        public DbSet<dcg_rov_ColumnDefinition> dcg_rov_ColumnDefinitions { get; set; } // rov_ColumnDefinitions
        public DbSet<DefaultCheckForNull> DefaultCheckForNulls { get; set; } // DefaultCheckForNull
        public DbSet<DSOpe> DSOpes { get; set; } // DSOpe
        public DbSet<EnumsWithStringAsValue> EnumsWithStringAsValues { get; set; } // EnumsWithStringAsValue
        public DbSet<EnumTest_DaysOfWeek> EnumTest_DaysOfWeeks { get; set; } // DaysOfWeek
        public DbSet<EnumTest_OpenDay> EnumTest_OpenDays { get; set; } // OpenDays
        public DbSet<EnumWithDefaultValue> EnumWithDefaultValues { get; set; } // EnumWithDefaultValue
        public DbSet<EventProcessor> EventProcessors { get; set; } // EventProcessor
        public DbSet<EventProcessorEventFilter> EventProcessorEventFilters { get; set; } // EventProcessorEventFilter
        public DbSet<FFRS_CV> FFRS_CVs { get; set; } // CV
        public DbSet<FinancialInstitutionOffice> FinancialInstitutionOffices { get; set; } // FinancialInstitutionOffice
        public DbSet<FkTest_SmallDecimalTestAttribute> FkTest_SmallDecimalTestAttributes { get; set; } // SmallDecimalTestAttribute
        public DbSet<footer> footers { get; set; } // footer
        public DbSet<ForeignKeyIsNotEnforced> ForeignKeyIsNotEnforceds { get; set; } // ForeignKeyIsNotEnforced
        public DbSet<ForeignKeyIsNotEnforcedItem> ForeignKeyIsNotEnforcedItems { get; set; } // ForeignKeyIsNotEnforcedItem
        public DbSet<HasPrincipalKeyTestChild> HasPrincipalKeyTestChilds { get; set; } // HasPrincipalKeyTestChild
        public DbSet<HasPrincipalKeyTestParent> HasPrincipalKeyTestParents { get; set; } // HasPrincipalKeyTestParent
        public DbSet<header> headers { get; set; } // header
        public DbSet<hierarchy_test> hierarchy_tests { get; set; } // hierarchy_test
        public DbSet<InflectorData> InflectorData { get; set; } // InflectorData
        public DbSet<InflectorStatus> InflectorStatus { get; set; } // InflectorStatus
        public DbSet<InflectorTo> InflectorTo { get; set; } // InflectorTo
        public DbSet<Issue47_Role> Issue47_Roles { get; set; } // Role
        public DbSet<Issue47_User> Issue47_Users { get; set; } // Users
        public DbSet<Issue47_UserRole> Issue47_UserRoles { get; set; } // UserRoles
        public DbSet<MultipleKey> MultipleKeys { get; set; } // MultipleKeys
        public DbSet<OneEightSix_Issue> OneEightSix_Issues { get; set; } // Issue
        public DbSet<OneEightSix_UploadedFile> OneEightSix_UploadedFiles { get; set; } // UploadedFile
        public DbSet<Period_Table> Period_Tables { get; set; } // Period.Table
        public DbSet<PeriodTestTable> PeriodTestTables { get; set; } // PeriodTestTable
        public DbSet<Person> People { get; set; } // Person
        public DbSet<PersonPost> PersonPosts { get; set; } // PersonPosts
        public DbSet<pk_ordinal_test> pk_ordinal_tests { get; set; } // pk_ordinal_test
        public DbSet<PropertyTypesToAdd> PropertyTypesToAdds { get; set; } // PropertyTypesToAdd
        public DbSet<SequenceTest> SequenceTests { get; set; } // SequenceTest
        public DbSet<SequenceTestPartTwo> SequenceTestPartTwoes { get; set; } // SequenceTestPartTwo
        public DbSet<SmallDecimalTest> SmallDecimalTests { get; set; } // SmallDecimalTest
        public DbSet<SmallDecimalTestView> SmallDecimalTestViews { get; set; } // SmallDecimalTestView
        public DbSet<Stafford_Boo> Stafford_Boos { get; set; } // Boo
        public DbSet<Stafford_ComputedColumn> Stafford_ComputedColumns { get; set; } // ComputedColumns
        public DbSet<Stafford_Foo> Stafford_Foos { get; set; } // Foo
        public DbSet<Synonyms_Child> Synonyms_Children { get; set; } // Child
        public DbSet<Synonyms_Parent> Synonyms_Parents { get; set; } // Parent
        public DbSet<table_with_multiple_period> table_with_multiple_periods { get; set; } // table.with.multiple.periods
        public DbSet<TableA> TableAs { get; set; } // TableA
        public DbSet<TableB> TableBs { get; set; } // TableB
        public DbSet<tablewithduplicatecolumnname> tablewithduplicatecolumnnames { get; set; } // table with duplicate column names
        public DbSet<tablewithspace> tablewithspaces { get; set; } // table with space
        public DbSet<tablewithspaceandincolumn> tablewithspaceandincolumns { get; set; } // table with space and in columns
        public DbSet<TableWithSpaceInColumnOnly> TableWithSpaceInColumnOnlies { get; set; } // TableWithSpaceInColumnOnly
        public DbSet<TadeuszSobol> TadeuszSobols { get; set; } // TadeuszSobol
        public DbSet<Task1> Task1 { get; set; } // Task
        public DbSet<tblOrder> tblOrders { get; set; } // tblOrders
        public DbSet<tblOrderError> tblOrderErrors { get; set; } // tblOrderErrors
        public DbSet<tblOrderErrorsAB> tblOrderErrorsABs { get; set; } // tblOrderErrorsAB_
        public DbSet<tblOrderLine> tblOrderLines { get; set; } // tblOrderLines
        public DbSet<TemporalDepartment> TemporalDepartments { get; set; } // TemporalDepartment
        public DbSet<TemporalDepartmentHistory> TemporalDepartmentHistories { get; set; } // TemporalDepartmentHistory
        public DbSet<ThisIsMemoryOptimised> ThisIsMemoryOptimiseds { get; set; } // ThisIsMemoryOptimised
        public DbSet<Ticket> Tickets { get; set; } // Ticket
        public DbSet<TimestampNotNull> TimestampNotNulls { get; set; } // TimestampNotNull
        public DbSet<TimestampNullable> TimestampNullables { get; set; } // TimestampNullable
        public DbSet<Token> Tokens { get; set; } // Token
        public DbSet<User> Users { get; set; } // User
        public DbSet<User_Document> User_Documents { get; set; } // User_Document
        public DbSet<User309> User309 { get; set; } // User309
        public DbSet<Versioned> Versioneds { get; set; } // Versioned
        public DbSet<VersionedNullable> VersionedNullables { get; set; } // VersionedNullable
        public DbSet<view_with_multiple_period> view_with_multiple_periods { get; set; } // view.with.multiple.periods
        public DbSet<viewwithspace> viewwithspaces { get; set; } // view with space
        public DbSet<WVN_Article> WVN_Articles { get; set; } // Articles
        public DbSet<WVN_v_Article> WVN_v_Articles { get; set; } // v_Articles
        public DbSet<Брендытовара> Брендытовара { get; set; } // Бренды товара

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
                optionsBuilder.UseSqlServer(@"Data Source=(local);Initial Catalog=EfrpgTest;Integrated Security=True;Application Name=EntityFramework Reverse POCO Generator", x => x.UseNetTopologySuite().UseHierarchyId());
                optionsBuilder.UseLazyLoadingProxies();
            }
        }

        public bool IsSqlParameterNull(SqlParameter param)
        {
            var sqlValue = param.SqlValue;
            var nullableValue = sqlValue as INullable;
            if (nullableValue != null)
                return nullableValue.IsNull;
            return (sqlValue == null || sqlValue == DBNull.Value);
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);

            modelBuilder.HasSequence<int>("CountBy1", "dbo").StartsAt(1).IncrementsBy(1).IsCyclic(false);
            modelBuilder.HasSequence<long>("CountByBigInt", "dbo").StartsAt(22).IncrementsBy(234).IsCyclic(true).HasMin(1).HasMax(9876543);
            modelBuilder.HasSequence<decimal>("CountByDecimal", "dbo").StartsAt(593).IncrementsBy(82).IsCyclic(false).HasMin(5).HasMax(777777);
            modelBuilder.HasSequence<decimal>("CountByNumeric", "dbo").StartsAt(789).IncrementsBy(987).IsCyclic(false).HasMin(345).HasMax(999999999999999999);
            modelBuilder.HasSequence<short>("CountBySmallInt", "dbo").StartsAt(44).IncrementsBy(456).IsCyclic(true);
            modelBuilder.HasSequence<byte>("CountByTinyInt", "dbo").StartsAt(33).IncrementsBy(3).IsCyclic(false);

            modelBuilder.ApplyConfiguration(new AConfiguration());
            modelBuilder.ApplyConfiguration(new AAREFConfiguration());
            modelBuilder.ApplyConfiguration(new AB_OrderLinesABConfiguration());
            modelBuilder.ApplyConfiguration(new AB_OrdersABConfiguration());
            modelBuilder.ApplyConfiguration(new AllColumnsNullConfiguration());
            modelBuilder.ApplyConfiguration(new Alpha_Harish3485Configuration());
            modelBuilder.ApplyConfiguration(new Alpha_workflowConfiguration());
            modelBuilder.ApplyConfiguration(new alpha_workflow_synonymConfiguration());
            modelBuilder.ApplyConfiguration(new App_UserFacilityServiceRoleConfiguration());
            modelBuilder.ApplyConfiguration(new AppUserConfiguration());
            modelBuilder.ApplyConfiguration(new AttendeeConfiguration());
            modelBuilder.ApplyConfiguration(new BatchTestConfiguration());
            modelBuilder.ApplyConfiguration(new Beta_Harish3485Configuration());
            modelBuilder.ApplyConfiguration(new Beta_ToAlphaConfiguration());
            modelBuilder.ApplyConfiguration(new Beta_workflowConfiguration());
            modelBuilder.ApplyConfiguration(new BITFIDDLERALLCAPConfiguration());
            modelBuilder.ApplyConfiguration(new BitFiddlerCATEGORyConfiguration());
            modelBuilder.ApplyConfiguration(new BitFiddlerCURRENCyConfiguration());
            modelBuilder.ApplyConfiguration(new BlahConfiguration());
            modelBuilder.ApplyConfiguration(new BlahBlahLink_v2Configuration());
            modelBuilder.ApplyConfiguration(new BlargConfiguration());
            modelBuilder.ApplyConfiguration(new Burak1Configuration());
            modelBuilder.ApplyConfiguration(new Burak2Configuration());
            modelBuilder.ApplyConfiguration(new CalculatedColumnNotNullConfiguration());
            modelBuilder.ApplyConfiguration(new CarConfiguration());
            modelBuilder.ApplyConfiguration(new ClientCreationStateConfiguration());
            modelBuilder.ApplyConfiguration(new CMS_FileConfiguration());
            modelBuilder.ApplyConfiguration(new CMS_TagConfiguration());
            modelBuilder.ApplyConfiguration(new CODE_MeetingTopicDetailConfiguration());
            modelBuilder.ApplyConfiguration(new CODE_PARAM_MeetingTopicDetailSourceConfiguration());
            modelBuilder.ApplyConfiguration(new CodeObjectConfiguration());
            modelBuilder.ApplyConfiguration(new ColourConfiguration());
            modelBuilder.ApplyConfiguration(new ColumnNameAndTypeConfiguration());
            modelBuilder.ApplyConfiguration(new ComplexViewConfiguration());
            modelBuilder.ApplyConfiguration(new CountryConfiguration());
            modelBuilder.ApplyConfiguration(new cross_database_synonymConfiguration());
            modelBuilder.ApplyConfiguration(new DateTimeDefaultTestConfiguration());
            modelBuilder.ApplyConfiguration(new dcg_rov_ColumnDefinitionConfiguration());
            modelBuilder.ApplyConfiguration(new DefaultCheckForNullConfiguration());
            modelBuilder.ApplyConfiguration(new DSOpeConfiguration());
            modelBuilder.ApplyConfiguration(new EnumsWithStringAsValueConfiguration());
            modelBuilder.ApplyConfiguration(new EnumTest_DaysOfWeekConfiguration());
            modelBuilder.ApplyConfiguration(new EnumTest_OpenDayConfiguration());
            modelBuilder.ApplyConfiguration(new EnumWithDefaultValueConfiguration());
            modelBuilder.ApplyConfiguration(new EventProcessorConfiguration());
            modelBuilder.ApplyConfiguration(new EventProcessorEventFilterConfiguration());
            modelBuilder.ApplyConfiguration(new FFRS_CVConfiguration());
            modelBuilder.ApplyConfiguration(new FinancialInstitutionOfficeConfiguration());
            modelBuilder.ApplyConfiguration(new FkTest_SmallDecimalTestAttributeConfiguration());
            modelBuilder.ApplyConfiguration(new footerConfiguration());
            modelBuilder.ApplyConfiguration(new ForeignKeyIsNotEnforcedConfiguration());
            modelBuilder.ApplyConfiguration(new ForeignKeyIsNotEnforcedItemConfiguration());
            modelBuilder.ApplyConfiguration(new HasPrincipalKeyTestChildConfiguration());
            modelBuilder.ApplyConfiguration(new HasPrincipalKeyTestParentConfiguration());
            modelBuilder.ApplyConfiguration(new headerConfiguration());
            modelBuilder.ApplyConfiguration(new hierarchy_testConfiguration());
            modelBuilder.ApplyConfiguration(new InflectorDataConfiguration());
            modelBuilder.ApplyConfiguration(new InflectorStatusConfiguration());
            modelBuilder.ApplyConfiguration(new InflectorToConfiguration());
            modelBuilder.ApplyConfiguration(new Issue47_RoleConfiguration());
            modelBuilder.ApplyConfiguration(new Issue47_UserConfiguration());
            modelBuilder.ApplyConfiguration(new Issue47_UserRoleConfiguration());
            modelBuilder.ApplyConfiguration(new MultipleKeyConfiguration());
            modelBuilder.ApplyConfiguration(new OneEightSix_IssueConfiguration());
            modelBuilder.ApplyConfiguration(new OneEightSix_UploadedFileConfiguration());
            modelBuilder.ApplyConfiguration(new Period_TableConfiguration());
            modelBuilder.ApplyConfiguration(new PeriodTestTableConfiguration());
            modelBuilder.ApplyConfiguration(new PersonConfiguration());
            modelBuilder.ApplyConfiguration(new PersonPostConfiguration());
            modelBuilder.ApplyConfiguration(new pk_ordinal_testConfiguration());
            modelBuilder.ApplyConfiguration(new PropertyTypesToAddConfiguration());
            modelBuilder.ApplyConfiguration(new SequenceTestConfiguration());
            modelBuilder.ApplyConfiguration(new SequenceTestPartTwoConfiguration());
            modelBuilder.ApplyConfiguration(new SmallDecimalTestConfiguration());
            modelBuilder.ApplyConfiguration(new SmallDecimalTestViewConfiguration());
            modelBuilder.ApplyConfiguration(new Stafford_BooConfiguration());
            modelBuilder.ApplyConfiguration(new Stafford_ComputedColumnConfiguration());
            modelBuilder.ApplyConfiguration(new Stafford_FooConfiguration());
            modelBuilder.ApplyConfiguration(new Synonyms_ChildConfiguration());
            modelBuilder.ApplyConfiguration(new Synonyms_ParentConfiguration());
            modelBuilder.ApplyConfiguration(new table_with_multiple_periodConfiguration());
            modelBuilder.ApplyConfiguration(new TableAConfiguration());
            modelBuilder.ApplyConfiguration(new TableBConfiguration());
            modelBuilder.ApplyConfiguration(new tablewithduplicatecolumnnameConfiguration());
            modelBuilder.ApplyConfiguration(new tablewithspaceConfiguration());
            modelBuilder.ApplyConfiguration(new tablewithspaceandincolumnConfiguration());
            modelBuilder.ApplyConfiguration(new TableWithSpaceInColumnOnlyConfiguration());
            modelBuilder.ApplyConfiguration(new TadeuszSobolConfiguration());
            modelBuilder.ApplyConfiguration(new Task1Configuration());
            modelBuilder.ApplyConfiguration(new tblOrderConfiguration());
            modelBuilder.ApplyConfiguration(new tblOrderErrorConfiguration());
            modelBuilder.ApplyConfiguration(new tblOrderErrorsABConfiguration());
            modelBuilder.ApplyConfiguration(new tblOrderLineConfiguration());
            modelBuilder.ApplyConfiguration(new TemporalDepartmentConfiguration());
            modelBuilder.ApplyConfiguration(new TemporalDepartmentHistoryConfiguration());
            modelBuilder.ApplyConfiguration(new ThisIsMemoryOptimisedConfiguration());
            modelBuilder.ApplyConfiguration(new TicketConfiguration());
            modelBuilder.ApplyConfiguration(new TimestampNotNullConfiguration());
            modelBuilder.ApplyConfiguration(new TimestampNullableConfiguration());
            modelBuilder.ApplyConfiguration(new TokenConfiguration());
            modelBuilder.ApplyConfiguration(new UserConfiguration());
            modelBuilder.ApplyConfiguration(new User_DocumentConfiguration());
            modelBuilder.ApplyConfiguration(new User309Configuration());
            modelBuilder.ApplyConfiguration(new VersionedConfiguration());
            modelBuilder.ApplyConfiguration(new VersionedNullableConfiguration());
            modelBuilder.ApplyConfiguration(new view_with_multiple_periodConfiguration());
            modelBuilder.ApplyConfiguration(new viewwithspaceConfiguration());
            modelBuilder.ApplyConfiguration(new WVN_ArticleConfiguration());
            modelBuilder.ApplyConfiguration(new WVN_v_ArticleConfiguration());
            modelBuilder.ApplyConfiguration(new БрендытовараConfiguration());

            modelBuilder.Entity<ThisIsMemoryOptimised>().IsMemoryOptimized();

            modelBuilder.Entity<aSimpleExampleReturnModel>().HasNoKey();
            modelBuilder.Entity<CheckIfApplicationIsCompleteReturnModel>().HasNoKey();
            modelBuilder.Entity<ColourPivotReturnModel>().HasNoKey();
            modelBuilder.Entity<ColumnNameAndTypesProcReturnModel>().HasNoKey();
            modelBuilder.Entity<dbo_proc_data_from_ffrsReturnModel>().HasNoKey();
            modelBuilder.Entity<dbo_proc_data_from_ffrs_and_dboReturnModel>().HasNoKey();
            modelBuilder.Entity<DSOpeProcReturnModel>().HasNoKey();
            modelBuilder.Entity<FFRS_cv_dataReturnModel>().HasNoKey();
            modelBuilder.Entity<FFRS_data_from_dboReturnModel>().HasNoKey();
            modelBuilder.Entity<FFRS_data_from_dbo_and_ffrsReturnModel>().HasNoKey();
            modelBuilder.Entity<FkTest_HelloReturnModel>().HasNoKey();
            modelBuilder.Entity<GetSmallDecimalTestReturnModel>().HasNoKey();
            modelBuilder.Entity<SpatialTypesNoParamsReturnModel>().HasNoKey();
            modelBuilder.Entity<SpatialTypesWithParamsReturnModel>().HasNoKey();
            modelBuilder.Entity<stp_multiple_identical_resultsReturnModel>().HasNoKey();
            modelBuilder.Entity<stp_no_params_testReturnModel>().HasNoKey();
            modelBuilder.Entity<stp_nullable_params_testReturnModel>().HasNoKey();
            modelBuilder.Entity<stp_testReturnModel>().HasNoKey();
            modelBuilder.Entity<stp_test_underscore_testReturnModel>().HasNoKey();
            modelBuilder.Entity<Synonyms_SimpleStoredProcReturnModel>().HasNoKey();
            modelBuilder.Entity<TestReturnStringReturnModel>().HasNoKey();
            modelBuilder.Entity<XmlDataV1ReturnModel>().HasNoKey();

            // Table Valued Functions
            modelBuilder.Entity<C182_test1ReturnModel>().HasNoKey();
            modelBuilder.Entity<CsvToIntReturnModel>().HasNoKey();
            modelBuilder.Entity<CustomSchema_CsvToIntWithSchemaReturnModel>().HasNoKey();
            modelBuilder.Entity<FFRS_CsvToInt2ReturnModel>().HasNoKey();
        }


        // Stored Procedures
        public int AddTwoValues(int? a = null, int? b = null)
        {
            var aParam = new SqlParameter { ParameterName = "@a", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = a.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!a.HasValue)
                aParam.Value = DBNull.Value;

            var bParam = new SqlParameter { ParameterName = "@b", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = b.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!b.HasValue)
                bParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };

            Database.ExecuteSqlRaw("EXEC @procResult = [dbo].[AddTwoValues] @a, @b", aParam, bParam, procResultParam);

            return (int)procResultParam.Value;
        }

        public async Task<int> AddTwoValuesAsync(int? a = null, int? b = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            var aParam = new SqlParameter { ParameterName = "@a", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = a.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!a.HasValue)
                aParam.Value = DBNull.Value;

            var bParam = new SqlParameter { ParameterName = "@b", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = b.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!b.HasValue)
                bParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };

            await Database.ExecuteSqlRawAsync("EXEC @procResult = [dbo].[AddTwoValues] @a, @b",  new[] {aParam, bParam, procResultParam}, cancellationToken);

            return (int)procResultParam.Value;
        }

        public int AddTwoValuesWithResult(int? a, int? b, out int? result, out int? result2)
        {
            var aParam = new SqlParameter { ParameterName = "@a", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = a.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!a.HasValue)
                aParam.Value = DBNull.Value;

            var bParam = new SqlParameter { ParameterName = "@b", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = b.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!b.HasValue)
                bParam.Value = DBNull.Value;

            var resultParam = new SqlParameter { ParameterName = "@result", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output, Precision = 10, Scale = 0 };
            var result2Param = new SqlParameter { ParameterName = "@result2", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output, Precision = 10, Scale = 0 };
            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };

            Database.ExecuteSqlRaw("EXEC @procResult = [dbo].[AddTwoValuesWithResult] @a, @b, @result OUTPUT, @result2 OUTPUT", aParam, bParam, resultParam, result2Param, procResultParam);

            if (IsSqlParameterNull(resultParam))
                result = null;
            else
                result = (int) resultParam.Value;

            if (IsSqlParameterNull(result2Param))
                result2 = null;
            else
                result2 = (int) result2Param.Value;

            return (int)procResultParam.Value;
        }

        // AddTwoValuesWithResultAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public int Alpha_Overclock(DateTime? parameter = null)
        {
            var parameterParam = new SqlParameter { ParameterName = "@Parameter", SqlDbType = SqlDbType.DateTime, Direction = ParameterDirection.Input, Value = parameter.GetValueOrDefault() };
            if (!parameter.HasValue)
                parameterParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };

            Database.ExecuteSqlRaw("EXEC @procResult = [Alpha].[Overclock] @Parameter", parameterParam, procResultParam);

            return (int)procResultParam.Value;
        }

        public async Task<int> Alpha_OverclockAsync(DateTime? parameter = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            var parameterParam = new SqlParameter { ParameterName = "@Parameter", SqlDbType = SqlDbType.DateTime, Direction = ParameterDirection.Input, Value = parameter.GetValueOrDefault() };
            if (!parameter.HasValue)
                parameterParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };

            await Database.ExecuteSqlRawAsync("EXEC @procResult = [Alpha].[Overclock] @Parameter",  new[] {parameterParam, procResultParam}, cancellationToken);

            return (int)procResultParam.Value;
        }

        public int App_usp_CMTUserFSRUpdate(int? userId, int? fsrId, out int? ufsrId)
        {
            var userIdParam = new SqlParameter { ParameterName = "@userId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = userId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!userId.HasValue)
                userIdParam.Value = DBNull.Value;

            var fsrIdParam = new SqlParameter { ParameterName = "@fsrId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = fsrId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!fsrId.HasValue)
                fsrIdParam.Value = DBNull.Value;

            var ufsrIdParam = new SqlParameter { ParameterName = "@ufsrId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output, Precision = 10, Scale = 0 };
            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };

            Database.ExecuteSqlRaw("EXEC @procResult = [App].[usp_CMTUserFSRUpdate] @userId, @fsrId, @ufsrId OUTPUT", userIdParam, fsrIdParam, ufsrIdParam, procResultParam);

            if (IsSqlParameterNull(ufsrIdParam))
                ufsrId = null;
            else
                ufsrId = (int) ufsrIdParam.Value;

            return (int)procResultParam.Value;
        }

        // App_usp_CMTUserFSRUpdateAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public List<aSimpleExampleReturnModel> aSimpleExample()
        {
            int procResult;
            return aSimpleExample(out procResult);
        }

        public List<aSimpleExampleReturnModel> aSimpleExample(out int procResult)
        {
            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };
            const string sqlCommand = "EXEC @procResult = [dbo].[aSimpleExample]";
            var procResultData = Set<aSimpleExampleReturnModel>()
                .FromSqlRaw(sqlCommand, procResultParam)
                .ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async Task<List<aSimpleExampleReturnModel>> aSimpleExampleAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            const string sqlCommand = "EXEC [dbo].[aSimpleExample]";
            var procResultData = await Set<aSimpleExampleReturnModel>()
                .FromSqlRaw(sqlCommand)
                .ToListAsync(cancellationToken);

            return procResultData;
        }

        public int Beta_Overclock(DateTime? parameter = null)
        {
            var parameterParam = new SqlParameter { ParameterName = "@Parameter", SqlDbType = SqlDbType.DateTime, Direction = ParameterDirection.Input, Value = parameter.GetValueOrDefault() };
            if (!parameter.HasValue)
                parameterParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };

            Database.ExecuteSqlRaw("EXEC @procResult = [Beta].[Overclock] @Parameter", parameterParam, procResultParam);

            return (int)procResultParam.Value;
        }

        public async Task<int> Beta_OverclockAsync(DateTime? parameter = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            var parameterParam = new SqlParameter { ParameterName = "@Parameter", SqlDbType = SqlDbType.DateTime, Direction = ParameterDirection.Input, Value = parameter.GetValueOrDefault() };
            if (!parameter.HasValue)
                parameterParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };

            await Database.ExecuteSqlRawAsync("EXEC @procResult = [Beta].[Overclock] @Parameter",  new[] {parameterParam, procResultParam}, cancellationToken);

            return (int)procResultParam.Value;
        }

        // public C182_test2ReturnModel C182_test2(int? flag = null) Cannot be created as EF Core does not yet support stored procedures with multiple result sets.

        // public async Task<C182_test2ReturnModel> C182_test2Async(int? flag = null) Cannot be created as EF Core does not yet support stored procedures with multiple result sets.

        public List<CheckIfApplicationIsCompleteReturnModel> CheckIfApplicationIsComplete(int? applicationId, out bool? isApplicationComplete)
        {
            int procResult;
            return CheckIfApplicationIsComplete(applicationId, out isApplicationComplete, out procResult);
        }

        public List<CheckIfApplicationIsCompleteReturnModel> CheckIfApplicationIsComplete(int? applicationId, out bool? isApplicationComplete, out int procResult)
        {
            var applicationIdParam = new SqlParameter { ParameterName = "@ApplicationId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = applicationId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!applicationId.HasValue)
                applicationIdParam.Value = DBNull.Value;

            var isApplicationCompleteParam = new SqlParameter { ParameterName = "@IsApplicationComplete", SqlDbType = SqlDbType.Bit, Direction = ParameterDirection.Output };
            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };
            const string sqlCommand = "EXEC @procResult = [dbo].[CheckIfApplicationIsComplete] @ApplicationId, @IsApplicationComplete OUTPUT";
            var procResultData = Set<CheckIfApplicationIsCompleteReturnModel>()
                .FromSqlRaw(sqlCommand, applicationIdParam, isApplicationCompleteParam, procResultParam)
                .ToList();

            if (IsSqlParameterNull(isApplicationCompleteParam))
                isApplicationComplete = null;
            else
                isApplicationComplete = (bool) isApplicationCompleteParam.Value;

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        // CheckIfApplicationIsCompleteAsync() cannot be created due to having out parameters, or is relying on the procedure result (List<CheckIfApplicationIsCompleteReturnModel>)

        public List<ColourPivotReturnModel> ColourPivot()
        {
            int procResult;
            return ColourPivot(out procResult);
        }

        public List<ColourPivotReturnModel> ColourPivot(out int procResult)
        {
            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };
            const string sqlCommand = "EXEC @procResult = [dbo].[ColourPivot]";
            var procResultData = Set<ColourPivotReturnModel>()
                .FromSqlRaw(sqlCommand, procResultParam)
                .ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async Task<List<ColourPivotReturnModel>> ColourPivotAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            const string sqlCommand = "EXEC [dbo].[ColourPivot]";
            var procResultData = await Set<ColourPivotReturnModel>()
                .FromSqlRaw(sqlCommand)
                .ToListAsync(cancellationToken);

            return procResultData;
        }

        public List<ColumnNameAndTypesProcReturnModel> ColumnNameAndTypesProc()
        {
            int procResult;
            return ColumnNameAndTypesProc(out procResult);
        }

        public List<ColumnNameAndTypesProcReturnModel> ColumnNameAndTypesProc(out int procResult)
        {
            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };
            const string sqlCommand = "EXEC @procResult = [dbo].[ColumnNameAndTypesProc]";
            var procResultData = Set<ColumnNameAndTypesProcReturnModel>()
                .FromSqlRaw(sqlCommand, procResultParam)
                .ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async Task<List<ColumnNameAndTypesProcReturnModel>> ColumnNameAndTypesProcAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            const string sqlCommand = "EXEC [dbo].[ColumnNameAndTypesProc]";
            var procResultData = await Set<ColumnNameAndTypesProcReturnModel>()
                .FromSqlRaw(sqlCommand)
                .ToListAsync(cancellationToken);

            return procResultData;
        }

        public int ConvertToString(int? someValue, out string someString)
        {
            var someValueParam = new SqlParameter { ParameterName = "@someValue", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = someValue.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!someValue.HasValue)
                someValueParam.Value = DBNull.Value;

            var someStringParam = new SqlParameter { ParameterName = "@someString", SqlDbType = SqlDbType.VarChar, Direction = ParameterDirection.Output, Size = 20 };
            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };

            Database.ExecuteSqlRaw("EXEC @procResult = [dbo].[ConvertToString] @someValue, @someString OUTPUT", someValueParam, someStringParam, procResultParam);

            if (IsSqlParameterNull(someStringParam))
                someString = default(string);
            else
                someString = (string) someStringParam.Value;

            return (int)procResultParam.Value;
        }

        // ConvertToStringAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public List<dbo_proc_data_from_ffrsReturnModel> dbo_proc_data_from_ffrs(int? maxId = null)
        {
            int procResult;
            return dbo_proc_data_from_ffrs(maxId, out procResult);
        }

        public List<dbo_proc_data_from_ffrsReturnModel> dbo_proc_data_from_ffrs(int? maxId, out int procResult)
        {
            var maxIdParam = new SqlParameter { ParameterName = "@maxId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = maxId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!maxId.HasValue)
                maxIdParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };
            const string sqlCommand = "EXEC @procResult = [dbo].[dbo_proc_data_from_ffrs] @maxId";
            var procResultData = Set<dbo_proc_data_from_ffrsReturnModel>()
                .FromSqlRaw(sqlCommand, maxIdParam, procResultParam)
                .ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async Task<List<dbo_proc_data_from_ffrsReturnModel>> dbo_proc_data_from_ffrsAsync(int? maxId = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            var maxIdParam = new SqlParameter { ParameterName = "@maxId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = maxId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!maxId.HasValue)
                maxIdParam.Value = DBNull.Value;

            const string sqlCommand = "EXEC [dbo].[dbo_proc_data_from_ffrs] @maxId";
            var procResultData = await Set<dbo_proc_data_from_ffrsReturnModel>()
                .FromSqlRaw(sqlCommand, maxIdParam)
                .ToListAsync(cancellationToken);

            return procResultData;
        }

        public List<dbo_proc_data_from_ffrs_and_dboReturnModel> dbo_proc_data_from_ffrs_and_dbo()
        {
            int procResult;
            return dbo_proc_data_from_ffrs_and_dbo(out procResult);
        }

        public List<dbo_proc_data_from_ffrs_and_dboReturnModel> dbo_proc_data_from_ffrs_and_dbo(out int procResult)
        {
            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };
            const string sqlCommand = "EXEC @procResult = [dbo].[dbo_proc_data_from_ffrs_and_dbo]";
            var procResultData = Set<dbo_proc_data_from_ffrs_and_dboReturnModel>()
                .FromSqlRaw(sqlCommand, procResultParam)
                .ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async Task<List<dbo_proc_data_from_ffrs_and_dboReturnModel>> dbo_proc_data_from_ffrs_and_dboAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            const string sqlCommand = "EXEC [dbo].[dbo_proc_data_from_ffrs_and_dbo]";
            var procResultData = await Set<dbo_proc_data_from_ffrs_and_dboReturnModel>()
                .FromSqlRaw(sqlCommand)
                .ToListAsync(cancellationToken);

            return procResultData;
        }

        public List<DSOpeProcReturnModel> DSOpeProc()
        {
            int procResult;
            return DSOpeProc(out procResult);
        }

        public List<DSOpeProcReturnModel> DSOpeProc(out int procResult)
        {
            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };
            const string sqlCommand = "EXEC @procResult = [dbo].[DSOpeProc]";
            var procResultData = Set<DSOpeProcReturnModel>()
                .FromSqlRaw(sqlCommand, procResultParam)
                .ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async Task<List<DSOpeProcReturnModel>> DSOpeProcAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            const string sqlCommand = "EXEC [dbo].[DSOpeProc]";
            var procResultData = await Set<DSOpeProcReturnModel>()
                .FromSqlRaw(sqlCommand)
                .ToListAsync(cancellationToken);

            return procResultData;
        }

        public List<FFRS_cv_dataReturnModel> FFRS_cv_data(int? maxId = null)
        {
            int procResult;
            return FFRS_cv_data(maxId, out procResult);
        }

        public List<FFRS_cv_dataReturnModel> FFRS_cv_data(int? maxId, out int procResult)
        {
            var maxIdParam = new SqlParameter { ParameterName = "@maxId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = maxId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!maxId.HasValue)
                maxIdParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };
            const string sqlCommand = "EXEC @procResult = [FFRS].[cv_data] @maxId";
            var procResultData = Set<FFRS_cv_dataReturnModel>()
                .FromSqlRaw(sqlCommand, maxIdParam, procResultParam)
                .ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async Task<List<FFRS_cv_dataReturnModel>> FFRS_cv_dataAsync(int? maxId = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            var maxIdParam = new SqlParameter { ParameterName = "@maxId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = maxId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!maxId.HasValue)
                maxIdParam.Value = DBNull.Value;

            const string sqlCommand = "EXEC [FFRS].[cv_data] @maxId";
            var procResultData = await Set<FFRS_cv_dataReturnModel>()
                .FromSqlRaw(sqlCommand, maxIdParam)
                .ToListAsync(cancellationToken);

            return procResultData;
        }

        public List<FFRS_data_from_dboReturnModel> FFRS_data_from_dbo()
        {
            int procResult;
            return FFRS_data_from_dbo(out procResult);
        }

        public List<FFRS_data_from_dboReturnModel> FFRS_data_from_dbo(out int procResult)
        {
            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };
            const string sqlCommand = "EXEC @procResult = [FFRS].[data_from_dbo]";
            var procResultData = Set<FFRS_data_from_dboReturnModel>()
                .FromSqlRaw(sqlCommand, procResultParam)
                .ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async Task<List<FFRS_data_from_dboReturnModel>> FFRS_data_from_dboAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            const string sqlCommand = "EXEC [FFRS].[data_from_dbo]";
            var procResultData = await Set<FFRS_data_from_dboReturnModel>()
                .FromSqlRaw(sqlCommand)
                .ToListAsync(cancellationToken);

            return procResultData;
        }

        public List<FFRS_data_from_dbo_and_ffrsReturnModel> FFRS_data_from_dbo_and_ffrs()
        {
            int procResult;
            return FFRS_data_from_dbo_and_ffrs(out procResult);
        }

        public List<FFRS_data_from_dbo_and_ffrsReturnModel> FFRS_data_from_dbo_and_ffrs(out int procResult)
        {
            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };
            const string sqlCommand = "EXEC @procResult = [FFRS].[data_from_dbo_and_ffrs]";
            var procResultData = Set<FFRS_data_from_dbo_and_ffrsReturnModel>()
                .FromSqlRaw(sqlCommand, procResultParam)
                .ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async Task<List<FFRS_data_from_dbo_and_ffrsReturnModel>> FFRS_data_from_dbo_and_ffrsAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            const string sqlCommand = "EXEC [FFRS].[data_from_dbo_and_ffrs]";
            var procResultData = await Set<FFRS_data_from_dbo_and_ffrsReturnModel>()
                .FromSqlRaw(sqlCommand)
                .ToListAsync(cancellationToken);

            return procResultData;
        }

        public List<FkTest_HelloReturnModel> FkTest_Hello()
        {
            int procResult;
            return FkTest_Hello(out procResult);
        }

        public List<FkTest_HelloReturnModel> FkTest_Hello(out int procResult)
        {
            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };
            const string sqlCommand = "EXEC @procResult = [FkTest].[Hello]";
            var procResultData = Set<FkTest_HelloReturnModel>()
                .FromSqlRaw(sqlCommand, procResultParam)
                .ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async Task<List<FkTest_HelloReturnModel>> FkTest_HelloAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            const string sqlCommand = "EXEC [FkTest].[Hello]";
            var procResultData = await Set<FkTest_HelloReturnModel>()
                .FromSqlRaw(sqlCommand)
                .ToListAsync(cancellationToken);

            return procResultData;
        }

        public List<GetSmallDecimalTestReturnModel> GetSmallDecimalTest(int? maxId = null)
        {
            int procResult;
            return GetSmallDecimalTest(maxId, out procResult);
        }

        public List<GetSmallDecimalTestReturnModel> GetSmallDecimalTest(int? maxId, out int procResult)
        {
            var maxIdParam = new SqlParameter { ParameterName = "@maxId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = maxId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!maxId.HasValue)
                maxIdParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };
            const string sqlCommand = "EXEC @procResult = [dbo].[GetSmallDecimalTest] @maxId";
            var procResultData = Set<GetSmallDecimalTestReturnModel>()
                .FromSqlRaw(sqlCommand, maxIdParam, procResultParam)
                .ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async Task<List<GetSmallDecimalTestReturnModel>> GetSmallDecimalTestAsync(int? maxId = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            var maxIdParam = new SqlParameter { ParameterName = "@maxId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = maxId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!maxId.HasValue)
                maxIdParam.Value = DBNull.Value;

            const string sqlCommand = "EXEC [dbo].[GetSmallDecimalTest] @maxId";
            var procResultData = await Set<GetSmallDecimalTestReturnModel>()
                .FromSqlRaw(sqlCommand, maxIdParam)
                .ToListAsync(cancellationToken);

            return procResultData;
        }

        public int InsertRecord(string data, out int? insertedId)
        {
            var dataParam = new SqlParameter { ParameterName = "@Data", SqlDbType = SqlDbType.VarChar, Direction = ParameterDirection.Input, Value = data, Size = 256 };
            if (dataParam.Value == null)
                dataParam.Value = DBNull.Value;

            var insertedIdParam = new SqlParameter { ParameterName = "@InsertedId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output, Precision = 10, Scale = 0 };
            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };

            Database.ExecuteSqlRaw("EXEC @procResult = [dbo].[InsertRecord] @Data, @InsertedId OUTPUT", dataParam, insertedIdParam, procResultParam);

            if (IsSqlParameterNull(insertedIdParam))
                insertedId = null;
            else
                insertedId = (int) insertedIdParam.Value;

            return (int)procResultParam.Value;
        }

        // InsertRecordAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public int InsertRecordThree(string data, out int? insertedId, int? someId, out int? anotherInsertedId)
        {
            var dataParam = new SqlParameter { ParameterName = "@Data", SqlDbType = SqlDbType.VarChar, Direction = ParameterDirection.Input, Value = data, Size = 256 };
            if (dataParam.Value == null)
                dataParam.Value = DBNull.Value;

            var insertedIdParam = new SqlParameter { ParameterName = "@InsertedId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output, Precision = 10, Scale = 0 };
            var someIdParam = new SqlParameter { ParameterName = "@SomeId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = someId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!someId.HasValue)
                someIdParam.Value = DBNull.Value;

            var anotherInsertedIdParam = new SqlParameter { ParameterName = "@AnotherInsertedId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output, Precision = 10, Scale = 0 };
            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };

            Database.ExecuteSqlRaw("EXEC @procResult = [dbo].[InsertRecordThree] @Data, @InsertedId OUTPUT, @SomeId, @AnotherInsertedId OUTPUT", dataParam, insertedIdParam, someIdParam, anotherInsertedIdParam, procResultParam);

            if (IsSqlParameterNull(insertedIdParam))
                insertedId = null;
            else
                insertedId = (int) insertedIdParam.Value;

            if (IsSqlParameterNull(anotherInsertedIdParam))
                anotherInsertedId = null;
            else
                anotherInsertedId = (int) anotherInsertedIdParam.Value;

            return (int)procResultParam.Value;
        }

        // InsertRecordThreeAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public int InsertRecordTwo(string data, out int? insertedId, out int? anotherInsertedId)
        {
            var dataParam = new SqlParameter { ParameterName = "@Data", SqlDbType = SqlDbType.VarChar, Direction = ParameterDirection.Input, Value = data, Size = 256 };
            if (dataParam.Value == null)
                dataParam.Value = DBNull.Value;

            var insertedIdParam = new SqlParameter { ParameterName = "@InsertedId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output, Precision = 10, Scale = 0 };
            var anotherInsertedIdParam = new SqlParameter { ParameterName = "@AnotherInsertedId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output, Precision = 10, Scale = 0 };
            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };

            Database.ExecuteSqlRaw("EXEC @procResult = [dbo].[InsertRecordTwo] @Data, @InsertedId OUTPUT, @AnotherInsertedId OUTPUT", dataParam, insertedIdParam, anotherInsertedIdParam, procResultParam);

            if (IsSqlParameterNull(insertedIdParam))
                insertedId = null;
            else
                insertedId = (int) insertedIdParam.Value;

            if (IsSqlParameterNull(anotherInsertedIdParam))
                anotherInsertedId = null;
            else
                anotherInsertedId = (int) anotherInsertedIdParam.Value;

            return (int)procResultParam.Value;
        }

        // InsertRecordTwoAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public int MinTripSequenceStart(out DateTime? minTripSequenceStartParam)
        {
            var minTripSequenceStartParamParam = new SqlParameter { ParameterName = "@minTripSequenceStartParam", SqlDbType = SqlDbType.DateTime2, Direction = ParameterDirection.Output };
            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };

            Database.ExecuteSqlRaw("EXEC @procResult = [dbo].[MinTripSequenceStart] @minTripSequenceStartParam OUTPUT", minTripSequenceStartParamParam, procResultParam);

            if (IsSqlParameterNull(minTripSequenceStartParamParam))
                minTripSequenceStartParam = null;
            else
                minTripSequenceStartParam = (DateTime) minTripSequenceStartParamParam.Value;

            return (int)procResultParam.Value;
        }

        // MinTripSequenceStartAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public int MinTripSequenceStartNull(out DateTime? minTripSequenceStartParam)
        {
            var minTripSequenceStartParamParam = new SqlParameter { ParameterName = "@minTripSequenceStartParam", SqlDbType = SqlDbType.DateTime2, Direction = ParameterDirection.Output };
            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };

            Database.ExecuteSqlRaw("EXEC @procResult = [dbo].[MinTripSequenceStartNull] @minTripSequenceStartParam OUTPUT", minTripSequenceStartParamParam, procResultParam);

            if (IsSqlParameterNull(minTripSequenceStartParamParam))
                minTripSequenceStartParam = null;
            else
                minTripSequenceStartParam = (DateTime) minTripSequenceStartParamParam.Value;

            return (int)procResultParam.Value;
        }

        // MinTripSequenceStartNullAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public int MultipleReturnColumnsFromTempTable()
        {
            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };

            Database.ExecuteSqlRaw("EXEC @procResult = [dbo].[MultipleReturnColumnsFromTempTable] ", procResultParam);

            return (int)procResultParam.Value;
        }

        public async Task<int> MultipleReturnColumnsFromTempTableAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };

            await Database.ExecuteSqlRawAsync("EXEC @procResult = [dbo].[MultipleReturnColumnsFromTempTable]",  new[] {procResultParam}, cancellationToken);

            return (int)procResultParam.Value;
        }

        public int NvarcharTest(string maxOutputParam, string normalOutputParam)
        {
            var maxOutputParamParam = new SqlParameter { ParameterName = "@maxOutputParam", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = maxOutputParam, Size = -1 };
            if (maxOutputParamParam.Value == null)
                maxOutputParamParam.Value = DBNull.Value;

            var normalOutputParamParam = new SqlParameter { ParameterName = "@normalOutputParam", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = normalOutputParam, Size = 20 };
            if (normalOutputParamParam.Value == null)
                normalOutputParamParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };

            Database.ExecuteSqlRaw("EXEC @procResult = [dbo].[NvarcharTest] @maxOutputParam, @normalOutputParam", maxOutputParamParam, normalOutputParamParam, procResultParam);

            return (int)procResultParam.Value;
        }

        public async Task<int> NvarcharTestAsync(string maxOutputParam, string normalOutputParam, CancellationToken cancellationToken = default(CancellationToken))
        {
            var maxOutputParamParam = new SqlParameter { ParameterName = "@maxOutputParam", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = maxOutputParam, Size = -1 };
            if (maxOutputParamParam.Value == null)
                maxOutputParamParam.Value = DBNull.Value;

            var normalOutputParamParam = new SqlParameter { ParameterName = "@normalOutputParam", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = normalOutputParam, Size = 20 };
            if (normalOutputParamParam.Value == null)
                normalOutputParamParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };

            await Database.ExecuteSqlRawAsync("EXEC @procResult = [dbo].[NvarcharTest] @maxOutputParam, @normalOutputParam",  new[] {maxOutputParamParam, normalOutputParamParam, procResultParam}, cancellationToken);

            return (int)procResultParam.Value;
        }

        public int Omega_Overclock(DateTime? parameter = null)
        {
            var parameterParam = new SqlParameter { ParameterName = "@Parameter", SqlDbType = SqlDbType.DateTime, Direction = ParameterDirection.Input, Value = parameter.GetValueOrDefault() };
            if (!parameter.HasValue)
                parameterParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };

            Database.ExecuteSqlRaw("EXEC @procResult = [Omega].[Overclock] @Parameter", parameterParam, procResultParam);

            return (int)procResultParam.Value;
        }

        public async Task<int> Omega_OverclockAsync(DateTime? parameter = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            var parameterParam = new SqlParameter { ParameterName = "@Parameter", SqlDbType = SqlDbType.DateTime, Direction = ParameterDirection.Input, Value = parameter.GetValueOrDefault() };
            if (!parameter.HasValue)
                parameterParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };

            await Database.ExecuteSqlRawAsync("EXEC @procResult = [Omega].[Overclock] @Parameter",  new[] {parameterParam, procResultParam}, cancellationToken);

            return (int)procResultParam.Value;
        }

        public int proc_TestDecimalOutput(out decimal? perfectNumber)
        {
            var perfectNumberParam = new SqlParameter { ParameterName = "@PerfectNumber", SqlDbType = SqlDbType.Decimal, Direction = ParameterDirection.Output, Precision = 18, Scale = 2 };
            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };

            Database.ExecuteSqlRaw("EXEC @procResult = [dbo].[proc_TestDecimalOutput] @PerfectNumber OUTPUT", perfectNumberParam, procResultParam);

            if (IsSqlParameterNull(perfectNumberParam))
                perfectNumber = null;
            else
                perfectNumber = (decimal) perfectNumberParam.Value;

            return (int)procResultParam.Value;
        }

        // proc_TestDecimalOutputAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public int proc_TestDecimalOutputV2(out decimal? perfectNumber)
        {
            var perfectNumberParam = new SqlParameter { ParameterName = "@PerfectNumber", SqlDbType = SqlDbType.Decimal, Direction = ParameterDirection.Output, Precision = 12, Scale = 8 };
            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };

            Database.ExecuteSqlRaw("EXEC @procResult = [dbo].[proc_TestDecimalOutputV2] @PerfectNumber OUTPUT", perfectNumberParam, procResultParam);

            if (IsSqlParameterNull(perfectNumberParam))
                perfectNumber = null;
            else
                perfectNumber = (decimal) perfectNumberParam.Value;

            return (int)procResultParam.Value;
        }

        // proc_TestDecimalOutputV2Async() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public int proc_TestDecimalOutputV3Default(out decimal? perfectNumber)
        {
            var perfectNumberParam = new SqlParameter { ParameterName = "@PerfectNumber", SqlDbType = SqlDbType.Decimal, Direction = ParameterDirection.Output, Precision = 18, Scale = 0 };
            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };

            Database.ExecuteSqlRaw("EXEC @procResult = [dbo].[proc_TestDecimalOutputV3Default] @PerfectNumber OUTPUT", perfectNumberParam, procResultParam);

            if (IsSqlParameterNull(perfectNumberParam))
                perfectNumber = null;
            else
                perfectNumber = (decimal) perfectNumberParam.Value;

            return (int)procResultParam.Value;
        }

        // proc_TestDecimalOutputV3DefaultAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public List<SpatialTypesNoParamsReturnModel> SpatialTypesNoParams()
        {
            int procResult;
            return SpatialTypesNoParams(out procResult);
        }

        public List<SpatialTypesNoParamsReturnModel> SpatialTypesNoParams(out int procResult)
        {
            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };
            const string sqlCommand = "EXEC @procResult = [dbo].[SpatialTypesNoParams]";
            var procResultData = Set<SpatialTypesNoParamsReturnModel>()
                .FromSqlRaw(sqlCommand, procResultParam)
                .ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async Task<List<SpatialTypesNoParamsReturnModel>> SpatialTypesNoParamsAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            const string sqlCommand = "EXEC [dbo].[SpatialTypesNoParams]";
            var procResultData = await Set<SpatialTypesNoParamsReturnModel>()
                .FromSqlRaw(sqlCommand)
                .ToListAsync(cancellationToken);

            return procResultData;
        }

        public List<SpatialTypesWithParamsReturnModel> SpatialTypesWithParams(NetTopologySuite.Geometries.Geometry geometry, NetTopologySuite.Geometries.Point geography)
        {
            int procResult;
            return SpatialTypesWithParams(geometry, geography, out procResult);
        }

        public List<SpatialTypesWithParamsReturnModel> SpatialTypesWithParams(NetTopologySuite.Geometries.Geometry geometry, NetTopologySuite.Geometries.Point geography, out int procResult)
        {
            var geometryParam = new SqlParameter { ParameterName = "@geometry", SqlDbType = SqlDbType.VarChar, Direction = ParameterDirection.Input, Value = geometry, Size = -1 };
            if (geometryParam.Value == null)
                geometryParam.Value = DBNull.Value;

            var geographyParam = new SqlParameter { ParameterName = "@geography", SqlDbType = SqlDbType.VarChar, Direction = ParameterDirection.Input, Value = geography, Size = -1 };
            if (geographyParam.Value == null)
                geographyParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };
            const string sqlCommand = "EXEC @procResult = [dbo].[SpatialTypesWithParams] @geometry, @geography";
            var procResultData = Set<SpatialTypesWithParamsReturnModel>()
                .FromSqlRaw(sqlCommand, geometryParam, geographyParam, procResultParam)
                .ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async Task<List<SpatialTypesWithParamsReturnModel>> SpatialTypesWithParamsAsync(NetTopologySuite.Geometries.Geometry geometry, NetTopologySuite.Geometries.Point geography, CancellationToken cancellationToken = default(CancellationToken))
        {
            var geometryParam = new SqlParameter { ParameterName = "@geometry", SqlDbType = SqlDbType.VarChar, Direction = ParameterDirection.Input, Value = geometry, Size = -1 };
            if (geometryParam.Value == null)
                geometryParam.Value = DBNull.Value;

            var geographyParam = new SqlParameter { ParameterName = "@geography", SqlDbType = SqlDbType.VarChar, Direction = ParameterDirection.Input, Value = geography, Size = -1 };
            if (geographyParam.Value == null)
                geographyParam.Value = DBNull.Value;

            const string sqlCommand = "EXEC [dbo].[SpatialTypesWithParams] @geometry, @geography";
            var procResultData = await Set<SpatialTypesWithParamsReturnModel>()
                .FromSqlRaw(sqlCommand, geometryParam, geographyParam)
                .ToListAsync(cancellationToken);

            return procResultData;
        }

        public List<stp_multiple_identical_resultsReturnModel> stp_multiple_identical_results(int? someVar = null)
        {
            int procResult;
            return stp_multiple_identical_results(someVar, out procResult);
        }

        public List<stp_multiple_identical_resultsReturnModel> stp_multiple_identical_results(int? someVar, out int procResult)
        {
            var someVarParam = new SqlParameter { ParameterName = "@someVar", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = someVar.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!someVar.HasValue)
                someVarParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };
            const string sqlCommand = "EXEC @procResult = [dbo].[stp_multiple_identical_results] @someVar";
            var procResultData = Set<stp_multiple_identical_resultsReturnModel>()
                .FromSqlRaw(sqlCommand, someVarParam, procResultParam)
                .ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async Task<List<stp_multiple_identical_resultsReturnModel>> stp_multiple_identical_resultsAsync(int? someVar = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            var someVarParam = new SqlParameter { ParameterName = "@someVar", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = someVar.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!someVar.HasValue)
                someVarParam.Value = DBNull.Value;

            const string sqlCommand = "EXEC [dbo].[stp_multiple_identical_results] @someVar";
            var procResultData = await Set<stp_multiple_identical_resultsReturnModel>()
                .FromSqlRaw(sqlCommand, someVarParam)
                .ToListAsync(cancellationToken);

            return procResultData;
        }

        // public stp_multiple_multiple_results_with_paramsReturnModel stp_multiple_multiple_results_with_params(int? firstval = null, int? secondval = null, int? thirdval = null) Cannot be created as EF Core does not yet support stored procedures with multiple result sets.

        // public async Task<stp_multiple_multiple_results_with_paramsReturnModel> stp_multiple_multiple_results_with_paramsAsync(int? firstval = null, int? secondval = null, int? thirdval = null) Cannot be created as EF Core does not yet support stored procedures with multiple result sets.

        // public stp_multiple_resultsReturnModel stp_multiple_results() Cannot be created as EF Core does not yet support stored procedures with multiple result sets.

        // public async Task<stp_multiple_resultsReturnModel> stp_multiple_resultsAsync() Cannot be created as EF Core does not yet support stored procedures with multiple result sets.

        // public stp_multiple_results_with_paramsReturnModel stp_multiple_results_with_params(int? firstval = null, int? secondval = null) Cannot be created as EF Core does not yet support stored procedures with multiple result sets.

        // public async Task<stp_multiple_results_with_paramsReturnModel> stp_multiple_results_with_paramsAsync(int? firstval = null, int? secondval = null) Cannot be created as EF Core does not yet support stored procedures with multiple result sets.

        public List<stp_no_params_testReturnModel> stp_no_params_test()
        {
            int procResult;
            return stp_no_params_test(out procResult);
        }

        public List<stp_no_params_testReturnModel> stp_no_params_test(out int procResult)
        {
            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };
            const string sqlCommand = "EXEC @procResult = [dbo].[stp_no_params_test]";
            var procResultData = Set<stp_no_params_testReturnModel>()
                .FromSqlRaw(sqlCommand, procResultParam)
                .ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async Task<List<stp_no_params_testReturnModel>> stp_no_params_testAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            const string sqlCommand = "EXEC [dbo].[stp_no_params_test]";
            var procResultData = await Set<stp_no_params_testReturnModel>()
                .FromSqlRaw(sqlCommand)
                .ToListAsync(cancellationToken);

            return procResultData;
        }

        public int stp_no_return_fields()
        {
            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };

            Database.ExecuteSqlRaw("EXEC @procResult = [dbo].[stp_no_return_fields] ", procResultParam);

            return (int)procResultParam.Value;
        }

        public async Task<int> stp_no_return_fieldsAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };

            await Database.ExecuteSqlRawAsync("EXEC @procResult = [dbo].[stp_no_return_fields]",  new[] {procResultParam}, cancellationToken);

            return (int)procResultParam.Value;
        }

        public List<stp_nullable_params_testReturnModel> stp_nullable_params_test(int? aval = null, int? bval = null)
        {
            int procResult;
            return stp_nullable_params_test(aval, bval, out procResult);
        }

        public List<stp_nullable_params_testReturnModel> stp_nullable_params_test(int? aval, int? bval, out int procResult)
        {
            var avalParam = new SqlParameter { ParameterName = "@a_val", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = aval.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!aval.HasValue)
                avalParam.Value = DBNull.Value;

            var bvalParam = new SqlParameter { ParameterName = "@b_val", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = bval.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!bval.HasValue)
                bvalParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };
            const string sqlCommand = "EXEC @procResult = [dbo].[stp_nullable_params_test] @a_val, @b_val";
            var procResultData = Set<stp_nullable_params_testReturnModel>()
                .FromSqlRaw(sqlCommand, avalParam, bvalParam, procResultParam)
                .ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async Task<List<stp_nullable_params_testReturnModel>> stp_nullable_params_testAsync(int? aval = null, int? bval = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            var avalParam = new SqlParameter { ParameterName = "@a_val", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = aval.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!aval.HasValue)
                avalParam.Value = DBNull.Value;

            var bvalParam = new SqlParameter { ParameterName = "@b_val", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = bval.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!bval.HasValue)
                bvalParam.Value = DBNull.Value;

            const string sqlCommand = "EXEC [dbo].[stp_nullable_params_test] @a_val, @b_val";
            var procResultData = await Set<stp_nullable_params_testReturnModel>()
                .FromSqlRaw(sqlCommand, avalParam, bvalParam)
                .ToListAsync(cancellationToken);

            return procResultData;
        }

        public List<stp_testReturnModel> stp_test(string strDateFROM, string strDateTo, out bool? retBool)
        {
            int procResult;
            return stp_test(strDateFROM, strDateTo, out retBool, out procResult);
        }

        public List<stp_testReturnModel> stp_test(string strDateFROM, string strDateTo, out bool? retBool, out int procResult)
        {
            var strDateFROMParam = new SqlParameter { ParameterName = "@strDateFROM", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = strDateFROM, Size = 20 };
            if (strDateFROMParam.Value == null)
                strDateFROMParam.Value = DBNull.Value;

            var strDateToParam = new SqlParameter { ParameterName = "@strDateTo", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = strDateTo, Size = 20 };
            if (strDateToParam.Value == null)
                strDateToParam.Value = DBNull.Value;

            var retBoolParam = new SqlParameter { ParameterName = "@retBool", SqlDbType = SqlDbType.Bit, Direction = ParameterDirection.Output };
            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };
            const string sqlCommand = "EXEC @procResult = [dbo].[stp_test] @strDateFROM, @strDateTo, @retBool OUTPUT";
            var procResultData = Set<stp_testReturnModel>()
                .FromSqlRaw(sqlCommand, strDateFROMParam, strDateToParam, retBoolParam, procResultParam)
                .ToList();

            if (IsSqlParameterNull(retBoolParam))
                retBool = null;
            else
                retBool = (bool) retBoolParam.Value;

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        // stp_testAsync() cannot be created due to having out parameters, or is relying on the procedure result (List<stp_testReturnModel>)

        public List<stp_test_underscore_testReturnModel> stp_test_underscore_test(string strDateFROM, string strdateto)
        {
            int procResult;
            return stp_test_underscore_test(strDateFROM, strdateto, out procResult);
        }

        public List<stp_test_underscore_testReturnModel> stp_test_underscore_test(string strDateFROM, string strdateto, out int procResult)
        {
            var strDateFROMParam = new SqlParameter { ParameterName = "@str_Date_FROM", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = strDateFROM, Size = 20 };
            if (strDateFROMParam.Value == null)
                strDateFROMParam.Value = DBNull.Value;

            var strdatetoParam = new SqlParameter { ParameterName = "@str_date_to", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = strdateto, Size = 20 };
            if (strdatetoParam.Value == null)
                strdatetoParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };
            const string sqlCommand = "EXEC @procResult = [dbo].[stp_test_underscore_test] @str_Date_FROM, @str_date_to";
            var procResultData = Set<stp_test_underscore_testReturnModel>()
                .FromSqlRaw(sqlCommand, strDateFROMParam, strdatetoParam, procResultParam)
                .ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async Task<List<stp_test_underscore_testReturnModel>> stp_test_underscore_testAsync(string strDateFROM, string strdateto, CancellationToken cancellationToken = default(CancellationToken))
        {
            var strDateFROMParam = new SqlParameter { ParameterName = "@str_Date_FROM", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = strDateFROM, Size = 20 };
            if (strDateFROMParam.Value == null)
                strDateFROMParam.Value = DBNull.Value;

            var strdatetoParam = new SqlParameter { ParameterName = "@str_date_to", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = strdateto, Size = 20 };
            if (strdatetoParam.Value == null)
                strdatetoParam.Value = DBNull.Value;

            const string sqlCommand = "EXEC [dbo].[stp_test_underscore_test] @str_Date_FROM, @str_date_to";
            var procResultData = await Set<stp_test_underscore_testReturnModel>()
                .FromSqlRaw(sqlCommand, strDateFROMParam, strdatetoParam)
                .ToListAsync(cancellationToken);

            return procResultData;
        }

        public int StupidStoredProcedureParams(string reqType, short? dept = null, short? @class = null, short? item = null)
        {
            var reqTypeParam = new SqlParameter { ParameterName = "@ReqType", SqlDbType = SqlDbType.VarChar, Direction = ParameterDirection.Input, Value = reqType, Size = 25 };
            if (reqTypeParam.Value == null)
                reqTypeParam.Value = DBNull.Value;

            var deptParam = new SqlParameter { ParameterName = "@Dept", SqlDbType = SqlDbType.SmallInt, Direction = ParameterDirection.Input, Value = dept.GetValueOrDefault(), Precision = 5, Scale = 0 };
            if (!dept.HasValue)
                deptParam.Value = DBNull.Value;

            var @classParam = new SqlParameter { ParameterName = "@Class", SqlDbType = SqlDbType.SmallInt, Direction = ParameterDirection.Input, Value = @class.GetValueOrDefault(), Precision = 5, Scale = 0 };
            if (!@class.HasValue)
                @classParam.Value = DBNull.Value;

            var itemParam = new SqlParameter { ParameterName = "@Item", SqlDbType = SqlDbType.SmallInt, Direction = ParameterDirection.Input, Value = item.GetValueOrDefault(), Precision = 5, Scale = 0 };
            if (!item.HasValue)
                itemParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };

            Database.ExecuteSqlRaw("EXEC @procResult = [dbo].[StupidStoredProcedureParams] @ReqType, @Dept, @Class, @Item", reqTypeParam, deptParam, @classParam, itemParam, procResultParam);

            return (int)procResultParam.Value;
        }

        public async Task<int> StupidStoredProcedureParamsAsync(string reqType, short? dept = null, short? @class = null, short? item = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            var reqTypeParam = new SqlParameter { ParameterName = "@ReqType", SqlDbType = SqlDbType.VarChar, Direction = ParameterDirection.Input, Value = reqType, Size = 25 };
            if (reqTypeParam.Value == null)
                reqTypeParam.Value = DBNull.Value;

            var deptParam = new SqlParameter { ParameterName = "@Dept", SqlDbType = SqlDbType.SmallInt, Direction = ParameterDirection.Input, Value = dept.GetValueOrDefault(), Precision = 5, Scale = 0 };
            if (!dept.HasValue)
                deptParam.Value = DBNull.Value;

            var @classParam = new SqlParameter { ParameterName = "@Class", SqlDbType = SqlDbType.SmallInt, Direction = ParameterDirection.Input, Value = @class.GetValueOrDefault(), Precision = 5, Scale = 0 };
            if (!@class.HasValue)
                @classParam.Value = DBNull.Value;

            var itemParam = new SqlParameter { ParameterName = "@Item", SqlDbType = SqlDbType.SmallInt, Direction = ParameterDirection.Input, Value = item.GetValueOrDefault(), Precision = 5, Scale = 0 };
            if (!item.HasValue)
                itemParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };

            await Database.ExecuteSqlRawAsync("EXEC @procResult = [dbo].[StupidStoredProcedureParams] @ReqType, @Dept, @Class, @Item",  new[] {reqTypeParam, deptParam, @classParam, itemParam, procResultParam}, cancellationToken);

            return (int)procResultParam.Value;
        }

        public int StupidStoredProcedureParams2(string @override, short? @readonly = null, short? @class = null, short? @enum = null)
        {
            var @overrideParam = new SqlParameter { ParameterName = "@override", SqlDbType = SqlDbType.VarChar, Direction = ParameterDirection.Input, Value = @override, Size = 25 };
            if (@overrideParam.Value == null)
                @overrideParam.Value = DBNull.Value;

            var @readonlyParam = new SqlParameter { ParameterName = "@readonly", SqlDbType = SqlDbType.SmallInt, Direction = ParameterDirection.Input, Value = @readonly.GetValueOrDefault(), Precision = 5, Scale = 0 };
            if (!@readonly.HasValue)
                @readonlyParam.Value = DBNull.Value;

            var @classParam = new SqlParameter { ParameterName = "@class", SqlDbType = SqlDbType.SmallInt, Direction = ParameterDirection.Input, Value = @class.GetValueOrDefault(), Precision = 5, Scale = 0 };
            if (!@class.HasValue)
                @classParam.Value = DBNull.Value;

            var @enumParam = new SqlParameter { ParameterName = "@enum", SqlDbType = SqlDbType.SmallInt, Direction = ParameterDirection.Input, Value = @enum.GetValueOrDefault(), Precision = 5, Scale = 0 };
            if (!@enum.HasValue)
                @enumParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };

            Database.ExecuteSqlRaw("EXEC @procResult = [dbo].[StupidStoredProcedureParams2] @override, @readonly, @class, @enum", @overrideParam, @readonlyParam, @classParam, @enumParam, procResultParam);

            return (int)procResultParam.Value;
        }

        public async Task<int> StupidStoredProcedureParams2Async(string @override, short? @readonly = null, short? @class = null, short? @enum = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            var @overrideParam = new SqlParameter { ParameterName = "@override", SqlDbType = SqlDbType.VarChar, Direction = ParameterDirection.Input, Value = @override, Size = 25 };
            if (@overrideParam.Value == null)
                @overrideParam.Value = DBNull.Value;

            var @readonlyParam = new SqlParameter { ParameterName = "@readonly", SqlDbType = SqlDbType.SmallInt, Direction = ParameterDirection.Input, Value = @readonly.GetValueOrDefault(), Precision = 5, Scale = 0 };
            if (!@readonly.HasValue)
                @readonlyParam.Value = DBNull.Value;

            var @classParam = new SqlParameter { ParameterName = "@class", SqlDbType = SqlDbType.SmallInt, Direction = ParameterDirection.Input, Value = @class.GetValueOrDefault(), Precision = 5, Scale = 0 };
            if (!@class.HasValue)
                @classParam.Value = DBNull.Value;

            var @enumParam = new SqlParameter { ParameterName = "@enum", SqlDbType = SqlDbType.SmallInt, Direction = ParameterDirection.Input, Value = @enum.GetValueOrDefault(), Precision = 5, Scale = 0 };
            if (!@enum.HasValue)
                @enumParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };

            await Database.ExecuteSqlRawAsync("EXEC @procResult = [dbo].[StupidStoredProcedureParams2] @override, @readonly, @class, @enum",  new[] {@overrideParam, @readonlyParam, @classParam, @enumParam, procResultParam}, cancellationToken);

            return (int)procResultParam.Value;
        }

        public List<Synonyms_SimpleStoredProcReturnModel> Synonyms_SimpleStoredProc(int? inputInt = null)
        {
            int procResult;
            return Synonyms_SimpleStoredProc(inputInt, out procResult);
        }

        public List<Synonyms_SimpleStoredProcReturnModel> Synonyms_SimpleStoredProc(int? inputInt, out int procResult)
        {
            var inputIntParam = new SqlParameter { ParameterName = "@InputInt", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = inputInt.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!inputInt.HasValue)
                inputIntParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };
            const string sqlCommand = "EXEC @procResult = [Synonyms].[SimpleStoredProc] @InputInt";
            var procResultData = Set<Synonyms_SimpleStoredProcReturnModel>()
                .FromSqlRaw(sqlCommand, inputIntParam, procResultParam)
                .ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async Task<List<Synonyms_SimpleStoredProcReturnModel>> Synonyms_SimpleStoredProcAsync(int? inputInt = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            var inputIntParam = new SqlParameter { ParameterName = "@InputInt", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = inputInt.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!inputInt.HasValue)
                inputIntParam.Value = DBNull.Value;

            const string sqlCommand = "EXEC [Synonyms].[SimpleStoredProc] @InputInt";
            var procResultData = await Set<Synonyms_SimpleStoredProcReturnModel>()
                .FromSqlRaw(sqlCommand, inputIntParam)
                .ToListAsync(cancellationToken);

            return procResultData;
        }

        public List<TestReturnStringReturnModel> TestReturnString()
        {
            int procResult;
            return TestReturnString(out procResult);
        }

        public List<TestReturnStringReturnModel> TestReturnString(out int procResult)
        {
            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };
            const string sqlCommand = "EXEC @procResult = [dbo].[TestReturnString]";
            var procResultData = Set<TestReturnStringReturnModel>()
                .FromSqlRaw(sqlCommand, procResultParam)
                .ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async Task<List<TestReturnStringReturnModel>> TestReturnStringAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            const string sqlCommand = "EXEC [dbo].[TestReturnString]";
            var procResultData = await Set<TestReturnStringReturnModel>()
                .FromSqlRaw(sqlCommand)
                .ToListAsync(cancellationToken);

            return procResultData;
        }

        public int ThisHasMixedOutParameters(DateTime? foo, out int? firstOutParam, DateTime? bar, out int? secondOutParam, DateTime? baz = null)
        {
            var fooParam = new SqlParameter { ParameterName = "@Foo", SqlDbType = SqlDbType.DateTime, Direction = ParameterDirection.Input, Value = foo.GetValueOrDefault() };
            if (!foo.HasValue)
                fooParam.Value = DBNull.Value;

            var firstOutParamParam = new SqlParameter { ParameterName = "@FirstOutParam", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output, Precision = 10, Scale = 0 };
            var barParam = new SqlParameter { ParameterName = "@Bar", SqlDbType = SqlDbType.DateTime, Direction = ParameterDirection.Input, Value = bar.GetValueOrDefault() };
            if (!bar.HasValue)
                barParam.Value = DBNull.Value;

            var secondOutParamParam = new SqlParameter { ParameterName = "@SecondOutParam", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output, Precision = 10, Scale = 0 };
            var bazParam = new SqlParameter { ParameterName = "@Baz", SqlDbType = SqlDbType.DateTime, Direction = ParameterDirection.Input, Value = baz.GetValueOrDefault() };
            if (!baz.HasValue)
                bazParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };

            Database.ExecuteSqlRaw("EXEC @procResult = [dbo].[ThisHasMixedOutParameters] @Foo, @FirstOutParam OUTPUT, @Bar, @SecondOutParam OUTPUT, @Baz", fooParam, firstOutParamParam, barParam, secondOutParamParam, bazParam, procResultParam);

            if (IsSqlParameterNull(firstOutParamParam))
                firstOutParam = null;
            else
                firstOutParam = (int) firstOutParamParam.Value;

            if (IsSqlParameterNull(secondOutParamParam))
                secondOutParam = null;
            else
                secondOutParam = (int) secondOutParamParam.Value;

            return (int)procResultParam.Value;
        }

        // ThisHasMixedOutParametersAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public int UserDefinedTypeSampleStoredProc(int? a, DataTable type, int? b = null)
        {
            var aParam = new SqlParameter { ParameterName = "@a", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = a.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!a.HasValue)
                aParam.Value = DBNull.Value;

            var typeParam = new SqlParameter { ParameterName = "@type", SqlDbType = SqlDbType.Structured, Direction = ParameterDirection.Input, Value = type, TypeName = "dbo.UserDefinedTypeSample" };
            if (typeParam.Value == null)
                typeParam.Value = DBNull.Value;

            var bParam = new SqlParameter { ParameterName = "@b", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = b.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!b.HasValue)
                bParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };

            Database.ExecuteSqlRaw("EXEC @procResult = [dbo].[UserDefinedTypeSampleStoredProc] @a, @type, @b", aParam, typeParam, bParam, procResultParam);

            return (int)procResultParam.Value;
        }

        public async Task<int> UserDefinedTypeSampleStoredProcAsync(int? a, DataTable type, int? b = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            var aParam = new SqlParameter { ParameterName = "@a", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = a.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!a.HasValue)
                aParam.Value = DBNull.Value;

            var typeParam = new SqlParameter { ParameterName = "@type", SqlDbType = SqlDbType.Structured, Direction = ParameterDirection.Input, Value = type, TypeName = "dbo.UserDefinedTypeSample" };
            if (typeParam.Value == null)
                typeParam.Value = DBNull.Value;

            var bParam = new SqlParameter { ParameterName = "@b", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = b.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!b.HasValue)
                bParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };

            await Database.ExecuteSqlRawAsync("EXEC @procResult = [dbo].[UserDefinedTypeSampleStoredProc] @a, @type, @b",  new[] {aParam, typeParam, bParam, procResultParam}, cancellationToken);

            return (int)procResultParam.Value;
        }

        public List<XmlDataV1ReturnModel> XmlDataV1()
        {
            int procResult;
            return XmlDataV1(out procResult);
        }

        public List<XmlDataV1ReturnModel> XmlDataV1(out int procResult)
        {
            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };
            const string sqlCommand = "EXEC @procResult = [dbo].[XmlDataV1]";
            var procResultData = Set<XmlDataV1ReturnModel>()
                .FromSqlRaw(sqlCommand, procResultParam)
                .ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async Task<List<XmlDataV1ReturnModel>> XmlDataV1Async(CancellationToken cancellationToken = default(CancellationToken))
        {
            const string sqlCommand = "EXEC [dbo].[XmlDataV1]";
            var procResultData = await Set<XmlDataV1ReturnModel>()
                .FromSqlRaw(sqlCommand)
                .ToListAsync(cancellationToken);

            return procResultData;
        }

        public int XmlDataV2()
        {
            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };

            Database.ExecuteSqlRaw("EXEC @procResult = [dbo].[XmlDataV2] ", procResultParam);

            return (int)procResultParam.Value;
        }

        public async Task<int> XmlDataV2Async(CancellationToken cancellationToken = default(CancellationToken))
        {
            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };

            await Database.ExecuteSqlRawAsync("EXEC @procResult = [dbo].[XmlDataV2]",  new[] {procResultParam}, cancellationToken);

            return (int)procResultParam.Value;
        }


        // Table Valued Functions

        // dbo.182_test1
        public IQueryable<C182_test1ReturnModel> C182_test1(int? test = null)
        {
            return Set<C182_test1ReturnModel>()
                .FromSqlRaw("SELECT * FROM [dbo].[182_test1]({0})", test)
                .AsNoTracking();
        }

        // dbo.CsvToInt
        public IQueryable<CsvToIntReturnModel> CsvToInt(string array, string array2)
        {
            return Set<CsvToIntReturnModel>()
                .FromSqlRaw("SELECT * FROM [dbo].[CsvToInt]({0}, {1})", array, array2)
                .AsNoTracking();
        }

        // CustomSchema.CsvToIntWithSchema
        public IQueryable<CustomSchema_CsvToIntWithSchemaReturnModel> CustomSchema_CsvToIntWithSchema(string array, string array2)
        {
            return Set<CustomSchema_CsvToIntWithSchemaReturnModel>()
                .FromSqlRaw("SELECT * FROM [CustomSchema].[CsvToIntWithSchema]({0}, {1})", array, array2)
                .AsNoTracking();
        }

        // FFRS.CsvToInt2
        public IQueryable<FFRS_CsvToInt2ReturnModel> FFRS_CsvToInt2(string array, string array2)
        {
            return Set<FFRS_CsvToInt2ReturnModel>()
                .FromSqlRaw("SELECT * FROM [FFRS].[CsvToInt2]({0}, {1})", array, array2)
                .AsNoTracking();
        }

        // Scalar Valued Functions

        [DbFunction("udfNetSale", "dbo")]
        public decimal udfNetSale(int? quantity = null, decimal? list_price = null, decimal? discount = null)
        {
            throw new Exception("Don't call this directly. Use LINQ to call the scalar valued function as part of your query");
        }
    }

    #endregion

    #region Database context factory

    public class V6_Efrpg_Test_Db_ContextFactory : IDesignTimeDbContextFactory<V6_Efrpg_Test_Db_Context>
    {
        public V6_Efrpg_Test_Db_Context CreateDbContext(string[] args)
        {
            return new V6_Efrpg_Test_Db_Context();
        }
    }

    #endregion

    #region POCO classes

    // A
    public class A
    {
        public int AId { get; set; } // AId (Primary key)
        public int C1 { get; set; } // C1
        public int C2 { get; set; } // C2

        // Foreign keys

        /// <summary>
        /// Parent AAREF pointed by [A].([C1], [C2]) (FK_A_A)
        /// </summary>
        public virtual AAREF AAREF { get; set; } // FK_A_A
    }

    // AAREF
    public class AAREF
    {
        public int C1 { get; set; } // C1 (Primary key)
        public int C2 { get; set; } // C2 (Primary key)
        public DateTime CreatedUTC { get; set; } // CreatedUTC

        // Reverse navigation

        /// <summary>
        /// Child A where [A].([C1], [C2]) point to this entity (FK_A_A)
        /// </summary>
        public virtual ICollection<A> A { get; set; } // A.FK_A_A

        public AAREF()
        {
            A = new List<A>();
        }
    }

    // AB_OrderLinesAB_
    public class AB_OrderLinesAB
    {
        public int ID { get; set; } // ID (Primary key)
        public int OrderID { get; set; } // OrderID
        public string sku { get; set; } // sku (length: 15)

        // Foreign keys

        /// <summary>
        /// Parent AB_OrdersAB pointed by [AB_OrderLinesAB_].([OrderID]) (AB_OrderLinesAB_FK)
        /// </summary>
        public virtual AB_OrdersAB AB_OrdersAB { get; set; } // AB_OrderLinesAB_FK
    }

    // AB_OrdersAB_
    public class AB_OrdersAB
    {
        public int ID { get; set; } // ID (Primary key)
        public DateTime added { get; set; } // added

        // Reverse navigation

        /// <summary>
        /// Child AB_OrderLinesABs where [AB_OrderLinesAB_].[OrderID] point to this entity (AB_OrderLinesAB_FK)
        /// </summary>
        public virtual ICollection<AB_OrderLinesAB> AB_OrderLinesABs { get; set; } // AB_OrderLinesAB_.AB_OrderLinesAB_FK

        public AB_OrdersAB()
        {
            added = DateTime.Now;
            AB_OrderLinesABs = new List<AB_OrderLinesAB>();
        }
    }

    // AllColumnsNull
    public class AllColumnsNull
    {
        public int? total { get; set; } // total
        public string aName { get; set; } // aName (length: 250)
    }

    // Harish3485
    public class Alpha_Harish3485
    {
        public int id { get; set; } // id (Primary key)
        public int harish_id { get; set; } // harish_id

        // Foreign keys

        /// <summary>
        /// Parent FkTest_SmallDecimalTestAttribute pointed by [Harish3485].([harish_id]) (FK_Harish)
        /// </summary>
        public virtual FkTest_SmallDecimalTestAttribute FkTest_SmallDecimalTestAttribute { get; set; } // FK_Harish
    }

    // The table 'Test' is not usable by entity framework because it
    // does not have a primary key. It is listed here for completeness.
    // Test
    public class Alpha_Test
    {
        public int? Id { get; set; } // Id
        public int? ExclusionTest { get; set; } // ExclusionTest
    }

    // workflow
    public class Alpha_workflow
    {
        public int Id { get; set; } // Id (Primary key)
        public string Description { get; set; } // Description (length: 10)

        // Reverse navigation

        /// <summary>
        /// Child Beta_ToAlphas where [ToAlpha].[AlphaId] point to this entity (BetaToAlpha_AlphaWorkflow)
        /// </summary>
        public virtual ICollection<Beta_ToAlpha> Beta_ToAlphas { get; set; } // ToAlpha.BetaToAlpha_AlphaWorkflow

        public Alpha_workflow()
        {
            Beta_ToAlphas = new List<Beta_ToAlpha>();
        }
    }

    // alpha_workflow_synonym
    public class alpha_workflow_synonym
    {
        public int Id { get; set; } // Id (Primary key)
        public string Description { get; set; } // Description (length: 10)
    }

    // UserFacilityServiceRole
    public class App_UserFacilityServiceRole
    {
        public int userId { get; set; } // userId (Primary key)
        public int appId { get; set; } // appId (Primary key)
        public int fsrId { get; set; } // fsrId (Primary key)
    }

    // AppUser
    public class AppUser
    {
        public long Id { get; set; } // Id (Primary key)
        public string Name { get; set; } // Name (length: 50)

        // Reverse navigation

        /// <summary>
        /// Child Tickets where [Ticket].[CreatedById] point to this entity (FK_Ticket_AppUser)
        /// </summary>
        public virtual ICollection<Ticket> Tickets_CreatedById { get; set; } // Ticket.FK_Ticket_AppUser

        /// <summary>
        /// Child Tickets where [Ticket].[ModifiedById] point to this entity (FK_Ticket_AppUser1)
        /// </summary>
        public virtual ICollection<Ticket> Tickets_ModifiedById { get; set; } // Ticket.FK_Ticket_AppUser1

        public AppUser()
        {
            Tickets_CreatedById = new List<Ticket>();
            Tickets_ModifiedById = new List<Ticket>();
        }
    }

    // Attendee
    public class Attendee
    {
        public long AttendeeID { get; set; } // AttendeeID (Primary key)
        public string Lastname { get; set; } // Lastname (length: 50)
        public string Firstname { get; set; } // Firstname (length: 50)
        public int? PhoneCountryID { get; set; } // PhoneCountryID

        // Foreign keys

        /// <summary>
        /// Parent Country pointed by [Attendee].([PhoneCountryID]) (FK_Attendee_PhoneCountry)
        /// </summary>
        public virtual Country Country { get; set; } // FK_Attendee_PhoneCountry
    }

    // BatchTest
    public class BatchTest
    {
        public string code { get; set; } // code (Primary key) (length: 8)
    }

    // Harish3485
    public class Beta_Harish3485
    {
        public int id { get; set; } // id (Primary key)
        public int another_id { get; set; } // another_id

        // Foreign keys

        /// <summary>
        /// Parent PropertyTypesToAdd pointed by [Harish3485].([another_id]) (FK_Harish)
        /// </summary>
        public virtual PropertyTypesToAdd PropertyTypesToAdd { get; set; } // FK_Harish
    }

    // The table 'Test' is not usable by entity framework because it
    // does not have a primary key. It is listed here for completeness.
    // Test
    public class Beta_Test
    {
        public int? Id { get; set; } // Id
        public int? ExclusionTest { get; set; } // ExclusionTest
    }

    // ToAlpha
    public class Beta_ToAlpha
    {
        public int Id { get; set; } // Id (Primary key)
        public int AlphaId { get; set; } // AlphaId

        // Foreign keys

        /// <summary>
        /// Parent Alpha_workflow pointed by [ToAlpha].([AlphaId]) (BetaToAlpha_AlphaWorkflow)
        /// </summary>
        public virtual Alpha_workflow Alpha_workflow { get; set; } // BetaToAlpha_AlphaWorkflow
    }

    // workflow
    public class Beta_workflow
    {
        public int Id { get; set; } // Id (Primary key)
        public string Description { get; set; } // Description (length: 10)
    }

    // BITFIDDLERALLCAPS
    public class BITFIDDLERALLCAP
    {
        public int Id { get; set; } // Id (Primary key)
    }

    // BitFiddlerCATEGORIES
    public class BitFiddlerCATEGORy
    {
        public int Id { get; set; } // Id (Primary key)
    }

    // BitFiddlerCURRENCIES
    public class BitFiddlerCURRENCy
    {
        public int Id { get; set; } // Id (Primary key)
    }

    // Blah
    public class Blah
    {
        public int BlahID { get; set; } // BlahID (Primary key)

        // Reverse navigation

        /// <summary>
        /// Child Blahs (Many-to-Many) mapped by table [BlahBlahLink]
        /// </summary>
        public virtual ICollection<Blah> Blahs_BlahID2 { get; set; } // Many to many mapping

        /// <summary>
        /// Child Blahs (Many-to-Many) mapped by table [BlahBlahLink]
        /// </summary>
        public virtual ICollection<Blah> Blahs1 { get; set; } // Many to many mapping

        /// <summary>
        /// Child Blahs (Many-to-Many) mapped by table [BlahBlahLink_readonly]
        /// </summary>
        public virtual ICollection<Blah> Blahs2 { get; set; } // Many to many mapping

        /// <summary>
        /// Child Blahs (Many-to-Many) mapped by table [BlahBlahLink_readonly]
        /// </summary>
        public virtual ICollection<Blah> Blahs3 { get; set; } // Many to many mapping

        /// <summary>
        /// Child BlahBlahLink_v2 where [BlahBlahLink_v2].[BlahID] point to this entity (FK_BlahBlahLinkv2_Blah_ro)
        /// </summary>
        public virtual ICollection<BlahBlahLink_v2> BlahBlahLink_v2_BlahID { get; set; } // BlahBlahLink_v2.FK_BlahBlahLinkv2_Blah_ro

        /// <summary>
        /// Child BlahBlahLink_v2 where [BlahBlahLink_v2].[BlahID2] point to this entity (FK_BlahBlahLinkv2_Blah_ro2)
        /// </summary>
        public virtual ICollection<BlahBlahLink_v2> BlahBlahLink_v2_BlahID2 { get; set; } // BlahBlahLink_v2.FK_BlahBlahLinkv2_Blah_ro2

        /// <summary>
        /// Child Blargs (Many-to-Many) mapped by table [BlahBlargLink]
        /// </summary>
        public virtual ICollection<Blarg> Blargs { get; set; } // Many to many mapping

        public Blah()
        {
            BlahBlahLink_v2_BlahID = new List<BlahBlahLink_v2>();
            BlahBlahLink_v2_BlahID2 = new List<BlahBlahLink_v2>();
            Blahs1 = new List<Blah>();
            Blahs_BlahID2 = new List<Blah>();
            Blahs3 = new List<Blah>();
            Blahs2 = new List<Blah>();
            Blargs = new List<Blarg>();
        }
    }

    // BlahBlahLink_v2
    public class BlahBlahLink_v2
    {
        public int BlahID { get; set; } // BlahID (Primary key)
        public int BlahID2 { get; set; } // BlahID2 (Primary key)
        public int? dummy1 { get; set; } // dummy1
        public int dummy2 { get; set; } // dummy2
        public int hello { get; set; } // hello

        // Foreign keys

        /// <summary>
        /// Parent Blah pointed by [BlahBlahLink_v2].([BlahID]) (FK_BlahBlahLinkv2_Blah_ro)
        /// </summary>
        public virtual Blah Blah_BlahID { get; set; } // FK_BlahBlahLinkv2_Blah_ro

        /// <summary>
        /// Parent Blah pointed by [BlahBlahLink_v2].([BlahID2]) (FK_BlahBlahLinkv2_Blah_ro2)
        /// </summary>
        public virtual Blah Blah_BlahID2 { get; set; } // FK_BlahBlahLinkv2_Blah_ro2
    }

    // Blarg
    public class Blarg
    {
        public int BlargID { get; set; } // BlargID (Primary key)

        // Reverse navigation

        /// <summary>
        /// Child Blahs (Many-to-Many) mapped by table [BlahBlargLink]
        /// </summary>
        public virtual ICollection<Blah> Blahs { get; set; } // Many to many mapping

        public Blarg()
        {
            Blahs = new List<Blah>();
        }
    }

    // Burak1
    public class Burak1
    {
        public long id { get; set; } // id (Primary key)
        public long id_t { get; set; } // id_t
        public long num { get; set; } // num

        // Foreign keys

        /// <summary>
        /// Parent Burak2 pointed by [Burak1].([id], [num]) (FK_Burak_Test2)
        /// </summary>
        public virtual Burak2 Burak2_id { get; set; } // FK_Burak_Test2

        /// <summary>
        /// Parent Burak2 pointed by [Burak1].([id_t], [num]) (FK_Burak_Test1)
        /// </summary>
        public virtual Burak2 Burak2_id_t { get; set; } // FK_Burak_Test1
    }

    // Burak2
    public class Burak2
    {
        public long id { get; set; } // id (Primary key)
        public long num { get; set; } // num

        // Reverse navigation

        /// <summary>
        /// Parent (One-to-One) Burak2 pointed by [Burak1].([id], [num]) (FK_Burak_Test2)
        /// </summary>
        public virtual Burak1 Burak1_id { get; set; } // Burak1.FK_Burak_Test2

        /// <summary>
        /// Parent (One-to-One) Burak2 pointed by [Burak1].([id_t], [num]) (FK_Burak_Test1)
        /// </summary>
        public virtual Burak1 Burak1_id_t { get; set; } // Burak1.FK_Burak_Test1
    }

    // CalculatedColumnNotNull
    public class CalculatedColumnNotNull
    {
        public int ID { get; set; } // ID (Primary key)
        public byte Type { get; set; } // Type
        public bool IsCalendar { get; private set; } // IsCalendar
        public bool IsUtilization { get; private set; } // IsUtilization
    }

    // Car
    public class Car
    {
        public int Id { get; set; } // Id (Primary key)
        public int PrimaryColourId { get; set; } // PrimaryColourId
        public string CarMake { get; set; } // CarMake (length: 255)
        public int? computed_column { get; private set; } // computed_column
        public int computed_column_persisted { get; private set; } // computed_column_persisted

        // Reverse navigation

        /// <summary>
        /// Child Colours (Many-to-Many) mapped by table [CarToColour]
        /// </summary>
        public virtual ICollection<Colour> Colours { get; set; } // Many to many mapping

        // Foreign keys

        /// <summary>
        /// Parent Colour pointed by [Car].([PrimaryColourId]) (CarPrimaryColourFK)
        /// </summary>
        public virtual Colour Colour { get; set; } // CarPrimaryColourFK

        public Car()
        {
            Colours = new List<Colour>();
        }
    }

    // ClientCreationState
    public class ClientCreationState
    {
        public Guid id { get; set; } // id (Primary key)
        public bool WebhookSetup { get; set; } // WebhookSetup
        public bool AuthSetup { get; set; } // AuthSetup
        public bool AssignedCarrier { get; set; } // AssignedCarrier
    }

    // CMS_File
    public class CMS_File
    {
        public int FileId { get; set; } // FileId (Primary key)
        public string FileName { get; set; } // FileName (length: 100)
        public string FileDescription { get; set; } // FileDescription (length: 500)
        public string FileIdentifier { get; set; } // FileIdentifier (length: 100)
        public DateTime? ValidStartDate { get; set; } // ValidStartDate
        public DateTime? ValidEndDate { get; set; } // ValidEndDate
        public bool IsActive { get; set; } // IsActive

        // Reverse navigation

        /// <summary>
        /// Child CMS_Tags (Many-to-Many) mapped by table [CMS_FileTag]
        /// </summary>
        public virtual ICollection<CMS_Tag> CMS_Tags { get; set; } // Many to many mapping

        public CMS_File()
        {
            CMS_Tags = new List<CMS_Tag>();
        }
    }

    // CMS_Tag
    public class CMS_Tag
    {
        public int TagId { get; set; } // TagId (Primary key)
        public string TagName { get; set; } // TagName (length: 100)

        // Reverse navigation

        /// <summary>
        /// Child CMS_Files (Many-to-Many) mapped by table [CMS_FileTag]
        /// </summary>
        public virtual ICollection<CMS_File> CMS_Files { get; set; } // Many to many mapping

        public CMS_Tag()
        {
            CMS_Files = new List<CMS_File>();
        }
    }

    // CODE_MeetingTopicDetails
    public class CODE_MeetingTopicDetail
    {
        public int id { get; set; } // id (Primary key)
        public int id_reuniao { get; set; } // id_reuniao
        public int? ord_trab { get; set; } // ord_trab
        public string assunto { get; set; } // assunto (length: 250)
        public string desenvolvimento { get; set; } // desenvolvimento
        public string origem { get; set; } // origem (length: 5)
        public int? id_origem { get; set; } // id_origem
        public int? Estado { get; set; } // Estado
        public int CompanyID { get; set; } // CompanyID
        public DateTime DateCreated { get; set; } // DateCreated
        public DateTime? DateChanged { get; set; } // DateChanged

        // Foreign keys

        /// <summary>
        /// Parent CODE_PARAM_MeetingTopicDetailSource pointed by [CODE_MeetingTopicDetails].([origem]) (FK_CODE_MeetingTopicDetails_CODE_PARAM_MeetingTopicDetailSource)
        /// </summary>
        public virtual CODE_PARAM_MeetingTopicDetailSource CODE_PARAM_MeetingTopicDetailSource { get; set; } // FK_CODE_MeetingTopicDetails_CODE_PARAM_MeetingTopicDetailSource
    }

    // CODE_PARAM_MeetingTopicDetailSource
    public class CODE_PARAM_MeetingTopicDetailSource
    {
        public int ID { get; set; } // ID (Primary key)
        public string Code { get; set; } // Code (length: 5)
        public string Label { get; set; } // Label (length: 50)
        public string LabelENG { get; set; } // LabelENG (length: 50)
        public string LabelESP { get; set; } // LabelESP (length: 50)
        public string LabelFRA { get; set; } // LabelFRA (length: 50)
        public DateTime DateCreated { get; set; } // DateCreated
        public DateTime? DateChanged { get; set; } // DateChanged

        // Reverse navigation

        /// <summary>
        /// Child CODE_MeetingTopicDetails where [CODE_MeetingTopicDetails].[origem] point to this entity (FK_CODE_MeetingTopicDetails_CODE_PARAM_MeetingTopicDetailSource)
        /// </summary>
        public virtual ICollection<CODE_MeetingTopicDetail> CODE_MeetingTopicDetails { get; set; } // CODE_MeetingTopicDetails.FK_CODE_MeetingTopicDetails_CODE_PARAM_MeetingTopicDetailSource

        public CODE_PARAM_MeetingTopicDetailSource()
        {
            CODE_MeetingTopicDetails = new List<CODE_MeetingTopicDetail>();
        }
    }

    // CodeObject
    /// <summary>
    /// This is a test
    /// </summary>
    public class CodeObject
    {
        public int codeObjectNo { get; set; } // codeObjectNo (Primary key)
        public int? applicationNo { get; set; } // applicationNo
        public int type { get; set; } // type
        public string eName { get; set; } // eName (length: 250)
        public string aName { get; set; } // aName (length: 250)
        public string description { get; set; } // description (length: 250)
        public string codeName { get; set; } // codeName (length: 250)
        public string note { get; set; } // note (length: 250)
        public bool isObject { get; set; } // isObject
        public byte[] versionNumber { get; set; } // versionNumber (length: 8)

        public CodeObject()
        {
            codeObjectNo = 0;
            isObject = false;
        }
    }

    // Colour
    public class Colour
    {
        public int Id { get; set; } // Id (Primary key)
        public string Name { get; set; } // Name (length: 255)

        // Reverse navigation

        /// <summary>
        /// Child Cars (Many-to-Many) mapped by table [CarToColour]
        /// </summary>
        public virtual ICollection<Car> Cars_CarId { get; set; } // Many to many mapping

        /// <summary>
        /// Child Cars where [Car].[PrimaryColourId] point to this entity (CarPrimaryColourFK)
        /// </summary>
        public virtual ICollection<Car> Cars_PrimaryColourId { get; set; } // Car.CarPrimaryColourFK

        public Colour()
        {
            Cars_PrimaryColourId = new List<Car>();
            Cars_CarId = new List<Car>();
        }
    }

    // ColumnNameAndTypes
    /// <summary>
    /// This is to document the bring the action table
    /// This is to document the
    /// table with poor column name choices
    /// </summary>
    public class ColumnNameAndType
    {
        public int C36 { get; set; } // $ (Primary key)
        public int? C37 { get; set; } // %
        public int? C163 { get; set; } // £
        public int? C38fred { get; set; } // &fred$
        public int? abc4792 { get; set; } // abc/\
        public int? joe_bloggs { get; set; } // joe.bloggs
        public int? simon_hughes { get; set; } // simon-hughes
        public string description { get; set; } // description (length: 20)
        public DateTime someDate { get; set; } // someDate
        public string Obs { get; set; } // Obs (length: 50)
        public string Obs1 { get; set; } // Obs1 (length: 50)
        public string Obs2 { get; set; } // Obs2 (length: 50)
        public string Obs3 { get; set; } // Obs3 (length: 50)
        public int? @static { get; set; } // static
        public int? @readonly { get; set; } // readonly
        public int? C123Hi { get; set; } // 123Hi
        public float? areal { get; set; } // areal
        public double? afloat { get; set; } // afloat
        public float? afloat8 { get; set; } // afloat8
        public float? afloat20 { get; set; } // afloat20
        public float? afloat24 { get; set; } // afloat24
        public double? afloat53 { get; set; } // afloat53
        public decimal? adecimal { get; set; } // adecimal
        public decimal? adecimal_19_4 { get; set; } // adecimal_19_4
        public decimal? adecimal_10_3 { get; set; } // adecimal_10_3
        public decimal? anumeric { get; set; } // anumeric
        public decimal? anumeric_5_2 { get; set; } // anumeric_5_2
        public decimal? anumeric_11_3 { get; set; } // anumeric_11_3
        public decimal? amoney { get; set; } // amoney
        public decimal? asmallmoney { get; set; } // asmallmoney
        public int? brandon { get; set; } // brandon
        public NetTopologySuite.Geometries.Point GeographyType { get; set; } // GeographyType
        public NetTopologySuite.Geometries.Geometry GeometryType { get; set; } // GeometryType

        public ColumnNameAndType()
        {
            description = "";
            someDate = DateTime.Now;
            Obs = "[{\"k\":\"en\",\"v\":\"\"},{\"k\":\"pt\",\"v\":\"\"}]";
            Obs1 = @"\";
            Obs2 = @"\\";
            Obs3 = @"\\\";
            areal = 1.23f;
            afloat = 999.0;
        }
    }

    // ComplexView
    public class ComplexView
    {
        public string LicenseType { get; set; } // LicenseType (length: 128)
        public int? Count { get; set; } // Count
    }

    // Country
    public class Country
    {
        public int CountryID { get; set; } // CountryID (Primary key)
        public string Code { get; set; } // Code (length: 12)

        // Reverse navigation

        /// <summary>
        /// Child Attendees where [Attendee].[PhoneCountryID] point to this entity (FK_Attendee_PhoneCountry)
        /// </summary>
        public virtual ICollection<Attendee> Attendees { get; set; } // Attendee.FK_Attendee_PhoneCountry

        /// <summary>
        /// Child User309 where [User309].[PhoneCountryID] point to this entity (FK_User309_PhoneCountry)
        /// </summary>
        public virtual ICollection<User309> User309 { get; set; } // User309.FK_User309_PhoneCountry

        public Country()
        {
            Attendees = new List<Attendee>();
            User309 = new List<User309>();
        }
    }

    // cross_database_synonym
    public class cross_database_synonym
    {
        public int Id { get; set; } // Id (Primary key)
        public string Forename { get; set; } // Forename (length: 20)
    }

    // DateTimeDefaultTest
    public class DateTimeDefaultTest
    {
        public int Id { get; set; } // Id (Primary key)
        public DateTimeOffset? CreatedDate { get; set; } // CreatedDate

        public DateTimeDefaultTest()
        {
            CreatedDate = DateTimeOffset.Now;
        }
    }

    // rov_ColumnDefinitions
    public class dcg_rov_ColumnDefinition
    {
        public string TABLE_CATALOG { get; set; } // TABLE_CATALOG (length: 128)
        public string TABLE_SCHEMA { get; set; } // TABLE_SCHEMA (length: 128)
        public string TABLE_NAME { get; set; } // TABLE_NAME (length: 128)
        public string COLUMN_NAME { get; set; } // COLUMN_NAME (length: 128)
        public int? ORDINAL_POSITION { get; set; } // ORDINAL_POSITION
        public string COLUMN_DEFAULT { get; set; } // COLUMN_DEFAULT (length: 4000)
        public string IS_NULLABLE { get; set; } // IS_NULLABLE (length: 3)
        public string DATA_TYPE { get; set; } // DATA_TYPE (length: 128)
        public int? CHARACTER_MAXIMUM_LENGTH { get; set; } // CHARACTER_MAXIMUM_LENGTH
        public int? CHARACTER_OCTET_LENGTH { get; set; } // CHARACTER_OCTET_LENGTH
        public byte? NUMERIC_PRECISION { get; set; } // NUMERIC_PRECISION
        public short? NUMERIC_PRECISION_RADIX { get; set; } // NUMERIC_PRECISION_RADIX
        public int? NUMERIC_SCALE { get; set; } // NUMERIC_SCALE
        public short? DATETIME_PRECISION { get; set; } // DATETIME_PRECISION
        public string CHARACTER_SET_CATALOG { get; set; } // CHARACTER_SET_CATALOG (length: 128)
        public string CHARACTER_SET_SCHEMA { get; set; } // CHARACTER_SET_SCHEMA (length: 128)
        public string CHARACTER_SET_NAME { get; set; } // CHARACTER_SET_NAME (length: 128)
        public string COLLATION_CATALOG { get; set; } // COLLATION_CATALOG (length: 128)
        public string COLLATION_SCHEMA { get; set; } // COLLATION_SCHEMA (length: 128)
        public string COLLATION_NAME { get; set; } // COLLATION_NAME (length: 128)
        public string DOMAIN_CATALOG { get; set; } // DOMAIN_CATALOG (length: 128)
        public string DOMAIN_SCHEMA { get; set; } // DOMAIN_SCHEMA (length: 128)
        public string DOMAIN_NAME { get; set; } // DOMAIN_NAME (length: 128)
        public string TYPE { get; set; } // TYPE (length: 2)
    }

    // DefaultCheckForNull
    public class DefaultCheckForNull
    {
        public int Id { get; set; } // Id (Primary key)
        public string DescUppercase { get; set; } // DescUppercase (length: 5)
        public string DescLowercase { get; set; } // DescLowercase (length: 5)
        public string DescMixedCase { get; set; } // DescMixedCase (length: 5)
        public string DescBrackets { get; set; } // DescBrackets (length: 5)
        public string X1 { get; set; } // X1 (length: 255)
    }

    // DSOpe
    public class DSOpe
    {
        public int ID { get; set; } // ID (Primary key)
        public decimal decimal_default { get; set; } // decimal_default
        public Guid MyGuid { get; set; } // MyGuid
        public string @default { get; set; } // default (length: 10)
        public Guid? MyGuidBadDefault { get; set; } // MyGuidBadDefault

        public DSOpe()
        {
            decimal_default = 99.99m;
            MyGuid = Guid.Parse("9B7E1F67-5A81-4277-BC7D-06A3262A5C70");
            MyGuidBadDefault = null;
        }
    }

    // EnumsWithStringAsValue
    public class EnumsWithStringAsValue
    {
        public string enum_name { get; set; } // enum_name (Primary key) (length: 50)
        public string value { get; set; } // value (Primary key) (length: 10)
    }

    // DaysOfWeek
    public class EnumTest_DaysOfWeek
    {
        public string TypeName { get; set; } // TypeName (length: 50)
        public int TypeId { get; set; } // TypeId (Primary key)

        // Reverse navigation

        /// <summary>
        /// Child EnumTest_OpenDays where [OpenDays].[EnumId] point to this entity (Fk_OpenDays_EnumId)
        /// </summary>
        public virtual ICollection<EnumTest_OpenDay> EnumTest_OpenDays { get; set; } // OpenDays.Fk_OpenDays_EnumId

        public EnumTest_DaysOfWeek()
        {
            EnumTest_OpenDays = new List<EnumTest_OpenDay>();
        }
    }

    // OpenDays
    public class EnumTest_OpenDay
    {
        public int Id { get; set; } // Id (Primary key)
        public int EnumId { get; set; } // EnumId

        // Foreign keys

        /// <summary>
        /// Parent EnumTest_DaysOfWeek pointed by [OpenDays].([EnumId]) (Fk_OpenDays_EnumId)
        /// </summary>
        public virtual EnumTest_DaysOfWeek EnumTest_DaysOfWeek { get; set; } // Fk_OpenDays_EnumId
    }

    // EnumWithDefaultValue
    public class EnumWithDefaultValue
    {
        public int Id { get; set; } // Id (Primary key)
        public int SomeEnum { get; set; } // SomeEnum

        public EnumWithDefaultValue()
        {
            SomeEnum = 1;
        }
    }

    // EventProcessor
    public class EventProcessor
    {
        public int Id { get; set; } // Id (Primary key)
        public string Name { get; set; } // Name (length: 200)
        public string Description { get; set; } // Description (length: 512)
        public string EndpointAddress { get; set; } // EndpointAddress (length: 512)
        public bool Enabled { get; set; } // Enabled

        // Reverse navigation

        /// <summary>
        /// Child EventProcessorEventFilters where [EventProcessorEventFilter].[EventProcessorId] point to this entity (FK_EventProcessorEventFilter__EventProcessor)
        /// </summary>
        public virtual ICollection<EventProcessorEventFilter> EventProcessorEventFilters { get; set; } // EventProcessorEventFilter.FK_EventProcessorEventFilter__EventProcessor

        public EventProcessor()
        {
            EventProcessorEventFilters = new List<EventProcessorEventFilter>();
        }
    }

    // EventProcessorEventFilter
    public class EventProcessorEventFilter
    {
        public int Id { get; set; } // Id (Primary key)
        public int EventProcessorId { get; set; } // EventProcessorId
        public int WantedEventId { get; set; } // WantedEventId

        // Foreign keys

        /// <summary>
        /// Parent EventProcessor pointed by [EventProcessorEventFilter].([EventProcessorId]) (FK_EventProcessorEventFilter__EventProcessor)
        /// </summary>
        public virtual EventProcessor EventProcessor { get; set; } // FK_EventProcessorEventFilter__EventProcessor
    }

    // CV
    public class FFRS_CV
    {
        public Guid BatchUID { get; set; } // BatchUID (Primary key)
        public int CVID { get; set; } // CVID (Primary key)
        public string CVName { get; set; } // CVName (length: 200)
    }

    // FinancialInstitutionOffice
    public class FinancialInstitutionOffice
    {
        public Guid Code { get; set; } // Code
        public Guid FinancialInstitutionCode { get; set; } // FinancialInstitutionCode (Primary key via unique index UniqueOfficeName_FinancialInstitutionOffice)
        public string OfficeName { get; set; } // OfficeName (length: 200)
    }

    // SmallDecimalTestAttribute
    public class FkTest_SmallDecimalTestAttribute
    {
        public int FkID { get; set; } // FkID (Primary key)
        public string description { get; set; } // description (length: 20)

        // Reverse navigation

        /// <summary>
        /// Child Alpha_Harish3485 where [Harish3485].[harish_id] point to this entity (FK_Harish)
        /// </summary>
        public virtual ICollection<Alpha_Harish3485> Alpha_Harish3485 { get; set; } // Harish3485.FK_Harish

        // Foreign keys

        /// <summary>
        /// Parent SmallDecimalTest pointed by [SmallDecimalTestAttribute].([FkID]) (KateFK)
        /// </summary>
        public virtual SmallDecimalTest SmallDecimalTest { get; set; } // KateFK

        public FkTest_SmallDecimalTestAttribute()
        {
            Alpha_Harish3485 = new List<Alpha_Harish3485>();
        }
    }

    // footer
    public class footer
    {
        public int ID { get; set; } // ID (Primary key)
        public int otherID { get; set; } // otherID
        public DateTime added { get; set; } // added

        // Foreign keys

        /// <summary>
        /// Parent header pointed by [footer].([ID], [otherID]) (fooderFK)
        /// </summary>
        public virtual header header { get; set; } // fooderFK

        public footer()
        {
            added = DateTime.Now;
        }
    }

    // ForeignKeyIsNotEnforced
    public class ForeignKeyIsNotEnforced
    {
        public int id { get; set; } // id (Primary key)
        public int? null_value { get; set; } // null_value
        public int not_null_value { get; set; } // not_null_value

        // Reverse navigation

        /// <summary>
        /// Parent (One-to-One) ForeignKeyIsNotEnforced pointed by [ForeignKeyIsNotEnforcedItem].[not_null_value] (FK_ForeignKeyIsNotEnforcedItem_notnull_notnull)
        /// </summary>
        public virtual ForeignKeyIsNotEnforcedItem ForeignKeyIsNotEnforcedItem_not_null_value { get; set; } // ForeignKeyIsNotEnforcedItem.FK_ForeignKeyIsNotEnforcedItem_notnull_notnull

        /// <summary>
        /// Parent (One-to-One) ForeignKeyIsNotEnforced pointed by [ForeignKeyIsNotEnforcedItem].[null_value] (FK_ForeignKeyIsNotEnforcedItem_null_notnull)
        /// </summary>
        public virtual ForeignKeyIsNotEnforcedItem ForeignKeyIsNotEnforcedItem_null_value { get; set; } // ForeignKeyIsNotEnforcedItem.FK_ForeignKeyIsNotEnforcedItem_null_notnull
    }

    // ForeignKeyIsNotEnforcedItem
    public class ForeignKeyIsNotEnforcedItem
    {
        public int id { get; set; } // id (Primary key)
        public int? null_value { get; set; } // null_value
        public int not_null_value { get; set; } // not_null_value

        // Foreign keys

        /// <summary>
        /// Parent ForeignKeyIsNotEnforced pointed by [ForeignKeyIsNotEnforcedItem].([not_null_value]) (FK_ForeignKeyIsNotEnforcedItem_notnull_notnull)
        /// </summary>
        public virtual ForeignKeyIsNotEnforced ForeignKeyIsNotEnforced_not_null_value { get; set; } // FK_ForeignKeyIsNotEnforcedItem_notnull_notnull

        /// <summary>
        /// Parent ForeignKeyIsNotEnforced pointed by [ForeignKeyIsNotEnforcedItem].([null_value]) (FK_ForeignKeyIsNotEnforcedItem_null_notnull)
        /// </summary>
        public virtual ForeignKeyIsNotEnforced ForeignKeyIsNotEnforced_null_value { get; set; } // FK_ForeignKeyIsNotEnforcedItem_null_notnull
    }

    // HasPrincipalKeyTestChild
    public class HasPrincipalKeyTestChild
    {
        public int Id { get; set; } // Id (Primary key)
        public int A { get; set; } // A
        public int B { get; set; } // B
        public int? C { get; set; } // C
        public int? D { get; set; } // D

        // Foreign keys

        /// <summary>
        /// Parent HasPrincipalKeyTestParent pointed by [HasPrincipalKeyTestChild].([A], [B]) (FK_HasPrincipalKey_AB)
        /// </summary>
        public virtual HasPrincipalKeyTestParent HasPrincipalKeyTestParent { get; set; } // FK_HasPrincipalKey_AB
    }

    // HasPrincipalKeyTestParent
    public class HasPrincipalKeyTestParent
    {
        public int Id { get; set; } // Id (Primary key)
        public int AA { get; set; } // AA
        public int BB { get; set; } // BB
        public int? CC { get; set; } // CC
        public int? DD { get; set; } // DD

        // Reverse navigation

        /// <summary>
        /// Parent (One-to-One) HasPrincipalKeyTestParent pointed by [HasPrincipalKeyTestChild].([A], [B]) (FK_HasPrincipalKey_AB)
        /// </summary>
        public virtual HasPrincipalKeyTestChild HasPrincipalKeyTestChild { get; set; } // HasPrincipalKeyTestChild.FK_HasPrincipalKey_AB
    }

    // header
    public class header
    {
        public int ID { get; set; } // ID (Primary key)
        public int anotherID { get; set; } // anotherID (Primary key)
        public DateTime added { get; set; } // added

        // Reverse navigation

        /// <summary>
        /// Child footers where [footer].([ID], [otherID]) point to this entity (fooderFK)
        /// </summary>
        public virtual ICollection<footer> footers { get; set; } // footer.fooderFK

        public header()
        {
            added = DateTime.Now;
            footers = new List<footer>();
        }
    }

    // hierarchy_test
    public class hierarchy_test
    {
        public int ID { get; set; } // ID (Primary key)
        public HierarchyId hid { get; set; } // hid
    }

    // InflectorData
    public class InflectorData
    {
        public int Id { get; set; } // Id (Primary key)
    }

    // InflectorStatus
    public class InflectorStatus
    {
        public int Id { get; set; } // Id (Primary key)
        public int SayHelloTo { get; set; } // SayHelloTo
        public int SignalData { get; set; } // SignalData
        public int NotificationStatus { get; set; } // NotificationStatus
        public int Status { get; set; } // Status
        public int To { get; set; } // To
        public int Data { get; set; } // Data
    }

    // InflectorTo
    public class InflectorTo
    {
        public int Id { get; set; } // Id (Primary key)
    }

    // Role
    public class Issue47_Role
    {
        public int RoleId { get; set; } // RoleId (Primary key)
        public string Role { get; set; } // Role (length: 10)

        // Reverse navigation

        /// <summary>
        /// Child Issue47_UserRoles where [UserRoles].[RoleId] point to this entity (Issue47_UserRoles_roleid)
        /// </summary>
        public virtual ICollection<Issue47_UserRole> Issue47_UserRoles { get; set; } // UserRoles.Issue47_UserRoles_roleid

        public Issue47_Role()
        {
            Issue47_UserRoles = new List<Issue47_UserRole>();
        }
    }

    // Users
    public class Issue47_User
    {
        public int UserId { get; set; } // UserId (Primary key)
        public string Name { get; set; } // Name (length: 10)

        // Reverse navigation

        /// <summary>
        /// Child Issue47_UserRoles where [UserRoles].[UserId] point to this entity (Issue47_UserRoles_userid)
        /// </summary>
        public virtual ICollection<Issue47_UserRole> Issue47_UserRoles { get; set; } // UserRoles.Issue47_UserRoles_userid

        public Issue47_User()
        {
            Issue47_UserRoles = new List<Issue47_UserRole>();
        }
    }

    // UserRoles
    public class Issue47_UserRole
    {
        public int UserRoleId { get; set; } // UserRoleId (Primary key)
        public int UserId { get; set; } // UserId
        public int RoleId { get; set; } // RoleId

        // Foreign keys

        /// <summary>
        /// Parent Issue47_Role pointed by [UserRoles].([RoleId]) (Issue47_UserRoles_roleid)
        /// </summary>
        public virtual Issue47_Role Issue47_Role { get; set; } // Issue47_UserRoles_roleid

        /// <summary>
        /// Parent Issue47_User pointed by [UserRoles].([UserId]) (Issue47_UserRoles_userid)
        /// </summary>
        public virtual Issue47_User Issue47_User { get; set; } // Issue47_UserRoles_userid
    }

    // MultipleKeys
    public class MultipleKey
    {
        public int UserId { get; set; } // UserId (Primary key)
        public int FavouriteColourId { get; set; } // FavouriteColourId (Primary key via unique index )
        public int BestHolidayTypeId { get; set; } // BestHolidayTypeId (Primary key)
        public int BankId { get; set; } // BankId
        public int CarId { get; set; } // CarId
    }

    // The table 'NoPrimaryKeys' is not usable by entity framework because it
    // does not have a primary key. It is listed here for completeness.
    // NoPrimaryKeys
    public class NoPrimaryKey
    {
        public int? Id { get; set; } // Id
        public string Description { get; set; } // Description (length: 10)
    }

    // The table 'Test' is not usable by entity framework because it
    // does not have a primary key. It is listed here for completeness.
    // Test
    public class Omega_Test
    {
        public int? Id { get; set; } // Id
        public int? ExclusionTest { get; set; } // ExclusionTest
    }

    // Issue
    public class OneEightSix_Issue
    {
        public int Id { get; set; } // Id (Primary key)
        public string Title { get; set; } // Title (length: 100)
        public string Content { get; set; } // Content
        public int? ConsentDocumentId { get; set; } // ConsentDocumentId

        // Reverse navigation

        /// <summary>
        /// Child OneEightSix_UploadedFiles (Many-to-Many) mapped by table [IssueUploadedFile]
        /// </summary>
        public virtual ICollection<OneEightSix_UploadedFile> OneEightSix_UploadedFiles { get; set; } // Many to many mapping

        // Foreign keys

        /// <summary>
        /// Parent OneEightSix_UploadedFile pointed by [Issue].([ConsentDocumentId]) (FK_Issue_UploadedFileConsentDocument)
        /// </summary>
        public virtual OneEightSix_UploadedFile OneEightSix_UploadedFile { get; set; } // FK_Issue_UploadedFileConsentDocument

        public OneEightSix_Issue()
        {
            OneEightSix_UploadedFiles = new List<OneEightSix_UploadedFile>();
        }
    }

    // UploadedFile
    public class OneEightSix_UploadedFile
    {
        public int Id { get; set; } // Id (Primary key)
        public string FullPath { get; set; } // FullPath

        // Reverse navigation

        /// <summary>
        /// Child OneEightSix_Issues where [Issue].[ConsentDocumentId] point to this entity (FK_Issue_UploadedFileConsentDocument)
        /// </summary>
        public virtual ICollection<OneEightSix_Issue> OneEightSix_Issues_ConsentDocumentId { get; set; } // Issue.FK_Issue_UploadedFileConsentDocument

        /// <summary>
        /// Child OneEightSix_Issues (Many-to-Many) mapped by table [IssueUploadedFile]
        /// </summary>
        public virtual ICollection<OneEightSix_Issue> OneEightSix_Issues_IssueId { get; set; } // Many to many mapping

        public OneEightSix_UploadedFile()
        {
            OneEightSix_Issues_ConsentDocumentId = new List<OneEightSix_Issue>();
            OneEightSix_Issues_IssueId = new List<OneEightSix_Issue>();
        }
    }

    // Period.Table
    public class Period_Table
    {
        public int id { get; set; } // id (Primary key)
        public int? joe_bloggs { get; set; } // joe.bloggs
    }

    // PeriodTestTable
    public class PeriodTestTable
    {
        public int id { get; set; } // id (Primary key)
        public int? joe_bloggs { get; set; } // joe.bloggs
    }

    // Person
    public class Person
    {
        public int Id { get; set; } // Id (Primary key)
        public string Name { get; set; } // Name (length: 50)

        // Reverse navigation

        /// <summary>
        /// Child PersonPosts where [PersonPosts].[CreatedBy] point to this entity (FK_PersonPosts_CreatedBy)
        /// </summary>
        public virtual ICollection<PersonPost> PersonPosts_CreatedBy { get; set; } // PersonPosts.FK_PersonPosts_CreatedBy

        /// <summary>
        /// Child PersonPosts where [PersonPosts].[UpdatedBy] point to this entity (FK_PersonPosts_UpdatedBy)
        /// </summary>
        public virtual ICollection<PersonPost> PersonPosts_UpdatedBy { get; set; } // PersonPosts.FK_PersonPosts_UpdatedBy

        public Person()
        {
            PersonPosts_CreatedBy = new List<PersonPost>();
            PersonPosts_UpdatedBy = new List<PersonPost>();
        }
    }

    // PersonPosts
    public class PersonPost
    {
        public int Id { get; set; } // Id (Primary key)
        public string Title { get; set; } // Title (length: 20)
        public string Body { get; set; } // Body (length: 100)
        public int CreatedBy { get; set; } // CreatedBy
        public int UpdatedBy { get; set; } // UpdatedBy

        // Foreign keys

        /// <summary>
        /// Parent Person pointed by [PersonPosts].([CreatedBy]) (FK_PersonPosts_CreatedBy)
        /// </summary>
        public virtual Person Person_CreatedBy { get; set; } // FK_PersonPosts_CreatedBy

        /// <summary>
        /// Parent Person pointed by [PersonPosts].([UpdatedBy]) (FK_PersonPosts_UpdatedBy)
        /// </summary>
        public virtual Person Person_UpdatedBy { get; set; } // FK_PersonPosts_UpdatedBy
    }

    // pk_ordinal_test
    public class pk_ordinal_test
    {
        public int C1 { get; set; } // C1 (Primary key)
        public int C2 { get; set; } // C2
        public int C3 { get; set; } // C3 (Primary key)
    }

    // PropertyTypesToAdd
    public class PropertyTypesToAdd
    {
        public int id { get; set; } // id (Primary key)
        public DateTime? dt_default { get; set; } // dt_default
        public DateTime? dt7 { get; set; } // dt7
        public string defaultCheck { get; set; } // defaultCheck (length: 10)

        // Reverse navigation

        /// <summary>
        /// Child Beta_Harish3485 where [Harish3485].[another_id] point to this entity (FK_Harish)
        /// </summary>
        public virtual ICollection<Beta_Harish3485> Beta_Harish3485 { get; set; } // Harish3485.FK_Harish

        public PropertyTypesToAdd()
        {
            Beta_Harish3485 = new List<Beta_Harish3485>();
        }
    }

    // SequenceTest
    public class SequenceTest
    {
        public int Id { get; set; } // Id (Primary key)
        public long CntByBigInt { get; set; } // CntByBigInt
        public byte CntByTinyInt { get; set; } // CntByTinyInt
        public short CntBySmallInt { get; set; } // CntBySmallInt
        public decimal CntByDecimal { get; set; } // CntByDecimal
        public decimal CntByNumeric { get; set; } // CntByNumeric
    }

    // SequenceTestPartTwo
    public class SequenceTestPartTwo
    {
        public int Id { get; set; } // Id (Primary key)
        public long CntByBigInt { get; set; } // CntByBigInt
        public byte CntByTinyInt { get; set; } // CntByTinyInt
    }

    // SmallDecimalTest
    public class SmallDecimalTest
    {
        public int id { get; set; } // id (Primary key)
        public decimal? KoeffVed { get; set; } // KoeffVed

        // Reverse navigation

        /// <summary>
        /// Parent (One-to-One) SmallDecimalTest pointed by [SmallDecimalTestAttribute].[FkID] (KateFK)
        /// </summary>
        public virtual FkTest_SmallDecimalTestAttribute FkTest_SmallDecimalTestAttribute { get; set; } // SmallDecimalTestAttribute.KateFK

        public SmallDecimalTest()
        {
            KoeffVed = 0.5m;
        }
    }

    // SmallDecimalTestView
    public class SmallDecimalTestView
    {
        public int FkID { get; set; } // FkID
        public string description { get; set; } // description (length: 20)
    }

    // Boo
    public class Stafford_Boo
    {
        public int id { get; set; } // id (Primary key)
        public string name { get; set; } // name (length: 10)

        // Reverse navigation

        /// <summary>
        /// Parent (One-to-One) Stafford_Boo pointed by [Foo].[id] (FK_Foo_Boo)
        /// </summary>
        public virtual Stafford_Foo Stafford_Foo { get; set; } // Foo.FK_Foo_Boo
    }

    // ComputedColumns
    public class Stafford_ComputedColumn
    {
        public int Id { get; set; } // Id (Primary key)
        public string MyColumn { get; set; } // MyColumn (length: 10)
        public string MyComputedColumn { get; private set; } // MyComputedColumn (length: 10)
    }

    // Foo
    public class Stafford_Foo
    {
        public int id { get; set; } // id (Primary key)
        public string name { get; set; } // name (length: 10)

        // Foreign keys

        /// <summary>
        /// Parent Stafford_Boo pointed by [Foo].([id]) (FK_Foo_Boo)
        /// </summary>
        public virtual Stafford_Boo Stafford_Boo { get; set; } // FK_Foo_Boo
    }

    // Child
    public class Synonyms_Child
    {
        public int ChildId { get; set; } // ChildId (Primary key)
        public int ParentId { get; set; } // ParentId
        public string ChildName { get; set; } // ChildName (length: 100)

        // Foreign keys

        /// <summary>
        /// Parent Synonyms_Parent pointed by [Child].([ParentId]) (FK_Child_Parent)
        /// </summary>
        public virtual Synonyms_Parent Synonyms_Parent { get; set; } // FK_Child_Parent
    }

    // Parent
    public class Synonyms_Parent
    {
        public int ParentId { get; set; } // ParentId (Primary key)
        public string ParentName { get; set; } // ParentName (length: 100)

        // Reverse navigation

        /// <summary>
        /// Child Synonyms_Children where [Child].[ParentId] point to this entity (FK_Child_Parent)
        /// </summary>
        public virtual ICollection<Synonyms_Child> Synonyms_Children { get; set; } // Child.FK_Child_Parent

        public Synonyms_Parent()
        {
            Synonyms_Children = new List<Synonyms_Child>();
        }
    }

    // table.with.multiple.periods
    public class table_with_multiple_period
    {
        public int id { get; set; } // id (Primary key)
        public string description { get; set; } // description (length: 20)
    }

    // TableA
    public class TableA
    {
        public int TableAId { get; set; } // TableAId (Primary key)
        public string TableADesc { get; set; } // TableADesc (length: 20)

        // Reverse navigation

        /// <summary>
        /// Child TableBs where [TableB].[TableAId] point to this entity (FK_TableA_CompositeKey_Req)
        /// </summary>
        public virtual ICollection<TableB> TableBs { get; set; } // TableB.FK_TableA_CompositeKey_Req

        public TableA()
        {
            TableBs = new List<TableB>();
        }
    }

    // TableB
    public class TableB
    {
        public int TableBId { get; set; } // TableBId (Primary key)
        public int TableAId { get; set; } // TableAId (Primary key)
        public int? ParentTableAId { get; set; } // ParentTableAId
        public string TableBDesc { get; set; } // TableBDesc (length: 20)

        // Reverse navigation

        /// <summary>
        /// Parent (One-to-One) TableB pointed by [TableB].([TableAId], [TableBId]) (ParentTableB_Hierarchy)
        /// </summary>
        public virtual TableB TableB2 { get; set; } // TableB.ParentTableB_Hierarchy

        // Foreign keys

        /// <summary>
        /// Parent TableA pointed by [TableB].([TableAId]) (FK_TableA_CompositeKey_Req)
        /// </summary>
        public virtual TableA TableA_TableAId { get; set; } // FK_TableA_CompositeKey_Req

        /// <summary>
        /// Parent TableB pointed by [TableB].([TableAId], [TableBId]) (ParentTableB_Hierarchy)
        /// </summary>
        public virtual TableB TableB1 { get; set; } // ParentTableB_Hierarchy
    }

    // table with duplicate column names
    public class tablewithduplicatecolumnname
    {
        public int id { get; set; } // id (Primary key)
        public int user_id { get; set; } // user_id
        public int UserId1 { get; set; } // UserId
        public int UserId2 { get; set; } // User Id
        public int UserId { get; set; } // User  Id
        public int user__id { get; set; } // user__id
    }

    // table with space
    public class tablewithspace
    {
        public int id { get; set; } // id (Primary key)

        // Reverse navigation

        /// <summary>
        /// Child tablewithspaceandincolumns (Many-to-Many) mapped by table [table mapping with space]
        /// </summary>
        public virtual ICollection<tablewithspaceandincolumn> tablewithspaceandincolumns { get; set; } // Many to many mapping

        public tablewithspace()
        {
            tablewithspaceandincolumns = new List<tablewithspaceandincolumn>();
        }
    }

    // table with space and in columns
    public class tablewithspaceandincolumn
    {
        public int idvalue { get; set; } // id value (Primary key)

        // Reverse navigation

        /// <summary>
        /// Child tablewithspaces (Many-to-Many) mapped by table [table mapping with space]
        /// </summary>
        public virtual ICollection<tablewithspace> tablewithspaces { get; set; } // Many to many mapping

        public tablewithspaceandincolumn()
        {
            tablewithspaces = new List<tablewithspace>();
        }
    }

    // TableWithSpaceInColumnOnly
    public class TableWithSpaceInColumnOnly
    {
        public int idvalue { get; set; } // id value (Primary key)
    }

    // TadeuszSobol
    public class TadeuszSobol
    {
        public int Id { get; set; } // Id (Primary key)
        public string Description { get; set; } // Description
        public string Notes { get; set; } // Notes
        public string Name { get; set; } // Name (length: 10)
    }

    // Task
    public class Task1
    {
        public long TaskId { get; set; } // TaskId (Primary key)
    }

    // tblOrders
    public class tblOrder
    {
        public int ID { get; set; } // ID (Primary key)
        public DateTime added { get; set; } // added

        // Reverse navigation

        /// <summary>
        /// Child tblOrderLines where [tblOrderLines].[OrderID] point to this entity (tblOrdersFK)
        /// </summary>
        public virtual ICollection<tblOrderLine> tblOrderLines { get; set; } // tblOrderLines.tblOrdersFK

        public tblOrder()
        {
            added = DateTime.Now;
            tblOrderLines = new List<tblOrderLine>();
        }
    }

    // tblOrderErrors
    public class tblOrderError
    {
        public int ID { get; set; } // ID (Primary key)
        public string error { get; set; } // error (length: 50)
    }

    // tblOrderErrorsAB_
    public class tblOrderErrorsAB
    {
        public int ID { get; set; } // ID (Primary key)
        public string error { get; set; } // error (length: 50)
    }

    // tblOrderLines
    public class tblOrderLine
    {
        public int ID { get; set; } // ID (Primary key)
        public int OrderID { get; set; } // OrderID
        public string sku { get; set; } // sku (length: 15)

        // Foreign keys

        /// <summary>
        /// Parent tblOrder pointed by [tblOrderLines].([OrderID]) (tblOrdersFK)
        /// </summary>
        public virtual tblOrder tblOrder { get; set; } // tblOrdersFK
    }

    // TemporalDepartment
    public class TemporalDepartment
    {
        public int DeptID { get; set; } // DeptID (Primary key)
        public string DeptName { get; set; } // DeptName (length: 50)
        public int? ManagerID { get; set; } // ManagerID
        public int? ParentDeptID { get; set; } // ParentDeptID
        public DateTime SysStartTime { get; set; } // SysStartTime
        public DateTime SysEndTime { get; set; } // SysEndTime
    }

    // TemporalDepartmentHistory
    public class TemporalDepartmentHistory
    {
        public int DeptID { get; set; } // DeptID (Primary key)
        public string DeptName { get; set; } // DeptName (Primary key) (length: 50)
        public int? ManagerID { get; set; } // ManagerID
        public int? ParentDeptID { get; set; } // ParentDeptID
        public DateTime SysStartTime { get; set; } // SysStartTime (Primary key)
        public DateTime SysEndTime { get; set; } // SysEndTime (Primary key)
    }

    // The table 'Test' is not usable by entity framework because it
    // does not have a primary key. It is listed here for completeness.
    // Test
    public class Test
    {
        public int? Id { get; set; } // Id
        public int? ExclusionTest { get; set; } // ExclusionTest
    }

    // ThisIsMemoryOptimised
    public class ThisIsMemoryOptimised
    {
        public int Id { get; set; } // Id (Primary key)
        public string Description { get; set; } // Description (length: 20)
    }

    // Ticket
    public class Ticket
    {
        public long Id { get; set; } // Id (Primary key)
        public long CreatedById { get; set; } // CreatedById
        public long? ModifiedById { get; set; } // ModifiedById

        // Foreign keys

        /// <summary>
        /// Parent AppUser pointed by [Ticket].([CreatedById]) (FK_Ticket_AppUser)
        /// </summary>
        public virtual AppUser CreatedBy { get; set; } // FK_Ticket_AppUser

        /// <summary>
        /// Parent AppUser pointed by [Ticket].([ModifiedById]) (FK_Ticket_AppUser1)
        /// </summary>
        public virtual AppUser ModifiedBy { get; set; } // FK_Ticket_AppUser1
    }

    // TimestampNotNull
    public class TimestampNotNull
    {
        public int Id { get; set; } // Id (Primary key)
        public byte[] Version { get; set; } // Version (length: 8)
        public int Number { get; set; } // Number
    }

    // TimestampNullable
    public class TimestampNullable
    {
        public int Id { get; set; } // Id (Primary key)
        public byte[] Version { get; set; } // Version (length: 8)
        public int Number { get; set; } // Number
    }

    // Token
    public class Token
    {
        public Guid Id { get; set; } // Id (Primary key)
        public bool Enabled { get; set; } // Enabled

        public Token()
        {
            Id = Guid.NewGuid();
        }
    }

    // User
    public class User
    {
        public int ID { get; set; } // ID (Primary key)
        public string ExternalUserID { get; set; } // ExternalUserID (length: 50)

        // Reverse navigation

        /// <summary>
        /// Child User_Documents where [User_Document].[CreatedByUserID] point to this entity (FK_User_Document_User1)
        /// </summary>
        public virtual ICollection<User_Document> User_Documents_CreatedByUserID { get; set; } // User_Document.FK_User_Document_User1

        /// <summary>
        /// Child User_Documents where [User_Document].[UserID] point to this entity (FK_User_Document_User)
        /// </summary>
        public virtual ICollection<User_Document> User_Documents_UserID { get; set; } // User_Document.FK_User_Document_User

        public User()
        {
            User_Documents_CreatedByUserID = new List<User_Document>();
            User_Documents_UserID = new List<User_Document>();
        }
    }

    // User_Document
    public class User_Document
    {
        public int ID { get; set; } // ID (Primary key)
        public int UserID { get; set; } // UserID
        public int CreatedByUserID { get; set; } // CreatedByUserID

        // Foreign keys

        /// <summary>
        /// Parent User pointed by [User_Document].([CreatedByUserID]) (FK_User_Document_User1)
        /// </summary>
        public virtual User CreatedByUser { get; set; } // FK_User_Document_User1

        /// <summary>
        /// Parent User pointed by [User_Document].([UserID]) (FK_User_Document_User)
        /// </summary>
        public virtual User User_UserID { get; set; } // FK_User_Document_User
    }

    // User309
    public class User309
    {
        public long UserID { get; set; } // UserID (Primary key)
        public string Lastname { get; set; } // Lastname (length: 100)
        public string Firstname { get; set; } // Firstname (length: 100)
        public int? PhoneCountryID { get; set; } // PhoneCountryID

        // Foreign keys

        /// <summary>
        /// Parent Country pointed by [User309].([PhoneCountryID]) (FK_User309_PhoneCountry)
        /// </summary>
        public virtual Country Country { get; set; } // FK_User309_PhoneCountry
    }

    // Versioned
    public class Versioned
    {
        public int Id { get; set; } // Id (Primary key)
        public byte[] Version { get; set; } // Version (length: 8)
        public int Number { get; set; } // Number
    }

    // VersionedNullable
    public class VersionedNullable
    {
        public int Id { get; set; } // Id (Primary key)
        public byte[] Version { get; set; } // Version (length: 8)
        public int Number { get; set; } // Number
    }

    // view.with.multiple.periods
    public class view_with_multiple_period
    {
        public int FkID { get; set; } // FkID
        public string description { get; set; } // description (length: 20)
    }

    // view with space
    public class viewwithspace
    {
        public int codeObjectNo { get; set; } // codeObjectNo
        public int? applicationNo { get; set; } // applicationNo
        public int type { get; set; } // type
        public string eName { get; set; } // eName (length: 250)
        public string aName { get; set; } // aName (length: 250)
        public string description { get; set; } // description (length: 250)
        public string codeName { get; set; } // codeName (length: 250)
        public string note { get; set; } // note (length: 250)
        public bool isObject { get; set; } // isObject
        public byte[] versionNumber { get; set; } // versionNumber (length: 8)
    }

    // Articles
    public class WVN_Article
    {
        public int PK_Article { get; set; } // PK_Article (Primary key)
        public Guid FK_Factory { get; set; } // FK_Factory
        public int FK_ArticleLevel { get; set; } // FK_ArticleLevel
        public int? FK_ParentArticle { get; set; } // FK_ParentArticle
        public string Code { get; set; } // Code (length: 20)
    }

    // v_Articles
    public class WVN_v_Article
    {
        public int? PK_Article { get; set; } // PK_Article
        public Guid? FK_Factory { get; set; } // FK_Factory
        public int? FK_ArticleLevel { get; set; } // FK_ArticleLevel
        public int? FK_ParentArticle { get; set; } // FK_ParentArticle
        public string Code { get; set; } // Code (length: 20)
        public string FullCode { get; set; } // FullCode (length: 100)
    }

    // Бренды товара
    public class Брендытовара
    {
        public int Кодбренда { get; set; } // Код бренда (Primary key)
        public string Наименованиебренда { get; set; } // Наименование бренда (length: 50)
        public byte[] Логотип_бренда { get; set; } // Логотип_бренда (length: 2147483647)
        public byte[] Логотип_бренда_вертикальный { get; set; } // Логотип_бренда_вертикальный (length: 2147483647)
    }


    #endregion

    #region POCO Configuration

    // A
    public class AConfiguration : IEntityTypeConfiguration<A>
    {
        public void Configure(EntityTypeBuilder<A> builder)
        {
            builder.ToTable("A", "dbo");
            builder.HasKey(x => x.AId).HasName("PK_A").IsClustered();

            builder.Property(x => x.AId).HasColumnName(@"AId").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.C1).HasColumnName(@"C1").HasColumnType("int").IsRequired();
            builder.Property(x => x.C2).HasColumnName(@"C2").HasColumnType("int").IsRequired();

            // Foreign keys
            builder.HasOne(a => a.AAREF).WithMany(b => b.A).HasForeignKey(c => new { c.C1, c.C2 }).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_A_A");
        }
    }

    // AAREF
    public class AAREFConfiguration : IEntityTypeConfiguration<AAREF>
    {
        public void Configure(EntityTypeBuilder<AAREF> builder)
        {
            builder.ToTable("AAREF", "dbo");
            builder.HasKey(x => new { x.C1, x.C2 }).HasName("PK_AREF").IsClustered();

            builder.Property(x => x.C1).HasColumnName(@"C1").HasColumnType("int").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.C2).HasColumnName(@"C2").HasColumnType("int").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.CreatedUTC).HasColumnName(@"CreatedUTC").HasColumnType("datetime2").IsRequired();
        }
    }

    // AB_OrderLinesAB_
    public class AB_OrderLinesABConfiguration : IEntityTypeConfiguration<AB_OrderLinesAB>
    {
        public void Configure(EntityTypeBuilder<AB_OrderLinesAB> builder)
        {
            builder.ToTable("AB_OrderLinesAB_", "dbo");
            builder.HasKey(x => x.ID).HasName("PK_AB_OrderLinesAB").IsClustered();

            builder.Property(x => x.ID).HasColumnName(@"ID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.OrderID).HasColumnName(@"OrderID").HasColumnType("int").IsRequired();
            builder.Property(x => x.sku).HasColumnName(@"sku").HasColumnType("varchar(15)").IsRequired(false).IsUnicode(false).HasMaxLength(15);

            // Foreign keys
            builder.HasOne(a => a.AB_OrdersAB).WithMany(b => b.AB_OrderLinesABs).HasForeignKey(c => c.OrderID).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("AB_OrderLinesAB_FK");
        }
    }

    // AB_OrdersAB_
    public class AB_OrdersABConfiguration : IEntityTypeConfiguration<AB_OrdersAB>
    {
        public void Configure(EntityTypeBuilder<AB_OrdersAB> builder)
        {
            builder.ToTable("AB_OrdersAB_", "dbo");
            builder.HasKey(x => x.ID).HasName("PK_AB_OrdersAB").IsClustered();

            builder.Property(x => x.ID).HasColumnName(@"ID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.added).HasColumnName(@"added").HasColumnType("datetime").IsRequired();
        }
    }

    // AllColumnsNull
    public class AllColumnsNullConfiguration : IEntityTypeConfiguration<AllColumnsNull>
    {
        public void Configure(EntityTypeBuilder<AllColumnsNull> builder)
        {
            builder.ToView("AllColumnsNull", "dbo");
            builder.HasNoKey();

            builder.Property(x => x.total).HasColumnName(@"total").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.aName).HasColumnName(@"aName").HasColumnType("nvarchar(250)").IsRequired(false).HasMaxLength(250);
        }
    }

    // Harish3485
    public class Alpha_Harish3485Configuration : IEntityTypeConfiguration<Alpha_Harish3485>
    {
        public void Configure(EntityTypeBuilder<Alpha_Harish3485> builder)
        {
            builder.ToTable("Harish3485", "Alpha");
            builder.HasKey(x => x.id).HasName("PK_Alpha_Harish3485").IsClustered();

            builder.Property(x => x.id).HasColumnName(@"id").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.harish_id).HasColumnName(@"harish_id").HasColumnType("int").IsRequired();

            // Foreign keys
            builder.HasOne(a => a.FkTest_SmallDecimalTestAttribute).WithMany(b => b.Alpha_Harish3485).HasForeignKey(c => c.harish_id).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_Harish");
        }
    }

    // workflow
    public class Alpha_workflowConfiguration : IEntityTypeConfiguration<Alpha_workflow>
    {
        public void Configure(EntityTypeBuilder<Alpha_workflow> builder)
        {
            builder.ToTable("workflow", "Alpha");
            builder.HasKey(x => x.Id).HasName("PK_alpha_workflow").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.Description).HasColumnName(@"Description").HasColumnType("varchar(10)").IsRequired(false).IsUnicode(false).HasMaxLength(10);
        }
    }

    // alpha_workflow_synonym
    public class alpha_workflow_synonymConfiguration : IEntityTypeConfiguration<alpha_workflow_synonym>
    {
        public void Configure(EntityTypeBuilder<alpha_workflow_synonym> builder)
        {
            builder.ToTable("alpha_workflow_synonym", "dbo");
            builder.HasKey(x => x.Id);

            builder.Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.Description).HasColumnName(@"Description").HasColumnType("varchar(10)").IsRequired(false).IsUnicode(false).HasMaxLength(10);
        }
    }

    // UserFacilityServiceRole
    public class App_UserFacilityServiceRoleConfiguration : IEntityTypeConfiguration<App_UserFacilityServiceRole>
    {
        public void Configure(EntityTypeBuilder<App_UserFacilityServiceRole> builder)
        {
            builder.ToTable("UserFacilityServiceRole", "App");
            builder.HasKey(x => new { x.userId, x.appId, x.fsrId });

            builder.Property(x => x.userId).HasColumnName(@"userId").HasColumnType("int").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.appId).HasColumnName(@"appId").HasColumnType("int").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.fsrId).HasColumnName(@"fsrId").HasColumnType("int").IsRequired().ValueGeneratedNever();
        }
    }

    // AppUser
    public class AppUserConfiguration : IEntityTypeConfiguration<AppUser>
    {
        public void Configure(EntityTypeBuilder<AppUser> builder)
        {
            builder.ToTable("AppUser", "dbo");
            builder.HasKey(x => x.Id).HasName("PK_AppUser").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"Id").HasColumnType("bigint").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.Name).HasColumnName(@"Name").HasColumnType("nvarchar(50)").IsRequired().HasMaxLength(50);
        }
    }

    // Attendee
    public class AttendeeConfiguration : IEntityTypeConfiguration<Attendee>
    {
        public void Configure(EntityTypeBuilder<Attendee> builder)
        {
            builder.ToTable("Attendee", "dbo");
            builder.HasKey(x => x.AttendeeID).HasName("PK_Attendee").IsClustered();

            builder.Property(x => x.AttendeeID).HasColumnName(@"AttendeeID").HasColumnType("bigint").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.Lastname).HasColumnName(@"Lastname").HasColumnType("nvarchar(50)").IsRequired().HasMaxLength(50);
            builder.Property(x => x.Firstname).HasColumnName(@"Firstname").HasColumnType("nvarchar(50)").IsRequired().HasMaxLength(50);
            builder.Property(x => x.PhoneCountryID).HasColumnName(@"PhoneCountryID").HasColumnType("int").IsRequired(false);

            // Foreign keys
            builder.HasOne(a => a.Country).WithMany(b => b.Attendees).HasForeignKey(c => c.PhoneCountryID).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_Attendee_PhoneCountry");
        }
    }

    // BatchTest
    public class BatchTestConfiguration : IEntityTypeConfiguration<BatchTest>
    {
        public void Configure(EntityTypeBuilder<BatchTest> builder)
        {
            builder.ToTable("BatchTest", "dbo");
            builder.HasKey(x => x.code).HasName("PK_BatchTest").IsClustered();

            builder.Property(x => x.code).HasColumnName(@"code").HasColumnType("nvarchar(8)").IsRequired().HasMaxLength(8).ValueGeneratedNever();
        }
    }

    // Harish3485
    public class Beta_Harish3485Configuration : IEntityTypeConfiguration<Beta_Harish3485>
    {
        public void Configure(EntityTypeBuilder<Beta_Harish3485> builder)
        {
            builder.ToTable("Harish3485", "Beta");
            builder.HasKey(x => x.id).HasName("PK_Beta_Harish3485").IsClustered();

            builder.Property(x => x.id).HasColumnName(@"id").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.another_id).HasColumnName(@"another_id").HasColumnType("int").IsRequired();

            // Foreign keys
            builder.HasOne(a => a.PropertyTypesToAdd).WithMany(b => b.Beta_Harish3485).HasForeignKey(c => c.another_id).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_Harish");
        }
    }

    // ToAlpha
    public class Beta_ToAlphaConfiguration : IEntityTypeConfiguration<Beta_ToAlpha>
    {
        public void Configure(EntityTypeBuilder<Beta_ToAlpha> builder)
        {
            builder.ToTable("ToAlpha", "Beta");
            builder.HasKey(x => x.Id).HasName("PK_beta_ToAlpha").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.AlphaId).HasColumnName(@"AlphaId").HasColumnType("int").IsRequired();

            // Foreign keys
            builder.HasOne(a => a.Alpha_workflow).WithMany(b => b.Beta_ToAlphas).HasForeignKey(c => c.AlphaId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("BetaToAlpha_AlphaWorkflow");
        }
    }

    // workflow
    public class Beta_workflowConfiguration : IEntityTypeConfiguration<Beta_workflow>
    {
        public void Configure(EntityTypeBuilder<Beta_workflow> builder)
        {
            builder.ToTable("workflow", "Beta");
            builder.HasKey(x => x.Id).HasName("PK_beta_workflow").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.Description).HasColumnName(@"Description").HasColumnType("varchar(10)").IsRequired(false).IsUnicode(false).HasMaxLength(10);
        }
    }

    // BITFIDDLERALLCAPS
    public class BITFIDDLERALLCAPConfiguration : IEntityTypeConfiguration<BITFIDDLERALLCAP>
    {
        public void Configure(EntityTypeBuilder<BITFIDDLERALLCAP> builder)
        {
            builder.ToTable("BITFIDDLERALLCAPS", "dbo");
            builder.HasKey(x => x.Id).HasName("PK_BITFIDDLERALLCAPS").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
        }
    }

    // BitFiddlerCATEGORIES
    public class BitFiddlerCATEGORyConfiguration : IEntityTypeConfiguration<BitFiddlerCATEGORy>
    {
        public void Configure(EntityTypeBuilder<BitFiddlerCATEGORy> builder)
        {
            builder.ToTable("BitFiddlerCATEGORIES", "dbo");
            builder.HasKey(x => x.Id).HasName("PK_BitFiddlerCATEGORIES").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
        }
    }

    // BitFiddlerCURRENCIES
    public class BitFiddlerCURRENCyConfiguration : IEntityTypeConfiguration<BitFiddlerCURRENCy>
    {
        public void Configure(EntityTypeBuilder<BitFiddlerCURRENCy> builder)
        {
            builder.ToTable("BitFiddlerCURRENCIES", "dbo");
            builder.HasKey(x => x.Id).HasName("PK_BitFiddlerCURRENCIES").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
        }
    }

    // Blah
    public class BlahConfiguration : IEntityTypeConfiguration<Blah>
    {
        public void Configure(EntityTypeBuilder<Blah> builder)
        {
            builder.ToTable("Blah", "dbo");
            builder.HasKey(x => x.BlahID).HasName("PK_Blah").IsClustered();

            builder.Property(x => x.BlahID).HasColumnName(@"BlahID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.HasMany<Blah>(t => t.Blahs_BlahID2).WithMany(t => t.Blahs1).UsingEntity<Dictionary<string, object>>("BlahBlahLink",
                    j => j.HasOne<Blah>().WithMany().HasForeignKey("BlahID2"),
                    j => j.HasOne<Blah>().WithMany().HasForeignKey("BlahID"),
                    j => j.ToTable("BlahBlahLink", "dbo"));
            builder.HasMany<Blah>(t => t.Blahs2).WithMany(t => t.Blahs3).UsingEntity<Dictionary<string, object>>("BlahBlahLink_readonly",
                    j => j.HasOne<Blah>().WithMany().HasForeignKey("BlahID2"),
                    j => j.HasOne<Blah>().WithMany().HasForeignKey("BlahID"),
                    j => j.ToTable("BlahBlahLink_readonly", "dbo"));
            builder.HasMany<Blarg>(t => t.Blargs).WithMany(t => t.Blahs).UsingEntity<Dictionary<string, object>>("BlahBlargLink",
                    j => j.HasOne<Blarg>().WithMany().HasForeignKey("BlargID"),
                    j => j.HasOne<Blah>().WithMany().HasForeignKey("BlahID"),
                    j => j.ToTable("BlahBlargLink", "dbo"));
        }
    }

    // BlahBlahLink_v2
    public class BlahBlahLink_v2Configuration : IEntityTypeConfiguration<BlahBlahLink_v2>
    {
        public void Configure(EntityTypeBuilder<BlahBlahLink_v2> builder)
        {
            builder.ToTable("BlahBlahLink_v2", "dbo");
            builder.HasKey(x => new { x.BlahID, x.BlahID2 }).HasName("PK_BlahBlahLinkv2_ro").IsClustered();

            builder.Property(x => x.BlahID).HasColumnName(@"BlahID").HasColumnType("int").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.BlahID2).HasColumnName(@"BlahID2").HasColumnType("int").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.dummy1).HasColumnName(@"dummy1").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.dummy2).HasColumnName(@"dummy2").HasColumnType("int").IsRequired();
            builder.Property(x => x.hello).HasColumnName(@"hello").HasColumnType("int").IsRequired();

            // Foreign keys
            builder.HasOne(a => a.Blah_BlahID).WithMany(b => b.BlahBlahLink_v2_BlahID).HasForeignKey(c => c.BlahID).HasConstraintName("FK_BlahBlahLinkv2_Blah_ro");
            builder.HasOne(a => a.Blah_BlahID2).WithMany(b => b.BlahBlahLink_v2_BlahID2).HasForeignKey(c => c.BlahID2).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_BlahBlahLinkv2_Blah_ro2");
        }
    }

    // Blarg
    public class BlargConfiguration : IEntityTypeConfiguration<Blarg>
    {
        public void Configure(EntityTypeBuilder<Blarg> builder)
        {
            builder.ToTable("Blarg", "dbo");
            builder.HasKey(x => x.BlargID).HasName("PK_Blarg").IsClustered();

            builder.Property(x => x.BlargID).HasColumnName(@"BlargID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
        }
    }

    // Burak1
    public class Burak1Configuration : IEntityTypeConfiguration<Burak1>
    {
        public void Configure(EntityTypeBuilder<Burak1> builder)
        {
            builder.ToTable("Burak1", "dbo");
            builder.HasKey(x => x.id).HasName("PK_Burak1").IsClustered();

            builder.Property(x => x.id).HasColumnName(@"id").HasColumnType("bigint").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.id_t).HasColumnName(@"id_t").HasColumnType("bigint").IsRequired();
            builder.Property(x => x.num).HasColumnName(@"num").HasColumnType("bigint").IsRequired();

            // Foreign keys
            builder.HasOne(a => a.Burak2_id).WithOne(b => b.Burak1_id).HasPrincipalKey<Burak2>(p => new { p.id, p.num }).HasForeignKey<Burak1>(c => new { c.id, c.num }).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_Burak_Test2");
            builder.HasOne(a => a.Burak2_id_t).WithOne(b => b.Burak1_id_t).HasPrincipalKey<Burak2>(p => new { p.id, p.num }).HasForeignKey<Burak1>(c => new { c.id_t, c.num }).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_Burak_Test1");
        }
    }

    // Burak2
    public class Burak2Configuration : IEntityTypeConfiguration<Burak2>
    {
        public void Configure(EntityTypeBuilder<Burak2> builder)
        {
            builder.ToTable("Burak2", "dbo");
            builder.HasKey(x => x.id).HasName("PK_Burak2").IsClustered();

            builder.Property(x => x.id).HasColumnName(@"id").HasColumnType("bigint").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.num).HasColumnName(@"num").HasColumnType("bigint").IsRequired();

            builder.HasIndex(x => new { x.id, x.num }).HasDatabaseName("U_Burak2").IsUnique();
        }
    }

    // CalculatedColumnNotNull
    public class CalculatedColumnNotNullConfiguration : IEntityTypeConfiguration<CalculatedColumnNotNull>
    {
        public void Configure(EntityTypeBuilder<CalculatedColumnNotNull> builder)
        {
            builder.ToTable("CalculatedColumnNotNull", "dbo");
            builder.HasKey(x => x.ID).HasName("PK_CalculatedColumnNotNull");

            builder.Property(x => x.ID).HasColumnName(@"ID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.Type).HasColumnName(@"Type").HasColumnType("tinyint").IsRequired();
            builder.Property(x => x.IsCalendar).HasColumnName(@"IsCalendar").HasColumnType("bit").IsRequired().ValueGeneratedOnAddOrUpdate();
            builder.Property(x => x.IsUtilization).HasColumnName(@"IsUtilization").HasColumnType("bit").IsRequired().ValueGeneratedOnAddOrUpdate();
        }
    }

    // Car
    public class CarConfiguration : IEntityTypeConfiguration<Car>
    {
        public void Configure(EntityTypeBuilder<Car> builder)
        {
            builder.ToTable("Car", "dbo");
            builder.HasKey(x => x.Id).HasName("PK_Car").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.PrimaryColourId).HasColumnName(@"PrimaryColourId").HasColumnType("int").IsRequired();
            builder.Property(x => x.CarMake).HasColumnName(@"CarMake").HasColumnType("varchar(255)").IsRequired().IsUnicode(false).HasMaxLength(255);
            builder.Property(x => x.computed_column).HasColumnName(@"computed_column").HasColumnType("int").IsRequired(false).ValueGeneratedOnAddOrUpdate();
            builder.Property(x => x.computed_column_persisted).HasColumnName(@"computed_column_persisted").HasColumnType("int").IsRequired().ValueGeneratedOnAddOrUpdate();

            // Foreign keys
            builder.HasOne(a => a.Colour).WithMany(b => b.Cars_PrimaryColourId).HasForeignKey(c => c.PrimaryColourId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("CarPrimaryColourFK");
            builder.HasMany<Colour>(t => t.Colours).WithMany(t => t.Cars_CarId).UsingEntity<Dictionary<string, object>>("CarToColour",
                    j => j.HasOne<Colour>().WithMany().HasForeignKey("ColourId"),
                    j => j.HasOne<Car>().WithMany().HasForeignKey("CarId"),
                    j => j.ToTable("CarToColour", "dbo"));
        }
    }

    // ClientCreationState
    public class ClientCreationStateConfiguration : IEntityTypeConfiguration<ClientCreationState>
    {
        public void Configure(EntityTypeBuilder<ClientCreationState> builder)
        {
            builder.ToTable("ClientCreationState", "dbo");
            builder.HasKey(x => x.id).HasName("PK_ClientCreationState").IsClustered();

            builder.Property(x => x.id).HasColumnName(@"id").HasColumnType("uniqueidentifier").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.WebhookSetup).HasColumnName(@"WebhookSetup").HasColumnType("bit").IsRequired();
            builder.Property(x => x.AuthSetup).HasColumnName(@"AuthSetup").HasColumnType("bit").IsRequired();
            builder.Property(x => x.AssignedCarrier).HasColumnName(@"AssignedCarrier").HasColumnType("bit").IsRequired();
        }
    }

    // CMS_File
    public class CMS_FileConfiguration : IEntityTypeConfiguration<CMS_File>
    {
        public void Configure(EntityTypeBuilder<CMS_File> builder)
        {
            builder.ToTable("CMS_File", "dbo");
            builder.HasKey(x => x.FileId).HasName("PK_CMS_File").IsClustered();

            builder.Property(x => x.FileId).HasColumnName(@"FileId").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.FileName).HasColumnName(@"FileName").HasColumnType("nvarchar(100)").IsRequired().HasMaxLength(100);
            builder.Property(x => x.FileDescription).HasColumnName(@"FileDescription").HasColumnType("varchar(500)").IsRequired().IsUnicode(false).HasMaxLength(500);
            builder.Property(x => x.FileIdentifier).HasColumnName(@"FileIdentifier").HasColumnType("varchar(100)").IsRequired().IsUnicode(false).HasMaxLength(100);
            builder.Property(x => x.ValidStartDate).HasColumnName(@"ValidStartDate").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.ValidEndDate).HasColumnName(@"ValidEndDate").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.IsActive).HasColumnName(@"IsActive").HasColumnType("bit").IsRequired();
            builder.HasMany<CMS_Tag>(t => t.CMS_Tags).WithMany(t => t.CMS_Files).UsingEntity<Dictionary<string, object>>("CMS_FileTag",
                    j => j.HasOne<CMS_Tag>().WithMany().HasForeignKey("TagId"),
                    j => j.HasOne<CMS_File>().WithMany().HasForeignKey("FileId"),
                    j => j.ToTable("CMS_FileTag", "dbo"));
        }
    }

    // CMS_Tag
    public class CMS_TagConfiguration : IEntityTypeConfiguration<CMS_Tag>
    {
        public void Configure(EntityTypeBuilder<CMS_Tag> builder)
        {
            builder.ToTable("CMS_Tag", "dbo");
            builder.HasKey(x => x.TagId).HasName("PK_CMS_Tag").IsClustered();

            builder.Property(x => x.TagId).HasColumnName(@"TagId").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.TagName).HasColumnName(@"TagName").HasColumnType("varchar(100)").IsRequired().IsUnicode(false).HasMaxLength(100);
        }
    }

    // CODE_MeetingTopicDetails
    public class CODE_MeetingTopicDetailConfiguration : IEntityTypeConfiguration<CODE_MeetingTopicDetail>
    {
        public void Configure(EntityTypeBuilder<CODE_MeetingTopicDetail> builder)
        {
            builder.ToTable("CODE_MeetingTopicDetails", "dbo");
            builder.HasKey(x => x.id).HasName("PK_CODE_MeetingTopicDetails").IsClustered();

            builder.Property(x => x.id).HasColumnName(@"id").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.id_reuniao).HasColumnName(@"id_reuniao").HasColumnType("int").IsRequired();
            builder.Property(x => x.ord_trab).HasColumnName(@"ord_trab").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.assunto).HasColumnName(@"assunto").HasColumnType("nvarchar(250)").IsRequired(false).HasMaxLength(250);
            builder.Property(x => x.desenvolvimento).HasColumnName(@"desenvolvimento").HasColumnType("nvarchar(max)").IsRequired(false);
            builder.Property(x => x.origem).HasColumnName(@"origem").HasColumnType("nvarchar(5)").IsRequired(false).HasMaxLength(5);
            builder.Property(x => x.id_origem).HasColumnName(@"id_origem").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.Estado).HasColumnName(@"Estado").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.CompanyID).HasColumnName(@"CompanyID").HasColumnType("int").IsRequired();
            builder.Property(x => x.DateCreated).HasColumnName(@"DateCreated").HasColumnType("datetime").IsRequired();
            builder.Property(x => x.DateChanged).HasColumnName(@"DateChanged").HasColumnType("datetime").IsRequired(false);

            // Foreign keys
            builder.HasOne(a => a.CODE_PARAM_MeetingTopicDetailSource).WithMany(b => b.CODE_MeetingTopicDetails).HasPrincipalKey(p => p.Code).HasForeignKey(c => c.origem).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_CODE_MeetingTopicDetails_CODE_PARAM_MeetingTopicDetailSource");
        }
    }

    // CODE_PARAM_MeetingTopicDetailSource
    public class CODE_PARAM_MeetingTopicDetailSourceConfiguration : IEntityTypeConfiguration<CODE_PARAM_MeetingTopicDetailSource>
    {
        public void Configure(EntityTypeBuilder<CODE_PARAM_MeetingTopicDetailSource> builder)
        {
            builder.ToTable("CODE_PARAM_MeetingTopicDetailSource", "dbo");
            builder.HasKey(x => x.ID).HasName("PK_CODE_PARAM_MeetingTopicDetailSource").IsClustered();

            builder.Property(x => x.ID).HasColumnName(@"ID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.Code).HasColumnName(@"Code").HasColumnType("nvarchar(5)").IsRequired().HasMaxLength(5);
            builder.Property(x => x.Label).HasColumnName(@"Label").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.LabelENG).HasColumnName(@"LabelENG").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.LabelESP).HasColumnName(@"LabelESP").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.LabelFRA).HasColumnName(@"LabelFRA").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.DateCreated).HasColumnName(@"DateCreated").HasColumnType("datetime").IsRequired();
            builder.Property(x => x.DateChanged).HasColumnName(@"DateChanged").HasColumnType("datetime").IsRequired(false);

            builder.HasIndex(x => x.Code).HasDatabaseName("UK_CODE_PARAM_MeetingTopicDetailSource").IsUnique();
        }
    }

    // CodeObject
    public class CodeObjectConfiguration : IEntityTypeConfiguration<CodeObject>
    {
        public void Configure(EntityTypeBuilder<CodeObject> builder)
        {
            builder.ToTable("CodeObject", "dbo");
            builder.HasKey(x => x.codeObjectNo).HasName("aaaaaObject_PK");

            builder.Property(x => x.codeObjectNo).HasColumnName(@"codeObjectNo").HasColumnType("int").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.applicationNo).HasColumnName(@"applicationNo").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.type).HasColumnName(@"type").HasColumnType("int").IsRequired();
            builder.Property(x => x.eName).HasColumnName(@"eName").HasColumnType("nvarchar(250)").IsRequired().HasMaxLength(250);
            builder.Property(x => x.aName).HasColumnName(@"aName").HasColumnType("nvarchar(250)").IsRequired(false).HasMaxLength(250);
            builder.Property(x => x.description).HasColumnName(@"description").HasColumnType("nvarchar(250)").IsRequired(false).HasMaxLength(250);
            builder.Property(x => x.codeName).HasColumnName(@"codeName").HasColumnType("nvarchar(250)").IsRequired(false).HasMaxLength(250);
            builder.Property(x => x.note).HasColumnName(@"note").HasColumnType("nvarchar(250)").IsRequired(false).HasMaxLength(250);
            builder.Property(x => x.isObject).HasColumnName(@"isObject").HasColumnType("bit").IsRequired();
            builder.Property(x => x.versionNumber).HasColumnName(@"versionNumber").HasColumnType("timestamp(8)").IsRequired(false).IsFixedLength().HasMaxLength(8).IsRowVersion().IsConcurrencyToken();
        }
    }

    // Colour
    public class ColourConfiguration : IEntityTypeConfiguration<Colour>
    {
        public void Configure(EntityTypeBuilder<Colour> builder)
        {
            builder.ToTable("Colour", "dbo");
            builder.HasKey(x => x.Id).HasName("PK_Colour").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.Name).HasColumnName(@"Name").HasColumnType("varchar(255)").IsRequired().IsUnicode(false).HasMaxLength(255);
        }
    }

    // ColumnNameAndTypes
    public class ColumnNameAndTypeConfiguration : IEntityTypeConfiguration<ColumnNameAndType>
    {
        public void Configure(EntityTypeBuilder<ColumnNameAndType> builder)
        {
            builder.ToTable("ColumnNameAndTypes", "dbo");
            builder.HasKey(x => x.C36).HasName("PK_ColumnNameAndTypes").IsClustered();

            builder.Property(x => x.C36).HasColumnName(@"$").HasColumnType("int").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.C37).HasColumnName(@"%").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.C163).HasColumnName(@"£").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.C38fred).HasColumnName(@"&fred$").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.abc4792).HasColumnName(@"abc/\").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.joe_bloggs).HasColumnName(@"joe.bloggs").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.simon_hughes).HasColumnName(@"simon-hughes").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.description).HasColumnName(@"description").HasColumnType("varchar(20)").IsRequired().IsUnicode(false).HasMaxLength(20);
            builder.Property(x => x.someDate).HasColumnName(@"someDate").HasColumnType("datetime2").IsRequired();
            builder.Property(x => x.Obs).HasColumnName(@"Obs").HasColumnType("varchar(50)").IsRequired(false).IsUnicode(false).HasMaxLength(50);
            builder.Property(x => x.Obs1).HasColumnName(@"Obs1").HasColumnType("varchar(50)").IsRequired(false).IsUnicode(false).HasMaxLength(50);
            builder.Property(x => x.Obs2).HasColumnName(@"Obs2").HasColumnType("varchar(50)").IsRequired(false).IsUnicode(false).HasMaxLength(50);
            builder.Property(x => x.Obs3).HasColumnName(@"Obs3").HasColumnType("varchar(50)").IsRequired(false).IsUnicode(false).HasMaxLength(50);
            builder.Property(x => x.@static).HasColumnName(@"static").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.@readonly).HasColumnName(@"readonly").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.C123Hi).HasColumnName(@"123Hi").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.areal).HasColumnName(@"areal").HasColumnType("real").IsRequired(false);
            builder.Property(x => x.afloat).HasColumnName(@"afloat").HasColumnType("float").HasPrecision(53).IsRequired(false);
            builder.Property(x => x.afloat8).HasColumnName(@"afloat8").HasColumnType("real").IsRequired(false);
            builder.Property(x => x.afloat20).HasColumnName(@"afloat20").HasColumnType("real").IsRequired(false);
            builder.Property(x => x.afloat24).HasColumnName(@"afloat24").HasColumnType("real").IsRequired(false);
            builder.Property(x => x.afloat53).HasColumnName(@"afloat53").HasColumnType("float").HasPrecision(53).IsRequired(false);
            builder.Property(x => x.adecimal).HasColumnName(@"adecimal").HasColumnType("decimal(18,0)").HasPrecision(18,0).IsRequired(false);
            builder.Property(x => x.adecimal_19_4).HasColumnName(@"adecimal_19_4").HasColumnType("decimal(19,4)").HasPrecision(19,4).IsRequired(false);
            builder.Property(x => x.adecimal_10_3).HasColumnName(@"adecimal_10_3").HasColumnType("decimal(10,3)").HasPrecision(10,3).IsRequired(false);
            builder.Property(x => x.anumeric).HasColumnName(@"anumeric").HasColumnType("numeric(18,0)").HasPrecision(18,0).IsRequired(false);
            builder.Property(x => x.anumeric_5_2).HasColumnName(@"anumeric_5_2").HasColumnType("numeric(5,2)").HasPrecision(5,2).IsRequired(false);
            builder.Property(x => x.anumeric_11_3).HasColumnName(@"anumeric_11_3").HasColumnType("numeric(11,3)").HasPrecision(11,3).IsRequired(false);
            builder.Property(x => x.amoney).HasColumnName(@"amoney").HasColumnType("money").IsRequired(false);
            builder.Property(x => x.asmallmoney).HasColumnName(@"asmallmoney").HasColumnType("smallmoney").IsRequired(false);
            builder.Property(x => x.brandon).HasColumnName(@"brandon").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.GeographyType).HasColumnName(@"GeographyType").HasColumnType("geography").IsRequired(false);
            builder.Property(x => x.GeometryType).HasColumnName(@"GeometryType").HasColumnType("geometry").IsRequired(false);
        }
    }

    // ComplexView
    public class ComplexViewConfiguration : IEntityTypeConfiguration<ComplexView>
    {
        public void Configure(EntityTypeBuilder<ComplexView> builder)
        {
            builder.ToView("ComplexView", "dbo");
            builder.HasNoKey();

            builder.Property(x => x.LicenseType).HasColumnName(@"LicenseType").HasColumnType("nvarchar(128)").IsRequired().HasMaxLength(128);
            builder.Property(x => x.Count).HasColumnName(@"Count").HasColumnType("int").IsRequired(false);
        }
    }

    // Country
    public class CountryConfiguration : IEntityTypeConfiguration<Country>
    {
        public void Configure(EntityTypeBuilder<Country> builder)
        {
            builder.ToTable("Country", "dbo");
            builder.HasKey(x => x.CountryID).HasName("PK_Country").IsClustered();

            builder.Property(x => x.CountryID).HasColumnName(@"CountryID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.Code).HasColumnName(@"Code").HasColumnType("varchar(12)").IsRequired(false).IsUnicode(false).HasMaxLength(12);
        }
    }

    // cross_database_synonym
    public class cross_database_synonymConfiguration : IEntityTypeConfiguration<cross_database_synonym>
    {
        public void Configure(EntityTypeBuilder<cross_database_synonym> builder)
        {
            builder.ToTable("cross_database_synonym", "dbo");
            builder.HasKey(x => x.Id);

            builder.Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.Forename).HasColumnName(@"Forename").HasColumnType("varchar(20)").IsRequired(false).IsUnicode(false).HasMaxLength(20);
        }
    }

    // DateTimeDefaultTest
    public class DateTimeDefaultTestConfiguration : IEntityTypeConfiguration<DateTimeDefaultTest>
    {
        public void Configure(EntityTypeBuilder<DateTimeDefaultTest> builder)
        {
            builder.ToTable("DateTimeDefaultTest", "dbo");
            builder.HasKey(x => x.Id);

            builder.Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.CreatedDate).HasColumnName(@"CreatedDate").HasColumnType("datetimeoffset").IsRequired(false);
        }
    }

    // rov_ColumnDefinitions
    public class dcg_rov_ColumnDefinitionConfiguration : IEntityTypeConfiguration<dcg_rov_ColumnDefinition>
    {
        public void Configure(EntityTypeBuilder<dcg_rov_ColumnDefinition> builder)
        {
            builder.ToView("rov_ColumnDefinitions", "dcg");
            builder.HasNoKey();

            builder.Property(x => x.TABLE_CATALOG).HasColumnName(@"TABLE_CATALOG").HasColumnType("nvarchar(128)").IsRequired(false).HasMaxLength(128);
            builder.Property(x => x.TABLE_SCHEMA).HasColumnName(@"TABLE_SCHEMA").HasColumnType("nvarchar(128)").IsRequired(false).HasMaxLength(128);
            builder.Property(x => x.TABLE_NAME).HasColumnName(@"TABLE_NAME").HasColumnType("nvarchar(128)").IsRequired().HasMaxLength(128);
            builder.Property(x => x.COLUMN_NAME).HasColumnName(@"COLUMN_NAME").HasColumnType("nvarchar(128)").IsRequired(false).HasMaxLength(128);
            builder.Property(x => x.ORDINAL_POSITION).HasColumnName(@"ORDINAL_POSITION").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.COLUMN_DEFAULT).HasColumnName(@"COLUMN_DEFAULT").HasColumnType("nvarchar(4000)").IsRequired(false).HasMaxLength(4000);
            builder.Property(x => x.IS_NULLABLE).HasColumnName(@"IS_NULLABLE").HasColumnType("varchar(3)").IsRequired(false).IsUnicode(false).HasMaxLength(3);
            builder.Property(x => x.DATA_TYPE).HasColumnName(@"DATA_TYPE").HasColumnType("nvarchar(128)").IsRequired(false).HasMaxLength(128);
            builder.Property(x => x.CHARACTER_MAXIMUM_LENGTH).HasColumnName(@"CHARACTER_MAXIMUM_LENGTH").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.CHARACTER_OCTET_LENGTH).HasColumnName(@"CHARACTER_OCTET_LENGTH").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.NUMERIC_PRECISION).HasColumnName(@"NUMERIC_PRECISION").HasColumnType("tinyint").IsRequired(false);
            builder.Property(x => x.NUMERIC_PRECISION_RADIX).HasColumnName(@"NUMERIC_PRECISION_RADIX").HasColumnType("smallint").IsRequired(false);
            builder.Property(x => x.NUMERIC_SCALE).HasColumnName(@"NUMERIC_SCALE").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.DATETIME_PRECISION).HasColumnName(@"DATETIME_PRECISION").HasColumnType("smallint").IsRequired(false);
            builder.Property(x => x.CHARACTER_SET_CATALOG).HasColumnName(@"CHARACTER_SET_CATALOG").HasColumnType("nvarchar(128)").IsRequired(false).HasMaxLength(128);
            builder.Property(x => x.CHARACTER_SET_SCHEMA).HasColumnName(@"CHARACTER_SET_SCHEMA").HasColumnType("nvarchar(128)").IsRequired(false).HasMaxLength(128);
            builder.Property(x => x.CHARACTER_SET_NAME).HasColumnName(@"CHARACTER_SET_NAME").HasColumnType("nvarchar(128)").IsRequired(false).HasMaxLength(128);
            builder.Property(x => x.COLLATION_CATALOG).HasColumnName(@"COLLATION_CATALOG").HasColumnType("nvarchar(128)").IsRequired(false).HasMaxLength(128);
            builder.Property(x => x.COLLATION_SCHEMA).HasColumnName(@"COLLATION_SCHEMA").HasColumnType("nvarchar(128)").IsRequired(false).HasMaxLength(128);
            builder.Property(x => x.COLLATION_NAME).HasColumnName(@"COLLATION_NAME").HasColumnType("nvarchar(128)").IsRequired(false).HasMaxLength(128);
            builder.Property(x => x.DOMAIN_CATALOG).HasColumnName(@"DOMAIN_CATALOG").HasColumnType("nvarchar(128)").IsRequired(false).HasMaxLength(128);
            builder.Property(x => x.DOMAIN_SCHEMA).HasColumnName(@"DOMAIN_SCHEMA").HasColumnType("nvarchar(128)").IsRequired(false).HasMaxLength(128);
            builder.Property(x => x.DOMAIN_NAME).HasColumnName(@"DOMAIN_NAME").HasColumnType("nvarchar(128)").IsRequired(false).HasMaxLength(128);
            builder.Property(x => x.TYPE).HasColumnName(@"TYPE").HasColumnType("char(2)").HasConversion(new ValueConverter<string, string>(v => v.TrimEnd(), v => v.TrimEnd())).IsRequired(false).IsFixedLength().IsUnicode(false).HasMaxLength(2);
        }
    }

    // DefaultCheckForNull
    public class DefaultCheckForNullConfiguration : IEntityTypeConfiguration<DefaultCheckForNull>
    {
        public void Configure(EntityTypeBuilder<DefaultCheckForNull> builder)
        {
            builder.ToTable("DefaultCheckForNull", "dbo");
            builder.HasKey(x => x.Id).HasName("PK_DefaultCheckForNull").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.DescUppercase).HasColumnName(@"DescUppercase").HasColumnType("varchar(5)").IsRequired(false).IsUnicode(false).HasMaxLength(5);
            builder.Property(x => x.DescLowercase).HasColumnName(@"DescLowercase").HasColumnType("varchar(5)").IsRequired(false).IsUnicode(false).HasMaxLength(5);
            builder.Property(x => x.DescMixedCase).HasColumnName(@"DescMixedCase").HasColumnType("varchar(5)").IsRequired(false).IsUnicode(false).HasMaxLength(5);
            builder.Property(x => x.DescBrackets).HasColumnName(@"DescBrackets").HasColumnType("varchar(5)").IsRequired(false).IsUnicode(false).HasMaxLength(5);
            builder.Property(x => x.X1).HasColumnName(@"X1").HasColumnType("varchar(255)").IsRequired(false).IsUnicode(false).HasMaxLength(255);
        }
    }

    // DSOpe
    public class DSOpeConfiguration : IEntityTypeConfiguration<DSOpe>
    {
        public void Configure(EntityTypeBuilder<DSOpe> builder)
        {
            builder.ToTable("DSOpe", "dbo");
            builder.HasKey(x => x.ID).HasName("PK_DSOpe").IsClustered();

            builder.Property(x => x.ID).HasColumnName(@"ID").HasColumnType("int").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.decimal_default).HasColumnName(@"decimal_default").HasColumnType("decimal(15,2)").HasPrecision(15,2).IsRequired();
            builder.Property(x => x.MyGuid).HasColumnName(@"MyGuid").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.@default).HasColumnName(@"default").HasColumnType("varchar(10)").IsRequired(false).IsUnicode(false).HasMaxLength(10);
            builder.Property(x => x.MyGuidBadDefault).HasColumnName(@"MyGuidBadDefault").HasColumnType("uniqueidentifier").IsRequired(false);
        }
    }

    // EnumsWithStringAsValue
    public class EnumsWithStringAsValueConfiguration : IEntityTypeConfiguration<EnumsWithStringAsValue>
    {
        public void Configure(EntityTypeBuilder<EnumsWithStringAsValue> builder)
        {
            builder.ToTable("EnumsWithStringAsValue", "dbo");
            builder.HasKey(x => new { x.enum_name, x.value });

            builder.Property(x => x.enum_name).HasColumnName(@"enum_name").HasColumnType("varchar(50)").IsRequired().IsUnicode(false).HasMaxLength(50).ValueGeneratedNever();
            builder.Property(x => x.value).HasColumnName(@"value").HasColumnType("varchar(10)").IsRequired().IsUnicode(false).HasMaxLength(10).ValueGeneratedNever();
        }
    }

    // DaysOfWeek
    public class EnumTest_DaysOfWeekConfiguration : IEntityTypeConfiguration<EnumTest_DaysOfWeek>
    {
        public void Configure(EntityTypeBuilder<EnumTest_DaysOfWeek> builder)
        {
            builder.ToTable("DaysOfWeek", "EnumTest");
            builder.HasKey(x => x.TypeId).HasName("PK_EnumTest_DaysOfWeek").IsClustered();

            builder.Property(x => x.TypeName).HasColumnName(@"TypeName").HasColumnType("varchar(50)").IsRequired().IsUnicode(false).HasMaxLength(50);
            builder.Property(x => x.TypeId).HasColumnName(@"TypeId").HasColumnType("int").IsRequired().ValueGeneratedNever();
        }
    }

    // OpenDays
    public class EnumTest_OpenDayConfiguration : IEntityTypeConfiguration<EnumTest_OpenDay>
    {
        public void Configure(EntityTypeBuilder<EnumTest_OpenDay> builder)
        {
            builder.ToTable("OpenDays", "EnumTest");
            builder.HasKey(x => x.Id).HasName("PK_OpenDays").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.EnumId).HasColumnName(@"EnumId").HasColumnType("int").IsRequired();

            // Foreign keys
            builder.HasOne(a => a.EnumTest_DaysOfWeek).WithMany(b => b.EnumTest_OpenDays).HasForeignKey(c => c.EnumId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("Fk_OpenDays_EnumId");
        }
    }

    // EnumWithDefaultValue
    public class EnumWithDefaultValueConfiguration : IEntityTypeConfiguration<EnumWithDefaultValue>
    {
        public void Configure(EntityTypeBuilder<EnumWithDefaultValue> builder)
        {
            builder.ToTable("EnumWithDefaultValue", "dbo");
            builder.HasKey(x => x.Id).HasName("PK_EnumWithDefaultValue").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.SomeEnum).HasColumnName(@"SomeEnum").HasColumnType("int").IsRequired();
        }
    }

    // EventProcessor
    public class EventProcessorConfiguration : IEntityTypeConfiguration<EventProcessor>
    {
        public void Configure(EntityTypeBuilder<EventProcessor> builder)
        {
            builder.ToTable("EventProcessor", "dbo");
            builder.HasKey(x => x.Id).HasName("PK_EventProcessor").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.Name).HasColumnName(@"Name").HasColumnType("varchar(200)").IsRequired().IsUnicode(false).HasMaxLength(200);
            builder.Property(x => x.Description).HasColumnName(@"Description").HasColumnType("varchar(512)").IsRequired(false).IsUnicode(false).HasMaxLength(512);
            builder.Property(x => x.EndpointAddress).HasColumnName(@"EndpointAddress").HasColumnType("varchar(512)").IsRequired(false).IsUnicode(false).HasMaxLength(512);
            builder.Property(x => x.Enabled).HasColumnName(@"Enabled").HasColumnType("bit").IsRequired();
        }
    }

    // EventProcessorEventFilter
    public class EventProcessorEventFilterConfiguration : IEntityTypeConfiguration<EventProcessorEventFilter>
    {
        public void Configure(EntityTypeBuilder<EventProcessorEventFilter> builder)
        {
            builder.ToTable("EventProcessorEventFilter", "dbo");
            builder.HasKey(x => x.Id).HasName("PK_EventProcessorEventFilter").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.EventProcessorId).HasColumnName(@"EventProcessorId").HasColumnType("int").IsRequired();
            builder.Property(x => x.WantedEventId).HasColumnName(@"WantedEventId").HasColumnType("int").IsRequired();

            // Foreign keys
            builder.HasOne(a => a.EventProcessor).WithMany(b => b.EventProcessorEventFilters).HasForeignKey(c => c.EventProcessorId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_EventProcessorEventFilter__EventProcessor");

            builder.HasIndex(x => new { x.EventProcessorId, x.WantedEventId }).HasDatabaseName("IX_EventProcessorEventFilter").IsUnique();
        }
    }

    // CV
    public class FFRS_CVConfiguration : IEntityTypeConfiguration<FFRS_CV>
    {
        public void Configure(EntityTypeBuilder<FFRS_CV> builder)
        {
            builder.ToTable("CV", "FFRS");
            builder.HasKey(x => new { x.BatchUID, x.CVID });

            builder.Property(x => x.BatchUID).HasColumnName(@"BatchUID").HasColumnType("uniqueidentifier").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.CVID).HasColumnName(@"CVID").HasColumnType("int").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.CVName).HasColumnName(@"CVName").HasColumnType("nvarchar(200)").IsRequired(false).HasMaxLength(200);
        }
    }

    // FinancialInstitutionOffice
    public class FinancialInstitutionOfficeConfiguration : IEntityTypeConfiguration<FinancialInstitutionOffice>
    {
        public void Configure(EntityTypeBuilder<FinancialInstitutionOffice> builder)
        {
            builder.ToTable("FinancialInstitutionOffice", "dbo");
            builder.HasKey(x => x.FinancialInstitutionCode);

            builder.Property(x => x.Code).HasColumnName(@"Code").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.FinancialInstitutionCode).HasColumnName(@"FinancialInstitutionCode").HasColumnType("uniqueidentifier").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.OfficeName).HasColumnName(@"OfficeName").HasColumnType("nvarchar(200)").IsRequired(false).HasMaxLength(200);

            builder.HasIndex(x => new { x.FinancialInstitutionCode, x.OfficeName }).HasDatabaseName("UniqueOfficeName_FinancialInstitutionOffice").IsUnique();
        }
    }

    // SmallDecimalTestAttribute
    public class FkTest_SmallDecimalTestAttributeConfiguration : IEntityTypeConfiguration<FkTest_SmallDecimalTestAttribute>
    {
        public void Configure(EntityTypeBuilder<FkTest_SmallDecimalTestAttribute> builder)
        {
            builder.ToTable("SmallDecimalTestAttribute", "FkTest");
            builder.HasKey(x => x.FkID).HasName("PK_FkTest_SmallDecimalTestAttribute").IsClustered();

            builder.Property(x => x.FkID).HasColumnName(@"FkID").HasColumnType("int").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.description).HasColumnName(@"description").HasColumnType("varchar(20)").IsRequired().IsUnicode(false).HasMaxLength(20);

            // Foreign keys
            builder.HasOne(a => a.SmallDecimalTest).WithOne(b => b.FkTest_SmallDecimalTestAttribute).HasForeignKey<FkTest_SmallDecimalTestAttribute>(c => c.FkID).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("KateFK");
        }
    }

    // footer
    public class footerConfiguration : IEntityTypeConfiguration<footer>
    {
        public void Configure(EntityTypeBuilder<footer> builder)
        {
            builder.ToTable("footer", "dbo");
            builder.HasKey(x => x.ID).HasName("PK_footer").IsClustered();

            builder.Property(x => x.ID).HasColumnName(@"ID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.otherID).HasColumnName(@"otherID").HasColumnType("int").IsRequired();
            builder.Property(x => x.added).HasColumnName(@"added").HasColumnType("datetime").IsRequired();

            // Foreign keys
            builder.HasOne(a => a.header).WithMany(b => b.footers).HasForeignKey(c => new { c.ID, c.otherID }).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("fooderFK");
        }
    }

    // ForeignKeyIsNotEnforced
    public class ForeignKeyIsNotEnforcedConfiguration : IEntityTypeConfiguration<ForeignKeyIsNotEnforced>
    {
        public void Configure(EntityTypeBuilder<ForeignKeyIsNotEnforced> builder)
        {
            builder.ToTable("ForeignKeyIsNotEnforced", "dbo");
            builder.HasKey(x => x.id).HasName("PK_ForeignKeyIsNotEnforced").IsClustered();

            builder.Property(x => x.id).HasColumnName(@"id").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.null_value).HasColumnName(@"null_value").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.not_null_value).HasColumnName(@"not_null_value").HasColumnType("int").IsRequired();

            builder.HasIndex(x => x.not_null_value).HasDatabaseName("UQ_ForeignKeyIsNotEnforced_not_null_value").IsUnique();
            builder.HasIndex(x => x.null_value).HasDatabaseName("UQ_ForeignKeyIsNotEnforced_null_value").IsUnique();
        }
    }

    // ForeignKeyIsNotEnforcedItem
    public class ForeignKeyIsNotEnforcedItemConfiguration : IEntityTypeConfiguration<ForeignKeyIsNotEnforcedItem>
    {
        public void Configure(EntityTypeBuilder<ForeignKeyIsNotEnforcedItem> builder)
        {
            builder.ToTable("ForeignKeyIsNotEnforcedItem", "dbo");
            builder.HasKey(x => x.id).HasName("PK_ForeignKeyIsNotEnforcedItem").IsClustered();

            builder.Property(x => x.id).HasColumnName(@"id").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.null_value).HasColumnName(@"null_value").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.not_null_value).HasColumnName(@"not_null_value").HasColumnType("int").IsRequired();

            // Foreign keys
            builder.HasOne(a => a.ForeignKeyIsNotEnforced_not_null_value).WithOne(b => b.ForeignKeyIsNotEnforcedItem_not_null_value).HasPrincipalKey<ForeignKeyIsNotEnforced>(p => p.not_null_value).HasForeignKey<ForeignKeyIsNotEnforcedItem>(c => c.not_null_value).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_ForeignKeyIsNotEnforcedItem_notnull_notnull");
            builder.HasOne(a => a.ForeignKeyIsNotEnforced_null_value).WithOne(b => b.ForeignKeyIsNotEnforcedItem_null_value).HasPrincipalKey<ForeignKeyIsNotEnforced>(p => p.not_null_value).HasForeignKey<ForeignKeyIsNotEnforcedItem>(c => c.null_value).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_ForeignKeyIsNotEnforcedItem_null_notnull");

            builder.HasIndex(x => x.not_null_value).HasDatabaseName("UQ_ForeignKeyIsNotEnforcedItem_not_null_value").IsUnique();
            builder.HasIndex(x => x.null_value).HasDatabaseName("UQ_ForeignKeyIsNotEnforcedItem_null_value").IsUnique();
        }
    }

    // HasPrincipalKeyTestChild
    public class HasPrincipalKeyTestChildConfiguration : IEntityTypeConfiguration<HasPrincipalKeyTestChild>
    {
        public void Configure(EntityTypeBuilder<HasPrincipalKeyTestChild> builder)
        {
            builder.ToTable("HasPrincipalKeyTestChild", "dbo");
            builder.HasKey(x => x.Id).HasName("PK_HasPrincipalKeyTestChild").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.A).HasColumnName(@"A").HasColumnType("int").IsRequired();
            builder.Property(x => x.B).HasColumnName(@"B").HasColumnType("int").IsRequired();
            builder.Property(x => x.C).HasColumnName(@"C").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.D).HasColumnName(@"D").HasColumnType("int").IsRequired(false);

            // Foreign keys
            builder.HasOne(a => a.HasPrincipalKeyTestParent).WithOne(b => b.HasPrincipalKeyTestChild).HasPrincipalKey<HasPrincipalKeyTestParent>(p => new { p.AA, p.BB }).HasForeignKey<HasPrincipalKeyTestChild>(c => new { c.A, c.B }).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_HasPrincipalKey_AB");
        }
    }

    // HasPrincipalKeyTestParent
    public class HasPrincipalKeyTestParentConfiguration : IEntityTypeConfiguration<HasPrincipalKeyTestParent>
    {
        public void Configure(EntityTypeBuilder<HasPrincipalKeyTestParent> builder)
        {
            builder.ToTable("HasPrincipalKeyTestParent", "dbo");
            builder.HasKey(x => x.Id).HasName("PK_HasPrincipalKeyTestParent").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.AA).HasColumnName(@"AA").HasColumnType("int").IsRequired();
            builder.Property(x => x.BB).HasColumnName(@"BB").HasColumnType("int").IsRequired();
            builder.Property(x => x.CC).HasColumnName(@"CC").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.DD).HasColumnName(@"DD").HasColumnType("int").IsRequired(false);

            builder.HasIndex(x => new { x.AA, x.BB }).HasDatabaseName("UQ_HasPrincipalKeyTestParent_AB").IsUnique();
            builder.HasIndex(x => new { x.AA, x.CC }).HasDatabaseName("UQ_HasPrincipalKeyTestParent_AC").IsUnique();
            builder.HasIndex(x => new { x.CC, x.DD }).HasDatabaseName("UQ_HasPrincipalKeyTestParent_CD").IsUnique();
        }
    }

    // header
    public class headerConfiguration : IEntityTypeConfiguration<header>
    {
        public void Configure(EntityTypeBuilder<header> builder)
        {
            builder.ToTable("header", "dbo");
            builder.HasKey(x => new { x.ID, x.anotherID }).HasName("PK_header").IsClustered();

            builder.Property(x => x.ID).HasColumnName(@"ID").HasColumnType("int").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.anotherID).HasColumnName(@"anotherID").HasColumnType("int").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.added).HasColumnName(@"added").HasColumnType("datetime").IsRequired();
        }
    }

    // hierarchy_test
    public class hierarchy_testConfiguration : IEntityTypeConfiguration<hierarchy_test>
    {
        public void Configure(EntityTypeBuilder<hierarchy_test> builder)
        {
            builder.ToTable("hierarchy_test", "dbo");
            builder.HasKey(x => x.ID).HasName("PK_hierarchy_test").IsClustered();

            builder.Property(x => x.ID).HasColumnName(@"ID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.hid).HasColumnName(@"hid").HasColumnType("hierarchyid").IsRequired();
        }
    }

    // InflectorData
    public class InflectorDataConfiguration : IEntityTypeConfiguration<InflectorData>
    {
        public void Configure(EntityTypeBuilder<InflectorData> builder)
        {
            builder.ToTable("InflectorData", "dbo");
            builder.HasKey(x => x.Id).HasName("PK_InflectorData").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
        }
    }

    // InflectorStatus
    public class InflectorStatusConfiguration : IEntityTypeConfiguration<InflectorStatus>
    {
        public void Configure(EntityTypeBuilder<InflectorStatus> builder)
        {
            builder.ToTable("InflectorStatus", "dbo");
            builder.HasKey(x => x.Id).HasName("PK_InflectorStatus").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.SayHelloTo).HasColumnName(@"SayHelloTo").HasColumnType("int").IsRequired();
            builder.Property(x => x.SignalData).HasColumnName(@"SignalData").HasColumnType("int").IsRequired();
            builder.Property(x => x.NotificationStatus).HasColumnName(@"NotificationStatus").HasColumnType("int").IsRequired();
            builder.Property(x => x.Status).HasColumnName(@"Status").HasColumnType("int").IsRequired();
            builder.Property(x => x.To).HasColumnName(@"To").HasColumnType("int").IsRequired();
            builder.Property(x => x.Data).HasColumnName(@"Data").HasColumnType("int").IsRequired();
        }
    }

    // InflectorTo
    public class InflectorToConfiguration : IEntityTypeConfiguration<InflectorTo>
    {
        public void Configure(EntityTypeBuilder<InflectorTo> builder)
        {
            builder.ToTable("InflectorTo", "dbo");
            builder.HasKey(x => x.Id).HasName("PK_InflectorTo").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
        }
    }

    // Role
    public class Issue47_RoleConfiguration : IEntityTypeConfiguration<Issue47_Role>
    {
        public void Configure(EntityTypeBuilder<Issue47_Role> builder)
        {
            builder.ToTable("Role", "Issue47");
            builder.HasKey(x => x.RoleId).HasName("PK_Issue47_Role").IsClustered();

            builder.Property(x => x.RoleId).HasColumnName(@"RoleId").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.Role).HasColumnName(@"Role").HasColumnType("varchar(10)").IsRequired(false).IsUnicode(false).HasMaxLength(10);
        }
    }

    // Users
    public class Issue47_UserConfiguration : IEntityTypeConfiguration<Issue47_User>
    {
        public void Configure(EntityTypeBuilder<Issue47_User> builder)
        {
            builder.ToTable("Users", "Issue47");
            builder.HasKey(x => x.UserId).HasName("PK_Issue47_Users").IsClustered();

            builder.Property(x => x.UserId).HasColumnName(@"UserId").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.Name).HasColumnName(@"Name").HasColumnType("varchar(10)").IsRequired(false).IsUnicode(false).HasMaxLength(10);
        }
    }

    // UserRoles
    public class Issue47_UserRoleConfiguration : IEntityTypeConfiguration<Issue47_UserRole>
    {
        public void Configure(EntityTypeBuilder<Issue47_UserRole> builder)
        {
            builder.ToTable("UserRoles", "Issue47");
            builder.HasKey(x => x.UserRoleId).HasName("PK_Issue47_UserRoles").IsClustered();

            builder.Property(x => x.UserRoleId).HasColumnName(@"UserRoleId").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.UserId).HasColumnName(@"UserId").HasColumnType("int").IsRequired();
            builder.Property(x => x.RoleId).HasColumnName(@"RoleId").HasColumnType("int").IsRequired();

            // Foreign keys
            builder.HasOne(a => a.Issue47_Role).WithMany(b => b.Issue47_UserRoles).HasForeignKey(c => c.RoleId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("Issue47_UserRoles_roleid");
            builder.HasOne(a => a.Issue47_User).WithMany(b => b.Issue47_UserRoles).HasForeignKey(c => c.UserId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("Issue47_UserRoles_userid");
        }
    }

    // MultipleKeys
    public class MultipleKeyConfiguration : IEntityTypeConfiguration<MultipleKey>
    {
        public void Configure(EntityTypeBuilder<MultipleKey> builder)
        {
            builder.ToTable("MultipleKeys", "dbo");
            builder.HasKey(x => new { x.UserId, x.FavouriteColourId, x.BestHolidayTypeId }).HasName("PK_MultipleKeys").IsClustered();

            builder.Property(x => x.UserId).HasColumnName(@"UserId").HasColumnType("int").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.FavouriteColourId).HasColumnName(@"FavouriteColourId").HasColumnType("int").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.BestHolidayTypeId).HasColumnName(@"BestHolidayTypeId").HasColumnType("int").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.BankId).HasColumnName(@"BankId").HasColumnType("int").IsRequired();
            builder.Property(x => x.CarId).HasColumnName(@"CarId").HasColumnType("int").IsRequired();

            builder.HasIndex(x => x.BestHolidayTypeId).HasDatabaseName("IX_MultipleKeys_BestHolidayType");
            builder.HasIndex(x => new { x.BestHolidayTypeId, x.BankId }).HasDatabaseName("IX_MultipleKeys_Holiday_Bank").IsUnique();
            builder.HasIndex(x => x.FavouriteColourId).HasDatabaseName("UC_MultipleKeys_FavouriteColour").IsUnique();
        }
    }

    // Issue
    public class OneEightSix_IssueConfiguration : IEntityTypeConfiguration<OneEightSix_Issue>
    {
        public void Configure(EntityTypeBuilder<OneEightSix_Issue> builder)
        {
            builder.ToTable("Issue", "OneEightSix");
            builder.HasKey(x => x.Id).HasName("PK_Issue").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.Title).HasColumnName(@"Title").HasColumnType("nvarchar(100)").IsRequired().HasMaxLength(100);
            builder.Property(x => x.Content).HasColumnName(@"Content").HasColumnType("nvarchar(max)").IsRequired(false);
            builder.Property(x => x.ConsentDocumentId).HasColumnName(@"ConsentDocumentId").HasColumnType("int").IsRequired(false);

            // Foreign keys
            builder.HasOne(a => a.OneEightSix_UploadedFile).WithMany(b => b.OneEightSix_Issues_ConsentDocumentId).HasForeignKey(c => c.ConsentDocumentId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_Issue_UploadedFileConsentDocument");
            builder.HasMany<OneEightSix_UploadedFile>(t => t.OneEightSix_UploadedFiles).WithMany(t => t.OneEightSix_Issues_IssueId).UsingEntity<Dictionary<string, object>>("IssueUploadedFile",
                    j => j.HasOne<OneEightSix_UploadedFile>().WithMany().HasForeignKey("UploadedFileId"),
                    j => j.HasOne<OneEightSix_Issue>().WithMany().HasForeignKey("IssueId"),
                    j => j.ToTable("IssueUploadedFile", "OneEightSix"));
        }
    }

    // UploadedFile
    public class OneEightSix_UploadedFileConfiguration : IEntityTypeConfiguration<OneEightSix_UploadedFile>
    {
        public void Configure(EntityTypeBuilder<OneEightSix_UploadedFile> builder)
        {
            builder.ToTable("UploadedFile", "OneEightSix");
            builder.HasKey(x => x.Id).HasName("PK_UploadedFile").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.FullPath).HasColumnName(@"FullPath").HasColumnType("nvarchar(max)").IsRequired();
        }
    }

    // Period.Table
    public class Period_TableConfiguration : IEntityTypeConfiguration<Period_Table>
    {
        public void Configure(EntityTypeBuilder<Period_Table> builder)
        {
            builder.ToTable("Period.Table", "dbo");
            builder.HasKey(x => x.id).HasName("PK_Period_Table").IsClustered();

            builder.Property(x => x.id).HasColumnName(@"id").HasColumnType("int").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.joe_bloggs).HasColumnName(@"joe.bloggs").HasColumnType("int").IsRequired(false);
        }
    }

    // PeriodTestTable
    public class PeriodTestTableConfiguration : IEntityTypeConfiguration<PeriodTestTable>
    {
        public void Configure(EntityTypeBuilder<PeriodTestTable> builder)
        {
            builder.ToTable("PeriodTestTable", "dbo");
            builder.HasKey(x => x.id).HasName("PK_PeriodTestTable").IsClustered();

            builder.Property(x => x.id).HasColumnName(@"id").HasColumnType("int").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.joe_bloggs).HasColumnName(@"joe.bloggs").HasColumnType("int").IsRequired(false);
        }
    }

    // Person
    public class PersonConfiguration : IEntityTypeConfiguration<Person>
    {
        public void Configure(EntityTypeBuilder<Person> builder)
        {
            builder.ToTable("Person", "dbo");
            builder.HasKey(x => x.Id).HasName("PK_Person").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.Name).HasColumnName(@"Name").HasColumnType("varchar(50)").IsRequired().IsUnicode(false).HasMaxLength(50);
        }
    }

    // PersonPosts
    public class PersonPostConfiguration : IEntityTypeConfiguration<PersonPost>
    {
        public void Configure(EntityTypeBuilder<PersonPost> builder)
        {
            builder.ToTable("PersonPosts", "dbo");
            builder.HasKey(x => x.Id).HasName("PK_PersonPosts").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.Title).HasColumnName(@"Title").HasColumnType("varchar(20)").IsRequired().IsUnicode(false).HasMaxLength(20);
            builder.Property(x => x.Body).HasColumnName(@"Body").HasColumnType("varchar(100)").IsRequired().IsUnicode(false).HasMaxLength(100);
            builder.Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("int").IsRequired();
            builder.Property(x => x.UpdatedBy).HasColumnName(@"UpdatedBy").HasColumnType("int").IsRequired();

            // Foreign keys
            builder.HasOne(a => a.Person_CreatedBy).WithMany(b => b.PersonPosts_CreatedBy).HasForeignKey(c => c.CreatedBy).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_PersonPosts_CreatedBy");
            builder.HasOne(a => a.Person_UpdatedBy).WithMany(b => b.PersonPosts_UpdatedBy).HasForeignKey(c => c.UpdatedBy).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_PersonPosts_UpdatedBy");
        }
    }

    // pk_ordinal_test
    public class pk_ordinal_testConfiguration : IEntityTypeConfiguration<pk_ordinal_test>
    {
        public void Configure(EntityTypeBuilder<pk_ordinal_test> builder)
        {
            builder.ToTable("pk_ordinal_test", "dbo");
            builder.HasKey(x => new { x.C3, x.C1 }).HasName("PK_pk_ordinal_test").IsClustered();

            builder.Property(x => x.C1).HasColumnName(@"C1").HasColumnType("int").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.C2).HasColumnName(@"C2").HasColumnType("int").IsRequired();
            builder.Property(x => x.C3).HasColumnName(@"C3").HasColumnType("int").IsRequired().ValueGeneratedNever();
        }
    }

    // PropertyTypesToAdd
    public class PropertyTypesToAddConfiguration : IEntityTypeConfiguration<PropertyTypesToAdd>
    {
        public void Configure(EntityTypeBuilder<PropertyTypesToAdd> builder)
        {
            builder.ToTable("PropertyTypesToAdd", "dbo");
            builder.HasKey(x => x.id).HasName("PK_PropertyTypesToAdd").IsClustered();

            builder.Property(x => x.id).HasColumnName(@"id").HasColumnType("int").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.dt_default).HasColumnName(@"dt_default").HasColumnType("datetime2").IsRequired(false);
            builder.Property(x => x.dt7).HasColumnName(@"dt7").HasColumnType("datetime2").IsRequired(false);
            builder.Property(x => x.defaultCheck).HasColumnName(@"defaultCheck").HasColumnType("varchar(10)").IsRequired(false).IsUnicode(false).HasMaxLength(10);
        }
    }

    // SequenceTest
    public class SequenceTestConfiguration : IEntityTypeConfiguration<SequenceTest>
    {
        public void Configure(EntityTypeBuilder<SequenceTest> builder)
        {
            builder.ToTable("SequenceTest", "dbo");
            builder.HasKey(x => x.Id).HasName("PK_SequenceTest").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().HasDefaultValueSql(@"NEXT VALUE FOR [dbo].[CountBy1]");
            builder.Property(x => x.CntByBigInt).HasColumnName(@"CntByBigInt").HasColumnType("bigint").IsRequired().HasDefaultValueSql(@"NEXT VALUE FOR [dbo].[CountByBigInt]");
            builder.Property(x => x.CntByTinyInt).HasColumnName(@"CntByTinyInt").HasColumnType("tinyint").IsRequired().HasDefaultValueSql(@"NEXT VALUE FOR [dbo].[CountByTinyInt]");
            builder.Property(x => x.CntBySmallInt).HasColumnName(@"CntBySmallInt").HasColumnType("smallint").IsRequired().HasDefaultValueSql(@"NEXT VALUE FOR [dbo].[CountBySmallInt]");
            builder.Property(x => x.CntByDecimal).HasColumnName(@"CntByDecimal").HasColumnType("decimal(18,0)").HasPrecision(18,0).IsRequired().HasDefaultValueSql(@"NEXT VALUE FOR [dbo].[CountByDecimal]");
            builder.Property(x => x.CntByNumeric).HasColumnName(@"CntByNumeric").HasColumnType("numeric(18,0)").HasPrecision(18,0).IsRequired().HasDefaultValueSql(@"NEXT VALUE FOR [dbo].[CountByNumeric]");
        }
    }

    // SequenceTestPartTwo
    public class SequenceTestPartTwoConfiguration : IEntityTypeConfiguration<SequenceTestPartTwo>
    {
        public void Configure(EntityTypeBuilder<SequenceTestPartTwo> builder)
        {
            builder.ToTable("SequenceTestPartTwo", "dbo");
            builder.HasKey(x => x.Id).HasName("PK_SequenceTestPartTwo").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.CntByBigInt).HasColumnName(@"CntByBigInt").HasColumnType("bigint").IsRequired().HasDefaultValueSql(@"NEXT VALUE FOR [dbo].[CountByBigInt]");
            builder.Property(x => x.CntByTinyInt).HasColumnName(@"CntByTinyInt").HasColumnType("tinyint").IsRequired().HasDefaultValueSql(@"NEXT VALUE FOR [dbo].[CountByTinyInt]");
        }
    }

    // SmallDecimalTest
    public class SmallDecimalTestConfiguration : IEntityTypeConfiguration<SmallDecimalTest>
    {
        public void Configure(EntityTypeBuilder<SmallDecimalTest> builder)
        {
            builder.ToTable("SmallDecimalTest", "dbo");
            builder.HasKey(x => x.id).HasName("PK_SmallDecimalTest").IsClustered();

            builder.Property(x => x.id).HasColumnName(@"id").HasColumnType("int").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.KoeffVed).HasColumnName(@"KoeffVed").HasColumnType("decimal(4,4)").HasPrecision(4,4).IsRequired(false);
        }
    }

    // SmallDecimalTestView
    public class SmallDecimalTestViewConfiguration : IEntityTypeConfiguration<SmallDecimalTestView>
    {
        public void Configure(EntityTypeBuilder<SmallDecimalTestView> builder)
        {
            builder.ToView("SmallDecimalTestView", "dbo");
            builder.HasNoKey();

            builder.Property(x => x.FkID).HasColumnName(@"FkID").HasColumnType("int").IsRequired();
            builder.Property(x => x.description).HasColumnName(@"description").HasColumnType("varchar(20)").IsRequired().IsUnicode(false).HasMaxLength(20);
        }
    }

    // Boo
    public class Stafford_BooConfiguration : IEntityTypeConfiguration<Stafford_Boo>
    {
        public void Configure(EntityTypeBuilder<Stafford_Boo> builder)
        {
            builder.ToTable("Boo", "Stafford");
            builder.HasKey(x => x.id).HasName("PK_Boo").IsClustered();

            builder.Property(x => x.id).HasColumnName(@"id").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.name).HasColumnName(@"name").HasColumnType("nchar(10)").IsRequired().IsFixedLength().HasMaxLength(10);
        }
    }

    // ComputedColumns
    public class Stafford_ComputedColumnConfiguration : IEntityTypeConfiguration<Stafford_ComputedColumn>
    {
        public void Configure(EntityTypeBuilder<Stafford_ComputedColumn> builder)
        {
            builder.ToTable("ComputedColumns", "Stafford");
            builder.HasKey(x => x.Id).HasName("PK_Stafford_ComputedColumns").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.MyColumn).HasColumnName(@"MyColumn").HasColumnType("varchar(10)").IsRequired().IsUnicode(false).HasMaxLength(10);
            builder.Property(x => x.MyComputedColumn).HasColumnName(@"MyComputedColumn").HasColumnType("varchar(10)").IsRequired().IsUnicode(false).HasMaxLength(10).ValueGeneratedOnAddOrUpdate();
        }
    }

    // Foo
    public class Stafford_FooConfiguration : IEntityTypeConfiguration<Stafford_Foo>
    {
        public void Configure(EntityTypeBuilder<Stafford_Foo> builder)
        {
            builder.ToTable("Foo", "Stafford");
            builder.HasKey(x => x.id).HasName("PK_Foo").IsClustered();

            builder.Property(x => x.id).HasColumnName(@"id").HasColumnType("int").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.name).HasColumnName(@"name").HasColumnType("nchar(10)").IsRequired().IsFixedLength().HasMaxLength(10);

            // Foreign keys
            builder.HasOne(a => a.Stafford_Boo).WithOne(b => b.Stafford_Foo).HasForeignKey<Stafford_Foo>(c => c.id).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_Foo_Boo");
        }
    }

    // Child
    public class Synonyms_ChildConfiguration : IEntityTypeConfiguration<Synonyms_Child>
    {
        public void Configure(EntityTypeBuilder<Synonyms_Child> builder)
        {
            builder.ToTable("Child", "Synonyms");
            builder.HasKey(x => x.ChildId).HasName("PK_Child").IsClustered();

            builder.Property(x => x.ChildId).HasColumnName(@"ChildId").HasColumnType("int").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.ParentId).HasColumnName(@"ParentId").HasColumnType("int").IsRequired();
            builder.Property(x => x.ChildName).HasColumnName(@"ChildName").HasColumnType("varchar(100)").IsRequired(false).IsUnicode(false).HasMaxLength(100);

            // Foreign keys
            builder.HasOne(a => a.Synonyms_Parent).WithMany(b => b.Synonyms_Children).HasForeignKey(c => c.ParentId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_Child_Parent");
        }
    }

    // Parent
    public class Synonyms_ParentConfiguration : IEntityTypeConfiguration<Synonyms_Parent>
    {
        public void Configure(EntityTypeBuilder<Synonyms_Parent> builder)
        {
            builder.ToTable("Parent", "Synonyms");
            builder.HasKey(x => x.ParentId).HasName("PK_Parent").IsClustered();

            builder.Property(x => x.ParentId).HasColumnName(@"ParentId").HasColumnType("int").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.ParentName).HasColumnName(@"ParentName").HasColumnType("varchar(100)").IsRequired().IsUnicode(false).HasMaxLength(100);
        }
    }

    // table.with.multiple.periods
    public class table_with_multiple_periodConfiguration : IEntityTypeConfiguration<table_with_multiple_period>
    {
        public void Configure(EntityTypeBuilder<table_with_multiple_period> builder)
        {
            builder.ToTable("table.with.multiple.periods", "dbo");
            builder.HasKey(x => x.id).HasName("PK_table_with_multiple_periods").IsClustered();

            builder.Property(x => x.id).HasColumnName(@"id").HasColumnType("int").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.description).HasColumnName(@"description").HasColumnType("varchar(20)").IsRequired().IsUnicode(false).HasMaxLength(20);
        }
    }

    // TableA
    public class TableAConfiguration : IEntityTypeConfiguration<TableA>
    {
        public void Configure(EntityTypeBuilder<TableA> builder)
        {
            builder.ToTable("TableA", "dbo");
            builder.HasKey(x => x.TableAId).HasName("TableA_pkey").IsClustered();

            builder.Property(x => x.TableAId).HasColumnName(@"TableAId").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.TableADesc).HasColumnName(@"TableADesc").HasColumnType("varchar(20)").IsRequired(false).IsUnicode(false).HasMaxLength(20);
        }
    }

    // TableB
    public class TableBConfiguration : IEntityTypeConfiguration<TableB>
    {
        public void Configure(EntityTypeBuilder<TableB> builder)
        {
            builder.ToTable("TableB", "dbo");
            builder.HasKey(x => new { x.TableBId, x.TableAId }).HasName("TableB_pkey").IsClustered();

            builder.Property(x => x.TableBId).HasColumnName(@"TableBId").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.TableAId).HasColumnName(@"TableAId").HasColumnType("int").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.ParentTableAId).HasColumnName(@"ParentTableAId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.TableBDesc).HasColumnName(@"TableBDesc").HasColumnType("varchar(20)").IsRequired(false).IsUnicode(false).HasMaxLength(20);

            // Foreign keys
            builder.HasOne(a => a.TableA_TableAId).WithMany(b => b.TableBs).HasForeignKey(c => c.TableAId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_TableA_CompositeKey_Req");
            builder.HasOne(a => a.TableB1).WithOne(b => b.TableB2).HasForeignKey<TableB>(c => new { c.TableAId, c.TableBId }).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("ParentTableB_Hierarchy");

            builder.HasIndex(x => x.TableAId).HasDatabaseName("fki_ParentTableA_FK_Constraint");
        }
    }

    // table with duplicate column names
    public class tablewithduplicatecolumnnameConfiguration : IEntityTypeConfiguration<tablewithduplicatecolumnname>
    {
        public void Configure(EntityTypeBuilder<tablewithduplicatecolumnname> builder)
        {
            builder.ToTable("table with duplicate column names", "dbo");
            builder.HasKey(x => x.id).HasName("PK_TableWithDuplicateColumnNames").IsClustered();

            builder.Property(x => x.id).HasColumnName(@"id").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.user_id).HasColumnName(@"user_id").HasColumnType("int").IsRequired();
            builder.Property(x => x.UserId1).HasColumnName(@"UserId").HasColumnType("int").IsRequired();
            builder.Property(x => x.UserId2).HasColumnName(@"User Id").HasColumnType("int").IsRequired();
            builder.Property(x => x.UserId).HasColumnName(@"User  Id").HasColumnType("int").IsRequired();
            builder.Property(x => x.user__id).HasColumnName(@"user__id").HasColumnType("int").IsRequired();
        }
    }

    // table with space
    public class tablewithspaceConfiguration : IEntityTypeConfiguration<tablewithspace>
    {
        public void Configure(EntityTypeBuilder<tablewithspace> builder)
        {
            builder.ToTable("table with space", "dbo");
            builder.HasKey(x => x.id).HasName("PK_TableWithSpace").IsClustered();

            builder.Property(x => x.id).HasColumnName(@"id").HasColumnType("int").IsRequired().ValueGeneratedNever();
            builder.HasMany<tablewithspaceandincolumn>(t => t.tablewithspaceandincolumns).WithMany(t => t.tablewithspaces).UsingEntity<Dictionary<string, object>>("table mapping with space",
                    j => j.HasOne<tablewithspaceandincolumn>().WithMany().HasForeignKey("id value"),
                    j => j.HasOne<tablewithspace>().WithMany().HasForeignKey("id"),
                    j => j.ToTable("table mapping with space", "dbo"));
        }
    }

    // table with space and in columns
    public class tablewithspaceandincolumnConfiguration : IEntityTypeConfiguration<tablewithspaceandincolumn>
    {
        public void Configure(EntityTypeBuilder<tablewithspaceandincolumn> builder)
        {
            builder.ToTable("table with space and in columns", "dbo");
            builder.HasKey(x => x.idvalue).HasName("PK_TableWithSpaceAndInColumns").IsClustered();

            builder.Property(x => x.idvalue).HasColumnName(@"id value").HasColumnType("int").IsRequired().ValueGeneratedNever();
        }
    }

    // TableWithSpaceInColumnOnly
    public class TableWithSpaceInColumnOnlyConfiguration : IEntityTypeConfiguration<TableWithSpaceInColumnOnly>
    {
        public void Configure(EntityTypeBuilder<TableWithSpaceInColumnOnly> builder)
        {
            builder.ToTable("TableWithSpaceInColumnOnly", "dbo");
            builder.HasKey(x => x.idvalue).HasName("PK_TableWithSpaceInColumnOnly").IsClustered();

            builder.Property(x => x.idvalue).HasColumnName(@"id value").HasColumnType("int").IsRequired().ValueGeneratedNever();
        }
    }

    // TadeuszSobol
    public class TadeuszSobolConfiguration : IEntityTypeConfiguration<TadeuszSobol>
    {
        public void Configure(EntityTypeBuilder<TadeuszSobol> builder)
        {
            builder.ToTable("TadeuszSobol", "dbo");
            builder.HasKey(x => x.Id).HasName("PK_TadeuszSobol").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.Description).HasColumnName(@"Description").HasColumnType("varchar(max)").IsRequired(false).IsUnicode(false);
            builder.Property(x => x.Notes).HasColumnName(@"Notes").HasColumnType("nvarchar(max)").IsRequired(false);
            builder.Property(x => x.Name).HasColumnName(@"Name").HasColumnType("varchar(10)").IsRequired(false).IsUnicode(false).HasMaxLength(10);
        }
    }

    // Task
    public class Task1Configuration : IEntityTypeConfiguration<Task1>
    {
        public void Configure(EntityTypeBuilder<Task1> builder)
        {
            builder.ToTable("Task", "dbo");
            builder.HasKey(x => x.TaskId).HasName("PK_Task").IsClustered();

            builder.Property(x => x.TaskId).HasColumnName(@"TaskId").HasColumnType("bigint").IsRequired().ValueGeneratedNever();
        }
    }

    // tblOrders
    public class tblOrderConfiguration : IEntityTypeConfiguration<tblOrder>
    {
        public void Configure(EntityTypeBuilder<tblOrder> builder)
        {
            builder.ToTable("tblOrders", "dbo");
            builder.HasKey(x => x.ID).HasName("PK_tblOrders").IsClustered();

            builder.Property(x => x.ID).HasColumnName(@"ID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.added).HasColumnName(@"added").HasColumnType("datetime").IsRequired();
        }
    }

    // tblOrderErrors
    public class tblOrderErrorConfiguration : IEntityTypeConfiguration<tblOrderError>
    {
        public void Configure(EntityTypeBuilder<tblOrderError> builder)
        {
            builder.ToTable("tblOrderErrors", "dbo");
            builder.HasKey(x => x.ID).HasName("PK_tblOrderErrors").IsClustered();

            builder.Property(x => x.ID).HasColumnName(@"ID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.error).HasColumnName(@"error").HasColumnType("varchar(50)").IsRequired(false).IsUnicode(false).HasMaxLength(50);
        }
    }

    // tblOrderErrorsAB_
    public class tblOrderErrorsABConfiguration : IEntityTypeConfiguration<tblOrderErrorsAB>
    {
        public void Configure(EntityTypeBuilder<tblOrderErrorsAB> builder)
        {
            builder.ToTable("tblOrderErrorsAB_", "dbo");
            builder.HasKey(x => x.ID).HasName("PK_tblOrderErrorsAB").IsClustered();

            builder.Property(x => x.ID).HasColumnName(@"ID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.error).HasColumnName(@"error").HasColumnType("varchar(50)").IsRequired(false).IsUnicode(false).HasMaxLength(50);
        }
    }

    // tblOrderLines
    public class tblOrderLineConfiguration : IEntityTypeConfiguration<tblOrderLine>
    {
        public void Configure(EntityTypeBuilder<tblOrderLine> builder)
        {
            builder.ToTable("tblOrderLines", "dbo");
            builder.HasKey(x => x.ID).HasName("PK_tblOrderLines").IsClustered();

            builder.Property(x => x.ID).HasColumnName(@"ID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.OrderID).HasColumnName(@"OrderID").HasColumnType("int").IsRequired();
            builder.Property(x => x.sku).HasColumnName(@"sku").HasColumnType("varchar(15)").IsRequired(false).IsUnicode(false).HasMaxLength(15);

            // Foreign keys
            builder.HasOne(a => a.tblOrder).WithMany(b => b.tblOrderLines).HasForeignKey(c => c.OrderID).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("tblOrdersFK");
        }
    }

    // TemporalDepartment
    public class TemporalDepartmentConfiguration : IEntityTypeConfiguration<TemporalDepartment>
    {
        public void Configure(EntityTypeBuilder<TemporalDepartment> builder)
        {
            builder.ToTable("TemporalDepartment", "dbo");
            builder.HasKey(x => x.DeptID).HasName("PK__Temporal__0148818EB27A7514").IsClustered();

            builder.Property(x => x.DeptID).HasColumnName(@"DeptID").HasColumnType("int").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.DeptName).HasColumnName(@"DeptName").HasColumnType("varchar(50)").IsRequired().IsUnicode(false).HasMaxLength(50);
            builder.Property(x => x.ManagerID).HasColumnName(@"ManagerID").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.ParentDeptID).HasColumnName(@"ParentDeptID").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.SysStartTime).HasColumnName(@"SysStartTime").HasColumnType("datetime2").IsRequired().ValueGeneratedOnAdd();
            builder.Property(x => x.SysEndTime).HasColumnName(@"SysEndTime").HasColumnType("datetime2").IsRequired().ValueGeneratedOnAdd();
        }
    }

    // TemporalDepartmentHistory
    public class TemporalDepartmentHistoryConfiguration : IEntityTypeConfiguration<TemporalDepartmentHistory>
    {
        public void Configure(EntityTypeBuilder<TemporalDepartmentHistory> builder)
        {
            builder.ToTable("TemporalDepartmentHistory", "dbo");
            builder.HasKey(x => new { x.DeptID, x.DeptName, x.SysStartTime, x.SysEndTime });

            builder.Property(x => x.DeptID).HasColumnName(@"DeptID").HasColumnType("int").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.DeptName).HasColumnName(@"DeptName").HasColumnType("varchar(50)").IsRequired().IsUnicode(false).HasMaxLength(50).ValueGeneratedNever();
            builder.Property(x => x.ManagerID).HasColumnName(@"ManagerID").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.ParentDeptID).HasColumnName(@"ParentDeptID").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.SysStartTime).HasColumnName(@"SysStartTime").HasColumnType("datetime2").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.SysEndTime).HasColumnName(@"SysEndTime").HasColumnType("datetime2").IsRequired().ValueGeneratedNever();

            builder.HasIndex(x => new { x.SysEndTime, x.SysStartTime }).HasDatabaseName("ix_TemporalDepartmentHistory");
        }
    }

    // ThisIsMemoryOptimised
    public class ThisIsMemoryOptimisedConfiguration : IEntityTypeConfiguration<ThisIsMemoryOptimised>
    {
        public void Configure(EntityTypeBuilder<ThisIsMemoryOptimised> builder)
        {
            builder.ToTable("ThisIsMemoryOptimised", "dbo");
            builder.HasKey(x => x.Id).HasName("PK_ThisIsMemoryOptimised");

            builder.Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.Description).HasColumnName(@"Description").HasColumnType("varchar(20)").IsRequired().IsUnicode(false).HasMaxLength(20);
        }
    }

    // Ticket
    public class TicketConfiguration : IEntityTypeConfiguration<Ticket>
    {
        public void Configure(EntityTypeBuilder<Ticket> builder)
        {
            builder.ToTable("Ticket", "dbo");
            builder.HasKey(x => x.Id).HasName("PK_Ticket").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"Id").HasColumnType("bigint").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.CreatedById).HasColumnName(@"CreatedById").HasColumnType("bigint").IsRequired();
            builder.Property(x => x.ModifiedById).HasColumnName(@"ModifiedById").HasColumnType("bigint").IsRequired(false);

            // Foreign keys
            builder.HasOne(a => a.CreatedBy).WithMany(b => b.Tickets_CreatedById).HasForeignKey(c => c.CreatedById).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_Ticket_AppUser");
            builder.HasOne(a => a.ModifiedBy).WithMany(b => b.Tickets_ModifiedById).HasForeignKey(c => c.ModifiedById).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_Ticket_AppUser1");
        }
    }

    // TimestampNotNull
    public class TimestampNotNullConfiguration : IEntityTypeConfiguration<TimestampNotNull>
    {
        public void Configure(EntityTypeBuilder<TimestampNotNull> builder)
        {
            builder.ToTable("TimestampNotNull", "dbo");
            builder.HasKey(x => x.Id).HasName("PK_TimestampNotNull").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.Version).HasColumnName(@"Version").HasColumnType("timestamp(8)").IsRequired().IsFixedLength().HasMaxLength(8).IsRowVersion().IsConcurrencyToken();
            builder.Property(x => x.Number).HasColumnName(@"Number").HasColumnType("int").IsRequired();
        }
    }

    // TimestampNullable
    public class TimestampNullableConfiguration : IEntityTypeConfiguration<TimestampNullable>
    {
        public void Configure(EntityTypeBuilder<TimestampNullable> builder)
        {
            builder.ToTable("TimestampNullable", "dbo");
            builder.HasKey(x => x.Id).HasName("PK_TTimestampNullable").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.Version).HasColumnName(@"Version").HasColumnType("timestamp(8)").IsRequired(false).IsFixedLength().HasMaxLength(8).IsRowVersion().IsConcurrencyToken();
            builder.Property(x => x.Number).HasColumnName(@"Number").HasColumnType("int").IsRequired();
        }
    }

    // Token
    public class TokenConfiguration : IEntityTypeConfiguration<Token>
    {
        public void Configure(EntityTypeBuilder<Token> builder)
        {
            builder.ToTable("Token", "dbo");
            builder.HasKey(x => x.Id).HasName("PK_Token").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired().ValueGeneratedOnAdd();
            builder.Property(x => x.Enabled).HasColumnName(@"Enabled").HasColumnType("bit").IsRequired();
        }
    }

    // User
    public class UserConfiguration : IEntityTypeConfiguration<User>
    {
        public void Configure(EntityTypeBuilder<User> builder)
        {
            builder.ToTable("User", "dbo");
            builder.HasKey(x => x.ID).HasName("PK_User").IsClustered();

            builder.Property(x => x.ID).HasColumnName(@"ID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.ExternalUserID).HasColumnName(@"ExternalUserID").HasColumnType("varchar(50)").IsRequired(false).IsUnicode(false).HasMaxLength(50);
        }
    }

    // User_Document
    public class User_DocumentConfiguration : IEntityTypeConfiguration<User_Document>
    {
        public void Configure(EntityTypeBuilder<User_Document> builder)
        {
            builder.ToTable("User_Document", "dbo");
            builder.HasKey(x => x.ID).HasName("PK_User_Document").IsClustered();

            builder.Property(x => x.ID).HasColumnName(@"ID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.UserID).HasColumnName(@"UserID").HasColumnType("int").IsRequired();
            builder.Property(x => x.CreatedByUserID).HasColumnName(@"CreatedByUserID").HasColumnType("int").IsRequired();

            // Foreign keys
            builder.HasOne(a => a.CreatedByUser).WithMany(b => b.User_Documents_CreatedByUserID).HasForeignKey(c => c.CreatedByUserID).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_User_Document_User1");
            builder.HasOne(a => a.User_UserID).WithMany(b => b.User_Documents_UserID).HasForeignKey(c => c.UserID).HasConstraintName("FK_User_Document_User");
        }
    }

    // User309
    public class User309Configuration : IEntityTypeConfiguration<User309>
    {
        public void Configure(EntityTypeBuilder<User309> builder)
        {
            builder.ToTable("User309", "dbo");
            builder.HasKey(x => x.UserID).HasName("PK_User309").IsClustered();

            builder.Property(x => x.UserID).HasColumnName(@"UserID").HasColumnType("bigint").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.Lastname).HasColumnName(@"Lastname").HasColumnType("nvarchar(100)").IsRequired().HasMaxLength(100);
            builder.Property(x => x.Firstname).HasColumnName(@"Firstname").HasColumnType("nvarchar(100)").IsRequired().HasMaxLength(100);
            builder.Property(x => x.PhoneCountryID).HasColumnName(@"PhoneCountryID").HasColumnType("int").IsRequired(false);

            // Foreign keys
            builder.HasOne(a => a.Country).WithMany(b => b.User309).HasForeignKey(c => c.PhoneCountryID).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_User309_PhoneCountry");
        }
    }

    // Versioned
    public class VersionedConfiguration : IEntityTypeConfiguration<Versioned>
    {
        public void Configure(EntityTypeBuilder<Versioned> builder)
        {
            builder.ToTable("Versioned", "dbo");
            builder.HasKey(x => x.Id).HasName("PK_Versioned").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.Version).HasColumnName(@"Version").HasColumnType("timestamp(8)").IsRequired().IsFixedLength().HasMaxLength(8).IsRowVersion().IsConcurrencyToken();
            builder.Property(x => x.Number).HasColumnName(@"Number").HasColumnType("int").IsRequired();
        }
    }

    // VersionedNullable
    public class VersionedNullableConfiguration : IEntityTypeConfiguration<VersionedNullable>
    {
        public void Configure(EntityTypeBuilder<VersionedNullable> builder)
        {
            builder.ToTable("VersionedNullable", "dbo");
            builder.HasKey(x => x.Id).HasName("PK_VersionedNullable").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.Version).HasColumnName(@"Version").HasColumnType("timestamp(8)").IsRequired(false).IsFixedLength().HasMaxLength(8).IsRowVersion().IsConcurrencyToken();
            builder.Property(x => x.Number).HasColumnName(@"Number").HasColumnType("int").IsRequired();
        }
    }

    // view.with.multiple.periods
    public class view_with_multiple_periodConfiguration : IEntityTypeConfiguration<view_with_multiple_period>
    {
        public void Configure(EntityTypeBuilder<view_with_multiple_period> builder)
        {
            builder.ToView("view.with.multiple.periods", "dbo");
            builder.HasNoKey();

            builder.Property(x => x.FkID).HasColumnName(@"FkID").HasColumnType("int").IsRequired();
            builder.Property(x => x.description).HasColumnName(@"description").HasColumnType("varchar(20)").IsRequired().IsUnicode(false).HasMaxLength(20);
        }
    }

    // view with space
    public class viewwithspaceConfiguration : IEntityTypeConfiguration<viewwithspace>
    {
        public void Configure(EntityTypeBuilder<viewwithspace> builder)
        {
            builder.ToView("view with space", "dbo");
            builder.HasNoKey();

            builder.Property(x => x.codeObjectNo).HasColumnName(@"codeObjectNo").HasColumnType("int").IsRequired();
            builder.Property(x => x.applicationNo).HasColumnName(@"applicationNo").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.type).HasColumnName(@"type").HasColumnType("int").IsRequired();
            builder.Property(x => x.eName).HasColumnName(@"eName").HasColumnType("nvarchar(250)").IsRequired().HasMaxLength(250);
            builder.Property(x => x.aName).HasColumnName(@"aName").HasColumnType("nvarchar(250)").IsRequired(false).HasMaxLength(250);
            builder.Property(x => x.description).HasColumnName(@"description").HasColumnType("nvarchar(250)").IsRequired(false).HasMaxLength(250);
            builder.Property(x => x.codeName).HasColumnName(@"codeName").HasColumnType("nvarchar(250)").IsRequired(false).HasMaxLength(250);
            builder.Property(x => x.note).HasColumnName(@"note").HasColumnType("nvarchar(250)").IsRequired(false).HasMaxLength(250);
            builder.Property(x => x.isObject).HasColumnName(@"isObject").HasColumnType("bit").IsRequired();
            builder.Property(x => x.versionNumber).HasColumnName(@"versionNumber").HasColumnType("timestamp(8)").IsRequired(false).IsFixedLength().HasMaxLength(8).IsRowVersion().IsConcurrencyToken();
        }
    }

    // Articles
    public class WVN_ArticleConfiguration : IEntityTypeConfiguration<WVN_Article>
    {
        public void Configure(EntityTypeBuilder<WVN_Article> builder)
        {
            builder.ToTable("Articles", "WVN");
            builder.HasKey(x => x.PK_Article).HasName("PK_Articles").IsClustered();

            builder.Property(x => x.PK_Article).HasColumnName(@"PK_Article").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.FK_Factory).HasColumnName(@"FK_Factory").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.FK_ArticleLevel).HasColumnName(@"FK_ArticleLevel").HasColumnType("int").IsRequired();
            builder.Property(x => x.FK_ParentArticle).HasColumnName(@"FK_ParentArticle").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.Code).HasColumnName(@"Code").HasColumnType("nvarchar(20)").IsRequired().HasMaxLength(20);

            builder.HasIndex(x => new { x.FK_Factory, x.FK_ArticleLevel, x.Code }).HasDatabaseName("UK_Articles").IsUnique();
        }
    }

    // v_Articles
    public class WVN_v_ArticleConfiguration : IEntityTypeConfiguration<WVN_v_Article>
    {
        public void Configure(EntityTypeBuilder<WVN_v_Article> builder)
        {
            builder.ToView("v_Articles", "WVN");
            builder.HasNoKey();

            builder.Property(x => x.PK_Article).HasColumnName(@"PK_Article").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.FK_Factory).HasColumnName(@"FK_Factory").HasColumnType("uniqueidentifier").IsRequired(false);
            builder.Property(x => x.FK_ArticleLevel).HasColumnName(@"FK_ArticleLevel").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.FK_ParentArticle).HasColumnName(@"FK_ParentArticle").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.Code).HasColumnName(@"Code").HasColumnType("nvarchar(20)").IsRequired(false).HasMaxLength(20);
            builder.Property(x => x.FullCode).HasColumnName(@"FullCode").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);
        }
    }

    // Бренды товара
    public class БрендытовараConfiguration : IEntityTypeConfiguration<Брендытовара>
    {
        public void Configure(EntityTypeBuilder<Брендытовара> builder)
        {
            builder.ToTable("Бренды товара", "dbo");
            builder.HasKey(x => x.Кодбренда).HasName("PK_Бренды").IsClustered();

            builder.Property(x => x.Кодбренда).HasColumnName(@"Код бренда").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.Наименованиебренда).HasColumnName(@"Наименование бренда").HasColumnType("varchar(50)").IsRequired().IsUnicode(false).HasMaxLength(50);
            builder.Property(x => x.Логотип_бренда).HasColumnName(@"Логотип_бренда").HasColumnType("image(2147483647)").IsRequired(false).HasMaxLength(2147483647);
            builder.Property(x => x.Логотип_бренда_вертикальный).HasColumnName(@"Логотип_бренда_вертикальный").HasColumnType("image(2147483647)").IsRequired(false).HasMaxLength(2147483647);
        }
    }


    #endregion

    #region Enumerations

    public enum DaysOfWeek
    {
        Sun = 0,
        Mon = 1,
        Tue = 2,
        Wed = 3,
        Thu = 4,
        Fri = 6,
        Sat = 7,
    }


    #endregion

    #region Stored procedure return models

    public class aSimpleExampleReturnModel
    {
        public int? id { get; set; }
        public string stuff { get; set; }
    }

    public class C182_test1ReturnModel
    {
        public int? Id { get; set; }
        public string Description { get; set; }
    }

    public class C182_test2ReturnModel
    {
        public class ResultSetModel1
        {
            public int? Id { get; set; }
            public string DescriptionFlag1 { get; set; }
        }
        public List<ResultSetModel1> ResultSet1;
        public class ResultSetModel2
        {
            public int? Id { get; set; }
            public string DescriptionNotNull { get; set; }
        }
        public List<ResultSetModel2> ResultSet2;
        public class ResultSetModel3
        {
            public int? Id { get; set; }
            public string Description { get; set; }
        }
        public List<ResultSetModel3> ResultSet3;
    }

    public class CheckIfApplicationIsCompleteReturnModel
    {
        public string Key { get; set; }
        public string Value { get; set; }
    }

    public class ColourPivotReturnModel
    {
        public int? Blue { get; set; }
        public int? Green { get; set; }
        public int? Red { get; set; }
    }

    public class ColumnNameAndTypesProcReturnModel
    {
        public DateTime someDate { get; set; }
        public string Obs { get; set; }
        public int? @static { get; set; }
        public int? @readonly { get; set; }
        public Single? areal { get; set; }
        public double? afloat { get; set; }
        public Single? afloat8 { get; set; }
        public Single? afloat20 { get; set; }
        public Single? afloat24 { get; set; }
        public double? afloat53 { get; set; }
        public decimal? adecimal { get; set; }
        public decimal? adecimal_19_4 { get; set; }
        public decimal? adecimal_10_3 { get; set; }
        public decimal? anumeric { get; set; }
        public decimal? anumeric_5_2 { get; set; }
        public decimal? anumeric_11_3 { get; set; }
        public decimal? amoney { get; set; }
        public decimal? asmallmoney { get; set; }
        public NetTopologySuite.Geometries.Point GeographyType { get; set; }
        public NetTopologySuite.Geometries.Geometry GeometryType { get; set; }
    }

    public class CsvToIntReturnModel
    {
        public int? IntValue { get; set; }
    }

    public class CustomSchema_CsvToIntWithSchemaReturnModel
    {
        public int? IntValue { get; set; }
    }

    public class dbo_proc_data_from_ffrs_and_dboReturnModel
    {
        public int Id { get; set; }
        public int PrimaryColourId { get; set; }
        public string CarMake { get; set; }
        public string CVName { get; set; }
    }

    public class dbo_proc_data_from_ffrsReturnModel
    {
        public Guid BatchUID { get; set; }
        public int CVID { get; set; }
        public string CVName { get; set; }
    }

    public class DSOpeProcReturnModel
    {
        public int ID { get; set; }
        public bool? Selected { get; set; }
    }

    public class FFRS_CsvToInt2ReturnModel
    {
        public int? IntValue { get; set; }
    }

    public class FFRS_cv_dataReturnModel
    {
        public Guid BatchUID { get; set; }
        public int CVID { get; set; }
        public string CVName { get; set; }
    }

    public class FFRS_data_from_dbo_and_ffrsReturnModel
    {
        public int Id { get; set; }
        public int PrimaryColourId { get; set; }
        public string CarMake { get; set; }
        public string CVName { get; set; }
    }

    public class FFRS_data_from_dboReturnModel
    {
        public int Id { get; set; }
        public int PrimaryColourId { get; set; }
        public string CarMake { get; set; }
    }

    public class FkTest_HelloReturnModel
    {
        public int? @static { get; set; }
        public int? @readonly { get; set; }
    }

    public class GetSmallDecimalTestReturnModel
    {
        public int id { get; set; }
        public decimal? KoeffVed { get; set; }
    }

    public class SpatialTypesNoParamsReturnModel
    {
        public int Dollar { get; set; }
        public DateTime someDate { get; set; }
        public NetTopologySuite.Geometries.Point GeographyType { get; set; }
        public NetTopologySuite.Geometries.Geometry GeometryType { get; set; }
    }

    public class SpatialTypesWithParamsReturnModel
    {
        public int Dollar { get; set; }
        public NetTopologySuite.Geometries.Point GeographyType { get; set; }
        public NetTopologySuite.Geometries.Geometry GeometryType { get; set; }
    }

    public class stp_multiple_identical_resultsReturnModel
    {
        public int Id { get; set; }
        public string Name { get; set; }
    }

    public class stp_multiple_multiple_results_with_paramsReturnModel
    {
        public class ResultSetModel1
        {
            public int codeObjectNo { get; set; }
            public int? applicationNo { get; set; }
        }
        public List<ResultSetModel1> ResultSet1;
        public class ResultSetModel2
        {
            public int Id { get; set; }
            public string Name { get; set; }
        }
        public List<ResultSetModel2> ResultSet2;
        public class ResultSetModel3
        {
            public string code { get; set; }
        }
        public List<ResultSetModel3> ResultSet3;
        public class ResultSetModel4
        {
            public long id { get; set; }
            public long id_t { get; set; }
            public long num { get; set; }
        }
        public List<ResultSetModel4> ResultSet4;
        public class ResultSetModel5
        {
            public int Id { get; set; }
            public int PrimaryColourId { get; set; }
            public string CarMake { get; set; }
            public int? computed_column { get; set; }
            public int? computed_column_persisted { get; set; }
        }
        public List<ResultSetModel5> ResultSet5;
        public class ResultSetModel6
        {
            public int ID { get; set; }
            public int OrderID { get; set; }
            public string sku { get; set; }
        }
        public List<ResultSetModel6> ResultSet6;
    }

    public class stp_multiple_results_with_paramsReturnModel
    {
        public class ResultSetModel1
        {
            public int codeObjectNo { get; set; }
            public int? applicationNo { get; set; }
        }
        public List<ResultSetModel1> ResultSet1;
        public class ResultSetModel2
        {
            public int Id { get; set; }
            public string Name { get; set; }
        }
        public List<ResultSetModel2> ResultSet2;
    }

    public class stp_multiple_resultsReturnModel
    {
        public class ResultSetModel1
        {
            public int codeObjectNo { get; set; }
            public int? applicationNo { get; set; }
            public int type { get; set; }
            public string eName { get; set; }
            public string aName { get; set; }
            public string description { get; set; }
            public string codeName { get; set; }
            public string note { get; set; }
            public bool isObject { get; set; }
            public byte[] versionNumber { get; set; }
        }
        public List<ResultSetModel1> ResultSet1;
        public class ResultSetModel2
        {
            public int Id { get; set; }
            public int PrimaryColourId { get; set; }
            public string CarMake { get; set; }
            public int? computed_column { get; set; }
            public int? computed_column_persisted { get; set; }
        }
        public List<ResultSetModel2> ResultSet2;
        public class ResultSetModel3
        {
            public int Id { get; set; }
            public string Name { get; set; }
        }
        public List<ResultSetModel3> ResultSet3;
    }

    public class stp_no_params_testReturnModel
    {
        public int codeObjectNo { get; set; }
        public int? applicationNo { get; set; }
    }

    public class stp_nullable_params_testReturnModel
    {
        public int codeObjectNo { get; set; }
        public int? applicationNo { get; set; }
    }

    public class stp_test_underscore_testReturnModel
    {
        public int code_object_no { get; set; }
        public int? application_no { get; set; }
    }

    public class stp_testReturnModel
    {
        public int codeObjectNo { get; set; }
        public int? applicationNo { get; set; }
        public int type { get; set; }
        public string eName { get; set; }
        public string aName { get; set; }
        public string description { get; set; }
        public string codeName { get; set; }
        public string note { get; set; }
        public bool isObject { get; set; }
        public byte[] versionNumber { get; set; }
    }

    public class Synonyms_SimpleStoredProcReturnModel
    {
        public string ReturnValue { get; set; }
    }

    public class TestReturnStringReturnModel
    {
        public string error { get; set; }
    }

    public class XmlDataV1ReturnModel
    {
        public DateTime? Column1 { get; set; }
        public string Column2 { get; set; }
    }


    #endregion

}
// </auto-generated>
