<#@ include file ="..\EntityFramework.Reverse.POCO.Generator\EF.Reverse.POCO.v3.ttinclude" #>
<#
    // Please make changes to the settings below.
    // All you have to do is save this file, and the output file(s) are generated. Compiling does not regenerate the file(s).
    // A course for the older v2 generator is available on Pluralsight at https://www.pluralsight.com/courses/code-first-entity-framework-legacy-databases

    // Settings ***************************************************************************************************************************
    // Only the most popular settings are listed below.
    // Either override Settings.* here, or edit the Settings, FilterSettings and SingleContextFilter classes located at the top of EF.Reverse.POCO.v3.ttinclude
    
    // For help on the various Types below, please read https://github.com/sjh37/EntityFramework-Reverse-POCO-Code-First-Generator/wiki/Common-Settings.*Types-explained
    // The following entries are the only required settings.
    Settings.DatabaseType             = DatabaseType.SqlServer; // SqlServer, SqlCe, SQLite, PostgreSQL. Coming next: MySql, Oracle
    Settings.TemplateType             = TemplateType.EfCore6; // EfCore6, EfCore5, EfCore3, EfCore2, Ef6, FileBasedCore2, FileBasedCore3, FileBasedCore5, FileBasedCore6. FileBased specify folder using Settings.TemplateFolder
    Settings.GeneratorType            = GeneratorType.EfCore; // EfCore, Ef6, Custom. Custom edit GeneratorCustom class to provide your own implementation

    Settings.UseMappingTables        = false; // Must be false for TemplateType.EfCore2-4. If true, mapping will be used, and no mapping tables will be generated. If false, all tables will be generated.
    Settings.FileManagerType         = FileManagerType.EfCore; // .NET Core project = EfCore; .NET project = VisualStudio; No output (testing only) = Null
    Settings.ConnectionString        = "Data Source=(local);Initial Catalog=EfrpgTest;Integrated Security=True;MultipleActiveResultSets=True;Encrypt=false;TrustServerCertificate=true"; // This is used by the generator to reverse engineer your database
    Settings.ConnectionStringName    = "EnumViaTablesDbContext"; // ConnectionString key as specified in your app.config/web.config/appsettings.json. Not used by the generator, but is placed into the generated DbContext constructor.
    Settings.DbContextName           = "EnumViaTablesDbContext"; // Class name for the DbContext to be generated.
    Settings.GenerateSeparateFiles   = false;
    Settings.Namespace               = "EnumViaTables"; // Override the default namespace here. Please use double quotes, example: "Accounts.Billing"
    Settings.TemplateFolder          = Path.Combine(Settings.Root, "Templates"); // Only used if Settings.TemplateType = TemplateType.FileBased. Specify folder name where the mustache folders can be found. Please read https://github.com/sjh37/EntityFramework-Reverse-POCO-Code-First-Generator/wiki/Custom-file-based-templates
    Settings.AddUnitTestingDbContext = true; // Will add a FakeDbContext and FakeDbSet for easy unit testing. Read https://github.com/sjh37/EntityFramework-Reverse-POCO-Code-First-Generator/wiki/FakeDbContext

    // Elements to generate ***************************************************************************************************************
    // Add the elements that should be generated when the template is executed.
    // Multiple projects can be used that separate the different concerns.
    Settings.ElementsToGenerate = Elements.Enum | Elements.Poco;
    
    // Filtering **************************************************************************************************************************
    // Filtering can now be done via one or more Regex's and one or more functions.
    // Gone are the days of a single do-it-all regex, you can now split them up into many smaller Regex's.
    // You can have as many as you like, and mix and match them.
    // These settings are only used by the single context filter SingleContextFilter (Settings.GenerateSingleDbContext = true)
    // For further information please visit https://github.com/sjh37/EntityFramework-Reverse-POCO-Code-First-Generator/wiki/Filtering
    // For multi-context filtering (Settings.GenerateSingleDbContext = false), please read https://github.com/sjh37/EntityFramework-Reverse-POCO-Code-First-Generator/wiki/Generating-multiple-database-contexts-in-a-single-go
    // Single-context filtering is done via FilterSettings and SingleContextFilter classes.
    // Override the filters here, or edit directly the FilterSettings and SingleContextFilter classes located at the top of EF.Reverse.POCO.v3.ttinclude
    FilterSettings.Reset();
    FilterSettings.AddDefaults();

    // Examples:
    FilterSettings.IncludeViews                 = false;
    FilterSettings.IncludeSynonyms              = false;
    FilterSettings.IncludeStoredProcedures      = false;
    FilterSettings.IncludeTableValuedFunctions  = false; // If true, for EF6 install the "EntityFramework.CodeFirstStoreFunctions" NuGet Package.
    FilterSettings.IncludeScalarValuedFunctions = false;

     // Examples:
    //FilterSettings.SchemaFilters.Add(new RegexExcludeFilter("[Ff]inance.*")); // This excludes the Finance schema
    //FilterSettings.SchemaFilters.Add(new RegexIncludeFilter("dbo.*")); // This includes only dbo schema
    //FilterSettings.TableFilters.Add(new RegexExcludeFilter(".*[Bb]illing.*")); // This excludes all tables with 'billing' anywhere in the name
    FilterSettings.TableFilters.Add(new RegexIncludeFilter("^Car$|^Colour$")); // This includes any remaining tables with names beginning with 'customer'
    //FilterSettings.ColumnFilters.Add(new RegexExcludeFilter("[Cc]reated[Aa]t.*")); // This excludes all columns starting with 'CreatedAt' e.g CreatedAtUtc
    //FilterSettings.ColumnFilters.Add(new RegexIncludeFilter(".*")); // Rarely used as it would only include columns with names listed here
    //FilterSettings.StoredProcedureFilters.Add(new RegexExcludeFilter("Calc")); // This excludes all stored procedures 'Calc' in the name
    //FilterSettings.StoredProcedureFilters.Add(new RegexIncludeFilter("Pricing.*")); // This includes all stored procedures starting with 'Pricing'

    // Other settings *********************************************************************************************************************
    Settings.CommandTimeout                         = 600; // SQL Command timeout in seconds. 600 is 10 minutes, 0 will wait indefinitely. Some databases can be slow retrieving schema information.
    Settings.DbContextInterfaceBaseClasses          = "IDisposable"; // Specify what the base classes are for your database context interface
    Settings.DbContextBaseClass                     = "DbContext"; // Specify what the base class is for your DbContext. For ASP.NET Identity use "IdentityDbContext<ApplicationUser>";
    Settings.OnConfiguration                        = OnConfiguration.ConnectionString; // EFCore only. Determines the code generated within DbContext.OnConfiguration(). Please read https://github.com/sjh37/EntityFramework-Reverse-POCO-Code-First-Generator/wiki/Settings.OnConfiguration
    Settings.AddParameterlessConstructorToDbContext = true; // EF6 only. If true, then DbContext will have a default (parameter-less) constructor which automatically passes in the connection string name, if false then no parameter-less constructor will be created.
    Settings.ConfigurationClassName                 = "Configuration"; // Configuration, Mapping, Map, etc. This is appended to the Poco class name to configure the mappings.
    Settings.DatabaseReaderPlugin                   = ""; // Eg, "c:\\Path\\YourDatabaseReader.dll,Full.Name.Of.Class.Including.Namespace". See #501. This will allow you to specify a pluggable provider for reading your database.

    Settings.EntityClassesModifiers        = "public"; // "public partial";
    Settings.ConfigurationClassesModifiers = "public"; // "public partial";
    Settings.DbContextClassModifiers       = "public"; // "public partial";
    Settings.DbContextInterfaceModifiers   = "public"; // "public partial";
    Settings.ResultClassModifiers          = "public"; // "public partial";

    Settings.UsePascalCase                      = true; // This will rename the generated C# tables & properties to use PascalCase. If false table & property names will be left alone.
    Settings.UseDataAnnotations                 = false; // If true, will add data annotations to the poco classes.
    Settings.UsePropertyInitialisers            = false; // Removes POCO constructor and instead uses C# 6 property initialisers to set defaults
    Settings.UseLazyLoading                     = false; // Marks all navigation properties as virtual or not, to support or disable EF Lazy Loading feature
    Settings.UseInheritedBaseInterfaceFunctions = false; // If true, the main DBContext interface functions will come from the DBContextInterfaceBaseClasses and not generated. If false, the functions will be generated.
    Settings.IncludeComments                    = CommentsStyle.AtEndOfField; // Adds comments to the generated code
    Settings.IncludeExtendedPropertyComments    = CommentsStyle.InSummaryBlock; // Adds extended properties as comments to the generated code
    Settings.DisableGeographyTypes              = true; // Turns off use of spatial types: Geography, Geometry. More info: https://github.com/sjh37/EntityFramework-Reverse-POCO-Code-First-Generator/wiki/Spatial-Types
    Settings.CollectionInterfaceType            = "ICollection"; //  = "System.Collections.Generic.List"; // Determines the declaration type of collections for the Navigation Properties. ICollection is used if not set.
    Settings.CollectionType                     = "List"; // Determines the type of collection for the Navigation Properties. "ObservableCollection" for example. Add "System.Collections.ObjectModel" to AdditionalNamespaces if setting the CollectionType = "ObservableCollection".
    Settings.NullableShortHand                  = true; // true => T?, false => Nullable<T>
    Settings.AddIDbContextFactory               = true; // Will add a default IDbContextFactory<DbContextName> implementation for easy dependency injection
    Settings.IncludeQueryTraceOn9481Flag        = false; // If SqlServer 2014 appears frozen / take a long time when this file is saved, try setting this to true (you will also need elevated privileges).
    Settings.UsePrivateSetterForComputedColumns = true; // If the columns is computed, use a private setter.
    Settings.IncludeGeneratorVersionInCode      = true; // If true, will include the version number of the generator in the generated code (Settings.ShowLicenseInfo must also be true).
    Settings.AdditionalNamespaces               = new List<string>(); // To include extra namespaces, include them here. i.e. new List<string> { "Microsoft.AspNetCore.Identity.EntityFrameworkCore", "System.ComponentModel.DataAnnotations" };
    Settings.AdditionalContextInterfaceItems    = new List<string>(); // example: new List<string> { "void SetAutoDetectChangesEnabled(bool flag);" };

    // Language choices
    Settings.GenerationLanguage = GenerationLanguage.CSharp;
    Settings.FileExtension      = ".cs";

    // Code suppression *******************************************************************************
    Settings.UseRegions                       = true;  // If false, suppresses the use of #region
    Settings.UseNamespace                     = true;  // If false, suppresses the writing of a namespace
    Settings.UsePragma                        = false; // If false, suppresses the writing of #pragma
    Settings.AllowNullStrings                 = false; // If true, will allow string? properties and will add '#nullable enable' to the top of each file
    Settings.UseResharper                     = true;  // If true, will add a list of 'ReSharper disable' comments to the top of each file
    Settings.ShowLicenseInfo                  = false; // If true, will add the licence info comment to the top of each file
    Settings.IncludeConnectionSettingComments = false; // Add comments describing connection settings used to generate file
    Settings.IncludeCodeGeneratedAttribute    = false; // If true, will include the [GeneratedCode] attribute before classes, false to remove it.

    // Enumerations ***********************************************************************************************************************
    // Create enumerations from database tables
    // List the enumeration tables you want read and generated for
    Settings.Enumerations = new List<EnumerationSettings>
    {
        new EnumerationSettings
        {
            Name       = "DaysOfWeek",          // Enum to generate. e.g. "DaysOfWeek" would result in "public enum DaysOfWeek {...}" if the GroupField is set to a value then {GroupField} must be used in this name. e.g. "DaysOfWeek{GroupField}"
            Table      = "EnumTest.DaysOfWeek", // Database table containing enum values. e.g. "DaysOfWeek"
            NameField  = "TypeName",            // Column containing the name for the enum. e.g. "TypeName"
            ValueField = "TypeId",              // Column containing the values for the enum. e.g. "TypeId"
            GroupField = string.Empty           // [optional] Column containing the group name for the enum. This is used if multiple Enums are in the same table. if this is populated, use {GroupField} in the Name property. e.g. "{GroupField}Enum"
        }
    };

    // Column modification ****************************************************************************************************************
    // Use the following list to replace column byte types with Enums.
    // As long as the type can be mapped to your new type, all is well.
    Settings.AddEnumDefinitions = delegate(List<EnumDefinition> enumDefinitions)
    {
        // Examples:
        //enumDefinitions.Add(new EnumDefinition { Schema = Settings.DefaultSchema, Table = "match_table_name", Column = "match_column_name", EnumType = "name_of_enum" });

        // This will replace OrderHeader.OrderStatus type to be an OrderStatusType enum
        //enumDefinitions.Add(new EnumDefinition { Schema = Settings.DefaultSchema, Table = "OrderHeader", Column = "OrderStatus", EnumType = "OrderStatusType" }); 

        // This will replace any table *.OrderStatus type to be an OrderStatusType enum
        //enumDefinitions.Add(new EnumDefinition { Schema = Settings.DefaultSchema, Table = "*", Column = "OrderStatus", EnumType = "OrderStatusType" });
    };

    // In order to use this function, Settings.ElementsToGenerate must contain both Elements.Poco and Elements.Enum;
    Settings.AddEnum = delegate (Table table)
    {
        if (table.HasPrimaryKey && table.PrimaryKeys.Count() == 1 && table.Columns.Any(x => x.PropertyType == "string"))
        {
            // To choose a list of tables
            var tables = new[] { "Car", "Colour" };
            if(tables.Contains(table.NameHumanCase, StringComparer.InvariantCultureIgnoreCase))
            {
                try
                {
                    Settings.Enumerations.Add(new EnumerationSettings
                    {
                        Name       = table.NameHumanCase + "Enum",
                        Table      = table.Schema.DbName + "." + table.DbName,
                        NameField  = table.Columns.First(x => x.PropertyType == "string").DbName, // Or specify your own
                        ValueField = table.PrimaryKeys.Single().DbName, // Or specify your own
                        GroupField = string.Empty // Or specify your own
                    });

                    // This will cause this table to not be reverse-engineered.
                    // This means it was only required to generate an enum and can now be removed.
                    table.RemoveTable = true; // Remove this line if you want to keep it in your dbContext.
                }
                catch
                {
                    // Swallow exception
                }
            }
        }
    };

    // Don't forget to take a look at SingleContextFilter and FilterSettings classes!
    // That's it, nothing else to configure ***********************************************************************************************

    FilterSettings.CheckSettings();

    // How to add custom pluralisation entries
    /*var customPluralisationEntries = new List<CustomPluralizationEntry>
    {
        new CustomPluralizationEntry("Tree", "Trees"),
        new CustomPluralizationEntry("Order", "Orders")
    };
    Inflector.PluralisationService = new EnglishPluralizationService(customPluralisationEntries);*/
    Inflector.IgnoreWordsThatEndWith = new List<string> { "Status", "To", "Data" };
    Inflector.PluralisationService = new EnglishPluralizationService(); // To disable pluralisation, set this to null

    var outer = (GeneratedTextTransformation) this;
    var fileManagement = new FileManagementService(outer);
    var generator = GeneratorFactory.Create(fileManagement, FileManagerFactory.GetFileManagerType());
    if (generator != null && generator.InitialisationOk)
    {
        // Show where the machine.config file is
        // fileManagement.WriteLine("// " + System.Runtime.InteropServices.RuntimeEnvironment.SystemConfigurationFile);

        generator.ReadDatabase();
        generator.GenerateCode();
    }
    fileManagement.Process(true);#>
