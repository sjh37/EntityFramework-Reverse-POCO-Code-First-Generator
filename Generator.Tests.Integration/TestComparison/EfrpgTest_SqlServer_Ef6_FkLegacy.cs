// <auto-generated>

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations.Schema;
using System.Data;
using System.Data.Common;
using System.Data.Entity;
using System.Data.Entity.Core.Objects;
using System.Data.Entity.Infrastructure;
using System.Data.Entity.Infrastructure.Annotations;
using System.Data.Entity.Infrastructure.Interception;
using System.Data.Entity.ModelConfiguration;
using System.Data.Entity.Spatial;
using System.Data.Entity.Validation;
using System.Data.SqlClient;
using System.Data.SqlTypes;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;
using System.Threading;
using System.Threading.Tasks;

namespace Efrpg.V3TestE1
{
    #region Database context interface

    public interface IEfrpgTestDbContext : IDisposable
    {
        DbSet<A> A { get; set; } // A
        DbSet<Aaref> Aarefs { get; set; } // AAREF
        DbSet<AbOrderLinesAb> AbOrderLinesAbs { get; set; } // AB_OrderLinesAB_
        DbSet<AbOrdersAb> AbOrdersAbs { get; set; } // AB_OrdersAB_
        DbSet<Alpha_Harish3485> Alpha_Harish3485 { get; set; } // Harish3485
        DbSet<Alpha_Workflow> Alpha_Workflows { get; set; } // workflow
        DbSet<AlphaWorkflowSynonym> AlphaWorkflowSynonyms { get; set; } // alpha_workflow_synonym
        DbSet<App_UserFacilityServiceRole> App_UserFacilityServiceRoles { get; set; } // UserFacilityServiceRole
        DbSet<AppUser> AppUsers { get; set; } // AppUser
        DbSet<Attendee> Attendees { get; set; } // Attendee
        DbSet<BatchTest> BatchTests { get; set; } // BatchTest
        DbSet<Beta_Harish3485> Beta_Harish3485 { get; set; } // Harish3485
        DbSet<Beta_ToAlpha> Beta_ToAlphas { get; set; } // ToAlpha
        DbSet<Beta_Workflow> Beta_Workflows { get; set; } // workflow
        DbSet<Bitfiddlerallcap> Bitfiddlerallcaps { get; set; } // BITFIDDLERALLCAPS
        DbSet<BitFiddlerCategoRy> BitFiddlerCategoRies { get; set; } // BitFiddlerCATEGORIES
        DbSet<BitFiddlerCurrenCy> BitFiddlerCurrenCies { get; set; } // BitFiddlerCURRENCIES
        DbSet<Blah> Blahs { get; set; } // Blah
        DbSet<BlahBlahLinkV2> BlahBlahLinkV2 { get; set; } // BlahBlahLink_v2
        DbSet<Blarg> Blargs { get; set; } // Blarg
        DbSet<Burak1> Burak1 { get; set; } // Burak1
        DbSet<Burak2> Burak2 { get; set; } // Burak2
        DbSet<CalculatedColumnNotNull> CalculatedColumnNotNulls { get; set; } // CalculatedColumnNotNull
        DbSet<Car> Cars { get; set; } // Car
        DbSet<ClientCreationState> ClientCreationStates { get; set; } // ClientCreationState
        DbSet<CmsFile> CmsFiles { get; set; } // CMS_File
        DbSet<CmsTag> CmsTags { get; set; } // CMS_Tag
        DbSet<CodeMeetingTopicDetail> CodeMeetingTopicDetails { get; set; } // CODE_MeetingTopicDetails
        DbSet<CodeObject> CodeObjects { get; set; } // CodeObject
        DbSet<CodeParamMeetingTopicDetailSource> CodeParamMeetingTopicDetailSources { get; set; } // CODE_PARAM_MeetingTopicDetailSource
        DbSet<Colour> Colours { get; set; } // Colour
        DbSet<ColumnNameAndType> ColumnNameAndTypes { get; set; } // ColumnNameAndTypes
        DbSet<ComplexView> ComplexViews { get; set; } // ComplexView
        DbSet<Country> Countries { get; set; } // Country
        DbSet<CrossDatabaseSynonym> CrossDatabaseSynonyms { get; set; } // cross_database_synonym
        DbSet<DateTimeDefaultTest> DateTimeDefaultTests { get; set; } // DateTimeDefaultTest
        DbSet<dcg_RovColumnDefinition> dcg_RovColumnDefinitions { get; set; } // rov_ColumnDefinitions
        DbSet<DefaultCheckForNull> DefaultCheckForNulls { get; set; } // DefaultCheckForNull
        DbSet<DsOpe> DsOpes { get; set; } // DSOpe
        DbSet<EnumsWithStringAsValue> EnumsWithStringAsValues { get; set; } // EnumsWithStringAsValue
        DbSet<EnumTest_DaysOfWeek> EnumTest_DaysOfWeeks { get; set; } // DaysOfWeek
        DbSet<EnumTest_OpenDay> EnumTest_OpenDays { get; set; } // OpenDays
        DbSet<EnumWithDefaultValue> EnumWithDefaultValues { get; set; } // EnumWithDefaultValue
        DbSet<EventProcessor> EventProcessors { get; set; } // EventProcessor
        DbSet<EventProcessorEventFilter> EventProcessorEventFilters { get; set; } // EventProcessorEventFilter
        DbSet<FFRS_Cv> FFRS_Cvs { get; set; } // CV
        DbSet<FinancialInstitutionOffice> FinancialInstitutionOffices { get; set; } // FinancialInstitutionOffice
        DbSet<FkTest_SmallDecimalTestAttribute> FkTest_SmallDecimalTestAttributes { get; set; } // SmallDecimalTestAttribute
        DbSet<Footer> Footers { get; set; } // footer
        DbSet<ForeignKeyIsNotEnforced> ForeignKeyIsNotEnforceds { get; set; } // ForeignKeyIsNotEnforced
        DbSet<ForeignKeyIsNotEnforcedItem> ForeignKeyIsNotEnforcedItems { get; set; } // ForeignKeyIsNotEnforcedItem
        DbSet<HasPrincipalKeyTestChild> HasPrincipalKeyTestChilds { get; set; } // HasPrincipalKeyTestChild
        DbSet<HasPrincipalKeyTestParent> HasPrincipalKeyTestParents { get; set; } // HasPrincipalKeyTestParent
        DbSet<Header> Headers { get; set; } // header
        DbSet<HierarchyTest> HierarchyTests { get; set; } // hierarchy_test
        DbSet<InflectorData> InflectorData { get; set; } // InflectorData
        DbSet<InflectorStatus> InflectorStatus { get; set; } // InflectorStatus
        DbSet<InflectorTo> InflectorTo { get; set; } // InflectorTo
        DbSet<Issue47_Role> Issue47_Roles { get; set; } // Role
        DbSet<Issue47_User> Issue47_Users { get; set; } // Users
        DbSet<Issue47_UserRole> Issue47_UserRoles { get; set; } // UserRoles
        DbSet<MultipleKey> MultipleKeys { get; set; } // MultipleKeys
        DbSet<OneEightSix_Issue> OneEightSix_Issues { get; set; } // Issue
        DbSet<OneEightSix_UploadedFile> OneEightSix_UploadedFiles { get; set; } // UploadedFile
        DbSet<PeriodTable> PeriodTables { get; set; } // Period.Table
        DbSet<PeriodTestTable> PeriodTestTables { get; set; } // PeriodTestTable
        DbSet<Person> People { get; set; } // Person
        DbSet<PersonPost> PersonPosts { get; set; } // PersonPosts
        DbSet<PkOrdinalTest> PkOrdinalTests { get; set; } // pk_ordinal_test
        DbSet<PropertyTypesToAdd> PropertyTypesToAdds { get; set; } // PropertyTypesToAdd
        DbSet<SequenceTest> SequenceTests { get; set; } // SequenceTest
        DbSet<SequenceTestPartTwo> SequenceTestPartTwoes { get; set; } // SequenceTestPartTwo
        DbSet<SmallDecimalTest> SmallDecimalTests { get; set; } // SmallDecimalTest
        DbSet<SmallDecimalTestView> SmallDecimalTestViews { get; set; } // SmallDecimalTestView
        DbSet<Stafford_Boo> Stafford_Boos { get; set; } // Boo
        DbSet<Stafford_ComputedColumn> Stafford_ComputedColumns { get; set; } // ComputedColumns
        DbSet<Stafford_Foo> Stafford_Foos { get; set; } // Foo
        DbSet<Synonyms_Child> Synonyms_Children { get; set; } // Child
        DbSet<Synonyms_Parent> Synonyms_Parents { get; set; } // Parent
        DbSet<TableA> TableAs { get; set; } // TableA
        DbSet<TableB> TableBs { get; set; } // TableB
        DbSet<TableWithDuplicateColumnName> TableWithDuplicateColumnNames { get; set; } // table with duplicate column names
        DbSet<TableWithMultiplePeriod> TableWithMultiplePeriods { get; set; } // table.with.multiple.periods
        DbSet<TableWithSpace> TableWithSpaces { get; set; } // table with space
        DbSet<TableWithSpaceAndInColumn> TableWithSpaceAndInColumns { get; set; } // table with space and in columns
        DbSet<TableWithSpaceInColumnOnly> TableWithSpaceInColumnOnlies { get; set; } // TableWithSpaceInColumnOnly
        DbSet<TadeuszSobol> TadeuszSobols { get; set; } // TadeuszSobol
        DbSet<Task1> Task1 { get; set; } // Task
        DbSet<TblOrder> TblOrders { get; set; } // tblOrders
        DbSet<TblOrderError> TblOrderErrors { get; set; } // tblOrderErrors
        DbSet<TblOrderErrorsAb> TblOrderErrorsAbs { get; set; } // tblOrderErrorsAB_
        DbSet<TblOrderLine> TblOrderLines { get; set; } // tblOrderLines
        DbSet<TemporalDepartment> TemporalDepartments { get; set; } // TemporalDepartment
        DbSet<TemporalDepartmentHistory> TemporalDepartmentHistories { get; set; } // TemporalDepartmentHistory
        DbSet<ThisIsMemoryOptimised> ThisIsMemoryOptimiseds { get; set; } // ThisIsMemoryOptimised
        DbSet<Ticket> Tickets { get; set; } // Ticket
        DbSet<TimestampNotNull> TimestampNotNulls { get; set; } // TimestampNotNull
        DbSet<TimestampNullable> TimestampNullables { get; set; } // TimestampNullable
        DbSet<Token> Tokens { get; set; } // Token
        DbSet<User> Users { get; set; } // User
        DbSet<User309> User309 { get; set; } // User309
        DbSet<UserDocument> UserDocuments { get; set; } // User_Document
        DbSet<Versioned> Versioneds { get; set; } // Versioned
        DbSet<VersionedNullable> VersionedNullables { get; set; } // VersionedNullable
        DbSet<ViewWithMultiplePeriod> ViewWithMultiplePeriods { get; set; } // view.with.multiple.periods
        DbSet<ViewWithSpace> ViewWithSpaces { get; set; } // view with space
        DbSet<WVN_Article> WVN_Articles { get; set; } // Articles
        DbSet<Брендытовара> Брендытовара { get; set; } // Бренды товара

        int SaveChanges();
        Task<int> SaveChangesAsync();
        Task<int> SaveChangesAsync(CancellationToken cancellationToken);
        DbChangeTracker ChangeTracker { get; }
        DbContextConfiguration Configuration { get; }
        Database Database { get; }
        DbEntityEntry<TEntity> Entry<TEntity>(TEntity entity) where TEntity : class;
        DbEntityEntry Entry(object entity);
        IEnumerable<DbEntityValidationResult> GetValidationErrors();
        DbSet Set(Type entityType);
        DbSet<TEntity> Set<TEntity>() where TEntity : class;
        string ToString();

        // Stored Procedures
        int AddTwoValues(int? a, int? b);
        Task<int> AddTwoValuesAsync(int? a, int? b, CancellationToken cancellationToken = default(CancellationToken));

        int AddTwoValuesWithResult(int? a, int? b, out int? result, out int? result2);
        // AddTwoValuesWithResultAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        int Alpha_Overclock(DateTime? parameter);
        Task<int> Alpha_OverclockAsync(DateTime? parameter, CancellationToken cancellationToken = default(CancellationToken));

        int App_UspCmtUserFsrUpdate(int? userId, int? fsrId, out int? ufsrId);
        // App_UspCmtUserFsrUpdateAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        List<ASimpleExampleReturnModel> ASimpleExample();
        List<ASimpleExampleReturnModel> ASimpleExample(out int procResult);
        Task<List<ASimpleExampleReturnModel>> ASimpleExampleAsync(CancellationToken cancellationToken = default(CancellationToken));

        int Beta_Overclock(DateTime? parameter);
        Task<int> Beta_OverclockAsync(DateTime? parameter, CancellationToken cancellationToken = default(CancellationToken));

        C182Test2ReturnModel C182Test2(int? flag);
        // C182Test2Async() cannot be created due to having out parameters, or is relying on the procedure result (C182Test2ReturnModel)

        List<CheckIfApplicationIsCompleteReturnModel> CheckIfApplicationIsComplete(int? applicationId, out bool? isApplicationComplete);
        List<CheckIfApplicationIsCompleteReturnModel> CheckIfApplicationIsComplete(int? applicationId, out bool? isApplicationComplete, out int procResult);
        // CheckIfApplicationIsCompleteAsync() cannot be created due to having out parameters, or is relying on the procedure result (List<CheckIfApplicationIsCompleteReturnModel>)

        List<ColourPivotReturnModel> ColourPivot();
        List<ColourPivotReturnModel> ColourPivot(out int procResult);
        Task<List<ColourPivotReturnModel>> ColourPivotAsync(CancellationToken cancellationToken = default(CancellationToken));

        int ColumnNameAndTypesProc();
        Task<int> ColumnNameAndTypesProcAsync(CancellationToken cancellationToken = default(CancellationToken));

        int ConvertToString(int? someValue, out string someString);
        // ConvertToStringAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        List<DboProcDataFromFfrsReturnModel> DboProcDataFromFfrs(int? maxId);
        List<DboProcDataFromFfrsReturnModel> DboProcDataFromFfrs(int? maxId, out int procResult);
        Task<List<DboProcDataFromFfrsReturnModel>> DboProcDataFromFfrsAsync(int? maxId, CancellationToken cancellationToken = default(CancellationToken));

        List<DboProcDataFromFfrsAndDboReturnModel> DboProcDataFromFfrsAndDbo();
        List<DboProcDataFromFfrsAndDboReturnModel> DboProcDataFromFfrsAndDbo(out int procResult);
        Task<List<DboProcDataFromFfrsAndDboReturnModel>> DboProcDataFromFfrsAndDboAsync(CancellationToken cancellationToken = default(CancellationToken));

        List<DsOpeProcReturnModel> DsOpeProc();
        List<DsOpeProcReturnModel> DsOpeProc(out int procResult);
        Task<List<DsOpeProcReturnModel>> DsOpeProcAsync(CancellationToken cancellationToken = default(CancellationToken));

        List<FFRS_CvDataReturnModel> FFRS_CvData(int? maxId);
        List<FFRS_CvDataReturnModel> FFRS_CvData(int? maxId, out int procResult);
        Task<List<FFRS_CvDataReturnModel>> FFRS_CvDataAsync(int? maxId, CancellationToken cancellationToken = default(CancellationToken));

        List<FFRS_DataFromDboReturnModel> FFRS_DataFromDbo();
        List<FFRS_DataFromDboReturnModel> FFRS_DataFromDbo(out int procResult);
        Task<List<FFRS_DataFromDboReturnModel>> FFRS_DataFromDboAsync(CancellationToken cancellationToken = default(CancellationToken));

        List<FFRS_DataFromDboAndFfrsReturnModel> FFRS_DataFromDboAndFfrs();
        List<FFRS_DataFromDboAndFfrsReturnModel> FFRS_DataFromDboAndFfrs(out int procResult);
        Task<List<FFRS_DataFromDboAndFfrsReturnModel>> FFRS_DataFromDboAndFfrsAsync(CancellationToken cancellationToken = default(CancellationToken));

        List<FkTest_HelloReturnModel> FkTest_Hello();
        List<FkTest_HelloReturnModel> FkTest_Hello(out int procResult);
        Task<List<FkTest_HelloReturnModel>> FkTest_HelloAsync(CancellationToken cancellationToken = default(CancellationToken));

        List<GetSmallDecimalTestReturnModel> GetSmallDecimalTest(int? maxId);
        List<GetSmallDecimalTestReturnModel> GetSmallDecimalTest(int? maxId, out int procResult);
        Task<List<GetSmallDecimalTestReturnModel>> GetSmallDecimalTestAsync(int? maxId, CancellationToken cancellationToken = default(CancellationToken));

        int InsertRecord(string data, out int? insertedId);
        // InsertRecordAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        int InsertRecordThree(string data, out int? insertedId, int? someId, out int? anotherInsertedId);
        // InsertRecordThreeAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        int InsertRecordTwo(string data, out int? insertedId, out int? anotherInsertedId);
        // InsertRecordTwoAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        int MinTripSequenceStart(out DateTime? minTripSequenceStartParam);
        // MinTripSequenceStartAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        int MinTripSequenceStartNull(out DateTime? minTripSequenceStartParam);
        // MinTripSequenceStartNullAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        int NvarcharTest(string maxOutputParam, string normalOutputParam);
        Task<int> NvarcharTestAsync(string maxOutputParam, string normalOutputParam, CancellationToken cancellationToken = default(CancellationToken));

        int Omega_Overclock(DateTime? parameter);
        Task<int> Omega_OverclockAsync(DateTime? parameter, CancellationToken cancellationToken = default(CancellationToken));

        int ProcTestDecimalOutput(out decimal? perfectNumber);
        // ProcTestDecimalOutputAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        int ProcTestDecimalOutputV2(out decimal? perfectNumber);
        // ProcTestDecimalOutputV2Async() cannot be created due to having out parameters, or is relying on the procedure result (int)

        int ProcTestDecimalOutputV3Default(out decimal? perfectNumber);
        // ProcTestDecimalOutputV3DefaultAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        int SpatialTypesNoParams();
        Task<int> SpatialTypesNoParamsAsync(CancellationToken cancellationToken = default(CancellationToken));

        int SpatialTypesWithParams(DbGeometry geometry, DbGeography geography);
        Task<int> SpatialTypesWithParamsAsync(DbGeometry geometry, DbGeography geography, CancellationToken cancellationToken = default(CancellationToken));

        List<StpMultipleIdenticalResultsReturnModel> StpMultipleIdenticalResults(int? someVar);
        List<StpMultipleIdenticalResultsReturnModel> StpMultipleIdenticalResults(int? someVar, out int procResult);
        Task<List<StpMultipleIdenticalResultsReturnModel>> StpMultipleIdenticalResultsAsync(int? someVar, CancellationToken cancellationToken = default(CancellationToken));

        StpMultipleMultipleResultsWithParamsReturnModel StpMultipleMultipleResultsWithParams(int? firstVal, int? secondVal, int? thirdVal);
        // StpMultipleMultipleResultsWithParamsAsync() cannot be created due to having out parameters, or is relying on the procedure result (StpMultipleMultipleResultsWithParamsReturnModel)

        StpMultipleResultsReturnModel StpMultipleResults();
        // StpMultipleResultsAsync() cannot be created due to having out parameters, or is relying on the procedure result (StpMultipleResultsReturnModel)

        StpMultipleResultsWithParamsReturnModel StpMultipleResultsWithParams(int? firstVal, int? secondVal);
        // StpMultipleResultsWithParamsAsync() cannot be created due to having out parameters, or is relying on the procedure result (StpMultipleResultsWithParamsReturnModel)

        List<StpNoParamsTestReturnModel> StpNoParamsTest();
        List<StpNoParamsTestReturnModel> StpNoParamsTest(out int procResult);
        Task<List<StpNoParamsTestReturnModel>> StpNoParamsTestAsync(CancellationToken cancellationToken = default(CancellationToken));

        int StpNoReturnFields();
        Task<int> StpNoReturnFieldsAsync(CancellationToken cancellationToken = default(CancellationToken));

        List<StpNullableParamsTestReturnModel> StpNullableParamsTest(int? aVal, int? bVal);
        List<StpNullableParamsTestReturnModel> StpNullableParamsTest(int? aVal, int? bVal, out int procResult);
        Task<List<StpNullableParamsTestReturnModel>> StpNullableParamsTestAsync(int? aVal, int? bVal, CancellationToken cancellationToken = default(CancellationToken));

        List<StpTestReturnModel> StpTest(string strDateFrom, string strDateTo, out bool? retBool);
        List<StpTestReturnModel> StpTest(string strDateFrom, string strDateTo, out bool? retBool, out int procResult);
        // StpTestAsync() cannot be created due to having out parameters, or is relying on the procedure result (List<StpTestReturnModel>)

        List<StpTestUnderscoreTestReturnModel> StpTestUnderscoreTest(string strDateFrom, string strDateTo);
        List<StpTestUnderscoreTestReturnModel> StpTestUnderscoreTest(string strDateFrom, string strDateTo, out int procResult);
        Task<List<StpTestUnderscoreTestReturnModel>> StpTestUnderscoreTestAsync(string strDateFrom, string strDateTo, CancellationToken cancellationToken = default(CancellationToken));

        int StupidStoredProcedureParams(string reqType, short? dept, short? @class, short? item);
        Task<int> StupidStoredProcedureParamsAsync(string reqType, short? dept, short? @class, short? item, CancellationToken cancellationToken = default(CancellationToken));

        int StupidStoredProcedureParams2(string @override, short? @readonly, short? @class, short? @enum);
        Task<int> StupidStoredProcedureParams2Async(string @override, short? @readonly, short? @class, short? @enum, CancellationToken cancellationToken = default(CancellationToken));

        List<Synonyms_SimpleStoredProcReturnModel> Synonyms_SimpleStoredProc(int? inputInt);
        List<Synonyms_SimpleStoredProcReturnModel> Synonyms_SimpleStoredProc(int? inputInt, out int procResult);
        Task<List<Synonyms_SimpleStoredProcReturnModel>> Synonyms_SimpleStoredProcAsync(int? inputInt, CancellationToken cancellationToken = default(CancellationToken));

        List<TestReturnStringReturnModel> TestReturnString();
        List<TestReturnStringReturnModel> TestReturnString(out int procResult);
        Task<List<TestReturnStringReturnModel>> TestReturnStringAsync(CancellationToken cancellationToken = default(CancellationToken));

        int ThisHasMixedOutParameters(DateTime? foo, out int? firstOutParam, DateTime? bar, out int? secondOutParam, DateTime? baz);
        // ThisHasMixedOutParametersAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        int UserDefinedTypeSampleStoredProc(int? a, DataTable type, int? b);
        Task<int> UserDefinedTypeSampleStoredProcAsync(int? a, DataTable type, int? b, CancellationToken cancellationToken = default(CancellationToken));

        List<XmlDataV1ReturnModel> XmlDataV1();
        List<XmlDataV1ReturnModel> XmlDataV1(out int procResult);
        Task<List<XmlDataV1ReturnModel>> XmlDataV1Async(CancellationToken cancellationToken = default(CancellationToken));

        int XmlDataV2();
        Task<int> XmlDataV2Async(CancellationToken cancellationToken = default(CancellationToken));


        // Table Valued Functions

        [DbFunction("EfrpgTestDbContext", "182_test1")]
        [CodeFirstStoreFunctions.DbFunctionDetails(DatabaseSchema = "dbo")]
        IQueryable<C182Test1ReturnModel> C182Test1(int? test);

        [DbFunction("EfrpgTestDbContext", "CsvToInt")]
        [CodeFirstStoreFunctions.DbFunctionDetails(DatabaseSchema = "dbo", ResultColumnName = "IntValue")]
        IQueryable<CsvToIntReturnModel> CsvToInt(string array, string array2);

        [DbFunction("EfrpgTestDbContext", "CsvToIntWithSchema")]
        [CodeFirstStoreFunctions.DbFunctionDetails(DatabaseSchema = "CustomSchema", ResultColumnName = "IntValue")]
        IQueryable<CustomSchema_CsvToIntWithSchemaReturnModel> CustomSchema_CsvToIntWithSchema(string array, string array2);

        [DbFunction("EfrpgTestDbContext", "CsvToInt2")]
        [CodeFirstStoreFunctions.DbFunctionDetails(DatabaseSchema = "FFRS", ResultColumnName = "IntValue")]
        IQueryable<FFRS_CsvToInt2ReturnModel> FFRS_CsvToInt2(string array, string array2);

        // Scalar Valued Functions
        decimal UdfNetSale(int? quantity, decimal? listPrice, decimal? discount); // dbo.udfNetSale
    }

    #endregion

    #region Database context

    public class EfrpgTestDbContext : DbContext, IEfrpgTestDbContext
    {
        public DbSet<A> A { get; set; } // A
        public DbSet<Aaref> Aarefs { get; set; } // AAREF
        public DbSet<AbOrderLinesAb> AbOrderLinesAbs { get; set; } // AB_OrderLinesAB_
        public DbSet<AbOrdersAb> AbOrdersAbs { get; set; } // AB_OrdersAB_
        public DbSet<Alpha_Harish3485> Alpha_Harish3485 { get; set; } // Harish3485
        public DbSet<Alpha_Workflow> Alpha_Workflows { get; set; } // workflow
        public DbSet<AlphaWorkflowSynonym> AlphaWorkflowSynonyms { get; set; } // alpha_workflow_synonym
        public DbSet<App_UserFacilityServiceRole> App_UserFacilityServiceRoles { get; set; } // UserFacilityServiceRole
        public DbSet<AppUser> AppUsers { get; set; } // AppUser
        public DbSet<Attendee> Attendees { get; set; } // Attendee
        public DbSet<BatchTest> BatchTests { get; set; } // BatchTest
        public DbSet<Beta_Harish3485> Beta_Harish3485 { get; set; } // Harish3485
        public DbSet<Beta_ToAlpha> Beta_ToAlphas { get; set; } // ToAlpha
        public DbSet<Beta_Workflow> Beta_Workflows { get; set; } // workflow
        public DbSet<Bitfiddlerallcap> Bitfiddlerallcaps { get; set; } // BITFIDDLERALLCAPS
        public DbSet<BitFiddlerCategoRy> BitFiddlerCategoRies { get; set; } // BitFiddlerCATEGORIES
        public DbSet<BitFiddlerCurrenCy> BitFiddlerCurrenCies { get; set; } // BitFiddlerCURRENCIES
        public DbSet<Blah> Blahs { get; set; } // Blah
        public DbSet<BlahBlahLinkV2> BlahBlahLinkV2 { get; set; } // BlahBlahLink_v2
        public DbSet<Blarg> Blargs { get; set; } // Blarg
        public DbSet<Burak1> Burak1 { get; set; } // Burak1
        public DbSet<Burak2> Burak2 { get; set; } // Burak2
        public DbSet<CalculatedColumnNotNull> CalculatedColumnNotNulls { get; set; } // CalculatedColumnNotNull
        public DbSet<Car> Cars { get; set; } // Car
        public DbSet<ClientCreationState> ClientCreationStates { get; set; } // ClientCreationState
        public DbSet<CmsFile> CmsFiles { get; set; } // CMS_File
        public DbSet<CmsTag> CmsTags { get; set; } // CMS_Tag
        public DbSet<CodeMeetingTopicDetail> CodeMeetingTopicDetails { get; set; } // CODE_MeetingTopicDetails
        public DbSet<CodeObject> CodeObjects { get; set; } // CodeObject
        public DbSet<CodeParamMeetingTopicDetailSource> CodeParamMeetingTopicDetailSources { get; set; } // CODE_PARAM_MeetingTopicDetailSource
        public DbSet<Colour> Colours { get; set; } // Colour
        public DbSet<ColumnNameAndType> ColumnNameAndTypes { get; set; } // ColumnNameAndTypes
        public DbSet<ComplexView> ComplexViews { get; set; } // ComplexView
        public DbSet<Country> Countries { get; set; } // Country
        public DbSet<CrossDatabaseSynonym> CrossDatabaseSynonyms { get; set; } // cross_database_synonym
        public DbSet<DateTimeDefaultTest> DateTimeDefaultTests { get; set; } // DateTimeDefaultTest
        public DbSet<dcg_RovColumnDefinition> dcg_RovColumnDefinitions { get; set; } // rov_ColumnDefinitions
        public DbSet<DefaultCheckForNull> DefaultCheckForNulls { get; set; } // DefaultCheckForNull
        public DbSet<DsOpe> DsOpes { get; set; } // DSOpe
        public DbSet<EnumsWithStringAsValue> EnumsWithStringAsValues { get; set; } // EnumsWithStringAsValue
        public DbSet<EnumTest_DaysOfWeek> EnumTest_DaysOfWeeks { get; set; } // DaysOfWeek
        public DbSet<EnumTest_OpenDay> EnumTest_OpenDays { get; set; } // OpenDays
        public DbSet<EnumWithDefaultValue> EnumWithDefaultValues { get; set; } // EnumWithDefaultValue
        public DbSet<EventProcessor> EventProcessors { get; set; } // EventProcessor
        public DbSet<EventProcessorEventFilter> EventProcessorEventFilters { get; set; } // EventProcessorEventFilter
        public DbSet<FFRS_Cv> FFRS_Cvs { get; set; } // CV
        public DbSet<FinancialInstitutionOffice> FinancialInstitutionOffices { get; set; } // FinancialInstitutionOffice
        public DbSet<FkTest_SmallDecimalTestAttribute> FkTest_SmallDecimalTestAttributes { get; set; } // SmallDecimalTestAttribute
        public DbSet<Footer> Footers { get; set; } // footer
        public DbSet<ForeignKeyIsNotEnforced> ForeignKeyIsNotEnforceds { get; set; } // ForeignKeyIsNotEnforced
        public DbSet<ForeignKeyIsNotEnforcedItem> ForeignKeyIsNotEnforcedItems { get; set; } // ForeignKeyIsNotEnforcedItem
        public DbSet<HasPrincipalKeyTestChild> HasPrincipalKeyTestChilds { get; set; } // HasPrincipalKeyTestChild
        public DbSet<HasPrincipalKeyTestParent> HasPrincipalKeyTestParents { get; set; } // HasPrincipalKeyTestParent
        public DbSet<Header> Headers { get; set; } // header
        public DbSet<HierarchyTest> HierarchyTests { get; set; } // hierarchy_test
        public DbSet<InflectorData> InflectorData { get; set; } // InflectorData
        public DbSet<InflectorStatus> InflectorStatus { get; set; } // InflectorStatus
        public DbSet<InflectorTo> InflectorTo { get; set; } // InflectorTo
        public DbSet<Issue47_Role> Issue47_Roles { get; set; } // Role
        public DbSet<Issue47_User> Issue47_Users { get; set; } // Users
        public DbSet<Issue47_UserRole> Issue47_UserRoles { get; set; } // UserRoles
        public DbSet<MultipleKey> MultipleKeys { get; set; } // MultipleKeys
        public DbSet<OneEightSix_Issue> OneEightSix_Issues { get; set; } // Issue
        public DbSet<OneEightSix_UploadedFile> OneEightSix_UploadedFiles { get; set; } // UploadedFile
        public DbSet<PeriodTable> PeriodTables { get; set; } // Period.Table
        public DbSet<PeriodTestTable> PeriodTestTables { get; set; } // PeriodTestTable
        public DbSet<Person> People { get; set; } // Person
        public DbSet<PersonPost> PersonPosts { get; set; } // PersonPosts
        public DbSet<PkOrdinalTest> PkOrdinalTests { get; set; } // pk_ordinal_test
        public DbSet<PropertyTypesToAdd> PropertyTypesToAdds { get; set; } // PropertyTypesToAdd
        public DbSet<SequenceTest> SequenceTests { get; set; } // SequenceTest
        public DbSet<SequenceTestPartTwo> SequenceTestPartTwoes { get; set; } // SequenceTestPartTwo
        public DbSet<SmallDecimalTest> SmallDecimalTests { get; set; } // SmallDecimalTest
        public DbSet<SmallDecimalTestView> SmallDecimalTestViews { get; set; } // SmallDecimalTestView
        public DbSet<Stafford_Boo> Stafford_Boos { get; set; } // Boo
        public DbSet<Stafford_ComputedColumn> Stafford_ComputedColumns { get; set; } // ComputedColumns
        public DbSet<Stafford_Foo> Stafford_Foos { get; set; } // Foo
        public DbSet<Synonyms_Child> Synonyms_Children { get; set; } // Child
        public DbSet<Synonyms_Parent> Synonyms_Parents { get; set; } // Parent
        public DbSet<TableA> TableAs { get; set; } // TableA
        public DbSet<TableB> TableBs { get; set; } // TableB
        public DbSet<TableWithDuplicateColumnName> TableWithDuplicateColumnNames { get; set; } // table with duplicate column names
        public DbSet<TableWithMultiplePeriod> TableWithMultiplePeriods { get; set; } // table.with.multiple.periods
        public DbSet<TableWithSpace> TableWithSpaces { get; set; } // table with space
        public DbSet<TableWithSpaceAndInColumn> TableWithSpaceAndInColumns { get; set; } // table with space and in columns
        public DbSet<TableWithSpaceInColumnOnly> TableWithSpaceInColumnOnlies { get; set; } // TableWithSpaceInColumnOnly
        public DbSet<TadeuszSobol> TadeuszSobols { get; set; } // TadeuszSobol
        public DbSet<Task1> Task1 { get; set; } // Task
        public DbSet<TblOrder> TblOrders { get; set; } // tblOrders
        public DbSet<TblOrderError> TblOrderErrors { get; set; } // tblOrderErrors
        public DbSet<TblOrderErrorsAb> TblOrderErrorsAbs { get; set; } // tblOrderErrorsAB_
        public DbSet<TblOrderLine> TblOrderLines { get; set; } // tblOrderLines
        public DbSet<TemporalDepartment> TemporalDepartments { get; set; } // TemporalDepartment
        public DbSet<TemporalDepartmentHistory> TemporalDepartmentHistories { get; set; } // TemporalDepartmentHistory
        public DbSet<ThisIsMemoryOptimised> ThisIsMemoryOptimiseds { get; set; } // ThisIsMemoryOptimised
        public DbSet<Ticket> Tickets { get; set; } // Ticket
        public DbSet<TimestampNotNull> TimestampNotNulls { get; set; } // TimestampNotNull
        public DbSet<TimestampNullable> TimestampNullables { get; set; } // TimestampNullable
        public DbSet<Token> Tokens { get; set; } // Token
        public DbSet<User> Users { get; set; } // User
        public DbSet<User309> User309 { get; set; } // User309
        public DbSet<UserDocument> UserDocuments { get; set; } // User_Document
        public DbSet<Versioned> Versioneds { get; set; } // Versioned
        public DbSet<VersionedNullable> VersionedNullables { get; set; } // VersionedNullable
        public DbSet<ViewWithMultiplePeriod> ViewWithMultiplePeriods { get; set; } // view.with.multiple.periods
        public DbSet<ViewWithSpace> ViewWithSpaces { get; set; } // view with space
        public DbSet<WVN_Article> WVN_Articles { get; set; } // Articles
        public DbSet<Брендытовара> Брендытовара { get; set; } // Бренды товара

        static EfrpgTestDbContext()
        {
            System.Data.Entity.Database.SetInitializer<EfrpgTestDbContext>(null);
        }

        /// <inheritdoc />
        public EfrpgTestDbContext()
            : base("Name=MyDbContext")
        {
        }

        /// <inheritdoc />
        public EfrpgTestDbContext(string connectionString)
            : base(connectionString)
        {
        }

        /// <inheritdoc />
        public EfrpgTestDbContext(string connectionString, DbCompiledModel model)
            : base(connectionString, model)
        {
        }

        /// <inheritdoc />
        public EfrpgTestDbContext(DbConnection existingConnection, bool contextOwnsConnection)
            : base(existingConnection, contextOwnsConnection)
        {
        }

        /// <inheritdoc />
        public EfrpgTestDbContext(DbConnection existingConnection, DbCompiledModel model, bool contextOwnsConnection)
            : base(existingConnection, model, contextOwnsConnection)
        {
        }

        /// <inheritdoc />
        public EfrpgTestDbContext(ObjectContext objectContext, bool dbContextOwnsObjectContext)
            : base(objectContext, dbContextOwnsObjectContext)
        {
        }

        protected override void Dispose(bool disposing)
        {
            base.Dispose(disposing);
        }

        public bool IsSqlParameterNull(SqlParameter param)
        {
            var sqlValue = param.SqlValue;
            var nullableValue = sqlValue as INullable;
            if (nullableValue != null)
                return nullableValue.IsNull;
            return (sqlValue == null || sqlValue == DBNull.Value);
        }

        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);

            modelBuilder.Conventions.Add(new CodeFirstStoreFunctions.FunctionsConvention<EfrpgTestDbContext>("dbo"));

            modelBuilder.ComplexType<C182Test1ReturnModel>();
            modelBuilder.ComplexType<CsvToIntReturnModel>();
            modelBuilder.ComplexType<CustomSchema_CsvToIntWithSchemaReturnModel>();
            modelBuilder.ComplexType<FFRS_CsvToInt2ReturnModel>();

            modelBuilder.Configurations.Add(new AConfiguration());
            modelBuilder.Configurations.Add(new AarefConfiguration());
            modelBuilder.Configurations.Add(new AbOrderLinesAbConfiguration());
            modelBuilder.Configurations.Add(new AbOrdersAbConfiguration());
            modelBuilder.Configurations.Add(new Alpha_Harish3485Configuration());
            modelBuilder.Configurations.Add(new Alpha_WorkflowConfiguration());
            modelBuilder.Configurations.Add(new AlphaWorkflowSynonymConfiguration());
            modelBuilder.Configurations.Add(new App_UserFacilityServiceRoleConfiguration());
            modelBuilder.Configurations.Add(new AppUserConfiguration());
            modelBuilder.Configurations.Add(new AttendeeConfiguration());
            modelBuilder.Configurations.Add(new BatchTestConfiguration());
            modelBuilder.Configurations.Add(new Beta_Harish3485Configuration());
            modelBuilder.Configurations.Add(new Beta_ToAlphaConfiguration());
            modelBuilder.Configurations.Add(new Beta_WorkflowConfiguration());
            modelBuilder.Configurations.Add(new BitfiddlerallcapConfiguration());
            modelBuilder.Configurations.Add(new BitFiddlerCategoRyConfiguration());
            modelBuilder.Configurations.Add(new BitFiddlerCurrenCyConfiguration());
            modelBuilder.Configurations.Add(new BlahConfiguration());
            modelBuilder.Configurations.Add(new BlahBlahLinkV2Configuration());
            modelBuilder.Configurations.Add(new BlargConfiguration());
            modelBuilder.Configurations.Add(new Burak1Configuration());
            modelBuilder.Configurations.Add(new Burak2Configuration());
            modelBuilder.Configurations.Add(new CalculatedColumnNotNullConfiguration());
            modelBuilder.Configurations.Add(new CarConfiguration());
            modelBuilder.Configurations.Add(new ClientCreationStateConfiguration());
            modelBuilder.Configurations.Add(new CmsFileConfiguration());
            modelBuilder.Configurations.Add(new CmsTagConfiguration());
            modelBuilder.Configurations.Add(new CodeMeetingTopicDetailConfiguration());
            modelBuilder.Configurations.Add(new CodeObjectConfiguration());
            modelBuilder.Configurations.Add(new CodeParamMeetingTopicDetailSourceConfiguration());
            modelBuilder.Configurations.Add(new ColourConfiguration());
            modelBuilder.Configurations.Add(new ColumnNameAndTypeConfiguration());
            modelBuilder.Configurations.Add(new ComplexViewConfiguration());
            modelBuilder.Configurations.Add(new CountryConfiguration());
            modelBuilder.Configurations.Add(new CrossDatabaseSynonymConfiguration());
            modelBuilder.Configurations.Add(new DateTimeDefaultTestConfiguration());
            modelBuilder.Configurations.Add(new dcg_RovColumnDefinitionConfiguration());
            modelBuilder.Configurations.Add(new DefaultCheckForNullConfiguration());
            modelBuilder.Configurations.Add(new DsOpeConfiguration());
            modelBuilder.Configurations.Add(new EnumsWithStringAsValueConfiguration());
            modelBuilder.Configurations.Add(new EnumTest_DaysOfWeekConfiguration());
            modelBuilder.Configurations.Add(new EnumTest_OpenDayConfiguration());
            modelBuilder.Configurations.Add(new EnumWithDefaultValueConfiguration());
            modelBuilder.Configurations.Add(new EventProcessorConfiguration());
            modelBuilder.Configurations.Add(new EventProcessorEventFilterConfiguration());
            modelBuilder.Configurations.Add(new FFRS_CvConfiguration());
            modelBuilder.Configurations.Add(new FinancialInstitutionOfficeConfiguration());
            modelBuilder.Configurations.Add(new FkTest_SmallDecimalTestAttributeConfiguration());
            modelBuilder.Configurations.Add(new FooterConfiguration());
            modelBuilder.Configurations.Add(new ForeignKeyIsNotEnforcedConfiguration());
            modelBuilder.Configurations.Add(new ForeignKeyIsNotEnforcedItemConfiguration());
            modelBuilder.Configurations.Add(new HasPrincipalKeyTestChildConfiguration());
            modelBuilder.Configurations.Add(new HasPrincipalKeyTestParentConfiguration());
            modelBuilder.Configurations.Add(new HeaderConfiguration());
            modelBuilder.Configurations.Add(new HierarchyTestConfiguration());
            modelBuilder.Configurations.Add(new InflectorDataConfiguration());
            modelBuilder.Configurations.Add(new InflectorStatusConfiguration());
            modelBuilder.Configurations.Add(new InflectorToConfiguration());
            modelBuilder.Configurations.Add(new Issue47_RoleConfiguration());
            modelBuilder.Configurations.Add(new Issue47_UserConfiguration());
            modelBuilder.Configurations.Add(new Issue47_UserRoleConfiguration());
            modelBuilder.Configurations.Add(new MultipleKeyConfiguration());
            modelBuilder.Configurations.Add(new OneEightSix_IssueConfiguration());
            modelBuilder.Configurations.Add(new OneEightSix_UploadedFileConfiguration());
            modelBuilder.Configurations.Add(new PeriodTableConfiguration());
            modelBuilder.Configurations.Add(new PeriodTestTableConfiguration());
            modelBuilder.Configurations.Add(new PersonConfiguration());
            modelBuilder.Configurations.Add(new PersonPostConfiguration());
            modelBuilder.Configurations.Add(new PkOrdinalTestConfiguration());
            modelBuilder.Configurations.Add(new PropertyTypesToAddConfiguration());
            modelBuilder.Configurations.Add(new SequenceTestConfiguration());
            modelBuilder.Configurations.Add(new SequenceTestPartTwoConfiguration());
            modelBuilder.Configurations.Add(new SmallDecimalTestConfiguration());
            modelBuilder.Configurations.Add(new SmallDecimalTestViewConfiguration());
            modelBuilder.Configurations.Add(new Stafford_BooConfiguration());
            modelBuilder.Configurations.Add(new Stafford_ComputedColumnConfiguration());
            modelBuilder.Configurations.Add(new Stafford_FooConfiguration());
            modelBuilder.Configurations.Add(new Synonyms_ChildConfiguration());
            modelBuilder.Configurations.Add(new Synonyms_ParentConfiguration());
            modelBuilder.Configurations.Add(new TableAConfiguration());
            modelBuilder.Configurations.Add(new TableBConfiguration());
            modelBuilder.Configurations.Add(new TableWithDuplicateColumnNameConfiguration());
            modelBuilder.Configurations.Add(new TableWithMultiplePeriodConfiguration());
            modelBuilder.Configurations.Add(new TableWithSpaceConfiguration());
            modelBuilder.Configurations.Add(new TableWithSpaceAndInColumnConfiguration());
            modelBuilder.Configurations.Add(new TableWithSpaceInColumnOnlyConfiguration());
            modelBuilder.Configurations.Add(new TadeuszSobolConfiguration());
            modelBuilder.Configurations.Add(new Task1Configuration());
            modelBuilder.Configurations.Add(new TblOrderConfiguration());
            modelBuilder.Configurations.Add(new TblOrderErrorConfiguration());
            modelBuilder.Configurations.Add(new TblOrderErrorsAbConfiguration());
            modelBuilder.Configurations.Add(new TblOrderLineConfiguration());
            modelBuilder.Configurations.Add(new TemporalDepartmentConfiguration());
            modelBuilder.Configurations.Add(new TemporalDepartmentHistoryConfiguration());
            modelBuilder.Configurations.Add(new ThisIsMemoryOptimisedConfiguration());
            modelBuilder.Configurations.Add(new TicketConfiguration());
            modelBuilder.Configurations.Add(new TimestampNotNullConfiguration());
            modelBuilder.Configurations.Add(new TimestampNullableConfiguration());
            modelBuilder.Configurations.Add(new TokenConfiguration());
            modelBuilder.Configurations.Add(new UserConfiguration());
            modelBuilder.Configurations.Add(new User309Configuration());
            modelBuilder.Configurations.Add(new UserDocumentConfiguration());
            modelBuilder.Configurations.Add(new VersionedConfiguration());
            modelBuilder.Configurations.Add(new VersionedNullableConfiguration());
            modelBuilder.Configurations.Add(new ViewWithMultiplePeriodConfiguration());
            modelBuilder.Configurations.Add(new ViewWithSpaceConfiguration());
            modelBuilder.Configurations.Add(new WVN_ArticleConfiguration());
            modelBuilder.Configurations.Add(new БрендытовараConfiguration());

            // Indexes
            modelBuilder.Entity<Burak2>()
                .Property(e => e.Id)
                .HasColumnAnnotation(
                    IndexAnnotation.AnnotationName,
                    new IndexAnnotation(new IndexAttribute("U_Burak2", 1) { IsUnique = true })
                );

            modelBuilder.Entity<Burak2>()
                .Property(e => e.Num)
                .HasColumnAnnotation(
                    IndexAnnotation.AnnotationName,
                    new IndexAnnotation(new IndexAttribute("U_Burak2", 2) { IsUnique = true })
                );

            modelBuilder.Entity<CodeParamMeetingTopicDetailSource>()
                .Property(e => e.Code)
                .HasColumnAnnotation(
                    IndexAnnotation.AnnotationName,
                    new IndexAnnotation(new IndexAttribute("UK_CODE_PARAM_MeetingTopicDetailSource", 1) { IsUnique = true })
                );

            modelBuilder.Entity<EventProcessorEventFilter>()
                .Property(e => e.EventProcessorId)
                .HasColumnAnnotation(
                    IndexAnnotation.AnnotationName,
                    new IndexAnnotation(new IndexAttribute("IX_EventProcessorEventFilter", 1) { IsUnique = true })
                );

            modelBuilder.Entity<EventProcessorEventFilter>()
                .Property(e => e.WantedEventId)
                .HasColumnAnnotation(
                    IndexAnnotation.AnnotationName,
                    new IndexAnnotation(new IndexAttribute("IX_EventProcessorEventFilter", 2) { IsUnique = true })
                );

            modelBuilder.Entity<FinancialInstitutionOffice>()
                .Property(e => e.FinancialInstitutionCode)
                .HasColumnAnnotation(
                    IndexAnnotation.AnnotationName,
                    new IndexAnnotation(new IndexAttribute("UniqueOfficeName_FinancialInstitutionOffice", 1) { IsUnique = true })
                );

            modelBuilder.Entity<FinancialInstitutionOffice>()
                .Property(e => e.OfficeName)
                .HasColumnAnnotation(
                    IndexAnnotation.AnnotationName,
                    new IndexAnnotation(new IndexAttribute("UniqueOfficeName_FinancialInstitutionOffice", 2) { IsUnique = true })
                );

            modelBuilder.Entity<ForeignKeyIsNotEnforced>()
                .Property(e => e.NullValue)
                .HasColumnAnnotation(
                    IndexAnnotation.AnnotationName,
                    new IndexAnnotation(new IndexAttribute("UQ_ForeignKeyIsNotEnforced_null_value", 1) { IsUnique = true })
                );

            modelBuilder.Entity<ForeignKeyIsNotEnforced>()
                .Property(e => e.NotNullValue)
                .HasColumnAnnotation(
                    IndexAnnotation.AnnotationName,
                    new IndexAnnotation(new IndexAttribute("UQ_ForeignKeyIsNotEnforced_not_null_value", 1) { IsUnique = true })
                );

            modelBuilder.Entity<ForeignKeyIsNotEnforcedItem>()
                .Property(e => e.NullValue)
                .HasColumnAnnotation(
                    IndexAnnotation.AnnotationName,
                    new IndexAnnotation(new IndexAttribute("UQ_ForeignKeyIsNotEnforcedItem_null_value", 1) { IsUnique = true })
                );

            modelBuilder.Entity<ForeignKeyIsNotEnforcedItem>()
                .Property(e => e.NotNullValue)
                .HasColumnAnnotation(
                    IndexAnnotation.AnnotationName,
                    new IndexAnnotation(new IndexAttribute("UQ_ForeignKeyIsNotEnforcedItem_not_null_value", 1) { IsUnique = true })
                );

            modelBuilder.Entity<HasPrincipalKeyTestParent>()
                .Property(e => e.Aa)
                .HasColumnAnnotation(
                    IndexAnnotation.AnnotationName,
                    new IndexAnnotation(new[]
                    {
                        new IndexAttribute("UQ_HasPrincipalKeyTestParent_AB", 1) { IsUnique = true },
                        new IndexAttribute("UQ_HasPrincipalKeyTestParent_AC", 1) { IsUnique = true }
                    }));

            modelBuilder.Entity<HasPrincipalKeyTestParent>()
                .Property(e => e.Bb)
                .HasColumnAnnotation(
                    IndexAnnotation.AnnotationName,
                    new IndexAnnotation(new IndexAttribute("UQ_HasPrincipalKeyTestParent_AB", 2) { IsUnique = true })
                );

            modelBuilder.Entity<HasPrincipalKeyTestParent>()
                .Property(e => e.Cc)
                .HasColumnAnnotation(
                    IndexAnnotation.AnnotationName,
                    new IndexAnnotation(new[]
                    {
                        new IndexAttribute("UQ_HasPrincipalKeyTestParent_AC", 2) { IsUnique = true },
                        new IndexAttribute("UQ_HasPrincipalKeyTestParent_CD", 1) { IsUnique = true }
                    }));

            modelBuilder.Entity<HasPrincipalKeyTestParent>()
                .Property(e => e.Dd)
                .HasColumnAnnotation(
                    IndexAnnotation.AnnotationName,
                    new IndexAnnotation(new IndexAttribute("UQ_HasPrincipalKeyTestParent_CD", 2) { IsUnique = true })
                );

            modelBuilder.Entity<MultipleKey>()
                .Property(e => e.FavouriteColourId)
                .HasColumnAnnotation(
                    IndexAnnotation.AnnotationName,
                    new IndexAnnotation(new IndexAttribute("UC_MultipleKeys_FavouriteColour", 1) { IsUnique = true })
                );

            modelBuilder.Entity<MultipleKey>()
                .Property(e => e.BestHolidayTypeId)
                .HasColumnAnnotation(
                    IndexAnnotation.AnnotationName,
                    new IndexAnnotation(new[]
                    {
                        new IndexAttribute("IX_MultipleKeys_BestHolidayType", 1),
                        new IndexAttribute("IX_MultipleKeys_Holiday_Bank", 1) { IsUnique = true }
                    }));

            modelBuilder.Entity<MultipleKey>()
                .Property(e => e.BankId)
                .HasColumnAnnotation(
                    IndexAnnotation.AnnotationName,
                    new IndexAnnotation(new IndexAttribute("IX_MultipleKeys_Holiday_Bank", 2) { IsUnique = true })
                );

            modelBuilder.Entity<TableB>()
                .Property(e => e.TableAId)
                .HasColumnAnnotation(
                    IndexAnnotation.AnnotationName,
                    new IndexAnnotation(new IndexAttribute("fki_ParentTableA_FK_Constraint", 1))
                );

            modelBuilder.Entity<TemporalDepartmentHistory>()
                .Property(e => e.SysStartTime)
                .HasColumnAnnotation(
                    IndexAnnotation.AnnotationName,
                    new IndexAnnotation(new IndexAttribute("ix_TemporalDepartmentHistory", 2))
                );

            modelBuilder.Entity<TemporalDepartmentHistory>()
                .Property(e => e.SysEndTime)
                .HasColumnAnnotation(
                    IndexAnnotation.AnnotationName,
                    new IndexAnnotation(new IndexAttribute("ix_TemporalDepartmentHistory", 1))
                );

            modelBuilder.Entity<WVN_Article>()
                .Property(e => e.FkFactory)
                .HasColumnAnnotation(
                    IndexAnnotation.AnnotationName,
                    new IndexAnnotation(new IndexAttribute("UK_Articles", 1) { IsUnique = true })
                );

            modelBuilder.Entity<WVN_Article>()
                .Property(e => e.FkArticleLevel)
                .HasColumnAnnotation(
                    IndexAnnotation.AnnotationName,
                    new IndexAnnotation(new IndexAttribute("UK_Articles", 2) { IsUnique = true })
                );

            modelBuilder.Entity<WVN_Article>()
                .Property(e => e.Code)
                .HasColumnAnnotation(
                    IndexAnnotation.AnnotationName,
                    new IndexAnnotation(new IndexAttribute("UK_Articles", 3) { IsUnique = true })
                );

        }

        public static DbModelBuilder CreateModel(DbModelBuilder modelBuilder, string schema)
        {
            modelBuilder.Configurations.Add(new AConfiguration(schema));
            modelBuilder.Configurations.Add(new AarefConfiguration(schema));
            modelBuilder.Configurations.Add(new AbOrderLinesAbConfiguration(schema));
            modelBuilder.Configurations.Add(new AbOrdersAbConfiguration(schema));
            modelBuilder.Configurations.Add(new Alpha_Harish3485Configuration(schema));
            modelBuilder.Configurations.Add(new Alpha_WorkflowConfiguration(schema));
            modelBuilder.Configurations.Add(new AlphaWorkflowSynonymConfiguration(schema));
            modelBuilder.Configurations.Add(new App_UserFacilityServiceRoleConfiguration(schema));
            modelBuilder.Configurations.Add(new AppUserConfiguration(schema));
            modelBuilder.Configurations.Add(new AttendeeConfiguration(schema));
            modelBuilder.Configurations.Add(new BatchTestConfiguration(schema));
            modelBuilder.Configurations.Add(new Beta_Harish3485Configuration(schema));
            modelBuilder.Configurations.Add(new Beta_ToAlphaConfiguration(schema));
            modelBuilder.Configurations.Add(new Beta_WorkflowConfiguration(schema));
            modelBuilder.Configurations.Add(new BitfiddlerallcapConfiguration(schema));
            modelBuilder.Configurations.Add(new BitFiddlerCategoRyConfiguration(schema));
            modelBuilder.Configurations.Add(new BitFiddlerCurrenCyConfiguration(schema));
            modelBuilder.Configurations.Add(new BlahConfiguration(schema));
            modelBuilder.Configurations.Add(new BlahBlahLinkV2Configuration(schema));
            modelBuilder.Configurations.Add(new BlargConfiguration(schema));
            modelBuilder.Configurations.Add(new Burak1Configuration(schema));
            modelBuilder.Configurations.Add(new Burak2Configuration(schema));
            modelBuilder.Configurations.Add(new CalculatedColumnNotNullConfiguration(schema));
            modelBuilder.Configurations.Add(new CarConfiguration(schema));
            modelBuilder.Configurations.Add(new ClientCreationStateConfiguration(schema));
            modelBuilder.Configurations.Add(new CmsFileConfiguration(schema));
            modelBuilder.Configurations.Add(new CmsTagConfiguration(schema));
            modelBuilder.Configurations.Add(new CodeMeetingTopicDetailConfiguration(schema));
            modelBuilder.Configurations.Add(new CodeObjectConfiguration(schema));
            modelBuilder.Configurations.Add(new CodeParamMeetingTopicDetailSourceConfiguration(schema));
            modelBuilder.Configurations.Add(new ColourConfiguration(schema));
            modelBuilder.Configurations.Add(new ColumnNameAndTypeConfiguration(schema));
            modelBuilder.Configurations.Add(new ComplexViewConfiguration(schema));
            modelBuilder.Configurations.Add(new CountryConfiguration(schema));
            modelBuilder.Configurations.Add(new CrossDatabaseSynonymConfiguration(schema));
            modelBuilder.Configurations.Add(new DateTimeDefaultTestConfiguration(schema));
            modelBuilder.Configurations.Add(new dcg_RovColumnDefinitionConfiguration(schema));
            modelBuilder.Configurations.Add(new DefaultCheckForNullConfiguration(schema));
            modelBuilder.Configurations.Add(new DsOpeConfiguration(schema));
            modelBuilder.Configurations.Add(new EnumsWithStringAsValueConfiguration(schema));
            modelBuilder.Configurations.Add(new EnumTest_DaysOfWeekConfiguration(schema));
            modelBuilder.Configurations.Add(new EnumTest_OpenDayConfiguration(schema));
            modelBuilder.Configurations.Add(new EnumWithDefaultValueConfiguration(schema));
            modelBuilder.Configurations.Add(new EventProcessorConfiguration(schema));
            modelBuilder.Configurations.Add(new EventProcessorEventFilterConfiguration(schema));
            modelBuilder.Configurations.Add(new FFRS_CvConfiguration(schema));
            modelBuilder.Configurations.Add(new FinancialInstitutionOfficeConfiguration(schema));
            modelBuilder.Configurations.Add(new FkTest_SmallDecimalTestAttributeConfiguration(schema));
            modelBuilder.Configurations.Add(new FooterConfiguration(schema));
            modelBuilder.Configurations.Add(new ForeignKeyIsNotEnforcedConfiguration(schema));
            modelBuilder.Configurations.Add(new ForeignKeyIsNotEnforcedItemConfiguration(schema));
            modelBuilder.Configurations.Add(new HasPrincipalKeyTestChildConfiguration(schema));
            modelBuilder.Configurations.Add(new HasPrincipalKeyTestParentConfiguration(schema));
            modelBuilder.Configurations.Add(new HeaderConfiguration(schema));
            modelBuilder.Configurations.Add(new HierarchyTestConfiguration(schema));
            modelBuilder.Configurations.Add(new InflectorDataConfiguration(schema));
            modelBuilder.Configurations.Add(new InflectorStatusConfiguration(schema));
            modelBuilder.Configurations.Add(new InflectorToConfiguration(schema));
            modelBuilder.Configurations.Add(new Issue47_RoleConfiguration(schema));
            modelBuilder.Configurations.Add(new Issue47_UserConfiguration(schema));
            modelBuilder.Configurations.Add(new Issue47_UserRoleConfiguration(schema));
            modelBuilder.Configurations.Add(new MultipleKeyConfiguration(schema));
            modelBuilder.Configurations.Add(new OneEightSix_IssueConfiguration(schema));
            modelBuilder.Configurations.Add(new OneEightSix_UploadedFileConfiguration(schema));
            modelBuilder.Configurations.Add(new PeriodTableConfiguration(schema));
            modelBuilder.Configurations.Add(new PeriodTestTableConfiguration(schema));
            modelBuilder.Configurations.Add(new PersonConfiguration(schema));
            modelBuilder.Configurations.Add(new PersonPostConfiguration(schema));
            modelBuilder.Configurations.Add(new PkOrdinalTestConfiguration(schema));
            modelBuilder.Configurations.Add(new PropertyTypesToAddConfiguration(schema));
            modelBuilder.Configurations.Add(new SequenceTestConfiguration(schema));
            modelBuilder.Configurations.Add(new SequenceTestPartTwoConfiguration(schema));
            modelBuilder.Configurations.Add(new SmallDecimalTestConfiguration(schema));
            modelBuilder.Configurations.Add(new SmallDecimalTestViewConfiguration(schema));
            modelBuilder.Configurations.Add(new Stafford_BooConfiguration(schema));
            modelBuilder.Configurations.Add(new Stafford_ComputedColumnConfiguration(schema));
            modelBuilder.Configurations.Add(new Stafford_FooConfiguration(schema));
            modelBuilder.Configurations.Add(new Synonyms_ChildConfiguration(schema));
            modelBuilder.Configurations.Add(new Synonyms_ParentConfiguration(schema));
            modelBuilder.Configurations.Add(new TableAConfiguration(schema));
            modelBuilder.Configurations.Add(new TableBConfiguration(schema));
            modelBuilder.Configurations.Add(new TableWithDuplicateColumnNameConfiguration(schema));
            modelBuilder.Configurations.Add(new TableWithMultiplePeriodConfiguration(schema));
            modelBuilder.Configurations.Add(new TableWithSpaceConfiguration(schema));
            modelBuilder.Configurations.Add(new TableWithSpaceAndInColumnConfiguration(schema));
            modelBuilder.Configurations.Add(new TableWithSpaceInColumnOnlyConfiguration(schema));
            modelBuilder.Configurations.Add(new TadeuszSobolConfiguration(schema));
            modelBuilder.Configurations.Add(new Task1Configuration(schema));
            modelBuilder.Configurations.Add(new TblOrderConfiguration(schema));
            modelBuilder.Configurations.Add(new TblOrderErrorConfiguration(schema));
            modelBuilder.Configurations.Add(new TblOrderErrorsAbConfiguration(schema));
            modelBuilder.Configurations.Add(new TblOrderLineConfiguration(schema));
            modelBuilder.Configurations.Add(new TemporalDepartmentConfiguration(schema));
            modelBuilder.Configurations.Add(new TemporalDepartmentHistoryConfiguration(schema));
            modelBuilder.Configurations.Add(new ThisIsMemoryOptimisedConfiguration(schema));
            modelBuilder.Configurations.Add(new TicketConfiguration(schema));
            modelBuilder.Configurations.Add(new TimestampNotNullConfiguration(schema));
            modelBuilder.Configurations.Add(new TimestampNullableConfiguration(schema));
            modelBuilder.Configurations.Add(new TokenConfiguration(schema));
            modelBuilder.Configurations.Add(new UserConfiguration(schema));
            modelBuilder.Configurations.Add(new User309Configuration(schema));
            modelBuilder.Configurations.Add(new UserDocumentConfiguration(schema));
            modelBuilder.Configurations.Add(new VersionedConfiguration(schema));
            modelBuilder.Configurations.Add(new VersionedNullableConfiguration(schema));
            modelBuilder.Configurations.Add(new ViewWithMultiplePeriodConfiguration(schema));
            modelBuilder.Configurations.Add(new ViewWithSpaceConfiguration(schema));
            modelBuilder.Configurations.Add(new WVN_ArticleConfiguration(schema));
            modelBuilder.Configurations.Add(new БрендытовараConfiguration(schema));

            return modelBuilder;
        }

        // Stored Procedures
        public int AddTwoValues(int? a = null, int? b = null)
        {
            var aParam = new SqlParameter { ParameterName = "@a", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = a.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!a.HasValue)
                aParam.Value = DBNull.Value;

            var bParam = new SqlParameter { ParameterName = "@b", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = b.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!b.HasValue)
                bParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };

            Database.ExecuteSqlCommand(TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[AddTwoValues] @a, @b", aParam, bParam, procResultParam);

            return (int)procResultParam.Value;
        }

        public async Task<int> AddTwoValuesAsync(int? a = null, int? b = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            var aParam = new SqlParameter { ParameterName = "@a", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = a.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!a.HasValue)
                aParam.Value = DBNull.Value;

            var bParam = new SqlParameter { ParameterName = "@b", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = b.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!b.HasValue)
                bParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };

            await Database.ExecuteSqlCommandAsync(TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[AddTwoValues] @a, @b", cancellationToken, aParam, bParam, procResultParam);

            return (int)procResultParam.Value;
        }

        public int AddTwoValuesWithResult(int? a, int? b, out int? result, out int? result2)
        {
            var aParam = new SqlParameter { ParameterName = "@a", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = a.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!a.HasValue)
                aParam.Value = DBNull.Value;

            var bParam = new SqlParameter { ParameterName = "@b", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = b.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!b.HasValue)
                bParam.Value = DBNull.Value;

            var resultParam = new SqlParameter { ParameterName = "@result", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output, Precision = 10, Scale = 0 };
            var result2Param = new SqlParameter { ParameterName = "@result2", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output, Precision = 10, Scale = 0 };
            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };

            Database.ExecuteSqlCommand(TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[AddTwoValuesWithResult] @a, @b, @result OUTPUT, @result2 OUTPUT", aParam, bParam, resultParam, result2Param, procResultParam);

            if (IsSqlParameterNull(resultParam))
                result = null;
            else
                result = (int) resultParam.Value;

            if (IsSqlParameterNull(result2Param))
                result2 = null;
            else
                result2 = (int) result2Param.Value;

            return (int)procResultParam.Value;
        }

        // AddTwoValuesWithResultAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)
        public int Alpha_Overclock(DateTime? parameter = null)
        {
            var parameterParam = new SqlParameter { ParameterName = "@Parameter", SqlDbType = SqlDbType.DateTime, Direction = ParameterDirection.Input, Value = parameter.GetValueOrDefault() };
            if (!parameter.HasValue)
                parameterParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };

            Database.ExecuteSqlCommand(TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [Alpha].[Overclock] @Parameter", parameterParam, procResultParam);

            return (int)procResultParam.Value;
        }

        public async Task<int> Alpha_OverclockAsync(DateTime? parameter = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            var parameterParam = new SqlParameter { ParameterName = "@Parameter", SqlDbType = SqlDbType.DateTime, Direction = ParameterDirection.Input, Value = parameter.GetValueOrDefault() };
            if (!parameter.HasValue)
                parameterParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };

            await Database.ExecuteSqlCommandAsync(TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [Alpha].[Overclock] @Parameter", cancellationToken, parameterParam, procResultParam);

            return (int)procResultParam.Value;
        }

        public int App_UspCmtUserFsrUpdate(int? userId, int? fsrId, out int? ufsrId)
        {
            var userIdParam = new SqlParameter { ParameterName = "@userId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = userId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!userId.HasValue)
                userIdParam.Value = DBNull.Value;

            var fsrIdParam = new SqlParameter { ParameterName = "@fsrId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = fsrId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!fsrId.HasValue)
                fsrIdParam.Value = DBNull.Value;

            var ufsrIdParam = new SqlParameter { ParameterName = "@ufsrId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output, Precision = 10, Scale = 0 };
            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };

            Database.ExecuteSqlCommand(TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [App].[usp_CMTUserFSRUpdate] @userId, @fsrId, @ufsrId OUTPUT", userIdParam, fsrIdParam, ufsrIdParam, procResultParam);

            if (IsSqlParameterNull(ufsrIdParam))
                ufsrId = null;
            else
                ufsrId = (int) ufsrIdParam.Value;

            return (int)procResultParam.Value;
        }

        // App_UspCmtUserFsrUpdateAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)
        public List<ASimpleExampleReturnModel> ASimpleExample()
        {
            int procResult;
            return ASimpleExample(out procResult);
        }

        public List<ASimpleExampleReturnModel> ASimpleExample(out int procResult)
        {
            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };
            var procResultData = Database.SqlQuery<ASimpleExampleReturnModel>("EXEC @procResult = [dbo].[aSimpleExample]", procResultParam).ToList();
            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async Task<List<ASimpleExampleReturnModel>> ASimpleExampleAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            var procResultData = await Database.SqlQuery<ASimpleExampleReturnModel>("EXEC [dbo].[aSimpleExample]").ToListAsync(cancellationToken);
            return procResultData;
        }

        public int Beta_Overclock(DateTime? parameter = null)
        {
            var parameterParam = new SqlParameter { ParameterName = "@Parameter", SqlDbType = SqlDbType.DateTime, Direction = ParameterDirection.Input, Value = parameter.GetValueOrDefault() };
            if (!parameter.HasValue)
                parameterParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };

            Database.ExecuteSqlCommand(TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [Beta].[Overclock] @Parameter", parameterParam, procResultParam);

            return (int)procResultParam.Value;
        }

        public async Task<int> Beta_OverclockAsync(DateTime? parameter = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            var parameterParam = new SqlParameter { ParameterName = "@Parameter", SqlDbType = SqlDbType.DateTime, Direction = ParameterDirection.Input, Value = parameter.GetValueOrDefault() };
            if (!parameter.HasValue)
                parameterParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };

            await Database.ExecuteSqlCommandAsync(TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [Beta].[Overclock] @Parameter", cancellationToken, parameterParam, procResultParam);

            return (int)procResultParam.Value;
        }

        public C182Test2ReturnModel C182Test2(int? flag = null)
        {
            var flagParam = new SqlParameter { ParameterName = "@Flag", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = flag.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!flag.HasValue)
                flagParam.Value = DBNull.Value;

            var procResultData = new C182Test2ReturnModel();
            var cmd = Database.Connection.CreateCommand();
            cmd.CommandTimeout = Database.CommandTimeout ?? cmd.CommandTimeout;
            cmd.CommandType = CommandType.StoredProcedure;
            cmd.CommandText = "[dbo].[182_test2]";
            cmd.Parameters.Add(flagParam);

            try
            {
                DbInterception.Dispatch.Connection.Open(Database.Connection, new DbInterceptionContext());
                var reader = cmd.ExecuteReader();
                var objectContext = ((IObjectContextAdapter) this).ObjectContext;

                procResultData.ResultSet1 = objectContext.Translate<C182Test2ReturnModel.ResultSetModel1>(reader).ToList();
                reader.NextResult();

                procResultData.ResultSet2 = objectContext.Translate<C182Test2ReturnModel.ResultSetModel2>(reader).ToList();
                reader.NextResult();

                procResultData.ResultSet3 = objectContext.Translate<C182Test2ReturnModel.ResultSetModel3>(reader).ToList();
                reader.Close();
            }
            finally
            {
                DbInterception.Dispatch.Connection.Close(Database.Connection, new DbInterceptionContext());
            }

            return procResultData;
        }

        // C182Test2Async() cannot be created due to having out parameters, or is relying on the procedure result (C182Test2ReturnModel)
        public List<CheckIfApplicationIsCompleteReturnModel> CheckIfApplicationIsComplete(int? applicationId, out bool? isApplicationComplete)
        {
            int procResult;
            return CheckIfApplicationIsComplete(applicationId, out isApplicationComplete, out procResult);
        }

        public List<CheckIfApplicationIsCompleteReturnModel> CheckIfApplicationIsComplete(int? applicationId, out bool? isApplicationComplete, out int procResult)
        {
            var applicationIdParam = new SqlParameter { ParameterName = "@ApplicationId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = applicationId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!applicationId.HasValue)
                applicationIdParam.Value = DBNull.Value;

            var isApplicationCompleteParam = new SqlParameter { ParameterName = "@IsApplicationComplete", SqlDbType = SqlDbType.Bit, Direction = ParameterDirection.Output };
            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };
            var procResultData = Database.SqlQuery<CheckIfApplicationIsCompleteReturnModel>("EXEC @procResult = [dbo].[CheckIfApplicationIsComplete] @ApplicationId, @IsApplicationComplete OUTPUT", applicationIdParam, isApplicationCompleteParam, procResultParam).ToList();
            if (IsSqlParameterNull(isApplicationCompleteParam))
                isApplicationComplete = null;
            else
                isApplicationComplete = (bool) isApplicationCompleteParam.Value;

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        // CheckIfApplicationIsCompleteAsync() cannot be created due to having out parameters, or is relying on the procedure result (List<CheckIfApplicationIsCompleteReturnModel>)
        public List<ColourPivotReturnModel> ColourPivot()
        {
            int procResult;
            return ColourPivot(out procResult);
        }

        public List<ColourPivotReturnModel> ColourPivot(out int procResult)
        {
            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };
            var procResultData = Database.SqlQuery<ColourPivotReturnModel>("EXEC @procResult = [dbo].[ColourPivot]", procResultParam).ToList();
            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async Task<List<ColourPivotReturnModel>> ColourPivotAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            var procResultData = await Database.SqlQuery<ColourPivotReturnModel>("EXEC [dbo].[ColourPivot]").ToListAsync(cancellationToken);
            return procResultData;
        }

        public int ColumnNameAndTypesProc()
        {
            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };

            Database.ExecuteSqlCommand(TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[ColumnNameAndTypesProc] ", procResultParam);

            return (int)procResultParam.Value;
        }

        public async Task<int> ColumnNameAndTypesProcAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };

            await Database.ExecuteSqlCommandAsync(TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[ColumnNameAndTypesProc]", cancellationToken, procResultParam);

            return (int)procResultParam.Value;
        }

        public int ConvertToString(int? someValue, out string someString)
        {
            var someValueParam = new SqlParameter { ParameterName = "@someValue", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = someValue.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!someValue.HasValue)
                someValueParam.Value = DBNull.Value;

            var someStringParam = new SqlParameter { ParameterName = "@someString", SqlDbType = SqlDbType.VarChar, Direction = ParameterDirection.Output, Size = 20 };
            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };

            Database.ExecuteSqlCommand(TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[ConvertToString] @someValue, @someString OUTPUT", someValueParam, someStringParam, procResultParam);

            if (IsSqlParameterNull(someStringParam))
                someString = default(string);
            else
                someString = (string) someStringParam.Value;

            return (int)procResultParam.Value;
        }

        // ConvertToStringAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)
        public List<DboProcDataFromFfrsReturnModel> DboProcDataFromFfrs(int? maxId = null)
        {
            int procResult;
            return DboProcDataFromFfrs(maxId, out procResult);
        }

        public List<DboProcDataFromFfrsReturnModel> DboProcDataFromFfrs(int? maxId, out int procResult)
        {
            var maxIdParam = new SqlParameter { ParameterName = "@maxId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = maxId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!maxId.HasValue)
                maxIdParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };
            var procResultData = Database.SqlQuery<DboProcDataFromFfrsReturnModel>("EXEC @procResult = [dbo].[dbo_proc_data_from_ffrs] @maxId", maxIdParam, procResultParam).ToList();
            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async Task<List<DboProcDataFromFfrsReturnModel>> DboProcDataFromFfrsAsync(int? maxId = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            var maxIdParam = new SqlParameter { ParameterName = "@maxId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = maxId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!maxId.HasValue)
                maxIdParam.Value = DBNull.Value;

            var procResultData = await Database.SqlQuery<DboProcDataFromFfrsReturnModel>("EXEC [dbo].[dbo_proc_data_from_ffrs] @maxId", maxIdParam).ToListAsync(cancellationToken);
            return procResultData;
        }

        public List<DboProcDataFromFfrsAndDboReturnModel> DboProcDataFromFfrsAndDbo()
        {
            int procResult;
            return DboProcDataFromFfrsAndDbo(out procResult);
        }

        public List<DboProcDataFromFfrsAndDboReturnModel> DboProcDataFromFfrsAndDbo(out int procResult)
        {
            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };
            var procResultData = Database.SqlQuery<DboProcDataFromFfrsAndDboReturnModel>("EXEC @procResult = [dbo].[dbo_proc_data_from_ffrs_and_dbo]", procResultParam).ToList();
            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async Task<List<DboProcDataFromFfrsAndDboReturnModel>> DboProcDataFromFfrsAndDboAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            var procResultData = await Database.SqlQuery<DboProcDataFromFfrsAndDboReturnModel>("EXEC [dbo].[dbo_proc_data_from_ffrs_and_dbo]").ToListAsync(cancellationToken);
            return procResultData;
        }

        public List<DsOpeProcReturnModel> DsOpeProc()
        {
            int procResult;
            return DsOpeProc(out procResult);
        }

        public List<DsOpeProcReturnModel> DsOpeProc(out int procResult)
        {
            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };
            var procResultData = Database.SqlQuery<DsOpeProcReturnModel>("EXEC @procResult = [dbo].[DSOpeProc]", procResultParam).ToList();
            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async Task<List<DsOpeProcReturnModel>> DsOpeProcAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            var procResultData = await Database.SqlQuery<DsOpeProcReturnModel>("EXEC [dbo].[DSOpeProc]").ToListAsync(cancellationToken);
            return procResultData;
        }

        public List<FFRS_CvDataReturnModel> FFRS_CvData(int? maxId = null)
        {
            int procResult;
            return FFRS_CvData(maxId, out procResult);
        }

        public List<FFRS_CvDataReturnModel> FFRS_CvData(int? maxId, out int procResult)
        {
            var maxIdParam = new SqlParameter { ParameterName = "@maxId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = maxId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!maxId.HasValue)
                maxIdParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };
            var procResultData = Database.SqlQuery<FFRS_CvDataReturnModel>("EXEC @procResult = [FFRS].[cv_data] @maxId", maxIdParam, procResultParam).ToList();
            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async Task<List<FFRS_CvDataReturnModel>> FFRS_CvDataAsync(int? maxId = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            var maxIdParam = new SqlParameter { ParameterName = "@maxId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = maxId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!maxId.HasValue)
                maxIdParam.Value = DBNull.Value;

            var procResultData = await Database.SqlQuery<FFRS_CvDataReturnModel>("EXEC [FFRS].[cv_data] @maxId", maxIdParam).ToListAsync(cancellationToken);
            return procResultData;
        }

        public List<FFRS_DataFromDboReturnModel> FFRS_DataFromDbo()
        {
            int procResult;
            return FFRS_DataFromDbo(out procResult);
        }

        public List<FFRS_DataFromDboReturnModel> FFRS_DataFromDbo(out int procResult)
        {
            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };
            var procResultData = Database.SqlQuery<FFRS_DataFromDboReturnModel>("EXEC @procResult = [FFRS].[data_from_dbo]", procResultParam).ToList();
            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async Task<List<FFRS_DataFromDboReturnModel>> FFRS_DataFromDboAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            var procResultData = await Database.SqlQuery<FFRS_DataFromDboReturnModel>("EXEC [FFRS].[data_from_dbo]").ToListAsync(cancellationToken);
            return procResultData;
        }

        public List<FFRS_DataFromDboAndFfrsReturnModel> FFRS_DataFromDboAndFfrs()
        {
            int procResult;
            return FFRS_DataFromDboAndFfrs(out procResult);
        }

        public List<FFRS_DataFromDboAndFfrsReturnModel> FFRS_DataFromDboAndFfrs(out int procResult)
        {
            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };
            var procResultData = Database.SqlQuery<FFRS_DataFromDboAndFfrsReturnModel>("EXEC @procResult = [FFRS].[data_from_dbo_and_ffrs]", procResultParam).ToList();
            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async Task<List<FFRS_DataFromDboAndFfrsReturnModel>> FFRS_DataFromDboAndFfrsAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            var procResultData = await Database.SqlQuery<FFRS_DataFromDboAndFfrsReturnModel>("EXEC [FFRS].[data_from_dbo_and_ffrs]").ToListAsync(cancellationToken);
            return procResultData;
        }

        public List<FkTest_HelloReturnModel> FkTest_Hello()
        {
            int procResult;
            return FkTest_Hello(out procResult);
        }

        public List<FkTest_HelloReturnModel> FkTest_Hello(out int procResult)
        {
            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };
            var procResultData = Database.SqlQuery<FkTest_HelloReturnModel>("EXEC @procResult = [FkTest].[Hello]", procResultParam).ToList();
            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async Task<List<FkTest_HelloReturnModel>> FkTest_HelloAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            var procResultData = await Database.SqlQuery<FkTest_HelloReturnModel>("EXEC [FkTest].[Hello]").ToListAsync(cancellationToken);
            return procResultData;
        }

        public List<GetSmallDecimalTestReturnModel> GetSmallDecimalTest(int? maxId = null)
        {
            int procResult;
            return GetSmallDecimalTest(maxId, out procResult);
        }

        public List<GetSmallDecimalTestReturnModel> GetSmallDecimalTest(int? maxId, out int procResult)
        {
            var maxIdParam = new SqlParameter { ParameterName = "@maxId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = maxId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!maxId.HasValue)
                maxIdParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };
            var procResultData = Database.SqlQuery<GetSmallDecimalTestReturnModel>("EXEC @procResult = [dbo].[GetSmallDecimalTest] @maxId", maxIdParam, procResultParam).ToList();
            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async Task<List<GetSmallDecimalTestReturnModel>> GetSmallDecimalTestAsync(int? maxId = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            var maxIdParam = new SqlParameter { ParameterName = "@maxId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = maxId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!maxId.HasValue)
                maxIdParam.Value = DBNull.Value;

            var procResultData = await Database.SqlQuery<GetSmallDecimalTestReturnModel>("EXEC [dbo].[GetSmallDecimalTest] @maxId", maxIdParam).ToListAsync(cancellationToken);
            return procResultData;
        }

        public int InsertRecord(string data, out int? insertedId)
        {
            var dataParam = new SqlParameter { ParameterName = "@Data", SqlDbType = SqlDbType.VarChar, Direction = ParameterDirection.Input, Value = data, Size = 256 };
            if (dataParam.Value == null)
                dataParam.Value = DBNull.Value;

            var insertedIdParam = new SqlParameter { ParameterName = "@InsertedId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output, Precision = 10, Scale = 0 };
            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };

            Database.ExecuteSqlCommand(TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[InsertRecord] @Data, @InsertedId OUTPUT", dataParam, insertedIdParam, procResultParam);

            if (IsSqlParameterNull(insertedIdParam))
                insertedId = null;
            else
                insertedId = (int) insertedIdParam.Value;

            return (int)procResultParam.Value;
        }

        // InsertRecordAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)
        public int InsertRecordThree(string data, out int? insertedId, int? someId, out int? anotherInsertedId)
        {
            var dataParam = new SqlParameter { ParameterName = "@Data", SqlDbType = SqlDbType.VarChar, Direction = ParameterDirection.Input, Value = data, Size = 256 };
            if (dataParam.Value == null)
                dataParam.Value = DBNull.Value;

            var insertedIdParam = new SqlParameter { ParameterName = "@InsertedId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output, Precision = 10, Scale = 0 };
            var someIdParam = new SqlParameter { ParameterName = "@SomeId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = someId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!someId.HasValue)
                someIdParam.Value = DBNull.Value;

            var anotherInsertedIdParam = new SqlParameter { ParameterName = "@AnotherInsertedId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output, Precision = 10, Scale = 0 };
            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };

            Database.ExecuteSqlCommand(TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[InsertRecordThree] @Data, @InsertedId OUTPUT, @SomeId, @AnotherInsertedId OUTPUT", dataParam, insertedIdParam, someIdParam, anotherInsertedIdParam, procResultParam);

            if (IsSqlParameterNull(insertedIdParam))
                insertedId = null;
            else
                insertedId = (int) insertedIdParam.Value;

            if (IsSqlParameterNull(anotherInsertedIdParam))
                anotherInsertedId = null;
            else
                anotherInsertedId = (int) anotherInsertedIdParam.Value;

            return (int)procResultParam.Value;
        }

        // InsertRecordThreeAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)
        public int InsertRecordTwo(string data, out int? insertedId, out int? anotherInsertedId)
        {
            var dataParam = new SqlParameter { ParameterName = "@Data", SqlDbType = SqlDbType.VarChar, Direction = ParameterDirection.Input, Value = data, Size = 256 };
            if (dataParam.Value == null)
                dataParam.Value = DBNull.Value;

            var insertedIdParam = new SqlParameter { ParameterName = "@InsertedId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output, Precision = 10, Scale = 0 };
            var anotherInsertedIdParam = new SqlParameter { ParameterName = "@AnotherInsertedId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output, Precision = 10, Scale = 0 };
            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };

            Database.ExecuteSqlCommand(TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[InsertRecordTwo] @Data, @InsertedId OUTPUT, @AnotherInsertedId OUTPUT", dataParam, insertedIdParam, anotherInsertedIdParam, procResultParam);

            if (IsSqlParameterNull(insertedIdParam))
                insertedId = null;
            else
                insertedId = (int) insertedIdParam.Value;

            if (IsSqlParameterNull(anotherInsertedIdParam))
                anotherInsertedId = null;
            else
                anotherInsertedId = (int) anotherInsertedIdParam.Value;

            return (int)procResultParam.Value;
        }

        // InsertRecordTwoAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)
        public int MinTripSequenceStart(out DateTime? minTripSequenceStartParam)
        {
            var minTripSequenceStartParamParam = new SqlParameter { ParameterName = "@minTripSequenceStartParam", SqlDbType = SqlDbType.DateTime2, Direction = ParameterDirection.Output };
            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };

            Database.ExecuteSqlCommand(TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[MinTripSequenceStart] @minTripSequenceStartParam OUTPUT", minTripSequenceStartParamParam, procResultParam);

            if (IsSqlParameterNull(minTripSequenceStartParamParam))
                minTripSequenceStartParam = null;
            else
                minTripSequenceStartParam = (DateTime) minTripSequenceStartParamParam.Value;

            return (int)procResultParam.Value;
        }

        // MinTripSequenceStartAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)
        public int MinTripSequenceStartNull(out DateTime? minTripSequenceStartParam)
        {
            var minTripSequenceStartParamParam = new SqlParameter { ParameterName = "@minTripSequenceStartParam", SqlDbType = SqlDbType.DateTime2, Direction = ParameterDirection.Output };
            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };

            Database.ExecuteSqlCommand(TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[MinTripSequenceStartNull] @minTripSequenceStartParam OUTPUT", minTripSequenceStartParamParam, procResultParam);

            if (IsSqlParameterNull(minTripSequenceStartParamParam))
                minTripSequenceStartParam = null;
            else
                minTripSequenceStartParam = (DateTime) minTripSequenceStartParamParam.Value;

            return (int)procResultParam.Value;
        }

        // MinTripSequenceStartNullAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)
        public int NvarcharTest(string maxOutputParam, string normalOutputParam)
        {
            var maxOutputParamParam = new SqlParameter { ParameterName = "@maxOutputParam", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = maxOutputParam, Size = -1 };
            if (maxOutputParamParam.Value == null)
                maxOutputParamParam.Value = DBNull.Value;

            var normalOutputParamParam = new SqlParameter { ParameterName = "@normalOutputParam", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = normalOutputParam, Size = 20 };
            if (normalOutputParamParam.Value == null)
                normalOutputParamParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };

            Database.ExecuteSqlCommand(TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[NvarcharTest] @maxOutputParam, @normalOutputParam", maxOutputParamParam, normalOutputParamParam, procResultParam);

            return (int)procResultParam.Value;
        }

        public async Task<int> NvarcharTestAsync(string maxOutputParam, string normalOutputParam, CancellationToken cancellationToken = default(CancellationToken))
        {
            var maxOutputParamParam = new SqlParameter { ParameterName = "@maxOutputParam", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = maxOutputParam, Size = -1 };
            if (maxOutputParamParam.Value == null)
                maxOutputParamParam.Value = DBNull.Value;

            var normalOutputParamParam = new SqlParameter { ParameterName = "@normalOutputParam", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = normalOutputParam, Size = 20 };
            if (normalOutputParamParam.Value == null)
                normalOutputParamParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };

            await Database.ExecuteSqlCommandAsync(TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[NvarcharTest] @maxOutputParam, @normalOutputParam", cancellationToken, maxOutputParamParam, normalOutputParamParam, procResultParam);

            return (int)procResultParam.Value;
        }

        public int Omega_Overclock(DateTime? parameter = null)
        {
            var parameterParam = new SqlParameter { ParameterName = "@Parameter", SqlDbType = SqlDbType.DateTime, Direction = ParameterDirection.Input, Value = parameter.GetValueOrDefault() };
            if (!parameter.HasValue)
                parameterParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };

            Database.ExecuteSqlCommand(TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [Omega].[Overclock] @Parameter", parameterParam, procResultParam);

            return (int)procResultParam.Value;
        }

        public async Task<int> Omega_OverclockAsync(DateTime? parameter = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            var parameterParam = new SqlParameter { ParameterName = "@Parameter", SqlDbType = SqlDbType.DateTime, Direction = ParameterDirection.Input, Value = parameter.GetValueOrDefault() };
            if (!parameter.HasValue)
                parameterParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };

            await Database.ExecuteSqlCommandAsync(TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [Omega].[Overclock] @Parameter", cancellationToken, parameterParam, procResultParam);

            return (int)procResultParam.Value;
        }

        public int ProcTestDecimalOutput(out decimal? perfectNumber)
        {
            var perfectNumberParam = new SqlParameter { ParameterName = "@PerfectNumber", SqlDbType = SqlDbType.Decimal, Direction = ParameterDirection.Output, Precision = 18, Scale = 2 };
            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };

            Database.ExecuteSqlCommand(TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[proc_TestDecimalOutput] @PerfectNumber OUTPUT", perfectNumberParam, procResultParam);

            if (IsSqlParameterNull(perfectNumberParam))
                perfectNumber = null;
            else
                perfectNumber = (decimal) perfectNumberParam.Value;

            return (int)procResultParam.Value;
        }

        // ProcTestDecimalOutputAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)
        public int ProcTestDecimalOutputV2(out decimal? perfectNumber)
        {
            var perfectNumberParam = new SqlParameter { ParameterName = "@PerfectNumber", SqlDbType = SqlDbType.Decimal, Direction = ParameterDirection.Output, Precision = 12, Scale = 8 };
            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };

            Database.ExecuteSqlCommand(TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[proc_TestDecimalOutputV2] @PerfectNumber OUTPUT", perfectNumberParam, procResultParam);

            if (IsSqlParameterNull(perfectNumberParam))
                perfectNumber = null;
            else
                perfectNumber = (decimal) perfectNumberParam.Value;

            return (int)procResultParam.Value;
        }

        // ProcTestDecimalOutputV2Async() cannot be created due to having out parameters, or is relying on the procedure result (int)
        public int ProcTestDecimalOutputV3Default(out decimal? perfectNumber)
        {
            var perfectNumberParam = new SqlParameter { ParameterName = "@PerfectNumber", SqlDbType = SqlDbType.Decimal, Direction = ParameterDirection.Output, Precision = 18, Scale = 0 };
            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };

            Database.ExecuteSqlCommand(TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[proc_TestDecimalOutputV3Default] @PerfectNumber OUTPUT", perfectNumberParam, procResultParam);

            if (IsSqlParameterNull(perfectNumberParam))
                perfectNumber = null;
            else
                perfectNumber = (decimal) perfectNumberParam.Value;

            return (int)procResultParam.Value;
        }

        // ProcTestDecimalOutputV3DefaultAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)
        public int SpatialTypesNoParams()
        {
            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };

            Database.ExecuteSqlCommand(TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[SpatialTypesNoParams] ", procResultParam);

            return (int)procResultParam.Value;
        }

        public async Task<int> SpatialTypesNoParamsAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };

            await Database.ExecuteSqlCommandAsync(TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[SpatialTypesNoParams]", cancellationToken, procResultParam);

            return (int)procResultParam.Value;
        }

        public int SpatialTypesWithParams(DbGeometry geometry, DbGeography geography)
        {
            var geometryParam = new SqlParameter { ParameterName = "@geometry", SqlDbType = SqlDbType.VarChar, Direction = ParameterDirection.Input, Value = geometry, Size = -1 };
            if (geometryParam.Value == null)
                geometryParam.Value = DBNull.Value;

            var geographyParam = new SqlParameter { ParameterName = "@geography", UdtTypeName = "geography", Direction = ParameterDirection.Input, Value = Microsoft.SqlServer.Types.SqlGeography.Parse(geography.AsText()), Size = -1 };
            if (geographyParam.Value == null)
                geographyParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };

            Database.ExecuteSqlCommand(TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[SpatialTypesWithParams] @geometry, @geography", geometryParam, geographyParam, procResultParam);

            return (int)procResultParam.Value;
        }

        public async Task<int> SpatialTypesWithParamsAsync(DbGeometry geometry, DbGeography geography, CancellationToken cancellationToken = default(CancellationToken))
        {
            var geometryParam = new SqlParameter { ParameterName = "@geometry", SqlDbType = SqlDbType.VarChar, Direction = ParameterDirection.Input, Value = geometry, Size = -1 };
            if (geometryParam.Value == null)
                geometryParam.Value = DBNull.Value;

            var geographyParam = new SqlParameter { ParameterName = "@geography", UdtTypeName = "geography", Direction = ParameterDirection.Input, Value = Microsoft.SqlServer.Types.SqlGeography.Parse(geography.AsText()), Size = -1 };
            if (geographyParam.Value == null)
                geographyParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };

            await Database.ExecuteSqlCommandAsync(TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[SpatialTypesWithParams] @geometry, @geography", cancellationToken, geometryParam, geographyParam, procResultParam);

            return (int)procResultParam.Value;
        }

        public List<StpMultipleIdenticalResultsReturnModel> StpMultipleIdenticalResults(int? someVar = null)
        {
            int procResult;
            return StpMultipleIdenticalResults(someVar, out procResult);
        }

        public List<StpMultipleIdenticalResultsReturnModel> StpMultipleIdenticalResults(int? someVar, out int procResult)
        {
            var someVarParam = new SqlParameter { ParameterName = "@someVar", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = someVar.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!someVar.HasValue)
                someVarParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };
            var procResultData = Database.SqlQuery<StpMultipleIdenticalResultsReturnModel>("EXEC @procResult = [dbo].[stp_multiple_identical_results] @someVar", someVarParam, procResultParam).ToList();
            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async Task<List<StpMultipleIdenticalResultsReturnModel>> StpMultipleIdenticalResultsAsync(int? someVar = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            var someVarParam = new SqlParameter { ParameterName = "@someVar", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = someVar.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!someVar.HasValue)
                someVarParam.Value = DBNull.Value;

            var procResultData = await Database.SqlQuery<StpMultipleIdenticalResultsReturnModel>("EXEC [dbo].[stp_multiple_identical_results] @someVar", someVarParam).ToListAsync(cancellationToken);
            return procResultData;
        }

        public StpMultipleMultipleResultsWithParamsReturnModel StpMultipleMultipleResultsWithParams(int? firstVal = null, int? secondVal = null, int? thirdVal = null)
        {
            var firstValParam = new SqlParameter { ParameterName = "@first_val", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = firstVal.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!firstVal.HasValue)
                firstValParam.Value = DBNull.Value;

            var secondValParam = new SqlParameter { ParameterName = "@second_val", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = secondVal.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!secondVal.HasValue)
                secondValParam.Value = DBNull.Value;

            var thirdValParam = new SqlParameter { ParameterName = "@third_val", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = thirdVal.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!thirdVal.HasValue)
                thirdValParam.Value = DBNull.Value;

            var procResultData = new StpMultipleMultipleResultsWithParamsReturnModel();
            var cmd = Database.Connection.CreateCommand();
            cmd.CommandTimeout = Database.CommandTimeout ?? cmd.CommandTimeout;
            cmd.CommandType = CommandType.StoredProcedure;
            cmd.CommandText = "[dbo].[stp_multiple_multiple_results_with_params]";
            cmd.Parameters.Add(firstValParam);
            cmd.Parameters.Add(secondValParam);
            cmd.Parameters.Add(thirdValParam);

            try
            {
                DbInterception.Dispatch.Connection.Open(Database.Connection, new DbInterceptionContext());
                var reader = cmd.ExecuteReader();
                var objectContext = ((IObjectContextAdapter) this).ObjectContext;

                procResultData.ResultSet1 = objectContext.Translate<StpMultipleMultipleResultsWithParamsReturnModel.ResultSetModel1>(reader).ToList();
                reader.NextResult();

                procResultData.ResultSet2 = objectContext.Translate<StpMultipleMultipleResultsWithParamsReturnModel.ResultSetModel2>(reader).ToList();
                reader.NextResult();

                procResultData.ResultSet3 = objectContext.Translate<StpMultipleMultipleResultsWithParamsReturnModel.ResultSetModel3>(reader).ToList();
                reader.NextResult();

                procResultData.ResultSet4 = objectContext.Translate<StpMultipleMultipleResultsWithParamsReturnModel.ResultSetModel4>(reader).ToList();
                reader.NextResult();

                procResultData.ResultSet5 = objectContext.Translate<StpMultipleMultipleResultsWithParamsReturnModel.ResultSetModel5>(reader).ToList();
                reader.NextResult();

                procResultData.ResultSet6 = objectContext.Translate<StpMultipleMultipleResultsWithParamsReturnModel.ResultSetModel6>(reader).ToList();
                reader.Close();
            }
            finally
            {
                DbInterception.Dispatch.Connection.Close(Database.Connection, new DbInterceptionContext());
            }

            return procResultData;
        }

        // StpMultipleMultipleResultsWithParamsAsync() cannot be created due to having out parameters, or is relying on the procedure result (StpMultipleMultipleResultsWithParamsReturnModel)
        public StpMultipleResultsReturnModel StpMultipleResults()
        {
            var procResultData = new StpMultipleResultsReturnModel();
            var cmd = Database.Connection.CreateCommand();
            cmd.CommandTimeout = Database.CommandTimeout ?? cmd.CommandTimeout;
            cmd.CommandType = CommandType.StoredProcedure;
            cmd.CommandText = "[dbo].[stp_multiple_results]";

            try
            {
                DbInterception.Dispatch.Connection.Open(Database.Connection, new DbInterceptionContext());
                var reader = cmd.ExecuteReader();
                var objectContext = ((IObjectContextAdapter) this).ObjectContext;

                procResultData.ResultSet1 = objectContext.Translate<StpMultipleResultsReturnModel.ResultSetModel1>(reader).ToList();
                reader.NextResult();

                procResultData.ResultSet2 = objectContext.Translate<StpMultipleResultsReturnModel.ResultSetModel2>(reader).ToList();
                reader.NextResult();

                procResultData.ResultSet3 = objectContext.Translate<StpMultipleResultsReturnModel.ResultSetModel3>(reader).ToList();
                reader.Close();
            }
            finally
            {
                DbInterception.Dispatch.Connection.Close(Database.Connection, new DbInterceptionContext());
            }

            return procResultData;
        }

        // StpMultipleResultsAsync() cannot be created due to having out parameters, or is relying on the procedure result (StpMultipleResultsReturnModel)
        public StpMultipleResultsWithParamsReturnModel StpMultipleResultsWithParams(int? firstVal = null, int? secondVal = null)
        {
            var firstValParam = new SqlParameter { ParameterName = "@first_val", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = firstVal.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!firstVal.HasValue)
                firstValParam.Value = DBNull.Value;

            var secondValParam = new SqlParameter { ParameterName = "@second_val", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = secondVal.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!secondVal.HasValue)
                secondValParam.Value = DBNull.Value;

            var procResultData = new StpMultipleResultsWithParamsReturnModel();
            var cmd = Database.Connection.CreateCommand();
            cmd.CommandTimeout = Database.CommandTimeout ?? cmd.CommandTimeout;
            cmd.CommandType = CommandType.StoredProcedure;
            cmd.CommandText = "[dbo].[stp_multiple_results_with_params]";
            cmd.Parameters.Add(firstValParam);
            cmd.Parameters.Add(secondValParam);

            try
            {
                DbInterception.Dispatch.Connection.Open(Database.Connection, new DbInterceptionContext());
                var reader = cmd.ExecuteReader();
                var objectContext = ((IObjectContextAdapter) this).ObjectContext;

                procResultData.ResultSet1 = objectContext.Translate<StpMultipleResultsWithParamsReturnModel.ResultSetModel1>(reader).ToList();
                reader.NextResult();

                procResultData.ResultSet2 = objectContext.Translate<StpMultipleResultsWithParamsReturnModel.ResultSetModel2>(reader).ToList();
                reader.Close();
            }
            finally
            {
                DbInterception.Dispatch.Connection.Close(Database.Connection, new DbInterceptionContext());
            }

            return procResultData;
        }

        // StpMultipleResultsWithParamsAsync() cannot be created due to having out parameters, or is relying on the procedure result (StpMultipleResultsWithParamsReturnModel)
        public List<StpNoParamsTestReturnModel> StpNoParamsTest()
        {
            int procResult;
            return StpNoParamsTest(out procResult);
        }

        public List<StpNoParamsTestReturnModel> StpNoParamsTest(out int procResult)
        {
            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };
            var procResultData = Database.SqlQuery<StpNoParamsTestReturnModel>("EXEC @procResult = [dbo].[stp_no_params_test]", procResultParam).ToList();
            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async Task<List<StpNoParamsTestReturnModel>> StpNoParamsTestAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            var procResultData = await Database.SqlQuery<StpNoParamsTestReturnModel>("EXEC [dbo].[stp_no_params_test]").ToListAsync(cancellationToken);
            return procResultData;
        }

        public int StpNoReturnFields()
        {
            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };

            Database.ExecuteSqlCommand(TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[stp_no_return_fields] ", procResultParam);

            return (int)procResultParam.Value;
        }

        public async Task<int> StpNoReturnFieldsAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };

            await Database.ExecuteSqlCommandAsync(TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[stp_no_return_fields]", cancellationToken, procResultParam);

            return (int)procResultParam.Value;
        }

        public List<StpNullableParamsTestReturnModel> StpNullableParamsTest(int? aVal = null, int? bVal = null)
        {
            int procResult;
            return StpNullableParamsTest(aVal, bVal, out procResult);
        }

        public List<StpNullableParamsTestReturnModel> StpNullableParamsTest(int? aVal, int? bVal, out int procResult)
        {
            var aValParam = new SqlParameter { ParameterName = "@a_val", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = aVal.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!aVal.HasValue)
                aValParam.Value = DBNull.Value;

            var bValParam = new SqlParameter { ParameterName = "@b_val", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = bVal.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!bVal.HasValue)
                bValParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };
            var procResultData = Database.SqlQuery<StpNullableParamsTestReturnModel>("EXEC @procResult = [dbo].[stp_nullable_params_test] @a_val, @b_val", aValParam, bValParam, procResultParam).ToList();
            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async Task<List<StpNullableParamsTestReturnModel>> StpNullableParamsTestAsync(int? aVal = null, int? bVal = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            var aValParam = new SqlParameter { ParameterName = "@a_val", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = aVal.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!aVal.HasValue)
                aValParam.Value = DBNull.Value;

            var bValParam = new SqlParameter { ParameterName = "@b_val", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = bVal.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!bVal.HasValue)
                bValParam.Value = DBNull.Value;

            var procResultData = await Database.SqlQuery<StpNullableParamsTestReturnModel>("EXEC [dbo].[stp_nullable_params_test] @a_val, @b_val", aValParam, bValParam).ToListAsync(cancellationToken);
            return procResultData;
        }

        public List<StpTestReturnModel> StpTest(string strDateFrom, string strDateTo, out bool? retBool)
        {
            int procResult;
            return StpTest(strDateFrom, strDateTo, out retBool, out procResult);
        }

        public List<StpTestReturnModel> StpTest(string strDateFrom, string strDateTo, out bool? retBool, out int procResult)
        {
            var strDateFromParam = new SqlParameter { ParameterName = "@strDateFROM", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = strDateFrom, Size = 20 };
            if (strDateFromParam.Value == null)
                strDateFromParam.Value = DBNull.Value;

            var strDateToParam = new SqlParameter { ParameterName = "@strDateTo", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = strDateTo, Size = 20 };
            if (strDateToParam.Value == null)
                strDateToParam.Value = DBNull.Value;

            var retBoolParam = new SqlParameter { ParameterName = "@retBool", SqlDbType = SqlDbType.Bit, Direction = ParameterDirection.Output };
            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };
            var procResultData = Database.SqlQuery<StpTestReturnModel>("EXEC @procResult = [dbo].[stp_test] @strDateFROM, @strDateTo, @retBool OUTPUT", strDateFromParam, strDateToParam, retBoolParam, procResultParam).ToList();
            if (IsSqlParameterNull(retBoolParam))
                retBool = null;
            else
                retBool = (bool) retBoolParam.Value;

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        // StpTestAsync() cannot be created due to having out parameters, or is relying on the procedure result (List<StpTestReturnModel>)
        public List<StpTestUnderscoreTestReturnModel> StpTestUnderscoreTest(string strDateFrom, string strDateTo)
        {
            int procResult;
            return StpTestUnderscoreTest(strDateFrom, strDateTo, out procResult);
        }

        public List<StpTestUnderscoreTestReturnModel> StpTestUnderscoreTest(string strDateFrom, string strDateTo, out int procResult)
        {
            var strDateFromParam = new SqlParameter { ParameterName = "@str_Date_FROM", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = strDateFrom, Size = 20 };
            if (strDateFromParam.Value == null)
                strDateFromParam.Value = DBNull.Value;

            var strDateToParam = new SqlParameter { ParameterName = "@str_date_to", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = strDateTo, Size = 20 };
            if (strDateToParam.Value == null)
                strDateToParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };
            var procResultData = Database.SqlQuery<StpTestUnderscoreTestReturnModel>("EXEC @procResult = [dbo].[stp_test_underscore_test] @str_Date_FROM, @str_date_to", strDateFromParam, strDateToParam, procResultParam).ToList();
            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async Task<List<StpTestUnderscoreTestReturnModel>> StpTestUnderscoreTestAsync(string strDateFrom, string strDateTo, CancellationToken cancellationToken = default(CancellationToken))
        {
            var strDateFromParam = new SqlParameter { ParameterName = "@str_Date_FROM", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = strDateFrom, Size = 20 };
            if (strDateFromParam.Value == null)
                strDateFromParam.Value = DBNull.Value;

            var strDateToParam = new SqlParameter { ParameterName = "@str_date_to", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = strDateTo, Size = 20 };
            if (strDateToParam.Value == null)
                strDateToParam.Value = DBNull.Value;

            var procResultData = await Database.SqlQuery<StpTestUnderscoreTestReturnModel>("EXEC [dbo].[stp_test_underscore_test] @str_Date_FROM, @str_date_to", strDateFromParam, strDateToParam).ToListAsync(cancellationToken);
            return procResultData;
        }

        public int StupidStoredProcedureParams(string reqType, short? dept = null, short? @class = null, short? item = null)
        {
            var reqTypeParam = new SqlParameter { ParameterName = "@ReqType", SqlDbType = SqlDbType.VarChar, Direction = ParameterDirection.Input, Value = reqType, Size = 25 };
            if (reqTypeParam.Value == null)
                reqTypeParam.Value = DBNull.Value;

            var deptParam = new SqlParameter { ParameterName = "@Dept", SqlDbType = SqlDbType.SmallInt, Direction = ParameterDirection.Input, Value = dept.GetValueOrDefault(), Precision = 5, Scale = 0 };
            if (!dept.HasValue)
                deptParam.Value = DBNull.Value;

            var @classParam = new SqlParameter { ParameterName = "@Class", SqlDbType = SqlDbType.SmallInt, Direction = ParameterDirection.Input, Value = @class.GetValueOrDefault(), Precision = 5, Scale = 0 };
            if (!@class.HasValue)
                @classParam.Value = DBNull.Value;

            var itemParam = new SqlParameter { ParameterName = "@Item", SqlDbType = SqlDbType.SmallInt, Direction = ParameterDirection.Input, Value = item.GetValueOrDefault(), Precision = 5, Scale = 0 };
            if (!item.HasValue)
                itemParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };

            Database.ExecuteSqlCommand(TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[StupidStoredProcedureParams] @ReqType, @Dept, @Class, @Item", reqTypeParam, deptParam, @classParam, itemParam, procResultParam);

            return (int)procResultParam.Value;
        }

        public async Task<int> StupidStoredProcedureParamsAsync(string reqType, short? dept = null, short? @class = null, short? item = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            var reqTypeParam = new SqlParameter { ParameterName = "@ReqType", SqlDbType = SqlDbType.VarChar, Direction = ParameterDirection.Input, Value = reqType, Size = 25 };
            if (reqTypeParam.Value == null)
                reqTypeParam.Value = DBNull.Value;

            var deptParam = new SqlParameter { ParameterName = "@Dept", SqlDbType = SqlDbType.SmallInt, Direction = ParameterDirection.Input, Value = dept.GetValueOrDefault(), Precision = 5, Scale = 0 };
            if (!dept.HasValue)
                deptParam.Value = DBNull.Value;

            var @classParam = new SqlParameter { ParameterName = "@Class", SqlDbType = SqlDbType.SmallInt, Direction = ParameterDirection.Input, Value = @class.GetValueOrDefault(), Precision = 5, Scale = 0 };
            if (!@class.HasValue)
                @classParam.Value = DBNull.Value;

            var itemParam = new SqlParameter { ParameterName = "@Item", SqlDbType = SqlDbType.SmallInt, Direction = ParameterDirection.Input, Value = item.GetValueOrDefault(), Precision = 5, Scale = 0 };
            if (!item.HasValue)
                itemParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };

            await Database.ExecuteSqlCommandAsync(TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[StupidStoredProcedureParams] @ReqType, @Dept, @Class, @Item", cancellationToken, reqTypeParam, deptParam, @classParam, itemParam, procResultParam);

            return (int)procResultParam.Value;
        }

        public int StupidStoredProcedureParams2(string @override, short? @readonly = null, short? @class = null, short? @enum = null)
        {
            var @overrideParam = new SqlParameter { ParameterName = "@override", SqlDbType = SqlDbType.VarChar, Direction = ParameterDirection.Input, Value = @override, Size = 25 };
            if (@overrideParam.Value == null)
                @overrideParam.Value = DBNull.Value;

            var @readonlyParam = new SqlParameter { ParameterName = "@readonly", SqlDbType = SqlDbType.SmallInt, Direction = ParameterDirection.Input, Value = @readonly.GetValueOrDefault(), Precision = 5, Scale = 0 };
            if (!@readonly.HasValue)
                @readonlyParam.Value = DBNull.Value;

            var @classParam = new SqlParameter { ParameterName = "@class", SqlDbType = SqlDbType.SmallInt, Direction = ParameterDirection.Input, Value = @class.GetValueOrDefault(), Precision = 5, Scale = 0 };
            if (!@class.HasValue)
                @classParam.Value = DBNull.Value;

            var @enumParam = new SqlParameter { ParameterName = "@enum", SqlDbType = SqlDbType.SmallInt, Direction = ParameterDirection.Input, Value = @enum.GetValueOrDefault(), Precision = 5, Scale = 0 };
            if (!@enum.HasValue)
                @enumParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };

            Database.ExecuteSqlCommand(TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[StupidStoredProcedureParams2] @override, @readonly, @class, @enum", @overrideParam, @readonlyParam, @classParam, @enumParam, procResultParam);

            return (int)procResultParam.Value;
        }

        public async Task<int> StupidStoredProcedureParams2Async(string @override, short? @readonly = null, short? @class = null, short? @enum = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            var @overrideParam = new SqlParameter { ParameterName = "@override", SqlDbType = SqlDbType.VarChar, Direction = ParameterDirection.Input, Value = @override, Size = 25 };
            if (@overrideParam.Value == null)
                @overrideParam.Value = DBNull.Value;

            var @readonlyParam = new SqlParameter { ParameterName = "@readonly", SqlDbType = SqlDbType.SmallInt, Direction = ParameterDirection.Input, Value = @readonly.GetValueOrDefault(), Precision = 5, Scale = 0 };
            if (!@readonly.HasValue)
                @readonlyParam.Value = DBNull.Value;

            var @classParam = new SqlParameter { ParameterName = "@class", SqlDbType = SqlDbType.SmallInt, Direction = ParameterDirection.Input, Value = @class.GetValueOrDefault(), Precision = 5, Scale = 0 };
            if (!@class.HasValue)
                @classParam.Value = DBNull.Value;

            var @enumParam = new SqlParameter { ParameterName = "@enum", SqlDbType = SqlDbType.SmallInt, Direction = ParameterDirection.Input, Value = @enum.GetValueOrDefault(), Precision = 5, Scale = 0 };
            if (!@enum.HasValue)
                @enumParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };

            await Database.ExecuteSqlCommandAsync(TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[StupidStoredProcedureParams2] @override, @readonly, @class, @enum", cancellationToken, @overrideParam, @readonlyParam, @classParam, @enumParam, procResultParam);

            return (int)procResultParam.Value;
        }

        public List<Synonyms_SimpleStoredProcReturnModel> Synonyms_SimpleStoredProc(int? inputInt = null)
        {
            int procResult;
            return Synonyms_SimpleStoredProc(inputInt, out procResult);
        }

        public List<Synonyms_SimpleStoredProcReturnModel> Synonyms_SimpleStoredProc(int? inputInt, out int procResult)
        {
            var inputIntParam = new SqlParameter { ParameterName = "@InputInt", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = inputInt.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!inputInt.HasValue)
                inputIntParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };
            var procResultData = Database.SqlQuery<Synonyms_SimpleStoredProcReturnModel>("EXEC @procResult = [Synonyms].[SimpleStoredProc] @InputInt", inputIntParam, procResultParam).ToList();
            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async Task<List<Synonyms_SimpleStoredProcReturnModel>> Synonyms_SimpleStoredProcAsync(int? inputInt = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            var inputIntParam = new SqlParameter { ParameterName = "@InputInt", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = inputInt.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!inputInt.HasValue)
                inputIntParam.Value = DBNull.Value;

            var procResultData = await Database.SqlQuery<Synonyms_SimpleStoredProcReturnModel>("EXEC [Synonyms].[SimpleStoredProc] @InputInt", inputIntParam).ToListAsync(cancellationToken);
            return procResultData;
        }

        public List<TestReturnStringReturnModel> TestReturnString()
        {
            int procResult;
            return TestReturnString(out procResult);
        }

        public List<TestReturnStringReturnModel> TestReturnString(out int procResult)
        {
            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };
            var procResultData = Database.SqlQuery<TestReturnStringReturnModel>("EXEC @procResult = [dbo].[TestReturnString]", procResultParam).ToList();
            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async Task<List<TestReturnStringReturnModel>> TestReturnStringAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            var procResultData = await Database.SqlQuery<TestReturnStringReturnModel>("EXEC [dbo].[TestReturnString]").ToListAsync(cancellationToken);
            return procResultData;
        }

        public int ThisHasMixedOutParameters(DateTime? foo, out int? firstOutParam, DateTime? bar, out int? secondOutParam, DateTime? baz = null)
        {
            var fooParam = new SqlParameter { ParameterName = "@Foo", SqlDbType = SqlDbType.DateTime, Direction = ParameterDirection.Input, Value = foo.GetValueOrDefault() };
            if (!foo.HasValue)
                fooParam.Value = DBNull.Value;

            var firstOutParamParam = new SqlParameter { ParameterName = "@FirstOutParam", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output, Precision = 10, Scale = 0 };
            var barParam = new SqlParameter { ParameterName = "@Bar", SqlDbType = SqlDbType.DateTime, Direction = ParameterDirection.Input, Value = bar.GetValueOrDefault() };
            if (!bar.HasValue)
                barParam.Value = DBNull.Value;

            var secondOutParamParam = new SqlParameter { ParameterName = "@SecondOutParam", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output, Precision = 10, Scale = 0 };
            var bazParam = new SqlParameter { ParameterName = "@Baz", SqlDbType = SqlDbType.DateTime, Direction = ParameterDirection.Input, Value = baz.GetValueOrDefault() };
            if (!baz.HasValue)
                bazParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };

            Database.ExecuteSqlCommand(TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[ThisHasMixedOutParameters] @Foo, @FirstOutParam OUTPUT, @Bar, @SecondOutParam OUTPUT, @Baz", fooParam, firstOutParamParam, barParam, secondOutParamParam, bazParam, procResultParam);

            if (IsSqlParameterNull(firstOutParamParam))
                firstOutParam = null;
            else
                firstOutParam = (int) firstOutParamParam.Value;

            if (IsSqlParameterNull(secondOutParamParam))
                secondOutParam = null;
            else
                secondOutParam = (int) secondOutParamParam.Value;

            return (int)procResultParam.Value;
        }

        // ThisHasMixedOutParametersAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)
        public int UserDefinedTypeSampleStoredProc(int? a, DataTable type, int? b = null)
        {
            var aParam = new SqlParameter { ParameterName = "@a", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = a.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!a.HasValue)
                aParam.Value = DBNull.Value;

            var typeParam = new SqlParameter { ParameterName = "@type", SqlDbType = SqlDbType.Structured, Direction = ParameterDirection.Input, Value = type, TypeName = "dbo.UserDefinedTypeSample" };
            if (typeParam.Value == null)
                typeParam.Value = DBNull.Value;

            var bParam = new SqlParameter { ParameterName = "@b", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = b.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!b.HasValue)
                bParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };

            Database.ExecuteSqlCommand(TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[UserDefinedTypeSampleStoredProc] @a, @type, @b", aParam, typeParam, bParam, procResultParam);

            return (int)procResultParam.Value;
        }

        public async Task<int> UserDefinedTypeSampleStoredProcAsync(int? a, DataTable type, int? b = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            var aParam = new SqlParameter { ParameterName = "@a", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = a.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!a.HasValue)
                aParam.Value = DBNull.Value;

            var typeParam = new SqlParameter { ParameterName = "@type", SqlDbType = SqlDbType.Structured, Direction = ParameterDirection.Input, Value = type, TypeName = "dbo.UserDefinedTypeSample" };
            if (typeParam.Value == null)
                typeParam.Value = DBNull.Value;

            var bParam = new SqlParameter { ParameterName = "@b", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = b.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!b.HasValue)
                bParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };

            await Database.ExecuteSqlCommandAsync(TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[UserDefinedTypeSampleStoredProc] @a, @type, @b", cancellationToken, aParam, typeParam, bParam, procResultParam);

            return (int)procResultParam.Value;
        }

        public List<XmlDataV1ReturnModel> XmlDataV1()
        {
            int procResult;
            return XmlDataV1(out procResult);
        }

        public List<XmlDataV1ReturnModel> XmlDataV1(out int procResult)
        {
            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };
            var procResultData = Database.SqlQuery<XmlDataV1ReturnModel>("EXEC @procResult = [dbo].[XmlDataV1]", procResultParam).ToList();
            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async Task<List<XmlDataV1ReturnModel>> XmlDataV1Async(CancellationToken cancellationToken = default(CancellationToken))
        {
            var procResultData = await Database.SqlQuery<XmlDataV1ReturnModel>("EXEC [dbo].[XmlDataV1]").ToListAsync(cancellationToken);
            return procResultData;
        }

        public int XmlDataV2()
        {
            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };

            Database.ExecuteSqlCommand(TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[XmlDataV2] ", procResultParam);

            return (int)procResultParam.Value;
        }

        public async Task<int> XmlDataV2Async(CancellationToken cancellationToken = default(CancellationToken))
        {
            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };

            await Database.ExecuteSqlCommandAsync(TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[XmlDataV2]", cancellationToken, procResultParam);

            return (int)procResultParam.Value;
        }


        // Table Valued Functions

        [DbFunction("EfrpgTestDbContext", "182_test1")]
        [CodeFirstStoreFunctions.DbFunctionDetails(DatabaseSchema = "dbo")]
        public IQueryable<C182Test1ReturnModel> C182Test1(int? test = null)
        {
            var testParam = new ObjectParameter("test", typeof(int)) { Value = (object)test ?? DBNull.Value };

            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<C182Test1ReturnModel>("[EfrpgTestDbContext].[182_test1](@test)", testParam);
        }

        [DbFunction("EfrpgTestDbContext", "CsvToInt")]
        [CodeFirstStoreFunctions.DbFunctionDetails(DatabaseSchema = "dbo", ResultColumnName = "IntValue")]
        public IQueryable<CsvToIntReturnModel> CsvToInt(string array, string array2)
        {
            var arrayParam = new ObjectParameter("array", typeof(string)) { Value = (object)array };
            var array2Param = new ObjectParameter("array2", typeof(string)) { Value = (object)array2 };

            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<CsvToIntReturnModel>("[EfrpgTestDbContext].[CsvToInt](@array, @array2)", arrayParam, array2Param);
        }

        [DbFunction("EfrpgTestDbContext", "CsvToIntWithSchema")]
        [CodeFirstStoreFunctions.DbFunctionDetails(DatabaseSchema = "CustomSchema", ResultColumnName = "IntValue")]
        public IQueryable<CustomSchema_CsvToIntWithSchemaReturnModel> CustomSchema_CsvToIntWithSchema(string array, string array2)
        {
            var arrayParam = new ObjectParameter("array", typeof(string)) { Value = (object)array };
            var array2Param = new ObjectParameter("array2", typeof(string)) { Value = (object)array2 };

            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<CustomSchema_CsvToIntWithSchemaReturnModel>("[EfrpgTestDbContext].[CsvToIntWithSchema](@array, @array2)", arrayParam, array2Param);
        }

        [DbFunction("EfrpgTestDbContext", "CsvToInt2")]
        [CodeFirstStoreFunctions.DbFunctionDetails(DatabaseSchema = "FFRS", ResultColumnName = "IntValue")]
        public IQueryable<FFRS_CsvToInt2ReturnModel> FFRS_CsvToInt2(string array, string array2)
        {
            var arrayParam = new ObjectParameter("array", typeof(string)) { Value = (object)array };
            var array2Param = new ObjectParameter("array2", typeof(string)) { Value = (object)array2 };

            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<FFRS_CsvToInt2ReturnModel>("[EfrpgTestDbContext].[CsvToInt2](@array, @array2)", arrayParam, array2Param);
        }

        // Scalar Valued Functions

        [DbFunction("CodeFirstDatabaseSchema", "udfNetSale")]
        public decimal UdfNetSale(int? quantity = null, decimal? listPrice = null, decimal? discount = null)
        {
            throw new Exception("Don't call this directly. Use LINQ to call the scalar valued function as part of your query");
        }
    }

    #endregion

    #region Database context factory

    public class EfrpgTestDbContextFactory : IDbContextFactory<EfrpgTestDbContext>
    {
        public EfrpgTestDbContext Create()
        {
            return new EfrpgTestDbContext();
        }
    }

    #endregion

    #region Fake Database context

    public class FakeEfrpgTestDbContext : IEfrpgTestDbContext
    {
        public DbSet<A> A { get; set; } // A
        public DbSet<Aaref> Aarefs { get; set; } // AAREF
        public DbSet<AbOrderLinesAb> AbOrderLinesAbs { get; set; } // AB_OrderLinesAB_
        public DbSet<AbOrdersAb> AbOrdersAbs { get; set; } // AB_OrdersAB_
        public DbSet<Alpha_Harish3485> Alpha_Harish3485 { get; set; } // Harish3485
        public DbSet<Alpha_Workflow> Alpha_Workflows { get; set; } // workflow
        public DbSet<AlphaWorkflowSynonym> AlphaWorkflowSynonyms { get; set; } // alpha_workflow_synonym
        public DbSet<App_UserFacilityServiceRole> App_UserFacilityServiceRoles { get; set; } // UserFacilityServiceRole
        public DbSet<AppUser> AppUsers { get; set; } // AppUser
        public DbSet<Attendee> Attendees { get; set; } // Attendee
        public DbSet<BatchTest> BatchTests { get; set; } // BatchTest
        public DbSet<Beta_Harish3485> Beta_Harish3485 { get; set; } // Harish3485
        public DbSet<Beta_ToAlpha> Beta_ToAlphas { get; set; } // ToAlpha
        public DbSet<Beta_Workflow> Beta_Workflows { get; set; } // workflow
        public DbSet<Bitfiddlerallcap> Bitfiddlerallcaps { get; set; } // BITFIDDLERALLCAPS
        public DbSet<BitFiddlerCategoRy> BitFiddlerCategoRies { get; set; } // BitFiddlerCATEGORIES
        public DbSet<BitFiddlerCurrenCy> BitFiddlerCurrenCies { get; set; } // BitFiddlerCURRENCIES
        public DbSet<Blah> Blahs { get; set; } // Blah
        public DbSet<BlahBlahLinkV2> BlahBlahLinkV2 { get; set; } // BlahBlahLink_v2
        public DbSet<Blarg> Blargs { get; set; } // Blarg
        public DbSet<Burak1> Burak1 { get; set; } // Burak1
        public DbSet<Burak2> Burak2 { get; set; } // Burak2
        public DbSet<CalculatedColumnNotNull> CalculatedColumnNotNulls { get; set; } // CalculatedColumnNotNull
        public DbSet<Car> Cars { get; set; } // Car
        public DbSet<ClientCreationState> ClientCreationStates { get; set; } // ClientCreationState
        public DbSet<CmsFile> CmsFiles { get; set; } // CMS_File
        public DbSet<CmsTag> CmsTags { get; set; } // CMS_Tag
        public DbSet<CodeMeetingTopicDetail> CodeMeetingTopicDetails { get; set; } // CODE_MeetingTopicDetails
        public DbSet<CodeObject> CodeObjects { get; set; } // CodeObject
        public DbSet<CodeParamMeetingTopicDetailSource> CodeParamMeetingTopicDetailSources { get; set; } // CODE_PARAM_MeetingTopicDetailSource
        public DbSet<Colour> Colours { get; set; } // Colour
        public DbSet<ColumnNameAndType> ColumnNameAndTypes { get; set; } // ColumnNameAndTypes
        public DbSet<ComplexView> ComplexViews { get; set; } // ComplexView
        public DbSet<Country> Countries { get; set; } // Country
        public DbSet<CrossDatabaseSynonym> CrossDatabaseSynonyms { get; set; } // cross_database_synonym
        public DbSet<DateTimeDefaultTest> DateTimeDefaultTests { get; set; } // DateTimeDefaultTest
        public DbSet<dcg_RovColumnDefinition> dcg_RovColumnDefinitions { get; set; } // rov_ColumnDefinitions
        public DbSet<DefaultCheckForNull> DefaultCheckForNulls { get; set; } // DefaultCheckForNull
        public DbSet<DsOpe> DsOpes { get; set; } // DSOpe
        public DbSet<EnumsWithStringAsValue> EnumsWithStringAsValues { get; set; } // EnumsWithStringAsValue
        public DbSet<EnumTest_DaysOfWeek> EnumTest_DaysOfWeeks { get; set; } // DaysOfWeek
        public DbSet<EnumTest_OpenDay> EnumTest_OpenDays { get; set; } // OpenDays
        public DbSet<EnumWithDefaultValue> EnumWithDefaultValues { get; set; } // EnumWithDefaultValue
        public DbSet<EventProcessor> EventProcessors { get; set; } // EventProcessor
        public DbSet<EventProcessorEventFilter> EventProcessorEventFilters { get; set; } // EventProcessorEventFilter
        public DbSet<FFRS_Cv> FFRS_Cvs { get; set; } // CV
        public DbSet<FinancialInstitutionOffice> FinancialInstitutionOffices { get; set; } // FinancialInstitutionOffice
        public DbSet<FkTest_SmallDecimalTestAttribute> FkTest_SmallDecimalTestAttributes { get; set; } // SmallDecimalTestAttribute
        public DbSet<Footer> Footers { get; set; } // footer
        public DbSet<ForeignKeyIsNotEnforced> ForeignKeyIsNotEnforceds { get; set; } // ForeignKeyIsNotEnforced
        public DbSet<ForeignKeyIsNotEnforcedItem> ForeignKeyIsNotEnforcedItems { get; set; } // ForeignKeyIsNotEnforcedItem
        public DbSet<HasPrincipalKeyTestChild> HasPrincipalKeyTestChilds { get; set; } // HasPrincipalKeyTestChild
        public DbSet<HasPrincipalKeyTestParent> HasPrincipalKeyTestParents { get; set; } // HasPrincipalKeyTestParent
        public DbSet<Header> Headers { get; set; } // header
        public DbSet<HierarchyTest> HierarchyTests { get; set; } // hierarchy_test
        public DbSet<InflectorData> InflectorData { get; set; } // InflectorData
        public DbSet<InflectorStatus> InflectorStatus { get; set; } // InflectorStatus
        public DbSet<InflectorTo> InflectorTo { get; set; } // InflectorTo
        public DbSet<Issue47_Role> Issue47_Roles { get; set; } // Role
        public DbSet<Issue47_User> Issue47_Users { get; set; } // Users
        public DbSet<Issue47_UserRole> Issue47_UserRoles { get; set; } // UserRoles
        public DbSet<MultipleKey> MultipleKeys { get; set; } // MultipleKeys
        public DbSet<OneEightSix_Issue> OneEightSix_Issues { get; set; } // Issue
        public DbSet<OneEightSix_UploadedFile> OneEightSix_UploadedFiles { get; set; } // UploadedFile
        public DbSet<PeriodTable> PeriodTables { get; set; } // Period.Table
        public DbSet<PeriodTestTable> PeriodTestTables { get; set; } // PeriodTestTable
        public DbSet<Person> People { get; set; } // Person
        public DbSet<PersonPost> PersonPosts { get; set; } // PersonPosts
        public DbSet<PkOrdinalTest> PkOrdinalTests { get; set; } // pk_ordinal_test
        public DbSet<PropertyTypesToAdd> PropertyTypesToAdds { get; set; } // PropertyTypesToAdd
        public DbSet<SequenceTest> SequenceTests { get; set; } // SequenceTest
        public DbSet<SequenceTestPartTwo> SequenceTestPartTwoes { get; set; } // SequenceTestPartTwo
        public DbSet<SmallDecimalTest> SmallDecimalTests { get; set; } // SmallDecimalTest
        public DbSet<SmallDecimalTestView> SmallDecimalTestViews { get; set; } // SmallDecimalTestView
        public DbSet<Stafford_Boo> Stafford_Boos { get; set; } // Boo
        public DbSet<Stafford_ComputedColumn> Stafford_ComputedColumns { get; set; } // ComputedColumns
        public DbSet<Stafford_Foo> Stafford_Foos { get; set; } // Foo
        public DbSet<Synonyms_Child> Synonyms_Children { get; set; } // Child
        public DbSet<Synonyms_Parent> Synonyms_Parents { get; set; } // Parent
        public DbSet<TableA> TableAs { get; set; } // TableA
        public DbSet<TableB> TableBs { get; set; } // TableB
        public DbSet<TableWithDuplicateColumnName> TableWithDuplicateColumnNames { get; set; } // table with duplicate column names
        public DbSet<TableWithMultiplePeriod> TableWithMultiplePeriods { get; set; } // table.with.multiple.periods
        public DbSet<TableWithSpace> TableWithSpaces { get; set; } // table with space
        public DbSet<TableWithSpaceAndInColumn> TableWithSpaceAndInColumns { get; set; } // table with space and in columns
        public DbSet<TableWithSpaceInColumnOnly> TableWithSpaceInColumnOnlies { get; set; } // TableWithSpaceInColumnOnly
        public DbSet<TadeuszSobol> TadeuszSobols { get; set; } // TadeuszSobol
        public DbSet<Task1> Task1 { get; set; } // Task
        public DbSet<TblOrder> TblOrders { get; set; } // tblOrders
        public DbSet<TblOrderError> TblOrderErrors { get; set; } // tblOrderErrors
        public DbSet<TblOrderErrorsAb> TblOrderErrorsAbs { get; set; } // tblOrderErrorsAB_
        public DbSet<TblOrderLine> TblOrderLines { get; set; } // tblOrderLines
        public DbSet<TemporalDepartment> TemporalDepartments { get; set; } // TemporalDepartment
        public DbSet<TemporalDepartmentHistory> TemporalDepartmentHistories { get; set; } // TemporalDepartmentHistory
        public DbSet<ThisIsMemoryOptimised> ThisIsMemoryOptimiseds { get; set; } // ThisIsMemoryOptimised
        public DbSet<Ticket> Tickets { get; set; } // Ticket
        public DbSet<TimestampNotNull> TimestampNotNulls { get; set; } // TimestampNotNull
        public DbSet<TimestampNullable> TimestampNullables { get; set; } // TimestampNullable
        public DbSet<Token> Tokens { get; set; } // Token
        public DbSet<User> Users { get; set; } // User
        public DbSet<User309> User309 { get; set; } // User309
        public DbSet<UserDocument> UserDocuments { get; set; } // User_Document
        public DbSet<Versioned> Versioneds { get; set; } // Versioned
        public DbSet<VersionedNullable> VersionedNullables { get; set; } // VersionedNullable
        public DbSet<ViewWithMultiplePeriod> ViewWithMultiplePeriods { get; set; } // view.with.multiple.periods
        public DbSet<ViewWithSpace> ViewWithSpaces { get; set; } // view with space
        public DbSet<WVN_Article> WVN_Articles { get; set; } // Articles
        public DbSet<Брендытовара> Брендытовара { get; set; } // Бренды товара

        public FakeEfrpgTestDbContext()
        {
            _changeTracker = null;
            _configuration = null;
            _database = null;

            A = new FakeDbSet<A>("AId");
            Aarefs = new FakeDbSet<Aaref>("C1", "C2");
            AbOrderLinesAbs = new FakeDbSet<AbOrderLinesAb>("Id");
            AbOrdersAbs = new FakeDbSet<AbOrdersAb>("Id");
            Alpha_Harish3485 = new FakeDbSet<Alpha_Harish3485>("Id");
            Alpha_Workflows = new FakeDbSet<Alpha_Workflow>("Id");
            AlphaWorkflowSynonyms = new FakeDbSet<AlphaWorkflowSynonym>("Id");
            App_UserFacilityServiceRoles = new FakeDbSet<App_UserFacilityServiceRole>("UserId", "AppId", "FsrId");
            AppUsers = new FakeDbSet<AppUser>("Id");
            Attendees = new FakeDbSet<Attendee>("AttendeeId");
            BatchTests = new FakeDbSet<BatchTest>("Code");
            Beta_Harish3485 = new FakeDbSet<Beta_Harish3485>("Id");
            Beta_ToAlphas = new FakeDbSet<Beta_ToAlpha>("Id");
            Beta_Workflows = new FakeDbSet<Beta_Workflow>("Id");
            Bitfiddlerallcaps = new FakeDbSet<Bitfiddlerallcap>("Id");
            BitFiddlerCategoRies = new FakeDbSet<BitFiddlerCategoRy>("Id");
            BitFiddlerCurrenCies = new FakeDbSet<BitFiddlerCurrenCy>("Id");
            Blahs = new FakeDbSet<Blah>("BlahId");
            BlahBlahLinkV2 = new FakeDbSet<BlahBlahLinkV2>("BlahId", "BlahId2");
            Blargs = new FakeDbSet<Blarg>("BlargId");
            Burak1 = new FakeDbSet<Burak1>("Id");
            Burak2 = new FakeDbSet<Burak2>("Id");
            CalculatedColumnNotNulls = new FakeDbSet<CalculatedColumnNotNull>("Id");
            Cars = new FakeDbSet<Car>("Id");
            ClientCreationStates = new FakeDbSet<ClientCreationState>("Id");
            CmsFiles = new FakeDbSet<CmsFile>("FileId");
            CmsTags = new FakeDbSet<CmsTag>("TagId");
            CodeMeetingTopicDetails = new FakeDbSet<CodeMeetingTopicDetail>("Id");
            CodeObjects = new FakeDbSet<CodeObject>("CodeObjectNo");
            CodeParamMeetingTopicDetailSources = new FakeDbSet<CodeParamMeetingTopicDetailSource>("Id");
            Colours = new FakeDbSet<Colour>("Id");
            ColumnNameAndTypes = new FakeDbSet<ColumnNameAndType>("C36");
            ComplexViews = new FakeDbSet<ComplexView>("LicenseType");
            Countries = new FakeDbSet<Country>("CountryId");
            CrossDatabaseSynonyms = new FakeDbSet<CrossDatabaseSynonym>("Id");
            DateTimeDefaultTests = new FakeDbSet<DateTimeDefaultTest>("Id");
            dcg_RovColumnDefinitions = new FakeDbSet<dcg_RovColumnDefinition>("TableName");
            DefaultCheckForNulls = new FakeDbSet<DefaultCheckForNull>("Id");
            DsOpes = new FakeDbSet<DsOpe>("Id");
            EnumsWithStringAsValues = new FakeDbSet<EnumsWithStringAsValue>("EnumName", "Value");
            EnumTest_DaysOfWeeks = new FakeDbSet<EnumTest_DaysOfWeek>("TypeId");
            EnumTest_OpenDays = new FakeDbSet<EnumTest_OpenDay>("Id");
            EnumWithDefaultValues = new FakeDbSet<EnumWithDefaultValue>("Id");
            EventProcessors = new FakeDbSet<EventProcessor>("Id");
            EventProcessorEventFilters = new FakeDbSet<EventProcessorEventFilter>("Id");
            FFRS_Cvs = new FakeDbSet<FFRS_Cv>("BatchUid", "Cvid");
            FinancialInstitutionOffices = new FakeDbSet<FinancialInstitutionOffice>("FinancialInstitutionCode");
            FkTest_SmallDecimalTestAttributes = new FakeDbSet<FkTest_SmallDecimalTestAttribute>("FkId");
            Footers = new FakeDbSet<Footer>("Id");
            ForeignKeyIsNotEnforceds = new FakeDbSet<ForeignKeyIsNotEnforced>("Id");
            ForeignKeyIsNotEnforcedItems = new FakeDbSet<ForeignKeyIsNotEnforcedItem>("Id");
            HasPrincipalKeyTestChilds = new FakeDbSet<HasPrincipalKeyTestChild>("Id");
            HasPrincipalKeyTestParents = new FakeDbSet<HasPrincipalKeyTestParent>("Id");
            Headers = new FakeDbSet<Header>("Id", "AnotherId");
            HierarchyTests = new FakeDbSet<HierarchyTest>("Id");
            InflectorData = new FakeDbSet<InflectorData>("Id");
            InflectorStatus = new FakeDbSet<InflectorStatus>("Id");
            InflectorTo = new FakeDbSet<InflectorTo>("Id");
            Issue47_Roles = new FakeDbSet<Issue47_Role>("RoleId");
            Issue47_Users = new FakeDbSet<Issue47_User>("UserId");
            Issue47_UserRoles = new FakeDbSet<Issue47_UserRole>("UserRoleId");
            MultipleKeys = new FakeDbSet<MultipleKey>("UserId", "FavouriteColourId", "BestHolidayTypeId");
            OneEightSix_Issues = new FakeDbSet<OneEightSix_Issue>("Id");
            OneEightSix_UploadedFiles = new FakeDbSet<OneEightSix_UploadedFile>("Id");
            PeriodTables = new FakeDbSet<PeriodTable>("Id");
            PeriodTestTables = new FakeDbSet<PeriodTestTable>("Id");
            People = new FakeDbSet<Person>("Id");
            PersonPosts = new FakeDbSet<PersonPost>("Id");
            PkOrdinalTests = new FakeDbSet<PkOrdinalTest>("C3", "C1");
            PropertyTypesToAdds = new FakeDbSet<PropertyTypesToAdd>("Id");
            SequenceTests = new FakeDbSet<SequenceTest>("Id");
            SequenceTestPartTwoes = new FakeDbSet<SequenceTestPartTwo>("Id");
            SmallDecimalTests = new FakeDbSet<SmallDecimalTest>("Id");
            SmallDecimalTestViews = new FakeDbSet<SmallDecimalTestView>("FkId", "Description");
            Stafford_Boos = new FakeDbSet<Stafford_Boo>("Id");
            Stafford_ComputedColumns = new FakeDbSet<Stafford_ComputedColumn>("Id");
            Stafford_Foos = new FakeDbSet<Stafford_Foo>("Id");
            Synonyms_Children = new FakeDbSet<Synonyms_Child>("ChildId");
            Synonyms_Parents = new FakeDbSet<Synonyms_Parent>("ParentId");
            TableAs = new FakeDbSet<TableA>("TableAId");
            TableBs = new FakeDbSet<TableB>("TableBId", "TableAId");
            TableWithDuplicateColumnNames = new FakeDbSet<TableWithDuplicateColumnName>("Id");
            TableWithMultiplePeriods = new FakeDbSet<TableWithMultiplePeriod>("Id");
            TableWithSpaces = new FakeDbSet<TableWithSpace>("Id");
            TableWithSpaceAndInColumns = new FakeDbSet<TableWithSpaceAndInColumn>("IdValue");
            TableWithSpaceInColumnOnlies = new FakeDbSet<TableWithSpaceInColumnOnly>("IdValue");
            TadeuszSobols = new FakeDbSet<TadeuszSobol>("Id");
            Task1 = new FakeDbSet<Task1>("TaskId");
            TblOrders = new FakeDbSet<TblOrder>("Id");
            TblOrderErrors = new FakeDbSet<TblOrderError>("Id");
            TblOrderErrorsAbs = new FakeDbSet<TblOrderErrorsAb>("Id");
            TblOrderLines = new FakeDbSet<TblOrderLine>("Id");
            TemporalDepartments = new FakeDbSet<TemporalDepartment>("DeptId");
            TemporalDepartmentHistories = new FakeDbSet<TemporalDepartmentHistory>("DeptId", "DeptName", "SysStartTime", "SysEndTime");
            ThisIsMemoryOptimiseds = new FakeDbSet<ThisIsMemoryOptimised>("Id");
            Tickets = new FakeDbSet<Ticket>("Id");
            TimestampNotNulls = new FakeDbSet<TimestampNotNull>("Id");
            TimestampNullables = new FakeDbSet<TimestampNullable>("Id");
            Tokens = new FakeDbSet<Token>("Id");
            Users = new FakeDbSet<User>("Id");
            User309 = new FakeDbSet<User309>("UserId");
            UserDocuments = new FakeDbSet<UserDocument>("Id");
            Versioneds = new FakeDbSet<Versioned>("Id");
            VersionedNullables = new FakeDbSet<VersionedNullable>("Id");
            ViewWithMultiplePeriods = new FakeDbSet<ViewWithMultiplePeriod>("FkId", "Description");
            ViewWithSpaces = new FakeDbSet<ViewWithSpace>("CodeObjectNo", "Type", "EName", "IsObject");
            WVN_Articles = new FakeDbSet<WVN_Article>("PkArticle");
            Брендытовара = new FakeDbSet<Брендытовара>("Кодбренда");

        }

        public int SaveChangesCount { get; private set; }
        public int SaveChanges()
        {
            ++SaveChangesCount;
            return 1;
        }

        public Task<int> SaveChangesAsync()
        {
            ++SaveChangesCount;
            return Task<int>.Factory.StartNew(() => 1);
        }

        public Task<int> SaveChangesAsync(CancellationToken cancellationToken)
        {
            ++SaveChangesCount;
            return Task<int>.Factory.StartNew(() => 1, cancellationToken);
        }

        protected virtual void Dispose(bool disposing)
        {
        }

        public void Dispose()
        {
            Dispose(true);
        }

        private DbChangeTracker _changeTracker;

        public DbChangeTracker ChangeTracker { get { return _changeTracker; } }

        private DbContextConfiguration _configuration;

        public DbContextConfiguration Configuration { get { return _configuration; } }

        private Database _database;

        public Database Database { get { return _database; } }

        public DbEntityEntry<TEntity> Entry<TEntity>(TEntity entity) where TEntity : class
        {
            throw new NotImplementedException();
        }

        public DbEntityEntry Entry(object entity)
        {
            throw new NotImplementedException();
        }

        public IEnumerable<DbEntityValidationResult> GetValidationErrors()
        {
            throw new NotImplementedException();
        }

        public DbSet Set(Type entityType)
        {
            throw new NotImplementedException();
        }

        public DbSet<TEntity> Set<TEntity>() where TEntity : class
        {
            throw new NotImplementedException();
        }

        public override string ToString()
        {
            throw new NotImplementedException();
        }

        // Stored Procedures

        public int AddTwoValues(int? a = null, int? b = null)
        {
            return 0;
        }

        public Task<int> AddTwoValuesAsync(int? a = null, int? b = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            return Task.FromResult(0);
        }

        public int AddTwoValuesWithResult(int? a, int? b, out int? result, out int? result2)
        {
            result = default(int);
            result2 = default(int);
            return 0;
        }

        // AddTwoValuesWithResultAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public int Alpha_Overclock(DateTime? parameter = null)
        {
            return 0;
        }

        public Task<int> Alpha_OverclockAsync(DateTime? parameter = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            return Task.FromResult(0);
        }

        public int App_UspCmtUserFsrUpdate(int? userId, int? fsrId, out int? ufsrId)
        {
            ufsrId = default(int);
            return 0;
        }

        // App_UspCmtUserFsrUpdateAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public List<ASimpleExampleReturnModel> ASimpleExample()
        {
            int procResult;
            return ASimpleExample(out procResult);
        }

        public List<ASimpleExampleReturnModel> ASimpleExample(out int procResult)
        {
            procResult = 0;
            return new List<ASimpleExampleReturnModel>();
        }

        public Task<List<ASimpleExampleReturnModel>> ASimpleExampleAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            int procResult;
            return Task.FromResult(ASimpleExample(out procResult));
        }

        public int Beta_Overclock(DateTime? parameter = null)
        {
            return 0;
        }

        public Task<int> Beta_OverclockAsync(DateTime? parameter = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            return Task.FromResult(0);
        }

        public C182Test2ReturnModel C182Test2(int? flag = null)
        {
            int procResult;
            return C182Test2(flag, out procResult);
        }

        public C182Test2ReturnModel C182Test2(int? flag, out int procResult)
        {
            procResult = 0;
            return new C182Test2ReturnModel();
        }

        // C182Test2Async() cannot be created due to having out parameters, or is relying on the procedure result (C182Test2ReturnModel)

        public List<CheckIfApplicationIsCompleteReturnModel> CheckIfApplicationIsComplete(int? applicationId, out bool? isApplicationComplete)
        {
            int procResult;
            return CheckIfApplicationIsComplete(applicationId, out isApplicationComplete, out procResult);
        }

        public List<CheckIfApplicationIsCompleteReturnModel> CheckIfApplicationIsComplete(int? applicationId, out bool? isApplicationComplete, out int procResult)
        {
            isApplicationComplete = default(bool);
            procResult = 0;
            return new List<CheckIfApplicationIsCompleteReturnModel>();
        }

        // CheckIfApplicationIsCompleteAsync() cannot be created due to having out parameters, or is relying on the procedure result (List<CheckIfApplicationIsCompleteReturnModel>)

        public List<ColourPivotReturnModel> ColourPivot()
        {
            int procResult;
            return ColourPivot(out procResult);
        }

        public List<ColourPivotReturnModel> ColourPivot(out int procResult)
        {
            procResult = 0;
            return new List<ColourPivotReturnModel>();
        }

        public Task<List<ColourPivotReturnModel>> ColourPivotAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            int procResult;
            return Task.FromResult(ColourPivot(out procResult));
        }

        public int ColumnNameAndTypesProc()
        {
            return 0;
        }

        public Task<int> ColumnNameAndTypesProcAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            return Task.FromResult(0);
        }

        public int ConvertToString(int? someValue, out string someString)
        {
            someString = default(string);
            return 0;
        }

        // ConvertToStringAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public List<DboProcDataFromFfrsReturnModel> DboProcDataFromFfrs(int? maxId = null)
        {
            int procResult;
            return DboProcDataFromFfrs(maxId, out procResult);
        }

        public List<DboProcDataFromFfrsReturnModel> DboProcDataFromFfrs(int? maxId, out int procResult)
        {
            procResult = 0;
            return new List<DboProcDataFromFfrsReturnModel>();
        }

        public Task<List<DboProcDataFromFfrsReturnModel>> DboProcDataFromFfrsAsync(int? maxId = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            int procResult;
            return Task.FromResult(DboProcDataFromFfrs(maxId, out procResult));
        }

        public List<DboProcDataFromFfrsAndDboReturnModel> DboProcDataFromFfrsAndDbo()
        {
            int procResult;
            return DboProcDataFromFfrsAndDbo(out procResult);
        }

        public List<DboProcDataFromFfrsAndDboReturnModel> DboProcDataFromFfrsAndDbo(out int procResult)
        {
            procResult = 0;
            return new List<DboProcDataFromFfrsAndDboReturnModel>();
        }

        public Task<List<DboProcDataFromFfrsAndDboReturnModel>> DboProcDataFromFfrsAndDboAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            int procResult;
            return Task.FromResult(DboProcDataFromFfrsAndDbo(out procResult));
        }

        public List<DsOpeProcReturnModel> DsOpeProc()
        {
            int procResult;
            return DsOpeProc(out procResult);
        }

        public List<DsOpeProcReturnModel> DsOpeProc(out int procResult)
        {
            procResult = 0;
            return new List<DsOpeProcReturnModel>();
        }

        public Task<List<DsOpeProcReturnModel>> DsOpeProcAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            int procResult;
            return Task.FromResult(DsOpeProc(out procResult));
        }

        public List<FFRS_CvDataReturnModel> FFRS_CvData(int? maxId = null)
        {
            int procResult;
            return FFRS_CvData(maxId, out procResult);
        }

        public List<FFRS_CvDataReturnModel> FFRS_CvData(int? maxId, out int procResult)
        {
            procResult = 0;
            return new List<FFRS_CvDataReturnModel>();
        }

        public Task<List<FFRS_CvDataReturnModel>> FFRS_CvDataAsync(int? maxId = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            int procResult;
            return Task.FromResult(FFRS_CvData(maxId, out procResult));
        }

        public List<FFRS_DataFromDboReturnModel> FFRS_DataFromDbo()
        {
            int procResult;
            return FFRS_DataFromDbo(out procResult);
        }

        public List<FFRS_DataFromDboReturnModel> FFRS_DataFromDbo(out int procResult)
        {
            procResult = 0;
            return new List<FFRS_DataFromDboReturnModel>();
        }

        public Task<List<FFRS_DataFromDboReturnModel>> FFRS_DataFromDboAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            int procResult;
            return Task.FromResult(FFRS_DataFromDbo(out procResult));
        }

        public List<FFRS_DataFromDboAndFfrsReturnModel> FFRS_DataFromDboAndFfrs()
        {
            int procResult;
            return FFRS_DataFromDboAndFfrs(out procResult);
        }

        public List<FFRS_DataFromDboAndFfrsReturnModel> FFRS_DataFromDboAndFfrs(out int procResult)
        {
            procResult = 0;
            return new List<FFRS_DataFromDboAndFfrsReturnModel>();
        }

        public Task<List<FFRS_DataFromDboAndFfrsReturnModel>> FFRS_DataFromDboAndFfrsAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            int procResult;
            return Task.FromResult(FFRS_DataFromDboAndFfrs(out procResult));
        }

        public List<FkTest_HelloReturnModel> FkTest_Hello()
        {
            int procResult;
            return FkTest_Hello(out procResult);
        }

        public List<FkTest_HelloReturnModel> FkTest_Hello(out int procResult)
        {
            procResult = 0;
            return new List<FkTest_HelloReturnModel>();
        }

        public Task<List<FkTest_HelloReturnModel>> FkTest_HelloAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            int procResult;
            return Task.FromResult(FkTest_Hello(out procResult));
        }

        public List<GetSmallDecimalTestReturnModel> GetSmallDecimalTest(int? maxId = null)
        {
            int procResult;
            return GetSmallDecimalTest(maxId, out procResult);
        }

        public List<GetSmallDecimalTestReturnModel> GetSmallDecimalTest(int? maxId, out int procResult)
        {
            procResult = 0;
            return new List<GetSmallDecimalTestReturnModel>();
        }

        public Task<List<GetSmallDecimalTestReturnModel>> GetSmallDecimalTestAsync(int? maxId = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            int procResult;
            return Task.FromResult(GetSmallDecimalTest(maxId, out procResult));
        }

        public int InsertRecord(string data, out int? insertedId)
        {
            insertedId = default(int);
            return 0;
        }

        // InsertRecordAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public int InsertRecordThree(string data, out int? insertedId, int? someId, out int? anotherInsertedId)
        {
            insertedId = default(int);
            anotherInsertedId = default(int);
            return 0;
        }

        // InsertRecordThreeAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public int InsertRecordTwo(string data, out int? insertedId, out int? anotherInsertedId)
        {
            insertedId = default(int);
            anotherInsertedId = default(int);
            return 0;
        }

        // InsertRecordTwoAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public int MinTripSequenceStart(out DateTime? minTripSequenceStartParam)
        {
            minTripSequenceStartParam = default(DateTime);
            return 0;
        }

        // MinTripSequenceStartAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public int MinTripSequenceStartNull(out DateTime? minTripSequenceStartParam)
        {
            minTripSequenceStartParam = default(DateTime);
            return 0;
        }

        // MinTripSequenceStartNullAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public int NvarcharTest(string maxOutputParam, string normalOutputParam)
        {
            return 0;
        }

        public Task<int> NvarcharTestAsync(string maxOutputParam, string normalOutputParam, CancellationToken cancellationToken = default(CancellationToken))
        {
            return Task.FromResult(0);
        }

        public int Omega_Overclock(DateTime? parameter = null)
        {
            return 0;
        }

        public Task<int> Omega_OverclockAsync(DateTime? parameter = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            return Task.FromResult(0);
        }

        public int ProcTestDecimalOutput(out decimal? perfectNumber)
        {
            perfectNumber = default(decimal);
            return 0;
        }

        // ProcTestDecimalOutputAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public int ProcTestDecimalOutputV2(out decimal? perfectNumber)
        {
            perfectNumber = default(decimal);
            return 0;
        }

        // ProcTestDecimalOutputV2Async() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public int ProcTestDecimalOutputV3Default(out decimal? perfectNumber)
        {
            perfectNumber = default(decimal);
            return 0;
        }

        // ProcTestDecimalOutputV3DefaultAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public int SpatialTypesNoParams()
        {
            return 0;
        }

        public Task<int> SpatialTypesNoParamsAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            return Task.FromResult(0);
        }

        public int SpatialTypesWithParams(DbGeometry geometry, DbGeography geography)
        {
            return 0;
        }

        public Task<int> SpatialTypesWithParamsAsync(DbGeometry geometry, DbGeography geography, CancellationToken cancellationToken = default(CancellationToken))
        {
            return Task.FromResult(0);
        }

        public List<StpMultipleIdenticalResultsReturnModel> StpMultipleIdenticalResults(int? someVar = null)
        {
            int procResult;
            return StpMultipleIdenticalResults(someVar, out procResult);
        }

        public List<StpMultipleIdenticalResultsReturnModel> StpMultipleIdenticalResults(int? someVar, out int procResult)
        {
            procResult = 0;
            return new List<StpMultipleIdenticalResultsReturnModel>();
        }

        public Task<List<StpMultipleIdenticalResultsReturnModel>> StpMultipleIdenticalResultsAsync(int? someVar = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            int procResult;
            return Task.FromResult(StpMultipleIdenticalResults(someVar, out procResult));
        }

        public StpMultipleMultipleResultsWithParamsReturnModel StpMultipleMultipleResultsWithParams(int? firstVal = null, int? secondVal = null, int? thirdVal = null)
        {
            int procResult;
            return StpMultipleMultipleResultsWithParams(firstVal, secondVal, thirdVal, out procResult);
        }

        public StpMultipleMultipleResultsWithParamsReturnModel StpMultipleMultipleResultsWithParams(int? firstVal, int? secondVal, int? thirdVal, out int procResult)
        {
            procResult = 0;
            return new StpMultipleMultipleResultsWithParamsReturnModel();
        }

        // StpMultipleMultipleResultsWithParamsAsync() cannot be created due to having out parameters, or is relying on the procedure result (StpMultipleMultipleResultsWithParamsReturnModel)

        public StpMultipleResultsReturnModel StpMultipleResults()
        {
            int procResult;
            return StpMultipleResults(out procResult);
        }

        public StpMultipleResultsReturnModel StpMultipleResults(out int procResult)
        {
            procResult = 0;
            return new StpMultipleResultsReturnModel();
        }

        // StpMultipleResultsAsync() cannot be created due to having out parameters, or is relying on the procedure result (StpMultipleResultsReturnModel)

        public StpMultipleResultsWithParamsReturnModel StpMultipleResultsWithParams(int? firstVal = null, int? secondVal = null)
        {
            int procResult;
            return StpMultipleResultsWithParams(firstVal, secondVal, out procResult);
        }

        public StpMultipleResultsWithParamsReturnModel StpMultipleResultsWithParams(int? firstVal, int? secondVal, out int procResult)
        {
            procResult = 0;
            return new StpMultipleResultsWithParamsReturnModel();
        }

        // StpMultipleResultsWithParamsAsync() cannot be created due to having out parameters, or is relying on the procedure result (StpMultipleResultsWithParamsReturnModel)

        public List<StpNoParamsTestReturnModel> StpNoParamsTest()
        {
            int procResult;
            return StpNoParamsTest(out procResult);
        }

        public List<StpNoParamsTestReturnModel> StpNoParamsTest(out int procResult)
        {
            procResult = 0;
            return new List<StpNoParamsTestReturnModel>();
        }

        public Task<List<StpNoParamsTestReturnModel>> StpNoParamsTestAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            int procResult;
            return Task.FromResult(StpNoParamsTest(out procResult));
        }

        public int StpNoReturnFields()
        {
            return 0;
        }

        public Task<int> StpNoReturnFieldsAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            return Task.FromResult(0);
        }

        public List<StpNullableParamsTestReturnModel> StpNullableParamsTest(int? aVal = null, int? bVal = null)
        {
            int procResult;
            return StpNullableParamsTest(aVal, bVal, out procResult);
        }

        public List<StpNullableParamsTestReturnModel> StpNullableParamsTest(int? aVal, int? bVal, out int procResult)
        {
            procResult = 0;
            return new List<StpNullableParamsTestReturnModel>();
        }

        public Task<List<StpNullableParamsTestReturnModel>> StpNullableParamsTestAsync(int? aVal = null, int? bVal = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            int procResult;
            return Task.FromResult(StpNullableParamsTest(aVal, bVal, out procResult));
        }

        public List<StpTestReturnModel> StpTest(string strDateFrom, string strDateTo, out bool? retBool)
        {
            int procResult;
            return StpTest(strDateFrom, strDateTo, out retBool, out procResult);
        }

        public List<StpTestReturnModel> StpTest(string strDateFrom, string strDateTo, out bool? retBool, out int procResult)
        {
            retBool = default(bool);
            procResult = 0;
            return new List<StpTestReturnModel>();
        }

        // StpTestAsync() cannot be created due to having out parameters, or is relying on the procedure result (List<StpTestReturnModel>)

        public List<StpTestUnderscoreTestReturnModel> StpTestUnderscoreTest(string strDateFrom, string strDateTo)
        {
            int procResult;
            return StpTestUnderscoreTest(strDateFrom, strDateTo, out procResult);
        }

        public List<StpTestUnderscoreTestReturnModel> StpTestUnderscoreTest(string strDateFrom, string strDateTo, out int procResult)
        {
            procResult = 0;
            return new List<StpTestUnderscoreTestReturnModel>();
        }

        public Task<List<StpTestUnderscoreTestReturnModel>> StpTestUnderscoreTestAsync(string strDateFrom, string strDateTo, CancellationToken cancellationToken = default(CancellationToken))
        {
            int procResult;
            return Task.FromResult(StpTestUnderscoreTest(strDateFrom, strDateTo, out procResult));
        }

        public int StupidStoredProcedureParams(string reqType, short? dept = null, short? @class = null, short? item = null)
        {
            return 0;
        }

        public Task<int> StupidStoredProcedureParamsAsync(string reqType, short? dept = null, short? @class = null, short? item = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            return Task.FromResult(0);
        }

        public int StupidStoredProcedureParams2(string @override, short? @readonly = null, short? @class = null, short? @enum = null)
        {
            return 0;
        }

        public Task<int> StupidStoredProcedureParams2Async(string @override, short? @readonly = null, short? @class = null, short? @enum = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            return Task.FromResult(0);
        }

        public List<Synonyms_SimpleStoredProcReturnModel> Synonyms_SimpleStoredProc(int? inputInt = null)
        {
            int procResult;
            return Synonyms_SimpleStoredProc(inputInt, out procResult);
        }

        public List<Synonyms_SimpleStoredProcReturnModel> Synonyms_SimpleStoredProc(int? inputInt, out int procResult)
        {
            procResult = 0;
            return new List<Synonyms_SimpleStoredProcReturnModel>();
        }

        public Task<List<Synonyms_SimpleStoredProcReturnModel>> Synonyms_SimpleStoredProcAsync(int? inputInt = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            int procResult;
            return Task.FromResult(Synonyms_SimpleStoredProc(inputInt, out procResult));
        }

        public List<TestReturnStringReturnModel> TestReturnString()
        {
            int procResult;
            return TestReturnString(out procResult);
        }

        public List<TestReturnStringReturnModel> TestReturnString(out int procResult)
        {
            procResult = 0;
            return new List<TestReturnStringReturnModel>();
        }

        public Task<List<TestReturnStringReturnModel>> TestReturnStringAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            int procResult;
            return Task.FromResult(TestReturnString(out procResult));
        }

        public int ThisHasMixedOutParameters(DateTime? foo, out int? firstOutParam, DateTime? bar, out int? secondOutParam, DateTime? baz = null)
        {
            firstOutParam = default(int);
            secondOutParam = default(int);
            return 0;
        }

        // ThisHasMixedOutParametersAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public int UserDefinedTypeSampleStoredProc(int? a, DataTable type, int? b = null)
        {
            return 0;
        }

        public Task<int> UserDefinedTypeSampleStoredProcAsync(int? a, DataTable type, int? b = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            return Task.FromResult(0);
        }

        public List<XmlDataV1ReturnModel> XmlDataV1()
        {
            int procResult;
            return XmlDataV1(out procResult);
        }

        public List<XmlDataV1ReturnModel> XmlDataV1(out int procResult)
        {
            procResult = 0;
            return new List<XmlDataV1ReturnModel>();
        }

        public Task<List<XmlDataV1ReturnModel>> XmlDataV1Async(CancellationToken cancellationToken = default(CancellationToken))
        {
            int procResult;
            return Task.FromResult(XmlDataV1(out procResult));
        }

        public int XmlDataV2()
        {
            return 0;
        }

        public Task<int> XmlDataV2Async(CancellationToken cancellationToken = default(CancellationToken))
        {
            return Task.FromResult(0);
        }

        // Table Valued Functions

        [DbFunction("EfrpgTestDbContext", "182_test1")]
        public IQueryable<C182Test1ReturnModel> C182Test1(int? test = null)
        {
            return new List<C182Test1ReturnModel>().AsQueryable();
        }

        [DbFunction("EfrpgTestDbContext", "CsvToInt")]
        public IQueryable<CsvToIntReturnModel> CsvToInt(string array, string array2)
        {
            return new List<CsvToIntReturnModel>().AsQueryable();
        }

        [DbFunction("EfrpgTestDbContext", "CsvToIntWithSchema")]
        public IQueryable<CustomSchema_CsvToIntWithSchemaReturnModel> CustomSchema_CsvToIntWithSchema(string array, string array2)
        {
            return new List<CustomSchema_CsvToIntWithSchemaReturnModel>().AsQueryable();
        }

        [DbFunction("EfrpgTestDbContext", "CsvToInt2")]
        public IQueryable<FFRS_CsvToInt2ReturnModel> FFRS_CsvToInt2(string array, string array2)
        {
            return new List<FFRS_CsvToInt2ReturnModel>().AsQueryable();
        }

        // Scalar Valued Functions

        // dbo.udfNetSale
        public decimal UdfNetSale(int? quantity = null, decimal? listPrice = null, decimal? discount = null)
        {
            return default(decimal);
        }
    }

    #endregion

    #region Fake DbSet

    // ************************************************************************
    // Fake DbSet
    // Implementing Find:
    //      The Find method is difficult to implement in a generic fashion. If
    //      you need to test code that makes use of the Find method it is
    //      easiest to create a test DbSet for each of the entity types that
    //      need to support find. You can then write logic to find that
    //      particular type of entity, as shown below:
    //      public class FakeBlogDbSet : FakeDbSet<Blog>
    //      {
    //          public override Blog Find(params object[] keyValues)
    //          {
    //              var id = (int) keyValues.Single();
    //              return this.SingleOrDefault(b => b.BlogId == id);
    //          }
    //      }
    //      Read more about it here: https://msdn.microsoft.com/en-us/data/dn314431.aspx
    public class FakeDbSet<TEntity> : DbSet<TEntity>, IQueryable, IEnumerable<TEntity>, IDbAsyncEnumerable<TEntity> where TEntity : class
    {
        private readonly PropertyInfo[] _primaryKeys;
        private readonly ObservableCollection<TEntity> _data;
        private readonly IQueryable _query;

        public FakeDbSet()
        {
            _data = new ObservableCollection<TEntity>();
            _query = _data.AsQueryable();
        }

        public FakeDbSet(params string[] primaryKeys)
        {
            _primaryKeys = typeof(TEntity).GetProperties().Where(x => primaryKeys.Contains(x.Name)).ToArray();
            _data = new ObservableCollection<TEntity>();
            _query = _data.AsQueryable();
        }

        public override TEntity Find(params object[] keyValues)
        {
            if (_primaryKeys == null)
                throw new ArgumentException("No primary keys defined");
            if (keyValues.Length != _primaryKeys.Length)
                throw new ArgumentException("Incorrect number of keys passed to Find method");

            var keyQuery = this.AsQueryable();
            keyQuery = keyValues
                .Select((t, i) => i)
                .Aggregate(keyQuery,
                    (current, x) =>
                        current.Where(entity => _primaryKeys[x].GetValue(entity, null).Equals(keyValues[x])));

            return keyQuery.SingleOrDefault();
        }

        public override Task<TEntity> FindAsync(CancellationToken cancellationToken, params object[] keyValues)
        {
            return Task<TEntity>.Factory.StartNew(() => Find(keyValues), cancellationToken);
        }

        public override Task<TEntity> FindAsync(params object[] keyValues)
        {
            return Task<TEntity>.Factory.StartNew(() => Find(keyValues));
        }

        public override IEnumerable<TEntity> AddRange(IEnumerable<TEntity> entities)
        {
            if (entities == null) throw new ArgumentNullException("entities");
            var items = entities.ToList();
            foreach (var entity in items)
            {
                _data.Add(entity);
            }
            return items;
        }

        public override TEntity Add(TEntity item)
        {
            if (item == null) throw new ArgumentNullException("item");
            _data.Add(item);
            return item;
        }

        public override IEnumerable<TEntity> RemoveRange(IEnumerable<TEntity> entities)
        {
            if (entities == null) throw new ArgumentNullException("entities");
            var items = entities.ToList();
            foreach (var entity in items)
            {
                _data.Remove(entity);
            }
            return items;
        }

        public override TEntity Remove(TEntity item)
        {
            if (item == null) throw new ArgumentNullException("item");
            _data.Remove(item);
            return item;
        }

        public override TEntity Attach(TEntity item)
        {
            if (item == null) throw new ArgumentNullException("item");
            _data.Add(item);
            return item;
        }

        public override TEntity Create()
        {
            return Activator.CreateInstance<TEntity>();
        }

        public override TDerivedEntity Create<TDerivedEntity>()
        {
            return Activator.CreateInstance<TDerivedEntity>();
        }

        public override ObservableCollection<TEntity> Local
        {
            get { return _data; }
        }

        Type IQueryable.ElementType
        {
            get { return _query.ElementType; }
        }

        Expression IQueryable.Expression
        {
            get { return _query.Expression; }
        }

        IQueryProvider IQueryable.Provider
        {
            get { return new FakeDbAsyncQueryProvider<TEntity>(_query.Provider); }
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return _data.GetEnumerator();
        }

        IEnumerator<TEntity> IEnumerable<TEntity>.GetEnumerator()
        {
            return _data.GetEnumerator();
        }

        IDbAsyncEnumerator<TEntity> IDbAsyncEnumerable<TEntity>.GetAsyncEnumerator()
        {
            return new FakeDbAsyncEnumerator<TEntity>(_data.GetEnumerator());
        }
    }

    public class FakeDbAsyncQueryProvider<TEntity> : IDbAsyncQueryProvider
    {
        private readonly IQueryProvider _inner;

        public FakeDbAsyncQueryProvider(IQueryProvider inner)
        {
            _inner = inner;
        }

        public IQueryable CreateQuery(Expression expression)
        {
            var m = expression as MethodCallExpression;
            if (m != null)
            {
                var resultType = m.Method.ReturnType; // it should be IQueryable<T>
                var tElement = resultType.GetGenericArguments()[0];
                var queryType = typeof(FakeDbAsyncEnumerable<>).MakeGenericType(tElement);
                return (IQueryable) Activator.CreateInstance(queryType, expression);
            }
            return new FakeDbAsyncEnumerable<TEntity>(expression);
        }

        public IQueryable<TElement> CreateQuery<TElement>(Expression expression)
        {
            var queryType = typeof(FakeDbAsyncEnumerable<>).MakeGenericType(typeof(TElement));
            return (IQueryable<TElement>) Activator.CreateInstance(queryType, expression);
        }

        public object Execute(Expression expression)
        {
            return _inner.Execute(expression);
        }

        public TResult Execute<TResult>(Expression expression)
        {
            return _inner.Execute<TResult>(expression);
        }

        public Task<object> ExecuteAsync(Expression expression, CancellationToken cancellationToken)
        {
            return Task.FromResult(Execute(expression));
        }

        public Task<TResult> ExecuteAsync<TResult>(Expression expression, CancellationToken cancellationToken)
        {
            return Task.FromResult(Execute<TResult>(expression));
        }
    }

    public class FakeDbAsyncEnumerable<T> : EnumerableQuery<T>, IDbAsyncEnumerable<T>, IQueryable<T>
    {
        public FakeDbAsyncEnumerable(IEnumerable<T> enumerable)
            : base(enumerable)
        { }

        public FakeDbAsyncEnumerable(Expression expression)
            : base(expression)
        { }

        public IDbAsyncEnumerator<T> GetAsyncEnumerator()
        {
            return new FakeDbAsyncEnumerator<T>(this.AsEnumerable().GetEnumerator());
        }

        IDbAsyncEnumerator IDbAsyncEnumerable.GetAsyncEnumerator()
        {
            return GetAsyncEnumerator();
        }

        IQueryProvider IQueryable.Provider
        {
            get { return new FakeDbAsyncQueryProvider<T>(this); }
        }

    }

    public class FakeDbAsyncEnumerator<T> : IDbAsyncEnumerator<T>
    {
        private readonly IEnumerator<T> _inner;

        public FakeDbAsyncEnumerator(IEnumerator<T> inner)
        {
            _inner = inner;
        }

        public void Dispose()
        {
            _inner.Dispose();
        }

        public Task<bool> MoveNextAsync(CancellationToken cancellationToken)
        {
            return Task.FromResult(_inner.MoveNext());
        }

        public T Current
        {
            get { return _inner.Current; }
        }

        object IDbAsyncEnumerator.Current
        {
            get { return Current; }
        }
    }

    #endregion

    #region POCO classes

    // A
    public class A
    {
        public int AId { get; set; } // AId (Primary key)
        public int C1 { get; set; } // C1
        public int C2 { get; set; } // C2

        // Foreign keys

        /// <summary>
        /// Parent Aaref pointed by [A].([C1], [C2]) (FK_A_A)
        /// </summary>
        public virtual Aaref Aaref { get; set; } // FK_A_A
    }

    // AAREF
    public class Aaref
    {
        public int C1 { get; set; } // C1 (Primary key)
        public int C2 { get; set; } // C2 (Primary key)
        public DateTime CreatedUtc { get; set; } // CreatedUTC

        // Reverse navigation

        /// <summary>
        /// Child A where [A].([C1], [C2]) point to this entity (FK_A_A)
        /// </summary>
        public virtual ICollection<A> A { get; set; } // A.FK_A_A

        public Aaref()
        {
            A = new List<A>();
        }
    }

    // AB_OrderLinesAB_
    public class AbOrderLinesAb
    {
        public int Id { get; set; } // ID (Primary key)
        public int OrderId { get; set; } // OrderID
        public string Sku { get; set; } // sku (length: 15)

        // Foreign keys

        /// <summary>
        /// Parent AbOrdersAb pointed by [AB_OrderLinesAB_].([OrderId]) (AB_OrderLinesAB_FK)
        /// </summary>
        public virtual AbOrdersAb AbOrdersAb { get; set; } // AB_OrderLinesAB_FK
    }

    // AB_OrdersAB_
    public class AbOrdersAb
    {
        public int Id { get; set; } // ID (Primary key)
        public DateTime Added { get; set; } // added

        // Reverse navigation

        /// <summary>
        /// Child AbOrderLinesAbs where [AB_OrderLinesAB_].[OrderID] point to this entity (AB_OrderLinesAB_FK)
        /// </summary>
        public virtual ICollection<AbOrderLinesAb> AbOrderLinesAbs { get; set; } // AB_OrderLinesAB_.AB_OrderLinesAB_FK

        public AbOrdersAb()
        {
            Added = DateTime.Now;
            AbOrderLinesAbs = new List<AbOrderLinesAb>();
        }
    }

    // The table 'AllColumnsNull' is not usable by entity framework because it
    // does not have a primary key. It is listed here for completeness.
    // AllColumnsNull
    public class AllColumnsNull
    {
        public int? Total { get; set; } // total
        public string AName { get; set; } // aName (length: 250)
    }

    // Harish3485
    public class Alpha_Harish3485
    {
        public int Id { get; set; } // id (Primary key)
        public int HarishId { get; set; } // harish_id

        // Foreign keys

        /// <summary>
        /// Parent FkTest_SmallDecimalTestAttribute pointed by [Harish3485].([HarishId]) (FK_Harish)
        /// </summary>
        public virtual FkTest_SmallDecimalTestAttribute FkTest_SmallDecimalTestAttribute { get; set; } // FK_Harish
    }

    // The table 'Test' is not usable by entity framework because it
    // does not have a primary key. It is listed here for completeness.
    // Test
    public class Alpha_Test
    {
        public int? Id { get; set; } // Id
        public int? ExclusionTest { get; set; } // ExclusionTest
    }

    // workflow
    public class Alpha_Workflow
    {
        public int Id { get; set; } // Id (Primary key)
        public string Description { get; set; } // Description (length: 10)

        // Reverse navigation

        /// <summary>
        /// Child Beta_ToAlphas where [ToAlpha].[AlphaId] point to this entity (BetaToAlpha_AlphaWorkflow)
        /// </summary>
        public virtual ICollection<Beta_ToAlpha> Beta_ToAlphas { get; set; } // ToAlpha.BetaToAlpha_AlphaWorkflow

        public Alpha_Workflow()
        {
            Beta_ToAlphas = new List<Beta_ToAlpha>();
        }
    }

    // alpha_workflow_synonym
    public class AlphaWorkflowSynonym
    {
        public int Id { get; set; } // Id (Primary key)
        public string Description { get; set; } // Description (length: 10)
    }

    // UserFacilityServiceRole
    public class App_UserFacilityServiceRole
    {
        public int UserId { get; set; } // userId (Primary key)
        public int AppId { get; set; } // appId (Primary key)
        public int FsrId { get; set; } // fsrId (Primary key)
    }

    // AppUser
    public class AppUser
    {
        public long Id { get; set; } // Id (Primary key)
        public string Name { get; set; } // Name (length: 50)

        // Reverse navigation

        /// <summary>
        /// Child Tickets where [Ticket].[CreatedById] point to this entity (FK_Ticket_AppUser)
        /// </summary>
        public virtual ICollection<Ticket> Tickets_CreatedById { get; set; } // Ticket.FK_Ticket_AppUser

        /// <summary>
        /// Child Tickets where [Ticket].[ModifiedById] point to this entity (FK_Ticket_AppUser1)
        /// </summary>
        public virtual ICollection<Ticket> Tickets_ModifiedById { get; set; } // Ticket.FK_Ticket_AppUser1

        public AppUser()
        {
            Tickets_CreatedById = new List<Ticket>();
            Tickets_ModifiedById = new List<Ticket>();
        }
    }

    // Attendee
    public class Attendee
    {
        public long AttendeeId { get; set; } // AttendeeID (Primary key)
        public string Lastname { get; set; } // Lastname (length: 50)
        public string Firstname { get; set; } // Firstname (length: 50)
        public int? PhoneCountryId { get; set; } // PhoneCountryID

        // Foreign keys

        /// <summary>
        /// Parent Country pointed by [Attendee].([PhoneCountryId]) (FK_Attendee_PhoneCountry)
        /// </summary>
        public virtual Country Country { get; set; } // FK_Attendee_PhoneCountry
    }

    // BatchTest
    public class BatchTest
    {
        public string Code { get; set; } // code (Primary key) (length: 8)
    }

    // Harish3485
    public class Beta_Harish3485
    {
        public int Id { get; set; } // id (Primary key)
        public int AnotherId { get; set; } // another_id

        // Foreign keys

        /// <summary>
        /// Parent PropertyTypesToAdd pointed by [Harish3485].([AnotherId]) (FK_Harish)
        /// </summary>
        public virtual PropertyTypesToAdd PropertyTypesToAdd { get; set; } // FK_Harish
    }

    // The table 'Test' is not usable by entity framework because it
    // does not have a primary key. It is listed here for completeness.
    // Test
    public class Beta_Test
    {
        public int? Id { get; set; } // Id
        public int? ExclusionTest { get; set; } // ExclusionTest
    }

    // ToAlpha
    public class Beta_ToAlpha
    {
        public int Id { get; set; } // Id (Primary key)
        public int AlphaId { get; set; } // AlphaId

        // Foreign keys

        /// <summary>
        /// Parent Alpha_Workflow pointed by [ToAlpha].([AlphaId]) (BetaToAlpha_AlphaWorkflow)
        /// </summary>
        public virtual Alpha_Workflow Alpha_Workflow { get; set; } // BetaToAlpha_AlphaWorkflow
    }

    // workflow
    public class Beta_Workflow
    {
        public int Id { get; set; } // Id (Primary key)
        public string Description { get; set; } // Description (length: 10)
    }

    // BITFIDDLERALLCAPS
    public class Bitfiddlerallcap
    {
        public int Id { get; set; } // Id (Primary key)
    }

    // BitFiddlerCATEGORIES
    public class BitFiddlerCategoRy
    {
        public int Id { get; set; } // Id (Primary key)
    }

    // BitFiddlerCURRENCIES
    public class BitFiddlerCurrenCy
    {
        public int Id { get; set; } // Id (Primary key)
    }

    // Blah
    public class Blah
    {
        public int BlahId { get; set; } // BlahID (Primary key)

        // Reverse navigation

        /// <summary>
        /// Child Blahs (Many-to-Many) mapped by table [BlahBlahLink]
        /// </summary>
        public virtual ICollection<Blah> Blahs_BlahId2 { get; set; } // Many to many mapping

        /// <summary>
        /// Child Blahs (Many-to-Many) mapped by table [BlahBlahLink]
        /// </summary>
        public virtual ICollection<Blah> Blahs1 { get; set; } // Many to many mapping

        /// <summary>
        /// Child Blahs (Many-to-Many) mapped by table [BlahBlahLink_readonly]
        /// </summary>
        public virtual ICollection<Blah> Blahs2 { get; set; } // Many to many mapping

        /// <summary>
        /// Child Blahs (Many-to-Many) mapped by table [BlahBlahLink_readonly]
        /// </summary>
        public virtual ICollection<Blah> Blahs3 { get; set; } // Many to many mapping

        /// <summary>
        /// Child BlahBlahLinkV2 where [BlahBlahLink_v2].[BlahID] point to this entity (FK_BlahBlahLinkv2_Blah_ro)
        /// </summary>
        public virtual ICollection<BlahBlahLinkV2> BlahBlahLinkV2_BlahId { get; set; } // BlahBlahLink_v2.FK_BlahBlahLinkv2_Blah_ro

        /// <summary>
        /// Child BlahBlahLinkV2 where [BlahBlahLink_v2].[BlahID2] point to this entity (FK_BlahBlahLinkv2_Blah_ro2)
        /// </summary>
        public virtual ICollection<BlahBlahLinkV2> BlahBlahLinkV2_BlahId2 { get; set; } // BlahBlahLink_v2.FK_BlahBlahLinkv2_Blah_ro2

        /// <summary>
        /// Child Blargs (Many-to-Many) mapped by table [BlahBlargLink]
        /// </summary>
        public virtual ICollection<Blarg> Blargs { get; set; } // Many to many mapping

        public Blah()
        {
            BlahBlahLinkV2_BlahId = new List<BlahBlahLinkV2>();
            BlahBlahLinkV2_BlahId2 = new List<BlahBlahLinkV2>();
            Blahs1 = new List<Blah>();
            Blahs_BlahId2 = new List<Blah>();
            Blahs3 = new List<Blah>();
            Blahs2 = new List<Blah>();
            Blargs = new List<Blarg>();
        }
    }

    // BlahBlahLink_v2
    public class BlahBlahLinkV2
    {
        public int BlahId { get; set; } // BlahID (Primary key)
        public int BlahId2 { get; set; } // BlahID2 (Primary key)
        public int? Dummy1 { get; set; } // dummy1
        public int Dummy2 { get; set; } // dummy2
        public int Hello { get; set; } // hello

        // Foreign keys

        /// <summary>
        /// Parent Blah pointed by [BlahBlahLink_v2].([BlahId]) (FK_BlahBlahLinkv2_Blah_ro)
        /// </summary>
        public virtual Blah Blah_BlahId { get; set; } // FK_BlahBlahLinkv2_Blah_ro

        /// <summary>
        /// Parent Blah pointed by [BlahBlahLink_v2].([BlahId2]) (FK_BlahBlahLinkv2_Blah_ro2)
        /// </summary>
        public virtual Blah Blah_BlahId2 { get; set; } // FK_BlahBlahLinkv2_Blah_ro2
    }

    // Blarg
    public class Blarg
    {
        public int BlargId { get; set; } // BlargID (Primary key)

        // Reverse navigation

        /// <summary>
        /// Child Blahs (Many-to-Many) mapped by table [BlahBlargLink]
        /// </summary>
        public virtual ICollection<Blah> Blahs { get; set; } // Many to many mapping

        public Blarg()
        {
            Blahs = new List<Blah>();
        }
    }

    // Burak1
    public class Burak1
    {
        public long Id { get; set; } // id (Primary key)
        public long IdT { get; set; } // id_t
        public long Num { get; set; } // num

    }

    // Burak2
    public class Burak2
    {
        public long Id { get; set; } // id (Primary key)
        public long Num { get; set; } // num
    }

    // CalculatedColumnNotNull
    public class CalculatedColumnNotNull
    {
        public int Id { get; set; } // ID (Primary key)
        public byte Type { get; set; } // Type
        public bool IsCalendar { get; private set; } // IsCalendar
        public bool IsUtilization { get; private set; } // IsUtilization
    }

    // Car
    public class Car
    {
        public int Id { get; set; } // Id (Primary key)
        public int PrimaryColourId { get; set; } // PrimaryColourId
        public string CarMake { get; set; } // CarMake (length: 255)
        public int? ComputedColumn { get; private set; } // computed_column
        public int ComputedColumnPersisted { get; private set; } // computed_column_persisted

        // Reverse navigation

        /// <summary>
        /// Child Colours (Many-to-Many) mapped by table [CarToColour]
        /// </summary>
        public virtual ICollection<Colour> Colours { get; set; } // Many to many mapping

        // Foreign keys

        /// <summary>
        /// Parent Colour pointed by [Car].([PrimaryColourId]) (CarPrimaryColourFK)
        /// </summary>
        public virtual Colour Colour { get; set; } // CarPrimaryColourFK

        public Car()
        {
            Colours = new List<Colour>();
        }
    }

    // ClientCreationState
    public class ClientCreationState
    {
        public Guid Id { get; set; } // id (Primary key)
        public bool WebhookSetup { get; set; } // WebhookSetup
        public bool AuthSetup { get; set; } // AuthSetup
        public bool AssignedCarrier { get; set; } // AssignedCarrier
    }

    // CMS_File
    public class CmsFile
    {
        public int FileId { get; set; } // FileId (Primary key)
        public string FileName { get; set; } // FileName (length: 100)
        public string FileDescription { get; set; } // FileDescription (length: 500)
        public string FileIdentifier { get; set; } // FileIdentifier (length: 100)
        public DateTime? ValidStartDate { get; set; } // ValidStartDate
        public DateTime? ValidEndDate { get; set; } // ValidEndDate
        public bool IsActive { get; set; } // IsActive

        // Reverse navigation

        /// <summary>
        /// Child CmsTags (Many-to-Many) mapped by table [CMS_FileTag]
        /// </summary>
        public virtual ICollection<CmsTag> CmsTags { get; set; } // Many to many mapping

        public CmsFile()
        {
            CmsTags = new List<CmsTag>();
        }
    }

    // CMS_Tag
    public class CmsTag
    {
        public int TagId { get; set; } // TagId (Primary key)
        public string TagName { get; set; } // TagName (length: 100)

        // Reverse navigation

        /// <summary>
        /// Child CmsFiles (Many-to-Many) mapped by table [CMS_FileTag]
        /// </summary>
        public virtual ICollection<CmsFile> CmsFiles { get; set; } // Many to many mapping

        public CmsTag()
        {
            CmsFiles = new List<CmsFile>();
        }
    }

    // CODE_MeetingTopicDetails
    public class CodeMeetingTopicDetail
    {
        public int Id { get; set; } // id (Primary key)
        public int IdReuniao { get; set; } // id_reuniao
        public int? OrdTrab { get; set; } // ord_trab
        public string Assunto { get; set; } // assunto (length: 250)
        public string Desenvolvimento { get; set; } // desenvolvimento
        public string Origem { get; set; } // origem (length: 5)
        public int? IdOrigem { get; set; } // id_origem
        public int? Estado { get; set; } // Estado
        public int CompanyId { get; set; } // CompanyID
        public DateTime DateCreated { get; set; } // DateCreated
        public DateTime? DateChanged { get; set; } // DateChanged

    }

    // CodeObject
    /// <summary>
    /// This is a test
    /// </summary>
    public class CodeObject
    {
        public int CodeObjectNo { get; set; } // codeObjectNo (Primary key)
        public int? ApplicationNo { get; set; } // applicationNo
        public int Type { get; set; } // type
        public string EName { get; set; } // eName (length: 250)
        public string AName { get; set; } // aName (length: 250)
        public string Description { get; set; } // description (length: 250)
        public string CodeName { get; set; } // codeName (length: 250)
        public string Note { get; set; } // note (length: 250)
        public bool IsObject { get; set; } // isObject
        public byte[] VersionNumber { get; set; } // versionNumber (length: 8)

        public CodeObject()
        {
            CodeObjectNo = 0;
            IsObject = false;
        }
    }

    // CODE_PARAM_MeetingTopicDetailSource
    public class CodeParamMeetingTopicDetailSource
    {
        public int Id { get; set; } // ID (Primary key)
        public string Code { get; set; } // Code (length: 5)
        public string Label { get; set; } // Label (length: 50)
        public string LabelEng { get; set; } // LabelENG (length: 50)
        public string LabelEsp { get; set; } // LabelESP (length: 50)
        public string LabelFra { get; set; } // LabelFRA (length: 50)
        public DateTime DateCreated { get; set; } // DateCreated
        public DateTime? DateChanged { get; set; } // DateChanged
    }

    // Colour
    public class Colour
    {
        public int Id { get; set; } // Id (Primary key)
        public string Name { get; set; } // Name (length: 255)

        // Reverse navigation

        /// <summary>
        /// Child Cars (Many-to-Many) mapped by table [CarToColour]
        /// </summary>
        public virtual ICollection<Car> Cars_CarId { get; set; } // Many to many mapping

        /// <summary>
        /// Child Cars where [Car].[PrimaryColourId] point to this entity (CarPrimaryColourFK)
        /// </summary>
        public virtual ICollection<Car> Cars_PrimaryColourId { get; set; } // Car.CarPrimaryColourFK

        public Colour()
        {
            Cars_PrimaryColourId = new List<Car>();
            Cars_CarId = new List<Car>();
        }
    }

    // ColumnNameAndTypes
    /// <summary>
    /// This is to document the bring the action table
    /// This is to document the
    /// table with poor column name choices
    /// </summary>
    public class ColumnNameAndType
    {
        public int C36 { get; set; } // $ (Primary key)
        public int? C37 { get; set; } // %
        public int? C163 { get; set; } // £
        public int? C38Fred { get; set; } // &fred$
        public int? Abc4792 { get; set; } // abc/\
        public int? JoeBloggs { get; set; } // joe.bloggs
        public int? SimonHughes { get; set; } // simon-hughes
        public string Description { get; set; } // description (length: 20)
        public DateTime SomeDate { get; set; } // someDate
        public string Obs { get; set; } // Obs (length: 50)
        public string Obs1 { get; set; } // Obs1 (length: 50)
        public string Obs2 { get; set; } // Obs2 (length: 50)
        public string Obs3 { get; set; } // Obs3 (length: 50)
        public int? @Static { get; set; } // static
        public int? @Readonly { get; set; } // readonly
        public int? C123Hi { get; set; } // 123Hi
        public float? Areal { get; set; } // areal
        public double? Afloat { get; set; } // afloat
        public float? Afloat8 { get; set; } // afloat8
        public float? Afloat20 { get; set; } // afloat20
        public float? Afloat24 { get; set; } // afloat24
        public double? Afloat53 { get; set; } // afloat53
        public decimal? Adecimal { get; set; } // adecimal
        public decimal? Adecimal194 { get; set; } // adecimal_19_4
        public decimal? Adecimal103 { get; set; } // adecimal_10_3
        public decimal? Anumeric { get; set; } // anumeric
        public decimal? Anumeric52 { get; set; } // anumeric_5_2
        public decimal? Anumeric113 { get; set; } // anumeric_11_3
        public decimal? Amoney { get; set; } // amoney
        public decimal? Asmallmoney { get; set; } // asmallmoney
        public int? Brandon { get; set; } // brandon
        public DbGeography GeographyType { get; set; } // GeographyType
        public DbGeometry GeometryType { get; set; } // GeometryType

        public ColumnNameAndType()
        {
            Description = "";
            SomeDate = DateTime.Now;
            Obs = "[{\"k\":\"en\",\"v\":\"\"},{\"k\":\"pt\",\"v\":\"\"}]";
            Obs1 = @"\";
            Obs2 = @"\\";
            Obs3 = @"\\\";
            Areal = 1.23f;
            Afloat = 999.0;
        }
    }

    // ComplexView
    public class ComplexView
    {
        public string LicenseType { get; set; } // LicenseType (Primary key) (length: 128)
        public int? Count { get; set; } // Count
    }

    // Country
    public class Country
    {
        public int CountryId { get; set; } // CountryID (Primary key)
        public string Code { get; set; } // Code (length: 12)

        // Reverse navigation

        /// <summary>
        /// Child Attendees where [Attendee].[PhoneCountryID] point to this entity (FK_Attendee_PhoneCountry)
        /// </summary>
        public virtual ICollection<Attendee> Attendees { get; set; } // Attendee.FK_Attendee_PhoneCountry

        /// <summary>
        /// Child User309 where [User309].[PhoneCountryID] point to this entity (FK_User309_PhoneCountry)
        /// </summary>
        public virtual ICollection<User309> User309 { get; set; } // User309.FK_User309_PhoneCountry

        public Country()
        {
            Attendees = new List<Attendee>();
            User309 = new List<User309>();
        }
    }

    // cross_database_synonym
    public class CrossDatabaseSynonym
    {
        public int Id { get; set; } // Id (Primary key)
        public string Forename { get; set; } // Forename (length: 20)
    }

    // DateTimeDefaultTest
    public class DateTimeDefaultTest
    {
        public int Id { get; set; } // Id (Primary key)
        public DateTimeOffset? CreatedDate { get; set; } // CreatedDate

        public DateTimeDefaultTest()
        {
            CreatedDate = DateTimeOffset.Now;
        }
    }

    // rov_ColumnDefinitions
    public class dcg_RovColumnDefinition
    {
        public string TableCatalog { get; set; } // TABLE_CATALOG (length: 128)
        public string TableSchema { get; set; } // TABLE_SCHEMA (length: 128)
        public string TableName { get; set; } // TABLE_NAME (Primary key) (length: 128)
        public string ColumnName { get; set; } // COLUMN_NAME (length: 128)
        public int? OrdinalPosition { get; set; } // ORDINAL_POSITION
        public string ColumnDefault { get; set; } // COLUMN_DEFAULT (length: 4000)
        public string IsNullable { get; set; } // IS_NULLABLE (length: 3)
        public string DataType { get; set; } // DATA_TYPE (length: 128)
        public int? CharacterMaximumLength { get; set; } // CHARACTER_MAXIMUM_LENGTH
        public int? CharacterOctetLength { get; set; } // CHARACTER_OCTET_LENGTH
        public byte? NumericPrecision { get; set; } // NUMERIC_PRECISION
        public short? NumericPrecisionRadix { get; set; } // NUMERIC_PRECISION_RADIX
        public int? NumericScale { get; set; } // NUMERIC_SCALE
        public short? DatetimePrecision { get; set; } // DATETIME_PRECISION
        public string CharacterSetCatalog { get; set; } // CHARACTER_SET_CATALOG (length: 128)
        public string CharacterSetSchema { get; set; } // CHARACTER_SET_SCHEMA (length: 128)
        public string CharacterSetName { get; set; } // CHARACTER_SET_NAME (length: 128)
        public string CollationCatalog { get; set; } // COLLATION_CATALOG (length: 128)
        public string CollationSchema { get; set; } // COLLATION_SCHEMA (length: 128)
        public string CollationName { get; set; } // COLLATION_NAME (length: 128)
        public string DomainCatalog { get; set; } // DOMAIN_CATALOG (length: 128)
        public string DomainSchema { get; set; } // DOMAIN_SCHEMA (length: 128)
        public string DomainName { get; set; } // DOMAIN_NAME (length: 128)
        public string Type { get; set; } // TYPE (length: 2)
    }

    // DefaultCheckForNull
    public class DefaultCheckForNull
    {
        public int Id { get; set; } // Id (Primary key)
        public string DescUppercase { get; set; } // DescUppercase (length: 5)
        public string DescLowercase { get; set; } // DescLowercase (length: 5)
        public string DescMixedCase { get; set; } // DescMixedCase (length: 5)
        public string DescBrackets { get; set; } // DescBrackets (length: 5)
        public string X1 { get; set; } // X1 (length: 255)
    }

    // DSOpe
    public class DsOpe
    {
        public int Id { get; set; } // ID (Primary key)
        public decimal DecimalDefault { get; set; } // decimal_default
        public Guid MyGuid { get; set; } // MyGuid
        public string @Default { get; set; } // default (length: 10)
        public Guid? MyGuidBadDefault { get; set; } // MyGuidBadDefault

        public DsOpe()
        {
            DecimalDefault = 99.99m;
            MyGuid = Guid.Parse("9B7E1F67-5A81-4277-BC7D-06A3262A5C70");
            MyGuidBadDefault = null;
        }
    }

    // EnumsWithStringAsValue
    public class EnumsWithStringAsValue
    {
        public string EnumName { get; set; } // enum_name (Primary key) (length: 50)
        public string Value { get; set; } // value (Primary key) (length: 10)
    }

    // DaysOfWeek
    public class EnumTest_DaysOfWeek
    {
        public string TypeName { get; set; } // TypeName (length: 50)
        public int TypeId { get; set; } // TypeId (Primary key)

        // Reverse navigation

        /// <summary>
        /// Child EnumTest_OpenDays where [OpenDays].[EnumId] point to this entity (Fk_OpenDays_EnumId)
        /// </summary>
        public virtual ICollection<EnumTest_OpenDay> EnumTest_OpenDays { get; set; } // OpenDays.Fk_OpenDays_EnumId

        public EnumTest_DaysOfWeek()
        {
            EnumTest_OpenDays = new List<EnumTest_OpenDay>();
        }
    }

    // OpenDays
    public class EnumTest_OpenDay
    {
        public int Id { get; set; } // Id (Primary key)
        public int EnumId { get; set; } // EnumId

        // Foreign keys

        /// <summary>
        /// Parent EnumTest_DaysOfWeek pointed by [OpenDays].([EnumId]) (Fk_OpenDays_EnumId)
        /// </summary>
        public virtual EnumTest_DaysOfWeek EnumTest_DaysOfWeek { get; set; } // Fk_OpenDays_EnumId
    }

    // EnumWithDefaultValue
    public class EnumWithDefaultValue
    {
        public int Id { get; set; } // Id (Primary key)
        public int SomeEnum { get; set; } // SomeEnum

        public EnumWithDefaultValue()
        {
            SomeEnum = 1;
        }
    }

    // EventProcessor
    public class EventProcessor
    {
        public int Id { get; set; } // Id (Primary key)
        public string Name { get; set; } // Name (length: 200)
        public string Description { get; set; } // Description (length: 512)
        public string EndpointAddress { get; set; } // EndpointAddress (length: 512)
        public bool Enabled { get; set; } // Enabled

        // Reverse navigation

        /// <summary>
        /// Child EventProcessorEventFilters where [EventProcessorEventFilter].[EventProcessorId] point to this entity (FK_EventProcessorEventFilter__EventProcessor)
        /// </summary>
        public virtual ICollection<EventProcessorEventFilter> EventProcessorEventFilters { get; set; } // EventProcessorEventFilter.FK_EventProcessorEventFilter__EventProcessor

        public EventProcessor()
        {
            EventProcessorEventFilters = new List<EventProcessorEventFilter>();
        }
    }

    // EventProcessorEventFilter
    public class EventProcessorEventFilter
    {
        public int Id { get; set; } // Id (Primary key)
        public int EventProcessorId { get; set; } // EventProcessorId
        public int WantedEventId { get; set; } // WantedEventId

        // Foreign keys

        /// <summary>
        /// Parent EventProcessor pointed by [EventProcessorEventFilter].([EventProcessorId]) (FK_EventProcessorEventFilter__EventProcessor)
        /// </summary>
        public virtual EventProcessor EventProcessor { get; set; } // FK_EventProcessorEventFilter__EventProcessor
    }

    // CV
    public class FFRS_Cv
    {
        public Guid BatchUid { get; set; } // BatchUID (Primary key)
        public int Cvid { get; set; } // CVID (Primary key)
        public string CvName { get; set; } // CVName (length: 200)
    }

    // FinancialInstitutionOffice
    public class FinancialInstitutionOffice
    {
        public Guid Code { get; set; } // Code
        public Guid FinancialInstitutionCode { get; set; } // FinancialInstitutionCode (Primary key via unique index UniqueOfficeName_FinancialInstitutionOffice)
        public string OfficeName { get; set; } // OfficeName (length: 200)
    }

    // SmallDecimalTestAttribute
    public class FkTest_SmallDecimalTestAttribute
    {
        public int FkId { get; set; } // FkID (Primary key)
        public string Description { get; set; } // description (length: 20)

        // Reverse navigation

        /// <summary>
        /// Child Alpha_Harish3485 where [Harish3485].[harish_id] point to this entity (FK_Harish)
        /// </summary>
        public virtual ICollection<Alpha_Harish3485> Alpha_Harish3485 { get; set; } // Harish3485.FK_Harish

        // Foreign keys

        /// <summary>
        /// Parent SmallDecimalTest pointed by [SmallDecimalTestAttribute].([FkId]) (KateFK)
        /// </summary>
        public virtual SmallDecimalTest SmallDecimalTest { get; set; } // KateFK

        public FkTest_SmallDecimalTestAttribute()
        {
            Alpha_Harish3485 = new List<Alpha_Harish3485>();
        }
    }

    // footer
    public class Footer
    {
        public int Id { get; set; } // ID (Primary key)
        public int OtherId { get; set; } // otherID
        public DateTime Added { get; set; } // added

        // Foreign keys

        /// <summary>
        /// Parent Header pointed by [footer].([Id], [OtherId]) (fooderFK)
        /// </summary>
        public virtual Header Header { get; set; } // fooderFK

        public Footer()
        {
            Added = DateTime.Now;
        }
    }

    // ForeignKeyIsNotEnforced
    public class ForeignKeyIsNotEnforced
    {
        public int Id { get; set; } // id (Primary key)
        public int? NullValue { get; set; } // null_value
        public int NotNullValue { get; set; } // not_null_value
    }

    // ForeignKeyIsNotEnforcedItem
    public class ForeignKeyIsNotEnforcedItem
    {
        public int Id { get; set; } // id (Primary key)
        public int? NullValue { get; set; } // null_value
        public int NotNullValue { get; set; } // not_null_value

    }

    // HasPrincipalKeyTestChild
    public class HasPrincipalKeyTestChild
    {
        public int Id { get; set; } // Id (Primary key)
        public int A { get; set; } // A
        public int B { get; set; } // B
        public int? C { get; set; } // C
        public int? D { get; set; } // D

    }

    // HasPrincipalKeyTestParent
    public class HasPrincipalKeyTestParent
    {
        public int Id { get; set; } // Id (Primary key)
        public int Aa { get; set; } // AA
        public int Bb { get; set; } // BB
        public int? Cc { get; set; } // CC
        public int? Dd { get; set; } // DD
    }

    // header
    public class Header
    {
        public int Id { get; set; } // ID (Primary key)
        public int AnotherId { get; set; } // anotherID (Primary key)
        public DateTime Added { get; set; } // added

        // Reverse navigation

        /// <summary>
        /// Child Footers where [footer].([ID], [otherID]) point to this entity (fooderFK)
        /// </summary>
        public virtual ICollection<Footer> Footers { get; set; } // footer.fooderFK

        public Header()
        {
            Added = DateTime.Now;
            Footers = new List<Footer>();
        }
    }

    // hierarchy_test
    public class HierarchyTest
    {
        public int Id { get; set; } // ID (Primary key)
        public System.Data.Entity.Hierarchy.HierarchyId Hid { get; set; } // hid
    }

    // InflectorData
    public class InflectorData
    {
        public int Id { get; set; } // Id (Primary key)
    }

    // InflectorStatus
    public class InflectorStatus
    {
        public int Id { get; set; } // Id (Primary key)
        public int SayHelloTo { get; set; } // SayHelloTo
        public int SignalData { get; set; } // SignalData
        public int NotificationStatus { get; set; } // NotificationStatus
        public int Status { get; set; } // Status
        public int To { get; set; } // To
        public int Data { get; set; } // Data
    }

    // InflectorTo
    public class InflectorTo
    {
        public int Id { get; set; } // Id (Primary key)
    }

    // Role
    public class Issue47_Role
    {
        public int RoleId { get; set; } // RoleId (Primary key)
        public string Role { get; set; } // Role (length: 10)

        // Reverse navigation

        /// <summary>
        /// Child Issue47_UserRoles where [UserRoles].[RoleId] point to this entity (Issue47_UserRoles_roleid)
        /// </summary>
        public virtual ICollection<Issue47_UserRole> Issue47_UserRoles { get; set; } // UserRoles.Issue47_UserRoles_roleid

        public Issue47_Role()
        {
            Issue47_UserRoles = new List<Issue47_UserRole>();
        }
    }

    // Users
    public class Issue47_User
    {
        public int UserId { get; set; } // UserId (Primary key)
        public string Name { get; set; } // Name (length: 10)

        // Reverse navigation

        /// <summary>
        /// Child Issue47_UserRoles where [UserRoles].[UserId] point to this entity (Issue47_UserRoles_userid)
        /// </summary>
        public virtual ICollection<Issue47_UserRole> Issue47_UserRoles { get; set; } // UserRoles.Issue47_UserRoles_userid

        public Issue47_User()
        {
            Issue47_UserRoles = new List<Issue47_UserRole>();
        }
    }

    // UserRoles
    public class Issue47_UserRole
    {
        public int UserRoleId { get; set; } // UserRoleId (Primary key)
        public int UserId { get; set; } // UserId
        public int RoleId { get; set; } // RoleId

        // Foreign keys

        /// <summary>
        /// Parent Issue47_Role pointed by [UserRoles].([RoleId]) (Issue47_UserRoles_roleid)
        /// </summary>
        public virtual Issue47_Role Issue47_Role { get; set; } // Issue47_UserRoles_roleid

        /// <summary>
        /// Parent Issue47_User pointed by [UserRoles].([UserId]) (Issue47_UserRoles_userid)
        /// </summary>
        public virtual Issue47_User Issue47_User { get; set; } // Issue47_UserRoles_userid
    }

    // MultipleKeys
    public class MultipleKey
    {
        public int UserId { get; set; } // UserId (Primary key)
        public int FavouriteColourId { get; set; } // FavouriteColourId (Primary key via unique index )
        public int BestHolidayTypeId { get; set; } // BestHolidayTypeId (Primary key)
        public int BankId { get; set; } // BankId
        public int CarId { get; set; } // CarId
    }

    // The table 'NoPrimaryKeys' is not usable by entity framework because it
    // does not have a primary key. It is listed here for completeness.
    // NoPrimaryKeys
    public class NoPrimaryKey
    {
        public int? Id { get; set; } // Id
        public string Description { get; set; } // Description (length: 10)
    }

    // The table 'Test' is not usable by entity framework because it
    // does not have a primary key. It is listed here for completeness.
    // Test
    public class Omega_Test
    {
        public int? Id { get; set; } // Id
        public int? ExclusionTest { get; set; } // ExclusionTest
    }

    // Issue
    public class OneEightSix_Issue
    {
        public int Id { get; set; } // Id (Primary key)
        public string Title { get; set; } // Title (length: 100)
        public string Content { get; set; } // Content
        public int? ConsentDocumentId { get; set; } // ConsentDocumentId

        // Reverse navigation

        /// <summary>
        /// Child OneEightSix_UploadedFiles (Many-to-Many) mapped by table [IssueUploadedFile]
        /// </summary>
        public virtual ICollection<OneEightSix_UploadedFile> OneEightSix_UploadedFiles { get; set; } // Many to many mapping

        // Foreign keys

        /// <summary>
        /// Parent OneEightSix_UploadedFile pointed by [Issue].([ConsentDocumentId]) (FK_Issue_UploadedFileConsentDocument)
        /// </summary>
        public virtual OneEightSix_UploadedFile OneEightSix_UploadedFile { get; set; } // FK_Issue_UploadedFileConsentDocument

        public OneEightSix_Issue()
        {
            OneEightSix_UploadedFiles = new List<OneEightSix_UploadedFile>();
        }
    }

    // UploadedFile
    public class OneEightSix_UploadedFile
    {
        public int Id { get; set; } // Id (Primary key)
        public string FullPath { get; set; } // FullPath

        // Reverse navigation

        /// <summary>
        /// Child OneEightSix_Issues where [Issue].[ConsentDocumentId] point to this entity (FK_Issue_UploadedFileConsentDocument)
        /// </summary>
        public virtual ICollection<OneEightSix_Issue> OneEightSix_Issues_ConsentDocumentId { get; set; } // Issue.FK_Issue_UploadedFileConsentDocument

        /// <summary>
        /// Child OneEightSix_Issues (Many-to-Many) mapped by table [IssueUploadedFile]
        /// </summary>
        public virtual ICollection<OneEightSix_Issue> OneEightSix_Issues_IssueId { get; set; } // Many to many mapping

        public OneEightSix_UploadedFile()
        {
            OneEightSix_Issues_ConsentDocumentId = new List<OneEightSix_Issue>();
            OneEightSix_Issues_IssueId = new List<OneEightSix_Issue>();
        }
    }

    // Period.Table
    public class PeriodTable
    {
        public int Id { get; set; } // id (Primary key)
        public int? JoeBloggs { get; set; } // joe.bloggs
    }

    // PeriodTestTable
    public class PeriodTestTable
    {
        public int Id { get; set; } // id (Primary key)
        public int? JoeBloggs { get; set; } // joe.bloggs
    }

    // Person
    public class Person
    {
        public int Id { get; set; } // Id (Primary key)
        public string Name { get; set; } // Name (length: 50)

        // Reverse navigation

        /// <summary>
        /// Child PersonPosts where [PersonPosts].[CreatedBy] point to this entity (FK_PersonPosts_CreatedBy)
        /// </summary>
        public virtual ICollection<PersonPost> PersonPosts_CreatedBy { get; set; } // PersonPosts.FK_PersonPosts_CreatedBy

        /// <summary>
        /// Child PersonPosts where [PersonPosts].[UpdatedBy] point to this entity (FK_PersonPosts_UpdatedBy)
        /// </summary>
        public virtual ICollection<PersonPost> PersonPosts_UpdatedBy { get; set; } // PersonPosts.FK_PersonPosts_UpdatedBy

        public Person()
        {
            PersonPosts_CreatedBy = new List<PersonPost>();
            PersonPosts_UpdatedBy = new List<PersonPost>();
        }
    }

    // PersonPosts
    public class PersonPost
    {
        public int Id { get; set; } // Id (Primary key)
        public string Title { get; set; } // Title (length: 20)
        public string Body { get; set; } // Body (length: 100)
        public int CreatedBy { get; set; } // CreatedBy
        public int UpdatedBy { get; set; } // UpdatedBy

        // Foreign keys

        /// <summary>
        /// Parent Person pointed by [PersonPosts].([CreatedBy]) (FK_PersonPosts_CreatedBy)
        /// </summary>
        public virtual Person Person_CreatedBy { get; set; } // FK_PersonPosts_CreatedBy

        /// <summary>
        /// Parent Person pointed by [PersonPosts].([UpdatedBy]) (FK_PersonPosts_UpdatedBy)
        /// </summary>
        public virtual Person Person_UpdatedBy { get; set; } // FK_PersonPosts_UpdatedBy
    }

    // pk_ordinal_test
    public class PkOrdinalTest
    {
        public int C1 { get; set; } // C1 (Primary key)
        public int C2 { get; set; } // C2
        public int C3 { get; set; } // C3 (Primary key)
    }

    // PropertyTypesToAdd
    public class PropertyTypesToAdd
    {
        public int Id { get; set; } // id (Primary key)
        public DateTime? DtDefault { get; set; } // dt_default
        public DateTime? Dt7 { get; set; } // dt7
        public string DefaultCheck { get; set; } // defaultCheck (length: 10)

        // Reverse navigation

        /// <summary>
        /// Child Beta_Harish3485 where [Harish3485].[another_id] point to this entity (FK_Harish)
        /// </summary>
        public virtual ICollection<Beta_Harish3485> Beta_Harish3485 { get; set; } // Harish3485.FK_Harish

        public PropertyTypesToAdd()
        {
            Beta_Harish3485 = new List<Beta_Harish3485>();
        }
    }

    // SequenceTest
    public class SequenceTest
    {
        public int Id { get; set; } // Id (Primary key)
        public long CntByBigInt { get; set; } // CntByBigInt
        public byte CntByTinyInt { get; set; } // CntByTinyInt
        public short CntBySmallInt { get; set; } // CntBySmallInt
        public decimal CntByDecimal { get; set; } // CntByDecimal
        public decimal CntByNumeric { get; set; } // CntByNumeric
    }

    // SequenceTestPartTwo
    public class SequenceTestPartTwo
    {
        public int Id { get; set; } // Id (Primary key)
        public long CntByBigInt { get; set; } // CntByBigInt
        public byte CntByTinyInt { get; set; } // CntByTinyInt
    }

    // SmallDecimalTest
    public class SmallDecimalTest
    {
        public int Id { get; set; } // id (Primary key)
        public decimal? KoeffVed { get; set; } // KoeffVed

        // Reverse navigation

        /// <summary>
        /// Parent (One-to-One) SmallDecimalTest pointed by [SmallDecimalTestAttribute].[FkID] (KateFK)
        /// </summary>
        public virtual FkTest_SmallDecimalTestAttribute FkTest_SmallDecimalTestAttribute { get; set; } // SmallDecimalTestAttribute.KateFK

        public SmallDecimalTest()
        {
            KoeffVed = 0.5m;
        }
    }

    // SmallDecimalTestView
    public class SmallDecimalTestView
    {
        public int FkId { get; set; } // FkID (Primary key)
        public string Description { get; set; } // description (Primary key) (length: 20)
    }

    // Boo
    public class Stafford_Boo
    {
        public int Id { get; set; } // id (Primary key)
        public string Name { get; set; } // name (length: 10)

        // Reverse navigation

        /// <summary>
        /// Parent (One-to-One) Stafford_Boo pointed by [Foo].[id] (FK_Foo_Boo)
        /// </summary>
        public virtual Stafford_Foo Stafford_Foo { get; set; } // Foo.FK_Foo_Boo
    }

    // ComputedColumns
    public class Stafford_ComputedColumn
    {
        public int Id { get; set; } // Id (Primary key)
        public string MyColumn { get; set; } // MyColumn (length: 10)
        public string MyComputedColumn { get; private set; } // MyComputedColumn (length: 10)
    }

    // Foo
    public class Stafford_Foo
    {
        public int Id { get; set; } // id (Primary key)
        public string Name { get; set; } // name (length: 10)

        // Foreign keys

        /// <summary>
        /// Parent Stafford_Boo pointed by [Foo].([Id]) (FK_Foo_Boo)
        /// </summary>
        public virtual Stafford_Boo Stafford_Boo { get; set; } // FK_Foo_Boo
    }

    // Child
    public class Synonyms_Child
    {
        public int ChildId { get; set; } // ChildId (Primary key)
        public int ParentId { get; set; } // ParentId
        public string ChildName { get; set; } // ChildName (length: 100)

        // Foreign keys

        /// <summary>
        /// Parent Synonyms_Parent pointed by [Child].([ParentId]) (FK_Child_Parent)
        /// </summary>
        public virtual Synonyms_Parent Synonyms_Parent { get; set; } // FK_Child_Parent
    }

    // Parent
    public class Synonyms_Parent
    {
        public int ParentId { get; set; } // ParentId (Primary key)
        public string ParentName { get; set; } // ParentName (length: 100)

        // Reverse navigation

        /// <summary>
        /// Child Synonyms_Children where [Child].[ParentId] point to this entity (FK_Child_Parent)
        /// </summary>
        public virtual ICollection<Synonyms_Child> Synonyms_Children { get; set; } // Child.FK_Child_Parent

        public Synonyms_Parent()
        {
            Synonyms_Children = new List<Synonyms_Child>();
        }
    }

    // TableA
    public class TableA
    {
        public int TableAId { get; set; } // TableAId (Primary key)
        public string TableADesc { get; set; } // TableADesc (length: 20)

        // Reverse navigation

        /// <summary>
        /// Child TableBs where [TableB].[TableAId] point to this entity (FK_TableA_CompositeKey_Req)
        /// </summary>
        public virtual ICollection<TableB> TableBs { get; set; } // TableB.FK_TableA_CompositeKey_Req

        public TableA()
        {
            TableBs = new List<TableB>();
        }
    }

    // TableB
    public class TableB
    {
        public int TableBId { get; set; } // TableBId (Primary key)
        public int TableAId { get; set; } // TableAId (Primary key)
        public int? ParentTableAId { get; set; } // ParentTableAId
        public string TableBDesc { get; set; } // TableBDesc (length: 20)

        // Reverse navigation

        /// <summary>
        /// Parent (One-to-One) TableB pointed by [TableB].([TableAId], [TableBId]) (ParentTableB_Hierarchy)
        /// </summary>
        public virtual TableB TableB2 { get; set; } // TableB.ParentTableB_Hierarchy

        // Foreign keys

        /// <summary>
        /// Parent TableA pointed by [TableB].([TableAId]) (FK_TableA_CompositeKey_Req)
        /// </summary>
        public virtual TableA TableA_TableAId { get; set; } // FK_TableA_CompositeKey_Req

        /// <summary>
        /// Parent TableB pointed by [TableB].([TableAId], [TableBId]) (ParentTableB_Hierarchy)
        /// </summary>
        public virtual TableB TableB1 { get; set; } // ParentTableB_Hierarchy
    }

    // table with duplicate column names
    public class TableWithDuplicateColumnName
    {
        public int Id { get; set; } // id (Primary key)
        public int UserId1 { get; set; } // user_id
        public int UserId2 { get; set; } // UserId
        public int UserId3 { get; set; } // User Id
        public int UserId4 { get; set; } // User  Id
        public int UserId { get; set; } // user__id
    }

    // table.with.multiple.periods
    public class TableWithMultiplePeriod
    {
        public int Id { get; set; } // id (Primary key)
        public string Description { get; set; } // description (length: 20)
    }

    // table with space
    public class TableWithSpace
    {
        public int Id { get; set; } // id (Primary key)

        // Reverse navigation

        /// <summary>
        /// Child TableWithSpaceAndInColumns (Many-to-Many) mapped by table [table mapping with space]
        /// </summary>
        public virtual ICollection<TableWithSpaceAndInColumn> TableWithSpaceAndInColumns { get; set; } // Many to many mapping

        public TableWithSpace()
        {
            TableWithSpaceAndInColumns = new List<TableWithSpaceAndInColumn>();
        }
    }

    // table with space and in columns
    public class TableWithSpaceAndInColumn
    {
        public int IdValue { get; set; } // id value (Primary key)

        // Reverse navigation

        /// <summary>
        /// Child TableWithSpaces (Many-to-Many) mapped by table [table mapping with space]
        /// </summary>
        public virtual ICollection<TableWithSpace> TableWithSpaces { get; set; } // Many to many mapping

        public TableWithSpaceAndInColumn()
        {
            TableWithSpaces = new List<TableWithSpace>();
        }
    }

    // TableWithSpaceInColumnOnly
    public class TableWithSpaceInColumnOnly
    {
        public int IdValue { get; set; } // id value (Primary key)
    }

    // TadeuszSobol
    public class TadeuszSobol
    {
        public int Id { get; set; } // Id (Primary key)
        public string Description { get; set; } // Description
        public string Notes { get; set; } // Notes
        public string Name { get; set; } // Name (length: 10)
    }

    // Task
    public class Task1
    {
        public long TaskId { get; set; } // TaskId (Primary key)
    }

    // tblOrders
    public class TblOrder
    {
        public int Id { get; set; } // ID (Primary key)
        public DateTime Added { get; set; } // added

        // Reverse navigation

        /// <summary>
        /// Child TblOrderLines where [tblOrderLines].[OrderID] point to this entity (tblOrdersFK)
        /// </summary>
        public virtual ICollection<TblOrderLine> TblOrderLines { get; set; } // tblOrderLines.tblOrdersFK

        public TblOrder()
        {
            Added = DateTime.Now;
            TblOrderLines = new List<TblOrderLine>();
        }
    }

    // tblOrderErrors
    public class TblOrderError
    {
        public int Id { get; set; } // ID (Primary key)
        public string Error { get; set; } // error (length: 50)
    }

    // tblOrderErrorsAB_
    public class TblOrderErrorsAb
    {
        public int Id { get; set; } // ID (Primary key)
        public string Error { get; set; } // error (length: 50)
    }

    // tblOrderLines
    public class TblOrderLine
    {
        public int Id { get; set; } // ID (Primary key)
        public int OrderId { get; set; } // OrderID
        public string Sku { get; set; } // sku (length: 15)

        // Foreign keys

        /// <summary>
        /// Parent TblOrder pointed by [tblOrderLines].([OrderId]) (tblOrdersFK)
        /// </summary>
        public virtual TblOrder TblOrder { get; set; } // tblOrdersFK
    }

    // TemporalDepartment
    public class TemporalDepartment
    {
        public int DeptId { get; set; } // DeptID (Primary key)
        public string DeptName { get; set; } // DeptName (length: 50)
        public int? ManagerId { get; set; } // ManagerID
        public int? ParentDeptId { get; set; } // ParentDeptID
        public DateTime SysStartTime { get; set; } // SysStartTime
        public DateTime SysEndTime { get; set; } // SysEndTime
    }

    // TemporalDepartmentHistory
    public class TemporalDepartmentHistory
    {
        public int DeptId { get; set; } // DeptID (Primary key)
        public string DeptName { get; set; } // DeptName (Primary key) (length: 50)
        public int? ManagerId { get; set; } // ManagerID
        public int? ParentDeptId { get; set; } // ParentDeptID
        public DateTime SysStartTime { get; set; } // SysStartTime (Primary key)
        public DateTime SysEndTime { get; set; } // SysEndTime (Primary key)
    }

    // The table 'Test' is not usable by entity framework because it
    // does not have a primary key. It is listed here for completeness.
    // Test
    public class Test
    {
        public int? Id { get; set; } // Id
        public int? ExclusionTest { get; set; } // ExclusionTest
    }

    // ThisIsMemoryOptimised
    public class ThisIsMemoryOptimised
    {
        public int Id { get; set; } // Id (Primary key)
        public string Description { get; set; } // Description (length: 20)
    }

    // Ticket
    public class Ticket
    {
        public long Id { get; set; } // Id (Primary key)
        public long CreatedById { get; set; } // CreatedById
        public long? ModifiedById { get; set; } // ModifiedById

        // Foreign keys

        /// <summary>
        /// Parent AppUser pointed by [Ticket].([CreatedById]) (FK_Ticket_AppUser)
        /// </summary>
        public virtual AppUser CreatedBy { get; set; } // FK_Ticket_AppUser

        /// <summary>
        /// Parent AppUser pointed by [Ticket].([ModifiedById]) (FK_Ticket_AppUser1)
        /// </summary>
        public virtual AppUser ModifiedBy { get; set; } // FK_Ticket_AppUser1
    }

    // TimestampNotNull
    public class TimestampNotNull
    {
        public int Id { get; set; } // Id (Primary key)
        public byte[] Version { get; set; } // Version (length: 8)
        public int Number { get; set; } // Number
    }

    // TimestampNullable
    public class TimestampNullable
    {
        public int Id { get; set; } // Id (Primary key)
        public byte[] Version { get; set; } // Version (length: 8)
        public int Number { get; set; } // Number
    }

    // Token
    public class Token
    {
        public Guid Id { get; set; } // Id (Primary key)
        public bool Enabled { get; set; } // Enabled

        public Token()
        {
            Id = Guid.NewGuid();
        }
    }

    // User
    public class User
    {
        public int Id { get; set; } // ID (Primary key)
        public string ExternalUserId { get; set; } // ExternalUserID (length: 50)

        // Reverse navigation

        /// <summary>
        /// Child UserDocuments where [User_Document].[CreatedByUserID] point to this entity (FK_User_Document_User1)
        /// </summary>
        public virtual ICollection<UserDocument> UserDocuments_CreatedByUserId { get; set; } // User_Document.FK_User_Document_User1

        /// <summary>
        /// Child UserDocuments where [User_Document].[UserID] point to this entity (FK_User_Document_User)
        /// </summary>
        public virtual ICollection<UserDocument> UserDocuments_UserId { get; set; } // User_Document.FK_User_Document_User

        public User()
        {
            UserDocuments_CreatedByUserId = new List<UserDocument>();
            UserDocuments_UserId = new List<UserDocument>();
        }
    }

    // User309
    public class User309
    {
        public long UserId { get; set; } // UserID (Primary key)
        public string Lastname { get; set; } // Lastname (length: 100)
        public string Firstname { get; set; } // Firstname (length: 100)
        public int? PhoneCountryId { get; set; } // PhoneCountryID

        // Foreign keys

        /// <summary>
        /// Parent Country pointed by [User309].([PhoneCountryId]) (FK_User309_PhoneCountry)
        /// </summary>
        public virtual Country Country { get; set; } // FK_User309_PhoneCountry
    }

    // User_Document
    public class UserDocument
    {
        public int Id { get; set; } // ID (Primary key)
        public int UserId { get; set; } // UserID
        public int CreatedByUserId { get; set; } // CreatedByUserID

        // Foreign keys

        /// <summary>
        /// Parent User pointed by [User_Document].([CreatedByUserId]) (FK_User_Document_User1)
        /// </summary>
        public virtual User CreatedByUser { get; set; } // FK_User_Document_User1

        /// <summary>
        /// Parent User pointed by [User_Document].([UserId]) (FK_User_Document_User)
        /// </summary>
        public virtual User User_UserId { get; set; } // FK_User_Document_User
    }

    // Versioned
    public class Versioned
    {
        public int Id { get; set; } // Id (Primary key)
        public byte[] Version { get; set; } // Version (length: 8)
        public int Number { get; set; } // Number
    }

    // VersionedNullable
    public class VersionedNullable
    {
        public int Id { get; set; } // Id (Primary key)
        public byte[] Version { get; set; } // Version (length: 8)
        public int Number { get; set; } // Number
    }

    // view.with.multiple.periods
    public class ViewWithMultiplePeriod
    {
        public int FkId { get; set; } // FkID (Primary key)
        public string Description { get; set; } // description (Primary key) (length: 20)
    }

    // view with space
    public class ViewWithSpace
    {
        public int CodeObjectNo { get; set; } // codeObjectNo (Primary key)
        public int? ApplicationNo { get; set; } // applicationNo
        public int Type { get; set; } // type (Primary key)
        public string EName { get; set; } // eName (Primary key) (length: 250)
        public string AName { get; set; } // aName (length: 250)
        public string Description { get; set; } // description (length: 250)
        public string CodeName { get; set; } // codeName (length: 250)
        public string Note { get; set; } // note (length: 250)
        public bool IsObject { get; set; } // isObject (Primary key)
        public byte[] VersionNumber { get; set; } // versionNumber (length: 8)
    }

    // Articles
    public class WVN_Article
    {
        public int PkArticle { get; set; } // PK_Article (Primary key)
        public Guid FkFactory { get; set; } // FK_Factory
        public int FkArticleLevel { get; set; } // FK_ArticleLevel
        public int? FkParentArticle { get; set; } // FK_ParentArticle
        public string Code { get; set; } // Code (length: 20)
    }

    // The table 'v_Articles' is not usable by entity framework because it
    // does not have a primary key. It is listed here for completeness.
    // v_Articles
    public class WVN_VArticle
    {
        public int? PkArticle { get; set; } // PK_Article
        public Guid? FkFactory { get; set; } // FK_Factory
        public int? FkArticleLevel { get; set; } // FK_ArticleLevel
        public int? FkParentArticle { get; set; } // FK_ParentArticle
        public string Code { get; set; } // Code (length: 20)
        public string FullCode { get; set; } // FullCode (length: 100)
    }

    // Бренды товара
    public class Брендытовара
    {
        public int Кодбренда { get; set; } // Код бренда (Primary key)
        public string Наименованиебренда { get; set; } // Наименование бренда (length: 50)
        public byte[] Логотипбренда { get; set; } // Логотип_бренда (length: 2147483647)
        public byte[] Логотипбрендавертикальный { get; set; } // Логотип_бренда_вертикальный (length: 2147483647)
    }


    #endregion

    #region POCO Configuration

    // A
    public class AConfiguration : EntityTypeConfiguration<A>
    {
        public AConfiguration()
            : this("dbo")
        {
        }

        public AConfiguration(string schema)
        {
            ToTable("A", schema);
            HasKey(x => x.AId);

            Property(x => x.AId).HasColumnName(@"AId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);
            Property(x => x.C1).HasColumnName(@"C1").HasColumnType("int").IsRequired();
            Property(x => x.C2).HasColumnName(@"C2").HasColumnType("int").IsRequired();

            // Foreign keys
            HasRequired(a => a.Aaref).WithMany(b => b.A).HasForeignKey(c => new { c.C1, c.C2 }).WillCascadeOnDelete(false); // FK_A_A
        }
    }

    // AAREF
    public class AarefConfiguration : EntityTypeConfiguration<Aaref>
    {
        public AarefConfiguration()
            : this("dbo")
        {
        }

        public AarefConfiguration(string schema)
        {
            ToTable("AAREF", schema);
            HasKey(x => new { x.C1, x.C2 });

            Property(x => x.C1).HasColumnName(@"C1").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(DatabaseGeneratedOption.None);
            Property(x => x.C2).HasColumnName(@"C2").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(DatabaseGeneratedOption.None);
            Property(x => x.CreatedUtc).HasColumnName(@"CreatedUTC").HasColumnType("datetime2").IsRequired();
        }
    }

    // AB_OrderLinesAB_
    public class AbOrderLinesAbConfiguration : EntityTypeConfiguration<AbOrderLinesAb>
    {
        public AbOrderLinesAbConfiguration()
            : this("dbo")
        {
        }

        public AbOrderLinesAbConfiguration(string schema)
        {
            ToTable("AB_OrderLinesAB_", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"ID").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);
            Property(x => x.OrderId).HasColumnName(@"OrderID").HasColumnType("int").IsRequired();
            Property(x => x.Sku).HasColumnName(@"sku").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(15);

            // Foreign keys
            HasRequired(a => a.AbOrdersAb).WithMany(b => b.AbOrderLinesAbs).HasForeignKey(c => c.OrderId).WillCascadeOnDelete(false); // AB_OrderLinesAB_FK
        }
    }

    // AB_OrdersAB_
    public class AbOrdersAbConfiguration : EntityTypeConfiguration<AbOrdersAb>
    {
        public AbOrdersAbConfiguration()
            : this("dbo")
        {
        }

        public AbOrdersAbConfiguration(string schema)
        {
            ToTable("AB_OrdersAB_", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"ID").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);
            Property(x => x.Added).HasColumnName(@"added").HasColumnType("datetime").IsRequired();
        }
    }

    // Harish3485
    public class Alpha_Harish3485Configuration : EntityTypeConfiguration<Alpha_Harish3485>
    {
        public Alpha_Harish3485Configuration()
            : this("Alpha")
        {
        }

        public Alpha_Harish3485Configuration(string schema)
        {
            ToTable("Harish3485", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);
            Property(x => x.HarishId).HasColumnName(@"harish_id").HasColumnType("int").IsRequired();

            // Foreign keys
            HasRequired(a => a.FkTest_SmallDecimalTestAttribute).WithMany(b => b.Alpha_Harish3485).HasForeignKey(c => c.HarishId).WillCascadeOnDelete(false); // FK_Harish
        }
    }

    // workflow
    public class Alpha_WorkflowConfiguration : EntityTypeConfiguration<Alpha_Workflow>
    {
        public Alpha_WorkflowConfiguration()
            : this("Alpha")
        {
        }

        public Alpha_WorkflowConfiguration(string schema)
        {
            ToTable("workflow", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);
            Property(x => x.Description).HasColumnName(@"Description").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(10);
        }
    }

    // alpha_workflow_synonym
    public class AlphaWorkflowSynonymConfiguration : EntityTypeConfiguration<AlphaWorkflowSynonym>
    {
        public AlphaWorkflowSynonymConfiguration()
            : this("dbo")
        {
        }

        public AlphaWorkflowSynonymConfiguration(string schema)
        {
            ToTable("alpha_workflow_synonym", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);
            Property(x => x.Description).HasColumnName(@"Description").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(10);
        }
    }

    // UserFacilityServiceRole
    public class App_UserFacilityServiceRoleConfiguration : EntityTypeConfiguration<App_UserFacilityServiceRole>
    {
        public App_UserFacilityServiceRoleConfiguration()
            : this("App")
        {
        }

        public App_UserFacilityServiceRoleConfiguration(string schema)
        {
            ToTable("UserFacilityServiceRole", schema);
            HasKey(x => new { x.UserId, x.AppId, x.FsrId });

            Property(x => x.UserId).HasColumnName(@"userId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(DatabaseGeneratedOption.None);
            Property(x => x.AppId).HasColumnName(@"appId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(DatabaseGeneratedOption.None);
            Property(x => x.FsrId).HasColumnName(@"fsrId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(DatabaseGeneratedOption.None);
        }
    }

    // AppUser
    public class AppUserConfiguration : EntityTypeConfiguration<AppUser>
    {
        public AppUserConfiguration()
            : this("dbo")
        {
        }

        public AppUserConfiguration(string schema)
        {
            ToTable("AppUser", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("bigint").IsRequired().HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);
            Property(x => x.Name).HasColumnName(@"Name").HasColumnType("nvarchar").IsRequired().HasMaxLength(50);
        }
    }

    // Attendee
    public class AttendeeConfiguration : EntityTypeConfiguration<Attendee>
    {
        public AttendeeConfiguration()
            : this("dbo")
        {
        }

        public AttendeeConfiguration(string schema)
        {
            ToTable("Attendee", schema);
            HasKey(x => x.AttendeeId);

            Property(x => x.AttendeeId).HasColumnName(@"AttendeeID").HasColumnType("bigint").IsRequired().HasDatabaseGeneratedOption(DatabaseGeneratedOption.None);
            Property(x => x.Lastname).HasColumnName(@"Lastname").HasColumnType("nvarchar").IsRequired().HasMaxLength(50);
            Property(x => x.Firstname).HasColumnName(@"Firstname").HasColumnType("nvarchar").IsRequired().HasMaxLength(50);
            Property(x => x.PhoneCountryId).HasColumnName(@"PhoneCountryID").HasColumnType("int").IsOptional();

            // Foreign keys
            HasOptional(a => a.Country).WithMany(b => b.Attendees).HasForeignKey(c => c.PhoneCountryId).WillCascadeOnDelete(false); // FK_Attendee_PhoneCountry
        }
    }

    // BatchTest
    public class BatchTestConfiguration : EntityTypeConfiguration<BatchTest>
    {
        public BatchTestConfiguration()
            : this("dbo")
        {
        }

        public BatchTestConfiguration(string schema)
        {
            ToTable("BatchTest", schema);
            HasKey(x => x.Code);

            Property(x => x.Code).HasColumnName(@"code").HasColumnType("nvarchar").IsRequired().HasMaxLength(8).HasDatabaseGeneratedOption(DatabaseGeneratedOption.None);
        }
    }

    // Harish3485
    public class Beta_Harish3485Configuration : EntityTypeConfiguration<Beta_Harish3485>
    {
        public Beta_Harish3485Configuration()
            : this("Beta")
        {
        }

        public Beta_Harish3485Configuration(string schema)
        {
            ToTable("Harish3485", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);
            Property(x => x.AnotherId).HasColumnName(@"another_id").HasColumnType("int").IsRequired();

            // Foreign keys
            HasRequired(a => a.PropertyTypesToAdd).WithMany(b => b.Beta_Harish3485).HasForeignKey(c => c.AnotherId).WillCascadeOnDelete(false); // FK_Harish
        }
    }

    // ToAlpha
    public class Beta_ToAlphaConfiguration : EntityTypeConfiguration<Beta_ToAlpha>
    {
        public Beta_ToAlphaConfiguration()
            : this("Beta")
        {
        }

        public Beta_ToAlphaConfiguration(string schema)
        {
            ToTable("ToAlpha", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);
            Property(x => x.AlphaId).HasColumnName(@"AlphaId").HasColumnType("int").IsRequired();

            // Foreign keys
            HasRequired(a => a.Alpha_Workflow).WithMany(b => b.Beta_ToAlphas).HasForeignKey(c => c.AlphaId).WillCascadeOnDelete(false); // BetaToAlpha_AlphaWorkflow
        }
    }

    // workflow
    public class Beta_WorkflowConfiguration : EntityTypeConfiguration<Beta_Workflow>
    {
        public Beta_WorkflowConfiguration()
            : this("Beta")
        {
        }

        public Beta_WorkflowConfiguration(string schema)
        {
            ToTable("workflow", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);
            Property(x => x.Description).HasColumnName(@"Description").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(10);
        }
    }

    // BITFIDDLERALLCAPS
    public class BitfiddlerallcapConfiguration : EntityTypeConfiguration<Bitfiddlerallcap>
    {
        public BitfiddlerallcapConfiguration()
            : this("dbo")
        {
        }

        public BitfiddlerallcapConfiguration(string schema)
        {
            ToTable("BITFIDDLERALLCAPS", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);
        }
    }

    // BitFiddlerCATEGORIES
    public class BitFiddlerCategoRyConfiguration : EntityTypeConfiguration<BitFiddlerCategoRy>
    {
        public BitFiddlerCategoRyConfiguration()
            : this("dbo")
        {
        }

        public BitFiddlerCategoRyConfiguration(string schema)
        {
            ToTable("BitFiddlerCATEGORIES", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);
        }
    }

    // BitFiddlerCURRENCIES
    public class BitFiddlerCurrenCyConfiguration : EntityTypeConfiguration<BitFiddlerCurrenCy>
    {
        public BitFiddlerCurrenCyConfiguration()
            : this("dbo")
        {
        }

        public BitFiddlerCurrenCyConfiguration(string schema)
        {
            ToTable("BitFiddlerCURRENCIES", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);
        }
    }

    // Blah
    public class BlahConfiguration : EntityTypeConfiguration<Blah>
    {
        public BlahConfiguration()
            : this("dbo")
        {
        }

        public BlahConfiguration(string schema)
        {
            ToTable("Blah", schema);
            HasKey(x => x.BlahId);

            Property(x => x.BlahId).HasColumnName(@"BlahID").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);
            HasMany(t => t.Blahs_BlahId2).WithMany(t => t.Blahs1).Map(m =>
            {
                m.ToTable("BlahBlahLink", "dbo");
                m.MapLeftKey("BlahID");
                m.MapRightKey("BlahID2");
            });
            HasMany(t => t.Blahs2).WithMany(t => t.Blahs3).Map(m =>
            {
                m.ToTable("BlahBlahLink_readonly", "dbo");
                m.MapLeftKey("BlahID");
                m.MapRightKey("BlahID2");
            });
            HasMany(t => t.Blargs).WithMany(t => t.Blahs).Map(m =>
            {
                m.ToTable("BlahBlargLink", "dbo");
                m.MapLeftKey("BlahID");
                m.MapRightKey("BlargID");
            });
        }
    }

    // BlahBlahLink_v2
    public class BlahBlahLinkV2Configuration : EntityTypeConfiguration<BlahBlahLinkV2>
    {
        public BlahBlahLinkV2Configuration()
            : this("dbo")
        {
        }

        public BlahBlahLinkV2Configuration(string schema)
        {
            ToTable("BlahBlahLink_v2", schema);
            HasKey(x => new { x.BlahId, x.BlahId2 });

            Property(x => x.BlahId).HasColumnName(@"BlahID").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(DatabaseGeneratedOption.None);
            Property(x => x.BlahId2).HasColumnName(@"BlahID2").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(DatabaseGeneratedOption.None);
            Property(x => x.Dummy1).HasColumnName(@"dummy1").HasColumnType("int").IsOptional();
            Property(x => x.Dummy2).HasColumnName(@"dummy2").HasColumnType("int").IsRequired();
            Property(x => x.Hello).HasColumnName(@"hello").HasColumnType("int").IsRequired();

            // Foreign keys
            HasRequired(a => a.Blah_BlahId).WithMany(b => b.BlahBlahLinkV2_BlahId).HasForeignKey(c => c.BlahId); // FK_BlahBlahLinkv2_Blah_ro
            HasRequired(a => a.Blah_BlahId2).WithMany(b => b.BlahBlahLinkV2_BlahId2).HasForeignKey(c => c.BlahId2).WillCascadeOnDelete(false); // FK_BlahBlahLinkv2_Blah_ro2
        }
    }

    // Blarg
    public class BlargConfiguration : EntityTypeConfiguration<Blarg>
    {
        public BlargConfiguration()
            : this("dbo")
        {
        }

        public BlargConfiguration(string schema)
        {
            ToTable("Blarg", schema);
            HasKey(x => x.BlargId);

            Property(x => x.BlargId).HasColumnName(@"BlargID").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);
        }
    }

    // Burak1
    public class Burak1Configuration : EntityTypeConfiguration<Burak1>
    {
        public Burak1Configuration()
            : this("dbo")
        {
        }

        public Burak1Configuration(string schema)
        {
            ToTable("Burak1", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"id").HasColumnType("bigint").IsRequired().HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);
            Property(x => x.IdT).HasColumnName(@"id_t").HasColumnType("bigint").IsRequired();
            Property(x => x.Num).HasColumnName(@"num").HasColumnType("bigint").IsRequired();
        }
    }

    // Burak2
    public class Burak2Configuration : EntityTypeConfiguration<Burak2>
    {
        public Burak2Configuration()
            : this("dbo")
        {
        }

        public Burak2Configuration(string schema)
        {
            ToTable("Burak2", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"id").HasColumnType("bigint").IsRequired().HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);
            Property(x => x.Num).HasColumnName(@"num").HasColumnType("bigint").IsRequired();
        }
    }

    // CalculatedColumnNotNull
    public class CalculatedColumnNotNullConfiguration : EntityTypeConfiguration<CalculatedColumnNotNull>
    {
        public CalculatedColumnNotNullConfiguration()
            : this("dbo")
        {
        }

        public CalculatedColumnNotNullConfiguration(string schema)
        {
            ToTable("CalculatedColumnNotNull", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"ID").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);
            Property(x => x.Type).HasColumnName(@"Type").HasColumnType("tinyint").IsRequired();
            Property(x => x.IsCalendar).HasColumnName(@"IsCalendar").HasColumnType("bit").IsRequired().HasDatabaseGeneratedOption(DatabaseGeneratedOption.Computed);
            Property(x => x.IsUtilization).HasColumnName(@"IsUtilization").HasColumnType("bit").IsRequired().HasDatabaseGeneratedOption(DatabaseGeneratedOption.Computed);
        }
    }

    // Car
    public class CarConfiguration : EntityTypeConfiguration<Car>
    {
        public CarConfiguration()
            : this("dbo")
        {
        }

        public CarConfiguration(string schema)
        {
            ToTable("Car", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(DatabaseGeneratedOption.None);
            Property(x => x.PrimaryColourId).HasColumnName(@"PrimaryColourId").HasColumnType("int").IsRequired();
            Property(x => x.CarMake).HasColumnName(@"CarMake").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(255);
            Property(x => x.ComputedColumn).HasColumnName(@"computed_column").HasColumnType("int").IsOptional().HasDatabaseGeneratedOption(DatabaseGeneratedOption.Computed);
            Property(x => x.ComputedColumnPersisted).HasColumnName(@"computed_column_persisted").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(DatabaseGeneratedOption.Computed);

            // Foreign keys
            HasRequired(a => a.Colour).WithMany(b => b.Cars_PrimaryColourId).HasForeignKey(c => c.PrimaryColourId).WillCascadeOnDelete(false); // CarPrimaryColourFK
            HasMany(t => t.Colours).WithMany(t => t.Cars_CarId).Map(m =>
            {
                m.ToTable("CarToColour", "dbo");
                m.MapLeftKey("CarId");
                m.MapRightKey("ColourId");
            });
        }
    }

    // ClientCreationState
    public class ClientCreationStateConfiguration : EntityTypeConfiguration<ClientCreationState>
    {
        public ClientCreationStateConfiguration()
            : this("dbo")
        {
        }

        public ClientCreationStateConfiguration(string schema)
        {
            ToTable("ClientCreationState", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"id").HasColumnType("uniqueidentifier").IsRequired().HasDatabaseGeneratedOption(DatabaseGeneratedOption.None);
            Property(x => x.WebhookSetup).HasColumnName(@"WebhookSetup").HasColumnType("bit").IsRequired();
            Property(x => x.AuthSetup).HasColumnName(@"AuthSetup").HasColumnType("bit").IsRequired();
            Property(x => x.AssignedCarrier).HasColumnName(@"AssignedCarrier").HasColumnType("bit").IsRequired();
        }
    }

    // CMS_File
    public class CmsFileConfiguration : EntityTypeConfiguration<CmsFile>
    {
        public CmsFileConfiguration()
            : this("dbo")
        {
        }

        public CmsFileConfiguration(string schema)
        {
            ToTable("CMS_File", schema);
            HasKey(x => x.FileId);

            Property(x => x.FileId).HasColumnName(@"FileId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);
            Property(x => x.FileName).HasColumnName(@"FileName").HasColumnType("nvarchar").IsRequired().HasMaxLength(100);
            Property(x => x.FileDescription).HasColumnName(@"FileDescription").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(500);
            Property(x => x.FileIdentifier).HasColumnName(@"FileIdentifier").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(100);
            Property(x => x.ValidStartDate).HasColumnName(@"ValidStartDate").HasColumnType("datetime").IsOptional();
            Property(x => x.ValidEndDate).HasColumnName(@"ValidEndDate").HasColumnType("datetime").IsOptional();
            Property(x => x.IsActive).HasColumnName(@"IsActive").HasColumnType("bit").IsRequired();
            HasMany(t => t.CmsTags).WithMany(t => t.CmsFiles).Map(m =>
            {
                m.ToTable("CMS_FileTag", "dbo");
                m.MapLeftKey("FileId");
                m.MapRightKey("TagId");
            });
        }
    }

    // CMS_Tag
    public class CmsTagConfiguration : EntityTypeConfiguration<CmsTag>
    {
        public CmsTagConfiguration()
            : this("dbo")
        {
        }

        public CmsTagConfiguration(string schema)
        {
            ToTable("CMS_Tag", schema);
            HasKey(x => x.TagId);

            Property(x => x.TagId).HasColumnName(@"TagId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);
            Property(x => x.TagName).HasColumnName(@"TagName").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(100);
        }
    }

    // CODE_MeetingTopicDetails
    public class CodeMeetingTopicDetailConfiguration : EntityTypeConfiguration<CodeMeetingTopicDetail>
    {
        public CodeMeetingTopicDetailConfiguration()
            : this("dbo")
        {
        }

        public CodeMeetingTopicDetailConfiguration(string schema)
        {
            ToTable("CODE_MeetingTopicDetails", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);
            Property(x => x.IdReuniao).HasColumnName(@"id_reuniao").HasColumnType("int").IsRequired();
            Property(x => x.OrdTrab).HasColumnName(@"ord_trab").HasColumnType("int").IsOptional();
            Property(x => x.Assunto).HasColumnName(@"assunto").HasColumnType("nvarchar").IsOptional().HasMaxLength(250);
            Property(x => x.Desenvolvimento).HasColumnName(@"desenvolvimento").HasColumnType("nvarchar(max)").IsOptional();
            Property(x => x.Origem).HasColumnName(@"origem").HasColumnType("nvarchar").IsOptional().HasMaxLength(5);
            Property(x => x.IdOrigem).HasColumnName(@"id_origem").HasColumnType("int").IsOptional();
            Property(x => x.Estado).HasColumnName(@"Estado").HasColumnType("int").IsOptional();
            Property(x => x.CompanyId).HasColumnName(@"CompanyID").HasColumnType("int").IsRequired();
            Property(x => x.DateCreated).HasColumnName(@"DateCreated").HasColumnType("datetime").IsRequired();
            Property(x => x.DateChanged).HasColumnName(@"DateChanged").HasColumnType("datetime").IsOptional();
        }
    }

    // CodeObject
    public class CodeObjectConfiguration : EntityTypeConfiguration<CodeObject>
    {
        public CodeObjectConfiguration()
            : this("dbo")
        {
        }

        public CodeObjectConfiguration(string schema)
        {
            ToTable("CodeObject", schema);
            HasKey(x => x.CodeObjectNo);

            Property(x => x.CodeObjectNo).HasColumnName(@"codeObjectNo").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(DatabaseGeneratedOption.None);
            Property(x => x.ApplicationNo).HasColumnName(@"applicationNo").HasColumnType("int").IsOptional();
            Property(x => x.Type).HasColumnName(@"type").HasColumnType("int").IsRequired();
            Property(x => x.EName).HasColumnName(@"eName").HasColumnType("nvarchar").IsRequired().HasMaxLength(250);
            Property(x => x.AName).HasColumnName(@"aName").HasColumnType("nvarchar").IsOptional().HasMaxLength(250);
            Property(x => x.Description).HasColumnName(@"description").HasColumnType("nvarchar").IsOptional().HasMaxLength(250);
            Property(x => x.CodeName).HasColumnName(@"codeName").HasColumnType("nvarchar").IsOptional().HasMaxLength(250);
            Property(x => x.Note).HasColumnName(@"note").HasColumnType("nvarchar").IsOptional().HasMaxLength(250);
            Property(x => x.IsObject).HasColumnName(@"isObject").HasColumnType("bit").IsRequired();
            Property(x => x.VersionNumber).HasColumnName(@"versionNumber").HasColumnType("timestamp").IsOptional().IsFixedLength().HasMaxLength(8).IsRowVersion().IsConcurrencyToken();
        }
    }

    // CODE_PARAM_MeetingTopicDetailSource
    public class CodeParamMeetingTopicDetailSourceConfiguration : EntityTypeConfiguration<CodeParamMeetingTopicDetailSource>
    {
        public CodeParamMeetingTopicDetailSourceConfiguration()
            : this("dbo")
        {
        }

        public CodeParamMeetingTopicDetailSourceConfiguration(string schema)
        {
            ToTable("CODE_PARAM_MeetingTopicDetailSource", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"ID").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);
            Property(x => x.Code).HasColumnName(@"Code").HasColumnType("nvarchar").IsRequired().HasMaxLength(5);
            Property(x => x.Label).HasColumnName(@"Label").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
            Property(x => x.LabelEng).HasColumnName(@"LabelENG").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
            Property(x => x.LabelEsp).HasColumnName(@"LabelESP").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
            Property(x => x.LabelFra).HasColumnName(@"LabelFRA").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
            Property(x => x.DateCreated).HasColumnName(@"DateCreated").HasColumnType("datetime").IsRequired();
            Property(x => x.DateChanged).HasColumnName(@"DateChanged").HasColumnType("datetime").IsOptional();
        }
    }

    // Colour
    public class ColourConfiguration : EntityTypeConfiguration<Colour>
    {
        public ColourConfiguration()
            : this("dbo")
        {
        }

        public ColourConfiguration(string schema)
        {
            ToTable("Colour", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(DatabaseGeneratedOption.None);
            Property(x => x.Name).HasColumnName(@"Name").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(255);
        }
    }

    // ColumnNameAndTypes
    public class ColumnNameAndTypeConfiguration : EntityTypeConfiguration<ColumnNameAndType>
    {
        public ColumnNameAndTypeConfiguration()
            : this("dbo")
        {
        }

        public ColumnNameAndTypeConfiguration(string schema)
        {
            ToTable("ColumnNameAndTypes", schema);
            HasKey(x => x.C36);

            Property(x => x.C36).HasColumnName(@"$").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(DatabaseGeneratedOption.None);
            Property(x => x.C37).HasColumnName(@"%").HasColumnType("int").IsOptional();
            Property(x => x.C163).HasColumnName(@"£").HasColumnType("int").IsOptional();
            Property(x => x.C38Fred).HasColumnName(@"&fred$").HasColumnType("int").IsOptional();
            Property(x => x.Abc4792).HasColumnName(@"abc/\").HasColumnType("int").IsOptional();
            Property(x => x.JoeBloggs).HasColumnName(@"joe.bloggs").HasColumnType("int").IsOptional();
            Property(x => x.SimonHughes).HasColumnName(@"simon-hughes").HasColumnType("int").IsOptional();
            Property(x => x.Description).HasColumnName(@"description").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(20);
            Property(x => x.SomeDate).HasColumnName(@"someDate").HasColumnType("datetime2").IsRequired();
            Property(x => x.Obs).HasColumnName(@"Obs").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(50);
            Property(x => x.Obs1).HasColumnName(@"Obs1").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(50);
            Property(x => x.Obs2).HasColumnName(@"Obs2").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(50);
            Property(x => x.Obs3).HasColumnName(@"Obs3").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(50);
            Property(x => x.@Static).HasColumnName(@"static").HasColumnType("int").IsOptional();
            Property(x => x.@Readonly).HasColumnName(@"readonly").HasColumnType("int").IsOptional();
            Property(x => x.C123Hi).HasColumnName(@"123Hi").HasColumnType("int").IsOptional();
            Property(x => x.Areal).HasColumnName(@"areal").HasColumnType("real").IsOptional();
            Property(x => x.Afloat).HasColumnName(@"afloat").HasColumnType("float").IsOptional();
            Property(x => x.Afloat8).HasColumnName(@"afloat8").HasColumnType("real").IsOptional();
            Property(x => x.Afloat20).HasColumnName(@"afloat20").HasColumnType("real").IsOptional();
            Property(x => x.Afloat24).HasColumnName(@"afloat24").HasColumnType("real").IsOptional();
            Property(x => x.Afloat53).HasColumnName(@"afloat53").HasColumnType("float").IsOptional();
            Property(x => x.Adecimal).HasColumnName(@"adecimal").HasColumnType("decimal").IsOptional().HasPrecision(18,0);
            Property(x => x.Adecimal194).HasColumnName(@"adecimal_19_4").HasColumnType("decimal").IsOptional().HasPrecision(19,4);
            Property(x => x.Adecimal103).HasColumnName(@"adecimal_10_3").HasColumnType("decimal").IsOptional().HasPrecision(10,3);
            Property(x => x.Anumeric).HasColumnName(@"anumeric").HasColumnType("numeric").IsOptional().HasPrecision(18,0);
            Property(x => x.Anumeric52).HasColumnName(@"anumeric_5_2").HasColumnType("numeric").IsOptional().HasPrecision(5,2);
            Property(x => x.Anumeric113).HasColumnName(@"anumeric_11_3").HasColumnType("numeric").IsOptional().HasPrecision(11,3);
            Property(x => x.Amoney).HasColumnName(@"amoney").HasColumnType("money").IsOptional();
            Property(x => x.Asmallmoney).HasColumnName(@"asmallmoney").HasColumnType("smallmoney").IsOptional();
            Property(x => x.Brandon).HasColumnName(@"brandon").HasColumnType("int").IsOptional();
            Property(x => x.GeographyType).HasColumnName(@"GeographyType").HasColumnType("geography").IsOptional();
            Property(x => x.GeometryType).HasColumnName(@"GeometryType").HasColumnType("geometry").IsOptional();
        }
    }

    // ComplexView
    public class ComplexViewConfiguration : EntityTypeConfiguration<ComplexView>
    {
        public ComplexViewConfiguration()
            : this("dbo")
        {
        }

        public ComplexViewConfiguration(string schema)
        {
            ToTable("ComplexView", schema);
            HasKey(x => x.LicenseType);

            Property(x => x.LicenseType).HasColumnName(@"LicenseType").HasColumnType("nvarchar").IsRequired().HasMaxLength(128).HasDatabaseGeneratedOption(DatabaseGeneratedOption.None);
            Property(x => x.Count).HasColumnName(@"Count").HasColumnType("int").IsOptional();
        }
    }

    // Country
    public class CountryConfiguration : EntityTypeConfiguration<Country>
    {
        public CountryConfiguration()
            : this("dbo")
        {
        }

        public CountryConfiguration(string schema)
        {
            ToTable("Country", schema);
            HasKey(x => x.CountryId);

            Property(x => x.CountryId).HasColumnName(@"CountryID").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);
            Property(x => x.Code).HasColumnName(@"Code").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(12);
        }
    }

    // cross_database_synonym
    public class CrossDatabaseSynonymConfiguration : EntityTypeConfiguration<CrossDatabaseSynonym>
    {
        public CrossDatabaseSynonymConfiguration()
            : this("dbo")
        {
        }

        public CrossDatabaseSynonymConfiguration(string schema)
        {
            ToTable("cross_database_synonym", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);
            Property(x => x.Forename).HasColumnName(@"Forename").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(20);
        }
    }

    // DateTimeDefaultTest
    public class DateTimeDefaultTestConfiguration : EntityTypeConfiguration<DateTimeDefaultTest>
    {
        public DateTimeDefaultTestConfiguration()
            : this("dbo")
        {
        }

        public DateTimeDefaultTestConfiguration(string schema)
        {
            ToTable("DateTimeDefaultTest", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(DatabaseGeneratedOption.None);
            Property(x => x.CreatedDate).HasColumnName(@"CreatedDate").HasColumnType("datetimeoffset").IsOptional();
        }
    }

    // rov_ColumnDefinitions
    public class dcg_RovColumnDefinitionConfiguration : EntityTypeConfiguration<dcg_RovColumnDefinition>
    {
        public dcg_RovColumnDefinitionConfiguration()
            : this("dcg")
        {
        }

        public dcg_RovColumnDefinitionConfiguration(string schema)
        {
            ToTable("rov_ColumnDefinitions", schema);
            HasKey(x => x.TableName);

            Property(x => x.TableCatalog).HasColumnName(@"TABLE_CATALOG").HasColumnType("nvarchar").IsOptional().HasMaxLength(128);
            Property(x => x.TableSchema).HasColumnName(@"TABLE_SCHEMA").HasColumnType("nvarchar").IsOptional().HasMaxLength(128);
            Property(x => x.TableName).HasColumnName(@"TABLE_NAME").HasColumnType("nvarchar").IsRequired().HasMaxLength(128).HasDatabaseGeneratedOption(DatabaseGeneratedOption.None);
            Property(x => x.ColumnName).HasColumnName(@"COLUMN_NAME").HasColumnType("nvarchar").IsOptional().HasMaxLength(128);
            Property(x => x.OrdinalPosition).HasColumnName(@"ORDINAL_POSITION").HasColumnType("int").IsOptional();
            Property(x => x.ColumnDefault).HasColumnName(@"COLUMN_DEFAULT").HasColumnType("nvarchar").IsOptional().HasMaxLength(4000);
            Property(x => x.IsNullable).HasColumnName(@"IS_NULLABLE").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(3);
            Property(x => x.DataType).HasColumnName(@"DATA_TYPE").HasColumnType("nvarchar").IsOptional().HasMaxLength(128);
            Property(x => x.CharacterMaximumLength).HasColumnName(@"CHARACTER_MAXIMUM_LENGTH").HasColumnType("int").IsOptional();
            Property(x => x.CharacterOctetLength).HasColumnName(@"CHARACTER_OCTET_LENGTH").HasColumnType("int").IsOptional();
            Property(x => x.NumericPrecision).HasColumnName(@"NUMERIC_PRECISION").HasColumnType("tinyint").IsOptional();
            Property(x => x.NumericPrecisionRadix).HasColumnName(@"NUMERIC_PRECISION_RADIX").HasColumnType("smallint").IsOptional();
            Property(x => x.NumericScale).HasColumnName(@"NUMERIC_SCALE").HasColumnType("int").IsOptional();
            Property(x => x.DatetimePrecision).HasColumnName(@"DATETIME_PRECISION").HasColumnType("smallint").IsOptional();
            Property(x => x.CharacterSetCatalog).HasColumnName(@"CHARACTER_SET_CATALOG").HasColumnType("nvarchar").IsOptional().HasMaxLength(128);
            Property(x => x.CharacterSetSchema).HasColumnName(@"CHARACTER_SET_SCHEMA").HasColumnType("nvarchar").IsOptional().HasMaxLength(128);
            Property(x => x.CharacterSetName).HasColumnName(@"CHARACTER_SET_NAME").HasColumnType("nvarchar").IsOptional().HasMaxLength(128);
            Property(x => x.CollationCatalog).HasColumnName(@"COLLATION_CATALOG").HasColumnType("nvarchar").IsOptional().HasMaxLength(128);
            Property(x => x.CollationSchema).HasColumnName(@"COLLATION_SCHEMA").HasColumnType("nvarchar").IsOptional().HasMaxLength(128);
            Property(x => x.CollationName).HasColumnName(@"COLLATION_NAME").HasColumnType("nvarchar").IsOptional().HasMaxLength(128);
            Property(x => x.DomainCatalog).HasColumnName(@"DOMAIN_CATALOG").HasColumnType("nvarchar").IsOptional().HasMaxLength(128);
            Property(x => x.DomainSchema).HasColumnName(@"DOMAIN_SCHEMA").HasColumnType("nvarchar").IsOptional().HasMaxLength(128);
            Property(x => x.DomainName).HasColumnName(@"DOMAIN_NAME").HasColumnType("nvarchar").IsOptional().HasMaxLength(128);
            Property(x => x.Type).HasColumnName(@"TYPE").HasColumnType("char").IsOptional().IsFixedLength().IsUnicode(false).HasMaxLength(2);
        }
    }

    // DefaultCheckForNull
    public class DefaultCheckForNullConfiguration : EntityTypeConfiguration<DefaultCheckForNull>
    {
        public DefaultCheckForNullConfiguration()
            : this("dbo")
        {
        }

        public DefaultCheckForNullConfiguration(string schema)
        {
            ToTable("DefaultCheckForNull", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);
            Property(x => x.DescUppercase).HasColumnName(@"DescUppercase").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(5);
            Property(x => x.DescLowercase).HasColumnName(@"DescLowercase").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(5);
            Property(x => x.DescMixedCase).HasColumnName(@"DescMixedCase").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(5);
            Property(x => x.DescBrackets).HasColumnName(@"DescBrackets").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(5);
            Property(x => x.X1).HasColumnName(@"X1").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(255);
        }
    }

    // DSOpe
    public class DsOpeConfiguration : EntityTypeConfiguration<DsOpe>
    {
        public DsOpeConfiguration()
            : this("dbo")
        {
        }

        public DsOpeConfiguration(string schema)
        {
            ToTable("DSOpe", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"ID").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(DatabaseGeneratedOption.None);
            Property(x => x.DecimalDefault).HasColumnName(@"decimal_default").HasColumnType("decimal").IsRequired().HasPrecision(15,2);
            Property(x => x.MyGuid).HasColumnName(@"MyGuid").HasColumnType("uniqueidentifier").IsRequired();
            Property(x => x.@Default).HasColumnName(@"default").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(10);
            Property(x => x.MyGuidBadDefault).HasColumnName(@"MyGuidBadDefault").HasColumnType("uniqueidentifier").IsOptional();
        }
    }

    // EnumsWithStringAsValue
    public class EnumsWithStringAsValueConfiguration : EntityTypeConfiguration<EnumsWithStringAsValue>
    {
        public EnumsWithStringAsValueConfiguration()
            : this("dbo")
        {
        }

        public EnumsWithStringAsValueConfiguration(string schema)
        {
            ToTable("EnumsWithStringAsValue", schema);
            HasKey(x => new { x.EnumName, x.Value });

            Property(x => x.EnumName).HasColumnName(@"enum_name").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(50).HasDatabaseGeneratedOption(DatabaseGeneratedOption.None);
            Property(x => x.Value).HasColumnName(@"value").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(10).HasDatabaseGeneratedOption(DatabaseGeneratedOption.None);
        }
    }

    // DaysOfWeek
    public class EnumTest_DaysOfWeekConfiguration : EntityTypeConfiguration<EnumTest_DaysOfWeek>
    {
        public EnumTest_DaysOfWeekConfiguration()
            : this("EnumTest")
        {
        }

        public EnumTest_DaysOfWeekConfiguration(string schema)
        {
            ToTable("DaysOfWeek", schema);
            HasKey(x => x.TypeId);

            Property(x => x.TypeName).HasColumnName(@"TypeName").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(50);
            Property(x => x.TypeId).HasColumnName(@"TypeId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(DatabaseGeneratedOption.None);
        }
    }

    // OpenDays
    public class EnumTest_OpenDayConfiguration : EntityTypeConfiguration<EnumTest_OpenDay>
    {
        public EnumTest_OpenDayConfiguration()
            : this("EnumTest")
        {
        }

        public EnumTest_OpenDayConfiguration(string schema)
        {
            ToTable("OpenDays", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);
            Property(x => x.EnumId).HasColumnName(@"EnumId").HasColumnType("int").IsRequired();

            // Foreign keys
            HasRequired(a => a.EnumTest_DaysOfWeek).WithMany(b => b.EnumTest_OpenDays).HasForeignKey(c => c.EnumId).WillCascadeOnDelete(false); // Fk_OpenDays_EnumId
        }
    }

    // EnumWithDefaultValue
    public class EnumWithDefaultValueConfiguration : EntityTypeConfiguration<EnumWithDefaultValue>
    {
        public EnumWithDefaultValueConfiguration()
            : this("dbo")
        {
        }

        public EnumWithDefaultValueConfiguration(string schema)
        {
            ToTable("EnumWithDefaultValue", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);
            Property(x => x.SomeEnum).HasColumnName(@"SomeEnum").HasColumnType("int").IsRequired();
        }
    }

    // EventProcessor
    public class EventProcessorConfiguration : EntityTypeConfiguration<EventProcessor>
    {
        public EventProcessorConfiguration()
            : this("dbo")
        {
        }

        public EventProcessorConfiguration(string schema)
        {
            ToTable("EventProcessor", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);
            Property(x => x.Name).HasColumnName(@"Name").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(200);
            Property(x => x.Description).HasColumnName(@"Description").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(512);
            Property(x => x.EndpointAddress).HasColumnName(@"EndpointAddress").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(512);
            Property(x => x.Enabled).HasColumnName(@"Enabled").HasColumnType("bit").IsRequired();
        }
    }

    // EventProcessorEventFilter
    public class EventProcessorEventFilterConfiguration : EntityTypeConfiguration<EventProcessorEventFilter>
    {
        public EventProcessorEventFilterConfiguration()
            : this("dbo")
        {
        }

        public EventProcessorEventFilterConfiguration(string schema)
        {
            ToTable("EventProcessorEventFilter", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);
            Property(x => x.EventProcessorId).HasColumnName(@"EventProcessorId").HasColumnType("int").IsRequired();
            Property(x => x.WantedEventId).HasColumnName(@"WantedEventId").HasColumnType("int").IsRequired();

            // Foreign keys
            HasRequired(a => a.EventProcessor).WithMany(b => b.EventProcessorEventFilters).HasForeignKey(c => c.EventProcessorId).WillCascadeOnDelete(false); // FK_EventProcessorEventFilter__EventProcessor
        }
    }

    // CV
    public class FFRS_CvConfiguration : EntityTypeConfiguration<FFRS_Cv>
    {
        public FFRS_CvConfiguration()
            : this("FFRS")
        {
        }

        public FFRS_CvConfiguration(string schema)
        {
            ToTable("CV", schema);
            HasKey(x => new { x.BatchUid, x.Cvid });

            Property(x => x.BatchUid).HasColumnName(@"BatchUID").HasColumnType("uniqueidentifier").IsRequired().HasDatabaseGeneratedOption(DatabaseGeneratedOption.None);
            Property(x => x.Cvid).HasColumnName(@"CVID").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(DatabaseGeneratedOption.None);
            Property(x => x.CvName).HasColumnName(@"CVName").HasColumnType("nvarchar").IsOptional().HasMaxLength(200);
        }
    }

    // FinancialInstitutionOffice
    public class FinancialInstitutionOfficeConfiguration : EntityTypeConfiguration<FinancialInstitutionOffice>
    {
        public FinancialInstitutionOfficeConfiguration()
            : this("dbo")
        {
        }

        public FinancialInstitutionOfficeConfiguration(string schema)
        {
            ToTable("FinancialInstitutionOffice", schema);
            HasKey(x => x.FinancialInstitutionCode);

            Property(x => x.Code).HasColumnName(@"Code").HasColumnType("uniqueidentifier").IsRequired();
            Property(x => x.FinancialInstitutionCode).HasColumnName(@"FinancialInstitutionCode").HasColumnType("uniqueidentifier").IsRequired().HasDatabaseGeneratedOption(DatabaseGeneratedOption.None);
            Property(x => x.OfficeName).HasColumnName(@"OfficeName").HasColumnType("nvarchar").IsOptional().HasMaxLength(200);
        }
    }

    // SmallDecimalTestAttribute
    public class FkTest_SmallDecimalTestAttributeConfiguration : EntityTypeConfiguration<FkTest_SmallDecimalTestAttribute>
    {
        public FkTest_SmallDecimalTestAttributeConfiguration()
            : this("FkTest")
        {
        }

        public FkTest_SmallDecimalTestAttributeConfiguration(string schema)
        {
            ToTable("SmallDecimalTestAttribute", schema);
            HasKey(x => x.FkId);

            Property(x => x.FkId).HasColumnName(@"FkID").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(DatabaseGeneratedOption.None);
            Property(x => x.Description).HasColumnName(@"description").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(20);

            // Foreign keys
            HasRequired(a => a.SmallDecimalTest).WithOptional(b => b.FkTest_SmallDecimalTestAttribute).WillCascadeOnDelete(false); // KateFK
        }
    }

    // footer
    public class FooterConfiguration : EntityTypeConfiguration<Footer>
    {
        public FooterConfiguration()
            : this("dbo")
        {
        }

        public FooterConfiguration(string schema)
        {
            ToTable("footer", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"ID").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);
            Property(x => x.OtherId).HasColumnName(@"otherID").HasColumnType("int").IsRequired();
            Property(x => x.Added).HasColumnName(@"added").HasColumnType("datetime").IsRequired();

            // Foreign keys
            HasRequired(a => a.Header).WithMany(b => b.Footers).HasForeignKey(c => new { c.Id, c.OtherId }).WillCascadeOnDelete(false); // fooderFK
        }
    }

    // ForeignKeyIsNotEnforced
    public class ForeignKeyIsNotEnforcedConfiguration : EntityTypeConfiguration<ForeignKeyIsNotEnforced>
    {
        public ForeignKeyIsNotEnforcedConfiguration()
            : this("dbo")
        {
        }

        public ForeignKeyIsNotEnforcedConfiguration(string schema)
        {
            ToTable("ForeignKeyIsNotEnforced", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);
            Property(x => x.NullValue).HasColumnName(@"null_value").HasColumnType("int").IsOptional();
            Property(x => x.NotNullValue).HasColumnName(@"not_null_value").HasColumnType("int").IsRequired();
        }
    }

    // ForeignKeyIsNotEnforcedItem
    public class ForeignKeyIsNotEnforcedItemConfiguration : EntityTypeConfiguration<ForeignKeyIsNotEnforcedItem>
    {
        public ForeignKeyIsNotEnforcedItemConfiguration()
            : this("dbo")
        {
        }

        public ForeignKeyIsNotEnforcedItemConfiguration(string schema)
        {
            ToTable("ForeignKeyIsNotEnforcedItem", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);
            Property(x => x.NullValue).HasColumnName(@"null_value").HasColumnType("int").IsOptional();
            Property(x => x.NotNullValue).HasColumnName(@"not_null_value").HasColumnType("int").IsRequired();
        }
    }

    // HasPrincipalKeyTestChild
    public class HasPrincipalKeyTestChildConfiguration : EntityTypeConfiguration<HasPrincipalKeyTestChild>
    {
        public HasPrincipalKeyTestChildConfiguration()
            : this("dbo")
        {
        }

        public HasPrincipalKeyTestChildConfiguration(string schema)
        {
            ToTable("HasPrincipalKeyTestChild", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);
            Property(x => x.A).HasColumnName(@"A").HasColumnType("int").IsRequired();
            Property(x => x.B).HasColumnName(@"B").HasColumnType("int").IsRequired();
            Property(x => x.C).HasColumnName(@"C").HasColumnType("int").IsOptional();
            Property(x => x.D).HasColumnName(@"D").HasColumnType("int").IsOptional();
        }
    }

    // HasPrincipalKeyTestParent
    public class HasPrincipalKeyTestParentConfiguration : EntityTypeConfiguration<HasPrincipalKeyTestParent>
    {
        public HasPrincipalKeyTestParentConfiguration()
            : this("dbo")
        {
        }

        public HasPrincipalKeyTestParentConfiguration(string schema)
        {
            ToTable("HasPrincipalKeyTestParent", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);
            Property(x => x.Aa).HasColumnName(@"AA").HasColumnType("int").IsRequired();
            Property(x => x.Bb).HasColumnName(@"BB").HasColumnType("int").IsRequired();
            Property(x => x.Cc).HasColumnName(@"CC").HasColumnType("int").IsOptional();
            Property(x => x.Dd).HasColumnName(@"DD").HasColumnType("int").IsOptional();
        }
    }

    // header
    public class HeaderConfiguration : EntityTypeConfiguration<Header>
    {
        public HeaderConfiguration()
            : this("dbo")
        {
        }

        public HeaderConfiguration(string schema)
        {
            ToTable("header", schema);
            HasKey(x => new { x.Id, x.AnotherId });

            Property(x => x.Id).HasColumnName(@"ID").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(DatabaseGeneratedOption.None);
            Property(x => x.AnotherId).HasColumnName(@"anotherID").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(DatabaseGeneratedOption.None);
            Property(x => x.Added).HasColumnName(@"added").HasColumnType("datetime").IsRequired();
        }
    }

    // hierarchy_test
    public class HierarchyTestConfiguration : EntityTypeConfiguration<HierarchyTest>
    {
        public HierarchyTestConfiguration()
            : this("dbo")
        {
        }

        public HierarchyTestConfiguration(string schema)
        {
            ToTable("hierarchy_test", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"ID").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);
            Property(x => x.Hid).HasColumnName(@"hid").HasColumnType("hierarchyid").IsRequired();
        }
    }

    // InflectorData
    public class InflectorDataConfiguration : EntityTypeConfiguration<InflectorData>
    {
        public InflectorDataConfiguration()
            : this("dbo")
        {
        }

        public InflectorDataConfiguration(string schema)
        {
            ToTable("InflectorData", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);
        }
    }

    // InflectorStatus
    public class InflectorStatusConfiguration : EntityTypeConfiguration<InflectorStatus>
    {
        public InflectorStatusConfiguration()
            : this("dbo")
        {
        }

        public InflectorStatusConfiguration(string schema)
        {
            ToTable("InflectorStatus", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);
            Property(x => x.SayHelloTo).HasColumnName(@"SayHelloTo").HasColumnType("int").IsRequired();
            Property(x => x.SignalData).HasColumnName(@"SignalData").HasColumnType("int").IsRequired();
            Property(x => x.NotificationStatus).HasColumnName(@"NotificationStatus").HasColumnType("int").IsRequired();
            Property(x => x.Status).HasColumnName(@"Status").HasColumnType("int").IsRequired();
            Property(x => x.To).HasColumnName(@"To").HasColumnType("int").IsRequired();
            Property(x => x.Data).HasColumnName(@"Data").HasColumnType("int").IsRequired();
        }
    }

    // InflectorTo
    public class InflectorToConfiguration : EntityTypeConfiguration<InflectorTo>
    {
        public InflectorToConfiguration()
            : this("dbo")
        {
        }

        public InflectorToConfiguration(string schema)
        {
            ToTable("InflectorTo", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);
        }
    }

    // Role
    public class Issue47_RoleConfiguration : EntityTypeConfiguration<Issue47_Role>
    {
        public Issue47_RoleConfiguration()
            : this("Issue47")
        {
        }

        public Issue47_RoleConfiguration(string schema)
        {
            ToTable("Role", schema);
            HasKey(x => x.RoleId);

            Property(x => x.RoleId).HasColumnName(@"RoleId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);
            Property(x => x.Role).HasColumnName(@"Role").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(10);
        }
    }

    // Users
    public class Issue47_UserConfiguration : EntityTypeConfiguration<Issue47_User>
    {
        public Issue47_UserConfiguration()
            : this("Issue47")
        {
        }

        public Issue47_UserConfiguration(string schema)
        {
            ToTable("Users", schema);
            HasKey(x => x.UserId);

            Property(x => x.UserId).HasColumnName(@"UserId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);
            Property(x => x.Name).HasColumnName(@"Name").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(10);
        }
    }

    // UserRoles
    public class Issue47_UserRoleConfiguration : EntityTypeConfiguration<Issue47_UserRole>
    {
        public Issue47_UserRoleConfiguration()
            : this("Issue47")
        {
        }

        public Issue47_UserRoleConfiguration(string schema)
        {
            ToTable("UserRoles", schema);
            HasKey(x => x.UserRoleId);

            Property(x => x.UserRoleId).HasColumnName(@"UserRoleId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);
            Property(x => x.UserId).HasColumnName(@"UserId").HasColumnType("int").IsRequired();
            Property(x => x.RoleId).HasColumnName(@"RoleId").HasColumnType("int").IsRequired();

            // Foreign keys
            HasRequired(a => a.Issue47_Role).WithMany(b => b.Issue47_UserRoles).HasForeignKey(c => c.RoleId).WillCascadeOnDelete(false); // Issue47_UserRoles_roleid
            HasRequired(a => a.Issue47_User).WithMany(b => b.Issue47_UserRoles).HasForeignKey(c => c.UserId).WillCascadeOnDelete(false); // Issue47_UserRoles_userid
        }
    }

    // MultipleKeys
    public class MultipleKeyConfiguration : EntityTypeConfiguration<MultipleKey>
    {
        public MultipleKeyConfiguration()
            : this("dbo")
        {
        }

        public MultipleKeyConfiguration(string schema)
        {
            ToTable("MultipleKeys", schema);
            HasKey(x => new { x.UserId, x.FavouriteColourId, x.BestHolidayTypeId });

            Property(x => x.UserId).HasColumnName(@"UserId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(DatabaseGeneratedOption.None);
            Property(x => x.FavouriteColourId).HasColumnName(@"FavouriteColourId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(DatabaseGeneratedOption.None);
            Property(x => x.BestHolidayTypeId).HasColumnName(@"BestHolidayTypeId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(DatabaseGeneratedOption.None);
            Property(x => x.BankId).HasColumnName(@"BankId").HasColumnType("int").IsRequired();
            Property(x => x.CarId).HasColumnName(@"CarId").HasColumnType("int").IsRequired();
        }
    }

    // Issue
    public class OneEightSix_IssueConfiguration : EntityTypeConfiguration<OneEightSix_Issue>
    {
        public OneEightSix_IssueConfiguration()
            : this("OneEightSix")
        {
        }

        public OneEightSix_IssueConfiguration(string schema)
        {
            ToTable("Issue", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);
            Property(x => x.Title).HasColumnName(@"Title").HasColumnType("nvarchar").IsRequired().HasMaxLength(100);
            Property(x => x.Content).HasColumnName(@"Content").HasColumnType("nvarchar(max)").IsOptional();
            Property(x => x.ConsentDocumentId).HasColumnName(@"ConsentDocumentId").HasColumnType("int").IsOptional();

            // Foreign keys
            HasOptional(a => a.OneEightSix_UploadedFile).WithMany(b => b.OneEightSix_Issues_ConsentDocumentId).HasForeignKey(c => c.ConsentDocumentId).WillCascadeOnDelete(false); // FK_Issue_UploadedFileConsentDocument
            HasMany(t => t.OneEightSix_UploadedFiles).WithMany(t => t.OneEightSix_Issues_IssueId).Map(m =>
            {
                m.ToTable("IssueUploadedFile", "OneEightSix");
                m.MapLeftKey("IssueId");
                m.MapRightKey("UploadedFileId");
            });
        }
    }

    // UploadedFile
    public class OneEightSix_UploadedFileConfiguration : EntityTypeConfiguration<OneEightSix_UploadedFile>
    {
        public OneEightSix_UploadedFileConfiguration()
            : this("OneEightSix")
        {
        }

        public OneEightSix_UploadedFileConfiguration(string schema)
        {
            ToTable("UploadedFile", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);
            Property(x => x.FullPath).HasColumnName(@"FullPath").HasColumnType("nvarchar(max)").IsRequired();
        }
    }

    // Period.Table
    public class PeriodTableConfiguration : EntityTypeConfiguration<PeriodTable>
    {
        public PeriodTableConfiguration()
            : this("dbo")
        {
        }

        public PeriodTableConfiguration(string schema)
        {
            ToTable("Period.Table", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(DatabaseGeneratedOption.None);
            Property(x => x.JoeBloggs).HasColumnName(@"joe.bloggs").HasColumnType("int").IsOptional();
        }
    }

    // PeriodTestTable
    public class PeriodTestTableConfiguration : EntityTypeConfiguration<PeriodTestTable>
    {
        public PeriodTestTableConfiguration()
            : this("dbo")
        {
        }

        public PeriodTestTableConfiguration(string schema)
        {
            ToTable("PeriodTestTable", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(DatabaseGeneratedOption.None);
            Property(x => x.JoeBloggs).HasColumnName(@"joe.bloggs").HasColumnType("int").IsOptional();
        }
    }

    // Person
    public class PersonConfiguration : EntityTypeConfiguration<Person>
    {
        public PersonConfiguration()
            : this("dbo")
        {
        }

        public PersonConfiguration(string schema)
        {
            ToTable("Person", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);
            Property(x => x.Name).HasColumnName(@"Name").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(50);
        }
    }

    // PersonPosts
    public class PersonPostConfiguration : EntityTypeConfiguration<PersonPost>
    {
        public PersonPostConfiguration()
            : this("dbo")
        {
        }

        public PersonPostConfiguration(string schema)
        {
            ToTable("PersonPosts", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);
            Property(x => x.Title).HasColumnName(@"Title").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(20);
            Property(x => x.Body).HasColumnName(@"Body").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(100);
            Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("int").IsRequired();
            Property(x => x.UpdatedBy).HasColumnName(@"UpdatedBy").HasColumnType("int").IsRequired();

            // Foreign keys
            HasRequired(a => a.Person_CreatedBy).WithMany(b => b.PersonPosts_CreatedBy).HasForeignKey(c => c.CreatedBy).WillCascadeOnDelete(false); // FK_PersonPosts_CreatedBy
            HasRequired(a => a.Person_UpdatedBy).WithMany(b => b.PersonPosts_UpdatedBy).HasForeignKey(c => c.UpdatedBy).WillCascadeOnDelete(false); // FK_PersonPosts_UpdatedBy
        }
    }

    // pk_ordinal_test
    public class PkOrdinalTestConfiguration : EntityTypeConfiguration<PkOrdinalTest>
    {
        public PkOrdinalTestConfiguration()
            : this("dbo")
        {
        }

        public PkOrdinalTestConfiguration(string schema)
        {
            ToTable("pk_ordinal_test", schema);
            HasKey(x => new { x.C3, x.C1 });

            Property(x => x.C1).HasColumnName(@"C1").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(DatabaseGeneratedOption.None);
            Property(x => x.C2).HasColumnName(@"C2").HasColumnType("int").IsRequired();
            Property(x => x.C3).HasColumnName(@"C3").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(DatabaseGeneratedOption.None);
        }
    }

    // PropertyTypesToAdd
    public class PropertyTypesToAddConfiguration : EntityTypeConfiguration<PropertyTypesToAdd>
    {
        public PropertyTypesToAddConfiguration()
            : this("dbo")
        {
        }

        public PropertyTypesToAddConfiguration(string schema)
        {
            ToTable("PropertyTypesToAdd", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(DatabaseGeneratedOption.None);
            Property(x => x.DtDefault).HasColumnName(@"dt_default").HasColumnType("datetime2").IsOptional();
            Property(x => x.Dt7).HasColumnName(@"dt7").HasColumnType("datetime2").IsOptional();
            Property(x => x.DefaultCheck).HasColumnName(@"defaultCheck").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(10);
        }
    }

    // SequenceTest
    public class SequenceTestConfiguration : EntityTypeConfiguration<SequenceTest>
    {
        public SequenceTestConfiguration()
            : this("dbo")
        {
        }

        public SequenceTestConfiguration(string schema)
        {
            ToTable("SequenceTest", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(DatabaseGeneratedOption.None);
            Property(x => x.CntByBigInt).HasColumnName(@"CntByBigInt").HasColumnType("bigint").IsRequired();
            Property(x => x.CntByTinyInt).HasColumnName(@"CntByTinyInt").HasColumnType("tinyint").IsRequired();
            Property(x => x.CntBySmallInt).HasColumnName(@"CntBySmallInt").HasColumnType("smallint").IsRequired();
            Property(x => x.CntByDecimal).HasColumnName(@"CntByDecimal").HasColumnType("decimal").IsRequired().HasPrecision(18,0);
            Property(x => x.CntByNumeric).HasColumnName(@"CntByNumeric").HasColumnType("numeric").IsRequired().HasPrecision(18,0);
        }
    }

    // SequenceTestPartTwo
    public class SequenceTestPartTwoConfiguration : EntityTypeConfiguration<SequenceTestPartTwo>
    {
        public SequenceTestPartTwoConfiguration()
            : this("dbo")
        {
        }

        public SequenceTestPartTwoConfiguration(string schema)
        {
            ToTable("SequenceTestPartTwo", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);
            Property(x => x.CntByBigInt).HasColumnName(@"CntByBigInt").HasColumnType("bigint").IsRequired();
            Property(x => x.CntByTinyInt).HasColumnName(@"CntByTinyInt").HasColumnType("tinyint").IsRequired();
        }
    }

    // SmallDecimalTest
    public class SmallDecimalTestConfiguration : EntityTypeConfiguration<SmallDecimalTest>
    {
        public SmallDecimalTestConfiguration()
            : this("dbo")
        {
        }

        public SmallDecimalTestConfiguration(string schema)
        {
            ToTable("SmallDecimalTest", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(DatabaseGeneratedOption.None);
            Property(x => x.KoeffVed).HasColumnName(@"KoeffVed").HasColumnType("decimal").IsOptional().HasPrecision(4,4);
        }
    }

    // SmallDecimalTestView
    public class SmallDecimalTestViewConfiguration : EntityTypeConfiguration<SmallDecimalTestView>
    {
        public SmallDecimalTestViewConfiguration()
            : this("dbo")
        {
        }

        public SmallDecimalTestViewConfiguration(string schema)
        {
            ToTable("SmallDecimalTestView", schema);
            HasKey(x => new { x.FkId, x.Description });

            Property(x => x.FkId).HasColumnName(@"FkID").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(DatabaseGeneratedOption.None);
            Property(x => x.Description).HasColumnName(@"description").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(20).HasDatabaseGeneratedOption(DatabaseGeneratedOption.None);
        }
    }

    // Boo
    public class Stafford_BooConfiguration : EntityTypeConfiguration<Stafford_Boo>
    {
        public Stafford_BooConfiguration()
            : this("Stafford")
        {
        }

        public Stafford_BooConfiguration(string schema)
        {
            ToTable("Boo", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);
            Property(x => x.Name).HasColumnName(@"name").HasColumnType("nchar").IsRequired().IsFixedLength().HasMaxLength(10);
        }
    }

    // ComputedColumns
    public class Stafford_ComputedColumnConfiguration : EntityTypeConfiguration<Stafford_ComputedColumn>
    {
        public Stafford_ComputedColumnConfiguration()
            : this("Stafford")
        {
        }

        public Stafford_ComputedColumnConfiguration(string schema)
        {
            ToTable("ComputedColumns", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);
            Property(x => x.MyColumn).HasColumnName(@"MyColumn").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(10);
            Property(x => x.MyComputedColumn).HasColumnName(@"MyComputedColumn").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(10).HasDatabaseGeneratedOption(DatabaseGeneratedOption.Computed);
        }
    }

    // Foo
    public class Stafford_FooConfiguration : EntityTypeConfiguration<Stafford_Foo>
    {
        public Stafford_FooConfiguration()
            : this("Stafford")
        {
        }

        public Stafford_FooConfiguration(string schema)
        {
            ToTable("Foo", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(DatabaseGeneratedOption.None);
            Property(x => x.Name).HasColumnName(@"name").HasColumnType("nchar").IsRequired().IsFixedLength().HasMaxLength(10);

            // Foreign keys
            HasRequired(a => a.Stafford_Boo).WithOptional(b => b.Stafford_Foo).WillCascadeOnDelete(false); // FK_Foo_Boo
        }
    }

    // Child
    public class Synonyms_ChildConfiguration : EntityTypeConfiguration<Synonyms_Child>
    {
        public Synonyms_ChildConfiguration()
            : this("Synonyms")
        {
        }

        public Synonyms_ChildConfiguration(string schema)
        {
            ToTable("Child", schema);
            HasKey(x => x.ChildId);

            Property(x => x.ChildId).HasColumnName(@"ChildId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(DatabaseGeneratedOption.None);
            Property(x => x.ParentId).HasColumnName(@"ParentId").HasColumnType("int").IsRequired();
            Property(x => x.ChildName).HasColumnName(@"ChildName").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(100);

            // Foreign keys
            HasRequired(a => a.Synonyms_Parent).WithMany(b => b.Synonyms_Children).HasForeignKey(c => c.ParentId).WillCascadeOnDelete(false); // FK_Child_Parent
        }
    }

    // Parent
    public class Synonyms_ParentConfiguration : EntityTypeConfiguration<Synonyms_Parent>
    {
        public Synonyms_ParentConfiguration()
            : this("Synonyms")
        {
        }

        public Synonyms_ParentConfiguration(string schema)
        {
            ToTable("Parent", schema);
            HasKey(x => x.ParentId);

            Property(x => x.ParentId).HasColumnName(@"ParentId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(DatabaseGeneratedOption.None);
            Property(x => x.ParentName).HasColumnName(@"ParentName").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(100);
        }
    }

    // TableA
    public class TableAConfiguration : EntityTypeConfiguration<TableA>
    {
        public TableAConfiguration()
            : this("dbo")
        {
        }

        public TableAConfiguration(string schema)
        {
            ToTable("TableA", schema);
            HasKey(x => x.TableAId);

            Property(x => x.TableAId).HasColumnName(@"TableAId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);
            Property(x => x.TableADesc).HasColumnName(@"TableADesc").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(20);
        }
    }

    // TableB
    public class TableBConfiguration : EntityTypeConfiguration<TableB>
    {
        public TableBConfiguration()
            : this("dbo")
        {
        }

        public TableBConfiguration(string schema)
        {
            ToTable("TableB", schema);
            HasKey(x => new { x.TableBId, x.TableAId });

            Property(x => x.TableBId).HasColumnName(@"TableBId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);
            Property(x => x.TableAId).HasColumnName(@"TableAId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(DatabaseGeneratedOption.None);
            Property(x => x.ParentTableAId).HasColumnName(@"ParentTableAId").HasColumnType("int").IsOptional();
            Property(x => x.TableBDesc).HasColumnName(@"TableBDesc").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(20);

            // Foreign keys
            HasRequired(a => a.TableA_TableAId).WithMany(b => b.TableBs).HasForeignKey(c => c.TableAId).WillCascadeOnDelete(false); // FK_TableA_CompositeKey_Req
            HasRequired(a => a.TableB1).WithOptional(b => b.TableB2).WillCascadeOnDelete(false); // ParentTableB_Hierarchy
        }
    }

    // table with duplicate column names
    public class TableWithDuplicateColumnNameConfiguration : EntityTypeConfiguration<TableWithDuplicateColumnName>
    {
        public TableWithDuplicateColumnNameConfiguration()
            : this("dbo")
        {
        }

        public TableWithDuplicateColumnNameConfiguration(string schema)
        {
            ToTable("table with duplicate column names", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);
            Property(x => x.UserId1).HasColumnName(@"user_id").HasColumnType("int").IsRequired();
            Property(x => x.UserId2).HasColumnName(@"UserId").HasColumnType("int").IsRequired();
            Property(x => x.UserId3).HasColumnName(@"User Id").HasColumnType("int").IsRequired();
            Property(x => x.UserId4).HasColumnName(@"User  Id").HasColumnType("int").IsRequired();
            Property(x => x.UserId).HasColumnName(@"user__id").HasColumnType("int").IsRequired();
        }
    }

    // table.with.multiple.periods
    public class TableWithMultiplePeriodConfiguration : EntityTypeConfiguration<TableWithMultiplePeriod>
    {
        public TableWithMultiplePeriodConfiguration()
            : this("dbo")
        {
        }

        public TableWithMultiplePeriodConfiguration(string schema)
        {
            ToTable("table.with.multiple.periods", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(DatabaseGeneratedOption.None);
            Property(x => x.Description).HasColumnName(@"description").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(20);
        }
    }

    // table with space
    public class TableWithSpaceConfiguration : EntityTypeConfiguration<TableWithSpace>
    {
        public TableWithSpaceConfiguration()
            : this("dbo")
        {
        }

        public TableWithSpaceConfiguration(string schema)
        {
            ToTable("table with space", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(DatabaseGeneratedOption.None);
            HasMany(t => t.TableWithSpaceAndInColumns).WithMany(t => t.TableWithSpaces).Map(m =>
            {
                m.ToTable("table mapping with space", "dbo");
                m.MapLeftKey("id");
                m.MapRightKey("id value");
            });
        }
    }

    // table with space and in columns
    public class TableWithSpaceAndInColumnConfiguration : EntityTypeConfiguration<TableWithSpaceAndInColumn>
    {
        public TableWithSpaceAndInColumnConfiguration()
            : this("dbo")
        {
        }

        public TableWithSpaceAndInColumnConfiguration(string schema)
        {
            ToTable("table with space and in columns", schema);
            HasKey(x => x.IdValue);

            Property(x => x.IdValue).HasColumnName(@"id value").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(DatabaseGeneratedOption.None);
        }
    }

    // TableWithSpaceInColumnOnly
    public class TableWithSpaceInColumnOnlyConfiguration : EntityTypeConfiguration<TableWithSpaceInColumnOnly>
    {
        public TableWithSpaceInColumnOnlyConfiguration()
            : this("dbo")
        {
        }

        public TableWithSpaceInColumnOnlyConfiguration(string schema)
        {
            ToTable("TableWithSpaceInColumnOnly", schema);
            HasKey(x => x.IdValue);

            Property(x => x.IdValue).HasColumnName(@"id value").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(DatabaseGeneratedOption.None);
        }
    }

    // TadeuszSobol
    public class TadeuszSobolConfiguration : EntityTypeConfiguration<TadeuszSobol>
    {
        public TadeuszSobolConfiguration()
            : this("dbo")
        {
        }

        public TadeuszSobolConfiguration(string schema)
        {
            ToTable("TadeuszSobol", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);
            Property(x => x.Description).HasColumnName(@"Description").HasColumnType("varchar(max)").IsOptional().IsUnicode(false);
            Property(x => x.Notes).HasColumnName(@"Notes").HasColumnType("nvarchar(max)").IsOptional();
            Property(x => x.Name).HasColumnName(@"Name").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(10);
        }
    }

    // Task
    public class Task1Configuration : EntityTypeConfiguration<Task1>
    {
        public Task1Configuration()
            : this("dbo")
        {
        }

        public Task1Configuration(string schema)
        {
            ToTable("Task", schema);
            HasKey(x => x.TaskId);

            Property(x => x.TaskId).HasColumnName(@"TaskId").HasColumnType("bigint").IsRequired().HasDatabaseGeneratedOption(DatabaseGeneratedOption.None);
        }
    }

    // tblOrders
    public class TblOrderConfiguration : EntityTypeConfiguration<TblOrder>
    {
        public TblOrderConfiguration()
            : this("dbo")
        {
        }

        public TblOrderConfiguration(string schema)
        {
            ToTable("tblOrders", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"ID").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);
            Property(x => x.Added).HasColumnName(@"added").HasColumnType("datetime").IsRequired();
        }
    }

    // tblOrderErrors
    public class TblOrderErrorConfiguration : EntityTypeConfiguration<TblOrderError>
    {
        public TblOrderErrorConfiguration()
            : this("dbo")
        {
        }

        public TblOrderErrorConfiguration(string schema)
        {
            ToTable("tblOrderErrors", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"ID").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);
            Property(x => x.Error).HasColumnName(@"error").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(50);
        }
    }

    // tblOrderErrorsAB_
    public class TblOrderErrorsAbConfiguration : EntityTypeConfiguration<TblOrderErrorsAb>
    {
        public TblOrderErrorsAbConfiguration()
            : this("dbo")
        {
        }

        public TblOrderErrorsAbConfiguration(string schema)
        {
            ToTable("tblOrderErrorsAB_", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"ID").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);
            Property(x => x.Error).HasColumnName(@"error").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(50);
        }
    }

    // tblOrderLines
    public class TblOrderLineConfiguration : EntityTypeConfiguration<TblOrderLine>
    {
        public TblOrderLineConfiguration()
            : this("dbo")
        {
        }

        public TblOrderLineConfiguration(string schema)
        {
            ToTable("tblOrderLines", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"ID").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);
            Property(x => x.OrderId).HasColumnName(@"OrderID").HasColumnType("int").IsRequired();
            Property(x => x.Sku).HasColumnName(@"sku").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(15);

            // Foreign keys
            HasRequired(a => a.TblOrder).WithMany(b => b.TblOrderLines).HasForeignKey(c => c.OrderId).WillCascadeOnDelete(false); // tblOrdersFK
        }
    }

    // TemporalDepartment
    public class TemporalDepartmentConfiguration : EntityTypeConfiguration<TemporalDepartment>
    {
        public TemporalDepartmentConfiguration()
            : this("dbo")
        {
        }

        public TemporalDepartmentConfiguration(string schema)
        {
            ToTable("TemporalDepartment", schema);
            HasKey(x => x.DeptId);

            Property(x => x.DeptId).HasColumnName(@"DeptID").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(DatabaseGeneratedOption.None);
            Property(x => x.DeptName).HasColumnName(@"DeptName").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(50);
            Property(x => x.ManagerId).HasColumnName(@"ManagerID").HasColumnType("int").IsOptional();
            Property(x => x.ParentDeptId).HasColumnName(@"ParentDeptID").HasColumnType("int").IsOptional();
            Property(x => x.SysStartTime).HasColumnName(@"SysStartTime").HasColumnType("datetime2").IsRequired().HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);
            Property(x => x.SysEndTime).HasColumnName(@"SysEndTime").HasColumnType("datetime2").IsRequired().HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);
        }
    }

    // TemporalDepartmentHistory
    public class TemporalDepartmentHistoryConfiguration : EntityTypeConfiguration<TemporalDepartmentHistory>
    {
        public TemporalDepartmentHistoryConfiguration()
            : this("dbo")
        {
        }

        public TemporalDepartmentHistoryConfiguration(string schema)
        {
            ToTable("TemporalDepartmentHistory", schema);
            HasKey(x => new { x.DeptId, x.DeptName, x.SysStartTime, x.SysEndTime });

            Property(x => x.DeptId).HasColumnName(@"DeptID").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(DatabaseGeneratedOption.None);
            Property(x => x.DeptName).HasColumnName(@"DeptName").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(50).HasDatabaseGeneratedOption(DatabaseGeneratedOption.None);
            Property(x => x.ManagerId).HasColumnName(@"ManagerID").HasColumnType("int").IsOptional();
            Property(x => x.ParentDeptId).HasColumnName(@"ParentDeptID").HasColumnType("int").IsOptional();
            Property(x => x.SysStartTime).HasColumnName(@"SysStartTime").HasColumnType("datetime2").IsRequired().HasDatabaseGeneratedOption(DatabaseGeneratedOption.None);
            Property(x => x.SysEndTime).HasColumnName(@"SysEndTime").HasColumnType("datetime2").IsRequired().HasDatabaseGeneratedOption(DatabaseGeneratedOption.None);
        }
    }

    // ThisIsMemoryOptimised
    public class ThisIsMemoryOptimisedConfiguration : EntityTypeConfiguration<ThisIsMemoryOptimised>
    {
        public ThisIsMemoryOptimisedConfiguration()
            : this("dbo")
        {
        }

        public ThisIsMemoryOptimisedConfiguration(string schema)
        {
            ToTable("ThisIsMemoryOptimised", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);
            Property(x => x.Description).HasColumnName(@"Description").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(20);
        }
    }

    // Ticket
    public class TicketConfiguration : EntityTypeConfiguration<Ticket>
    {
        public TicketConfiguration()
            : this("dbo")
        {
        }

        public TicketConfiguration(string schema)
        {
            ToTable("Ticket", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("bigint").IsRequired().HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);
            Property(x => x.CreatedById).HasColumnName(@"CreatedById").HasColumnType("bigint").IsRequired();
            Property(x => x.ModifiedById).HasColumnName(@"ModifiedById").HasColumnType("bigint").IsOptional();

            // Foreign keys
            HasOptional(a => a.ModifiedBy).WithMany(b => b.Tickets_ModifiedById).HasForeignKey(c => c.ModifiedById).WillCascadeOnDelete(false); // FK_Ticket_AppUser1
            HasRequired(a => a.CreatedBy).WithMany(b => b.Tickets_CreatedById).HasForeignKey(c => c.CreatedById).WillCascadeOnDelete(false); // FK_Ticket_AppUser
        }
    }

    // TimestampNotNull
    public class TimestampNotNullConfiguration : EntityTypeConfiguration<TimestampNotNull>
    {
        public TimestampNotNullConfiguration()
            : this("dbo")
        {
        }

        public TimestampNotNullConfiguration(string schema)
        {
            ToTable("TimestampNotNull", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);
            Property(x => x.Version).HasColumnName(@"Version").HasColumnType("timestamp").IsRequired().IsFixedLength().HasMaxLength(8).IsRowVersion().IsConcurrencyToken();
            Property(x => x.Number).HasColumnName(@"Number").HasColumnType("int").IsRequired();
        }
    }

    // TimestampNullable
    public class TimestampNullableConfiguration : EntityTypeConfiguration<TimestampNullable>
    {
        public TimestampNullableConfiguration()
            : this("dbo")
        {
        }

        public TimestampNullableConfiguration(string schema)
        {
            ToTable("TimestampNullable", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);
            Property(x => x.Version).HasColumnName(@"Version").HasColumnType("timestamp").IsOptional().IsFixedLength().HasMaxLength(8).IsRowVersion().IsConcurrencyToken();
            Property(x => x.Number).HasColumnName(@"Number").HasColumnType("int").IsRequired();
        }
    }

    // Token
    public class TokenConfiguration : EntityTypeConfiguration<Token>
    {
        public TokenConfiguration()
            : this("dbo")
        {
        }

        public TokenConfiguration(string schema)
        {
            ToTable("Token", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired().HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);
            Property(x => x.Enabled).HasColumnName(@"Enabled").HasColumnType("bit").IsRequired();
        }
    }

    // User
    public class UserConfiguration : EntityTypeConfiguration<User>
    {
        public UserConfiguration()
            : this("dbo")
        {
        }

        public UserConfiguration(string schema)
        {
            ToTable("User", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"ID").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);
            Property(x => x.ExternalUserId).HasColumnName(@"ExternalUserID").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(50);
        }
    }

    // User309
    public class User309Configuration : EntityTypeConfiguration<User309>
    {
        public User309Configuration()
            : this("dbo")
        {
        }

        public User309Configuration(string schema)
        {
            ToTable("User309", schema);
            HasKey(x => x.UserId);

            Property(x => x.UserId).HasColumnName(@"UserID").HasColumnType("bigint").IsRequired().HasDatabaseGeneratedOption(DatabaseGeneratedOption.None);
            Property(x => x.Lastname).HasColumnName(@"Lastname").HasColumnType("nvarchar").IsRequired().HasMaxLength(100);
            Property(x => x.Firstname).HasColumnName(@"Firstname").HasColumnType("nvarchar").IsRequired().HasMaxLength(100);
            Property(x => x.PhoneCountryId).HasColumnName(@"PhoneCountryID").HasColumnType("int").IsOptional();

            // Foreign keys
            HasOptional(a => a.Country).WithMany(b => b.User309).HasForeignKey(c => c.PhoneCountryId).WillCascadeOnDelete(false); // FK_User309_PhoneCountry
        }
    }

    // User_Document
    public class UserDocumentConfiguration : EntityTypeConfiguration<UserDocument>
    {
        public UserDocumentConfiguration()
            : this("dbo")
        {
        }

        public UserDocumentConfiguration(string schema)
        {
            ToTable("User_Document", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"ID").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);
            Property(x => x.UserId).HasColumnName(@"UserID").HasColumnType("int").IsRequired();
            Property(x => x.CreatedByUserId).HasColumnName(@"CreatedByUserID").HasColumnType("int").IsRequired();

            // Foreign keys
            HasRequired(a => a.CreatedByUser).WithMany(b => b.UserDocuments_CreatedByUserId).HasForeignKey(c => c.CreatedByUserId).WillCascadeOnDelete(false); // FK_User_Document_User1
            HasRequired(a => a.User_UserId).WithMany(b => b.UserDocuments_UserId).HasForeignKey(c => c.UserId); // FK_User_Document_User
        }
    }

    // Versioned
    public class VersionedConfiguration : EntityTypeConfiguration<Versioned>
    {
        public VersionedConfiguration()
            : this("dbo")
        {
        }

        public VersionedConfiguration(string schema)
        {
            ToTable("Versioned", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);
            Property(x => x.Version).HasColumnName(@"Version").HasColumnType("timestamp").IsRequired().IsFixedLength().HasMaxLength(8).IsRowVersion().IsConcurrencyToken();
            Property(x => x.Number).HasColumnName(@"Number").HasColumnType("int").IsRequired();
        }
    }

    // VersionedNullable
    public class VersionedNullableConfiguration : EntityTypeConfiguration<VersionedNullable>
    {
        public VersionedNullableConfiguration()
            : this("dbo")
        {
        }

        public VersionedNullableConfiguration(string schema)
        {
            ToTable("VersionedNullable", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);
            Property(x => x.Version).HasColumnName(@"Version").HasColumnType("timestamp").IsOptional().IsFixedLength().HasMaxLength(8).IsRowVersion().IsConcurrencyToken();
            Property(x => x.Number).HasColumnName(@"Number").HasColumnType("int").IsRequired();
        }
    }

    // view.with.multiple.periods
    public class ViewWithMultiplePeriodConfiguration : EntityTypeConfiguration<ViewWithMultiplePeriod>
    {
        public ViewWithMultiplePeriodConfiguration()
            : this("dbo")
        {
        }

        public ViewWithMultiplePeriodConfiguration(string schema)
        {
            ToTable("view.with.multiple.periods", schema);
            HasKey(x => new { x.FkId, x.Description });

            Property(x => x.FkId).HasColumnName(@"FkID").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(DatabaseGeneratedOption.None);
            Property(x => x.Description).HasColumnName(@"description").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(20).HasDatabaseGeneratedOption(DatabaseGeneratedOption.None);
        }
    }

    // view with space
    public class ViewWithSpaceConfiguration : EntityTypeConfiguration<ViewWithSpace>
    {
        public ViewWithSpaceConfiguration()
            : this("dbo")
        {
        }

        public ViewWithSpaceConfiguration(string schema)
        {
            ToTable("view with space", schema);
            HasKey(x => new { x.CodeObjectNo, x.Type, x.EName, x.IsObject });

            Property(x => x.CodeObjectNo).HasColumnName(@"codeObjectNo").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(DatabaseGeneratedOption.None);
            Property(x => x.ApplicationNo).HasColumnName(@"applicationNo").HasColumnType("int").IsOptional();
            Property(x => x.Type).HasColumnName(@"type").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(DatabaseGeneratedOption.None);
            Property(x => x.EName).HasColumnName(@"eName").HasColumnType("nvarchar").IsRequired().HasMaxLength(250).HasDatabaseGeneratedOption(DatabaseGeneratedOption.None);
            Property(x => x.AName).HasColumnName(@"aName").HasColumnType("nvarchar").IsOptional().HasMaxLength(250);
            Property(x => x.Description).HasColumnName(@"description").HasColumnType("nvarchar").IsOptional().HasMaxLength(250);
            Property(x => x.CodeName).HasColumnName(@"codeName").HasColumnType("nvarchar").IsOptional().HasMaxLength(250);
            Property(x => x.Note).HasColumnName(@"note").HasColumnType("nvarchar").IsOptional().HasMaxLength(250);
            Property(x => x.IsObject).HasColumnName(@"isObject").HasColumnType("bit").IsRequired().HasDatabaseGeneratedOption(DatabaseGeneratedOption.None);
            Property(x => x.VersionNumber).HasColumnName(@"versionNumber").HasColumnType("timestamp").IsOptional().IsFixedLength().HasMaxLength(8).IsRowVersion().IsConcurrencyToken();
        }
    }

    // Articles
    public class WVN_ArticleConfiguration : EntityTypeConfiguration<WVN_Article>
    {
        public WVN_ArticleConfiguration()
            : this("WVN")
        {
        }

        public WVN_ArticleConfiguration(string schema)
        {
            ToTable("Articles", schema);
            HasKey(x => x.PkArticle);

            Property(x => x.PkArticle).HasColumnName(@"PK_Article").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);
            Property(x => x.FkFactory).HasColumnName(@"FK_Factory").HasColumnType("uniqueidentifier").IsRequired();
            Property(x => x.FkArticleLevel).HasColumnName(@"FK_ArticleLevel").HasColumnType("int").IsRequired();
            Property(x => x.FkParentArticle).HasColumnName(@"FK_ParentArticle").HasColumnType("int").IsOptional();
            Property(x => x.Code).HasColumnName(@"Code").HasColumnType("nvarchar").IsRequired().HasMaxLength(20);
        }
    }

    // Бренды товара
    public class БрендытовараConfiguration : EntityTypeConfiguration<Брендытовара>
    {
        public БрендытовараConfiguration()
            : this("dbo")
        {
        }

        public БрендытовараConfiguration(string schema)
        {
            ToTable("Бренды товара", schema);
            HasKey(x => x.Кодбренда);

            Property(x => x.Кодбренда).HasColumnName(@"Код бренда").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);
            Property(x => x.Наименованиебренда).HasColumnName(@"Наименование бренда").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(50);
            Property(x => x.Логотипбренда).HasColumnName(@"Логотип_бренда").HasColumnType("image").IsOptional().HasMaxLength(2147483647);
            Property(x => x.Логотипбрендавертикальный).HasColumnName(@"Логотип_бренда_вертикальный").HasColumnType("image").IsOptional().HasMaxLength(2147483647);
        }
    }


    #endregion

    #region Enumerations

    public enum CarOptions
    {
        SunRoof = 0x01,
        Spoiler = 0x02,
        FogLights = 0x04,
        TintedWindows = 0x08,
    }

    public enum DaysOfWeek
    {
        Sun = 0,
        Mon = 1,
        Tue = 2,
        Wed = 3,
        Thu = 4,
        Fri = 6,
        Sat = 7,
    }


    #endregion

    #region Stored procedure return models

    public class ASimpleExampleReturnModel
    {
        public int? id { get; set; }
        public string stuff { get; set; }
    }

    public class C182Test1ReturnModel
    {
        public int? Id { get; set; }
        public string Description { get; set; }
    }

    public class C182Test2ReturnModel
    {
        public class ResultSetModel1
        {
            public int? Id { get; set; }
            public string DescriptionFlag1 { get; set; }
        }
        public List<ResultSetModel1> ResultSet1;
        public class ResultSetModel2
        {
            public int? Id { get; set; }
            public string DescriptionNotNull { get; set; }
        }
        public List<ResultSetModel2> ResultSet2;
        public class ResultSetModel3
        {
            public int? Id { get; set; }
            public string Description { get; set; }
        }
        public List<ResultSetModel3> ResultSet3;
    }

    public class CheckIfApplicationIsCompleteReturnModel
    {
        public string Key { get; set; }
        public string Value { get; set; }
    }

    public class ColourPivotReturnModel
    {
        public int? Blue { get; set; }
        public int? Green { get; set; }
        public int? Red { get; set; }
    }

    public class CsvToIntReturnModel
    {
        public int? IntValue { get; set; }
    }

    public class CustomSchema_CsvToIntWithSchemaReturnModel
    {
        public int? IntValue { get; set; }
    }

    public class DboProcDataFromFfrsAndDboReturnModel
    {
        public int Id { get; set; }
        public int PrimaryColourId { get; set; }
        public string CarMake { get; set; }
        public string CVName { get; set; }
    }

    public class DboProcDataFromFfrsReturnModel
    {
        public Guid BatchUID { get; set; }
        public int CVID { get; set; }
        public string CVName { get; set; }
    }

    public class DsOpeProcReturnModel
    {
        public int ID { get; set; }
        public bool? Selected { get; set; }
    }

    public class FFRS_CsvToInt2ReturnModel
    {
        public int? IntValue { get; set; }
    }

    public class FFRS_CvDataReturnModel
    {
        public Guid BatchUID { get; set; }
        public int CVID { get; set; }
        public string CVName { get; set; }
    }

    public class FFRS_DataFromDboAndFfrsReturnModel
    {
        public int Id { get; set; }
        public int PrimaryColourId { get; set; }
        public string CarMake { get; set; }
        public string CVName { get; set; }
    }

    public class FFRS_DataFromDboReturnModel
    {
        public int Id { get; set; }
        public int PrimaryColourId { get; set; }
        public string CarMake { get; set; }
    }

    public class FkTest_HelloReturnModel
    {
        public int? @static { get; set; }
        public int? @readonly { get; set; }
    }

    public class GetSmallDecimalTestReturnModel
    {
        public int id { get; set; }
        public decimal? KoeffVed { get; set; }
    }

    public class StpMultipleIdenticalResultsReturnModel
    {
        public int Id { get; set; }
        public string Name { get; set; }
    }

    public class StpMultipleMultipleResultsWithParamsReturnModel
    {
        public class ResultSetModel1
        {
            public int codeObjectNo { get; set; }
            public int? applicationNo { get; set; }
        }
        public List<ResultSetModel1> ResultSet1;
        public class ResultSetModel2
        {
            public int Id { get; set; }
            public string Name { get; set; }
        }
        public List<ResultSetModel2> ResultSet2;
        public class ResultSetModel3
        {
            public string code { get; set; }
        }
        public List<ResultSetModel3> ResultSet3;
        public class ResultSetModel4
        {
            public long id { get; set; }
            public long id_t { get; set; }
            public long num { get; set; }
        }
        public List<ResultSetModel4> ResultSet4;
        public class ResultSetModel5
        {
            public int Id { get; set; }
            public int PrimaryColourId { get; set; }
            public string CarMake { get; set; }
            public int? computed_column { get; set; }
            public int? computed_column_persisted { get; set; }
        }
        public List<ResultSetModel5> ResultSet5;
        public class ResultSetModel6
        {
            public int ID { get; set; }
            public int OrderID { get; set; }
            public string sku { get; set; }
        }
        public List<ResultSetModel6> ResultSet6;
    }

    public class StpMultipleResultsReturnModel
    {
        public class ResultSetModel1
        {
            public int codeObjectNo { get; set; }
            public int? applicationNo { get; set; }
            public int type { get; set; }
            public string eName { get; set; }
            public string aName { get; set; }
            public string description { get; set; }
            public string codeName { get; set; }
            public string note { get; set; }
            public bool isObject { get; set; }
            public byte[] versionNumber { get; set; }
        }
        public List<ResultSetModel1> ResultSet1;
        public class ResultSetModel2
        {
            public int Id { get; set; }
            public int PrimaryColourId { get; set; }
            public string CarMake { get; set; }
            public int? computed_column { get; set; }
            public int? computed_column_persisted { get; set; }
        }
        public List<ResultSetModel2> ResultSet2;
        public class ResultSetModel3
        {
            public int Id { get; set; }
            public string Name { get; set; }
        }
        public List<ResultSetModel3> ResultSet3;
    }

    public class StpMultipleResultsWithParamsReturnModel
    {
        public class ResultSetModel1
        {
            public int codeObjectNo { get; set; }
            public int? applicationNo { get; set; }
        }
        public List<ResultSetModel1> ResultSet1;
        public class ResultSetModel2
        {
            public int Id { get; set; }
            public string Name { get; set; }
        }
        public List<ResultSetModel2> ResultSet2;
    }

    public class StpNoParamsTestReturnModel
    {
        public int codeObjectNo { get; set; }
        public int? applicationNo { get; set; }
    }

    public class StpNullableParamsTestReturnModel
    {
        public int codeObjectNo { get; set; }
        public int? applicationNo { get; set; }
    }

    public class StpTestReturnModel
    {
        public int codeObjectNo { get; set; }
        public int? applicationNo { get; set; }
        public int type { get; set; }
        public string eName { get; set; }
        public string aName { get; set; }
        public string description { get; set; }
        public string codeName { get; set; }
        public string note { get; set; }
        public bool isObject { get; set; }
        public byte[] versionNumber { get; set; }
    }

    public class StpTestUnderscoreTestReturnModel
    {
        public int code_object_no { get; set; }
        public int? application_no { get; set; }
    }

    public class Synonyms_SimpleStoredProcReturnModel
    {
        public string ReturnValue { get; set; }
    }

    public class TestReturnStringReturnModel
    {
        public string error { get; set; }
    }

    public class XmlDataV1ReturnModel
    {
        public DateTime? Column1 { get; set; }
        public string Column2 { get; set; }
    }


    #endregion

}
// </auto-generated>
