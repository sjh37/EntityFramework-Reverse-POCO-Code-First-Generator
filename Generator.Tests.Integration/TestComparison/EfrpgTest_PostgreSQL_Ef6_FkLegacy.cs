// <auto-generated>

using Npgsql;
using NpgsqlTypes;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations.Schema;
using System.Data;
using System.Data.Common;
using System.Data.Entity;
using System.Data.Entity.Core.Objects;
using System.Data.Entity.Infrastructure;
using System.Data.Entity.Infrastructure.Annotations;
using System.Data.Entity.Infrastructure.Interception;
using System.Data.Entity.ModelConfiguration;
using System.Data.Entity.Spatial;
using System.Data.Entity.Validation;
using System.Data.SqlClient;
using System.Data.SqlTypes;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;
using System.Threading;
using System.Threading.Tasks;

namespace Efrpg.PostgreSQL
{
    #region Database context interface

    public interface IMyEf6DbContext : IDisposable
    {
        DbSet<Allcolumntype> Allcolumntypes { get; set; } // allcolumntypes

        int SaveChanges();
        Task<int> SaveChangesAsync();
        Task<int> SaveChangesAsync(CancellationToken cancellationToken);
        DbChangeTracker ChangeTracker { get; }
        DbContextConfiguration Configuration { get; }
        Database Database { get; }
        DbEntityEntry<TEntity> Entry<TEntity>(TEntity entity) where TEntity : class;
        DbEntityEntry Entry(object entity);
        IEnumerable<DbEntityValidationResult> GetValidationErrors();
        DbSet Set(Type entityType);
        DbSet<TEntity> Set<TEntity>() where TEntity : class;
        string ToString();
    }

    #endregion

    #region Database context

    public class MyEf6DbContext : DbContext, IMyEf6DbContext
    {
        public DbSet<Allcolumntype> Allcolumntypes { get; set; } // allcolumntypes

        static MyEf6DbContext()
        {
            System.Data.Entity.Database.SetInitializer<MyEf6DbContext>(null);
        }

        /// <inheritdoc />
        public MyEf6DbContext()
            : base("Name=MyEf6DbContext")
        {
        }

        /// <inheritdoc />
        public MyEf6DbContext(string connectionString)
            : base(connectionString)
        {
        }

        /// <inheritdoc />
        public MyEf6DbContext(string connectionString, DbCompiledModel model)
            : base(connectionString, model)
        {
        }

        /// <inheritdoc />
        public MyEf6DbContext(DbConnection existingConnection, bool contextOwnsConnection)
            : base(existingConnection, contextOwnsConnection)
        {
        }

        /// <inheritdoc />
        public MyEf6DbContext(DbConnection existingConnection, DbCompiledModel model, bool contextOwnsConnection)
            : base(existingConnection, model, contextOwnsConnection)
        {
        }

        /// <inheritdoc />
        public MyEf6DbContext(ObjectContext objectContext, bool dbContextOwnsObjectContext)
            : base(objectContext, dbContextOwnsObjectContext)
        {
        }

        protected override void Dispose(bool disposing)
        {
            base.Dispose(disposing);
        }

        public bool IsSqlParameterNull(NpgsqlParameter param)
        {
            var sqlValue = param.NpgsqlValue;
            var nullableValue = sqlValue as INullable;
            if (nullableValue != null)
                return nullableValue.IsNull;
            return (sqlValue == null || sqlValue == DBNull.Value);
        }

        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);

            modelBuilder.Configurations.Add(new AllcolumntypeConfiguration());
        }

        public static DbModelBuilder CreateModel(DbModelBuilder modelBuilder, string schema)
        {
            modelBuilder.Configurations.Add(new AllcolumntypeConfiguration(schema));

            return modelBuilder;
        }
    }

    #endregion

    #region Database context factory

    public class MyEf6DbContextFactory : IDbContextFactory<MyEf6DbContext>
    {
        public MyEf6DbContext Create()
        {
            return new MyEf6DbContext();
        }
    }

    #endregion

    #region Fake Database context

    public class FakeMyEf6DbContext : IMyEf6DbContext
    {
        public DbSet<Allcolumntype> Allcolumntypes { get; set; } // allcolumntypes

        public FakeMyEf6DbContext()
        {
            _changeTracker = null;
            _configuration = null;
            _database = null;

            Allcolumntypes = new FakeDbSet<Allcolumntype>("Bigint");

        }

        public int SaveChangesCount { get; private set; }
        public int SaveChanges()
        {
            ++SaveChangesCount;
            return 1;
        }

        public Task<int> SaveChangesAsync()
        {
            ++SaveChangesCount;
            return Task<int>.Factory.StartNew(() => 1);
        }

        public Task<int> SaveChangesAsync(CancellationToken cancellationToken)
        {
            ++SaveChangesCount;
            return Task<int>.Factory.StartNew(() => 1, cancellationToken);
        }

        protected virtual void Dispose(bool disposing)
        {
        }

        public void Dispose()
        {
            Dispose(true);
        }

        private DbChangeTracker _changeTracker;

        public DbChangeTracker ChangeTracker { get { return _changeTracker; } }

        private DbContextConfiguration _configuration;

        public DbContextConfiguration Configuration { get { return _configuration; } }

        private Database _database;

        public Database Database { get { return _database; } }

        public DbEntityEntry<TEntity> Entry<TEntity>(TEntity entity) where TEntity : class
        {
            throw new NotImplementedException();
        }

        public DbEntityEntry Entry(object entity)
        {
            throw new NotImplementedException();
        }

        public IEnumerable<DbEntityValidationResult> GetValidationErrors()
        {
            throw new NotImplementedException();
        }

        public DbSet Set(Type entityType)
        {
            throw new NotImplementedException();
        }

        public DbSet<TEntity> Set<TEntity>() where TEntity : class
        {
            throw new NotImplementedException();
        }

        public override string ToString()
        {
            throw new NotImplementedException();
        }
    }

    #endregion

    #region Fake DbSet

    // ************************************************************************
    // Fake DbSet
    // Implementing Find:
    //      The Find method is difficult to implement in a generic fashion. If
    //      you need to test code that makes use of the Find method it is
    //      easiest to create a test DbSet for each of the entity types that
    //      need to support find. You can then write logic to find that
    //      particular type of entity, as shown below:
    //      public class FakeBlogDbSet : FakeDbSet<Blog>
    //      {
    //          public override Blog Find(params object[] keyValues)
    //          {
    //              var id = (int) keyValues.Single();
    //              return this.SingleOrDefault(b => b.BlogId == id);
    //          }
    //      }
    //      Read more about it here: https://msdn.microsoft.com/en-us/data/dn314431.aspx
    public class FakeDbSet<TEntity> : DbSet<TEntity>, IQueryable, IEnumerable<TEntity>, IDbAsyncEnumerable<TEntity> where TEntity : class
    {
        private readonly PropertyInfo[] _primaryKeys;
        private readonly ObservableCollection<TEntity> _data;
        private readonly IQueryable _query;

        public FakeDbSet()
        {
            _data = new ObservableCollection<TEntity>();
            _query = _data.AsQueryable();
        }

        public FakeDbSet(params string[] primaryKeys)
        {
            _primaryKeys = typeof(TEntity).GetProperties().Where(x => primaryKeys.Contains(x.Name)).ToArray();
            _data = new ObservableCollection<TEntity>();
            _query = _data.AsQueryable();
        }

        public override TEntity Find(params object[] keyValues)
        {
            if (_primaryKeys == null)
                throw new ArgumentException("No primary keys defined");
            if (keyValues.Length != _primaryKeys.Length)
                throw new ArgumentException("Incorrect number of keys passed to Find method");

            var keyQuery = this.AsQueryable();
            keyQuery = keyValues
                .Select((t, i) => i)
                .Aggregate(keyQuery,
                    (current, x) =>
                        current.Where(entity => _primaryKeys[x].GetValue(entity, null).Equals(keyValues[x])));

            return keyQuery.SingleOrDefault();
        }

        public override Task<TEntity> FindAsync(CancellationToken cancellationToken, params object[] keyValues)
        {
            return Task<TEntity>.Factory.StartNew(() => Find(keyValues), cancellationToken);
        }

        public override Task<TEntity> FindAsync(params object[] keyValues)
        {
            return Task<TEntity>.Factory.StartNew(() => Find(keyValues));
        }

        public override IEnumerable<TEntity> AddRange(IEnumerable<TEntity> entities)
        {
            if (entities == null) throw new ArgumentNullException("entities");
            var items = entities.ToList();
            foreach (var entity in items)
            {
                _data.Add(entity);
            }
            return items;
        }

        public override TEntity Add(TEntity item)
        {
            if (item == null) throw new ArgumentNullException("item");
            _data.Add(item);
            return item;
        }

        public override IEnumerable<TEntity> RemoveRange(IEnumerable<TEntity> entities)
        {
            if (entities == null) throw new ArgumentNullException("entities");
            var items = entities.ToList();
            foreach (var entity in items)
            {
                _data.Remove(entity);
            }
            return items;
        }

        public override TEntity Remove(TEntity item)
        {
            if (item == null) throw new ArgumentNullException("item");
            _data.Remove(item);
            return item;
        }

        public override TEntity Attach(TEntity item)
        {
            if (item == null) throw new ArgumentNullException("item");
            _data.Add(item);
            return item;
        }

        public override TEntity Create()
        {
            return Activator.CreateInstance<TEntity>();
        }

        public override TDerivedEntity Create<TDerivedEntity>()
        {
            return Activator.CreateInstance<TDerivedEntity>();
        }

        public override ObservableCollection<TEntity> Local
        {
            get { return _data; }
        }

        Type IQueryable.ElementType
        {
            get { return _query.ElementType; }
        }

        Expression IQueryable.Expression
        {
            get { return _query.Expression; }
        }

        IQueryProvider IQueryable.Provider
        {
            get { return new FakeDbAsyncQueryProvider<TEntity>(_query.Provider); }
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return _data.GetEnumerator();
        }

        IEnumerator<TEntity> IEnumerable<TEntity>.GetEnumerator()
        {
            return _data.GetEnumerator();
        }

        IDbAsyncEnumerator<TEntity> IDbAsyncEnumerable<TEntity>.GetAsyncEnumerator()
        {
            return new FakeDbAsyncEnumerator<TEntity>(_data.GetEnumerator());
        }
    }

    public class FakeDbAsyncQueryProvider<TEntity> : IDbAsyncQueryProvider
    {
        private readonly IQueryProvider _inner;

        public FakeDbAsyncQueryProvider(IQueryProvider inner)
        {
            _inner = inner;
        }

        public IQueryable CreateQuery(Expression expression)
        {
            var m = expression as MethodCallExpression;
            if (m != null)
            {
                var resultType = m.Method.ReturnType; // it should be IQueryable<T>
                var tElement = resultType.GetGenericArguments()[0];
                var queryType = typeof(FakeDbAsyncEnumerable<>).MakeGenericType(tElement);
                return (IQueryable) Activator.CreateInstance(queryType, expression);
            }
            return new FakeDbAsyncEnumerable<TEntity>(expression);
        }

        public IQueryable<TElement> CreateQuery<TElement>(Expression expression)
        {
            var queryType = typeof(FakeDbAsyncEnumerable<>).MakeGenericType(typeof(TElement));
            return (IQueryable<TElement>) Activator.CreateInstance(queryType, expression);
        }

        public object Execute(Expression expression)
        {
            return _inner.Execute(expression);
        }

        public TResult Execute<TResult>(Expression expression)
        {
            return _inner.Execute<TResult>(expression);
        }

        public Task<object> ExecuteAsync(Expression expression, CancellationToken cancellationToken)
        {
            return Task.FromResult(Execute(expression));
        }

        public Task<TResult> ExecuteAsync<TResult>(Expression expression, CancellationToken cancellationToken)
        {
            return Task.FromResult(Execute<TResult>(expression));
        }
    }

    public class FakeDbAsyncEnumerable<T> : EnumerableQuery<T>, IDbAsyncEnumerable<T>, IQueryable<T>
    {
        public FakeDbAsyncEnumerable(IEnumerable<T> enumerable)
            : base(enumerable)
        { }

        public FakeDbAsyncEnumerable(Expression expression)
            : base(expression)
        { }

        public IDbAsyncEnumerator<T> GetAsyncEnumerator()
        {
            return new FakeDbAsyncEnumerator<T>(this.AsEnumerable().GetEnumerator());
        }

        IDbAsyncEnumerator IDbAsyncEnumerable.GetAsyncEnumerator()
        {
            return GetAsyncEnumerator();
        }

        IQueryProvider IQueryable.Provider
        {
            get { return new FakeDbAsyncQueryProvider<T>(this); }
        }

    }

    public class FakeDbAsyncEnumerator<T> : IDbAsyncEnumerator<T>
    {
        private readonly IEnumerator<T> _inner;

        public FakeDbAsyncEnumerator(IEnumerator<T> inner)
        {
            _inner = inner;
        }

        public void Dispose()
        {
            _inner.Dispose();
        }

        public Task<bool> MoveNextAsync(CancellationToken cancellationToken)
        {
            return Task.FromResult(_inner.MoveNext());
        }

        public T Current
        {
            get { return _inner.Current; }
        }

        object IDbAsyncEnumerator.Current
        {
            get { return Current; }
        }
    }

    #endregion

    #region POCO classes

    // allcolumntypes
    public class Allcolumntype
    {
        public long Bigint { get; set; } // bigint (Primary key)
        public BitArray? Bit1 { get; set; } // bit_1 (length: 1)
        public BitArray? Bit8 { get; set; } // bit_8 (length: 8)
        public bool? Boolean { get; set; } // boolean
        public NpgsqlBox? Box { get; set; } // box
        public byte[] Bytea { get; set; } // bytea
        public string @Char { get; set; } // char (length: 1)
        public string Character { get; set; } // character (length: 1)
        public string CharacterVarying { get; set; } // character_varying
        public uint? Cid { get; set; } // cid
        public NpgsqlInet? Cidr { get; set; } // cidr
        public NpgsqlCircle? Circle { get; set; } // circle
        public DateTime? Date { get; set; } // date
        public double? DoublePrecision { get; set; } // double_precision
        public NpgsqlInet? Inet { get; set; } // inet
        public int? Integer { get; set; } // integer
        public TimeSpan? Interval { get; set; } // interval
        public string Json { get; set; } // json
        public string Jsonb { get; set; } // jsonb
        public NpgsqlLine? Line { get; set; } // line
        public NpgsqlLSeg? Lseg { get; set; } // lseg
        public decimal? Money { get; set; } // money
        public string Name { get; set; } // name
        public decimal? Numeric { get; set; } // numeric
        public uint? Oid { get; set; } // oid
        public string Oidvector { get; set; } // oidvector
        public NpgsqlPath? Path { get; set; } // path
        public NpgsqlPoint? Point { get; set; } // point
        public NpgsqlPolygon? Polygon { get; set; } // polygon
        public float? Real { get; set; } // real
        public short? Smallint { get; set; } // smallint
        public string Text { get; set; } // text
        public DateTimeOffset? TimeWithTimeZone { get; set; } // time_with_time_zone
        public TimeSpan? TimeWithoutTimeZone { get; set; } // time_without_time_zone
        public DateTime? TimestampWithTimeZone { get; set; } // timestamp_with_time_zone
        public DateTime? TimestampWithoutTimeZone { get; set; } // timestamp_without_time_zone
        public Guid? Uuid { get; set; } // uuid
        public uint? Xid { get; set; } // xid
        public string Xml { get; set; } // xml
    }


    #endregion

    #region POCO Configuration

    // allcolumntypes
    public class AllcolumntypeConfiguration : EntityTypeConfiguration<Allcolumntype>
    {
        public AllcolumntypeConfiguration()
            : this("public")
        {
        }

        public AllcolumntypeConfiguration(string schema)
        {
            ToTable("allcolumntypes", schema);
            HasKey(x => x.Bigint);

            Property(x => x.Bigint).HasColumnName(@"bigint").HasColumnType("bigint").IsRequired().HasDatabaseGeneratedOption(DatabaseGeneratedOption.None);
            Property(x => x.Bit1).HasColumnName(@"bit_1").HasColumnType("bit").IsOptional().HasMaxLength(1);
            Property(x => x.Bit8).HasColumnName(@"bit_8").HasColumnType("bit").IsOptional().HasMaxLength(8);
            Property(x => x.Boolean).HasColumnName(@"boolean").HasColumnType("boolean").IsOptional();
            Property(x => x.Box).HasColumnName(@"box").HasColumnType("box").IsOptional();
            Property(x => x.Bytea).HasColumnName(@"bytea").HasColumnType("bytea").IsOptional();
            Property(x => x.@Char).HasColumnName(@"char").HasColumnType("character").IsOptional().HasMaxLength(1);
            Property(x => x.Character).HasColumnName(@"character").HasColumnType("character").IsOptional().HasMaxLength(1);
            Property(x => x.CharacterVarying).HasColumnName(@"character_varying").HasColumnType("character varying").IsOptional();
            Property(x => x.Cid).HasColumnName(@"cid").HasColumnType("cid").IsOptional();
            Property(x => x.Cidr).HasColumnName(@"cidr").HasColumnType("cidr").IsOptional();
            Property(x => x.Circle).HasColumnName(@"circle").HasColumnType("circle").IsOptional();
            Property(x => x.Date).HasColumnName(@"date").HasColumnType("date").IsOptional();
            Property(x => x.DoublePrecision).HasColumnName(@"double_precision").HasColumnType("double precision").IsOptional();
            Property(x => x.Inet).HasColumnName(@"inet").HasColumnType("inet").IsOptional();
            Property(x => x.Integer).HasColumnName(@"integer").HasColumnType("integer").IsOptional();
            Property(x => x.Interval).HasColumnName(@"interval").HasColumnType("interval").IsOptional();
            Property(x => x.Json).HasColumnName(@"json").HasColumnType("json").IsOptional();
            Property(x => x.Jsonb).HasColumnName(@"jsonb").HasColumnType("jsonb").IsOptional();
            Property(x => x.Line).HasColumnName(@"line").HasColumnType("line").IsOptional();
            Property(x => x.Lseg).HasColumnName(@"lseg").HasColumnType("lseg").IsOptional();
            Property(x => x.Money).HasColumnName(@"money").HasColumnType("money").IsOptional();
            Property(x => x.Name).HasColumnName(@"name").HasColumnType("name").IsOptional();
            Property(x => x.Numeric).HasColumnName(@"numeric").HasColumnType("numeric").IsOptional();
            Property(x => x.Oid).HasColumnName(@"oid").HasColumnType("oid").IsOptional();
            Property(x => x.Oidvector).HasColumnName(@"oidvector").HasColumnType("array").IsOptional();
            Property(x => x.Path).HasColumnName(@"path").HasColumnType("path").IsOptional();
            Property(x => x.Point).HasColumnName(@"point").HasColumnType("point").IsOptional();
            Property(x => x.Polygon).HasColumnName(@"polygon").HasColumnType("polygon").IsOptional();
            Property(x => x.Real).HasColumnName(@"real").HasColumnType("real").IsOptional();
            Property(x => x.Smallint).HasColumnName(@"smallint").HasColumnType("smallint").IsOptional();
            Property(x => x.Text).HasColumnName(@"text").HasColumnType("text").IsOptional().IsUnicode(false);
            Property(x => x.TimeWithTimeZone).HasColumnName(@"time_with_time_zone").HasColumnType("time with time zone").IsOptional();
            Property(x => x.TimeWithoutTimeZone).HasColumnName(@"time_without_time_zone").HasColumnType("time without time zone").IsOptional();
            Property(x => x.TimestampWithTimeZone).HasColumnName(@"timestamp_with_time_zone").HasColumnType("timestamp with time zone").IsOptional();
            Property(x => x.TimestampWithoutTimeZone).HasColumnName(@"timestamp_without_time_zone").HasColumnType("timestamp without time zone").IsOptional();
            Property(x => x.Uuid).HasColumnName(@"uuid").HasColumnType("uuid").IsOptional();
            Property(x => x.Xid).HasColumnName(@"xid").HasColumnType("xid").IsOptional();
            Property(x => x.Xml).HasColumnName(@"xml").HasColumnType("xml").IsOptional();
        }
    }


    #endregion

}
// </auto-generated>
