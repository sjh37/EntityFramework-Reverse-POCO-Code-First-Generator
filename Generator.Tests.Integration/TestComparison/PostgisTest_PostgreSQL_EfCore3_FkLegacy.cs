// <auto-generated>

using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.ChangeTracking;
using Microsoft.EntityFrameworkCore.Design;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata.Builders;
using Microsoft.EntityFrameworkCore.Query;
using Microsoft.EntityFrameworkCore.Query.Internal;
using Microsoft.EntityFrameworkCore.Storage;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Data;
using System.Data.SqlTypes;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;
using System.Threading;
using System.Threading.Tasks;

namespace Efrpg.PostgreSQL
{
    #region Database context interface

    public interface IMyDbContext : IDisposable
    {
        DbSet<dbo_TestPostGisTbl> dbo_TestPostGisTbls { get; set; } // TestPostGisTbl
        DbSet<GeographyColumn> GeographyColumns { get; set; } // geography_columns
        DbSet<GeometryColumn> GeometryColumns { get; set; } // geometry_columns
        DbSet<PointcloudColumn> PointcloudColumns { get; set; } // pointcloud_columns
        DbSet<PointcloudFormat> PointcloudFormats { get; set; } // pointcloud_formats
        DbSet<RasterColumn> RasterColumns { get; set; } // raster_columns
        DbSet<RasterOverview> RasterOverviews { get; set; } // raster_overviews
        DbSet<SpatialRefSy> SpatialRefSies { get; set; } // spatial_ref_sys
        DbSet<tiger_Addr> tiger_Addrs { get; set; } // addr
        DbSet<tiger_Addrfeat> tiger_Addrfeats { get; set; } // addrfeat
        DbSet<tiger_Bg> tiger_Bgs { get; set; } // bg
        DbSet<tiger_County> tiger_Counties { get; set; } // county
        DbSet<tiger_CountyLookup> tiger_CountyLookups { get; set; } // county_lookup
        DbSet<tiger_CountysubLookup> tiger_CountysubLookups { get; set; } // countysub_lookup
        DbSet<tiger_Cousub> tiger_Cousubs { get; set; } // cousub
        DbSet<tiger_DirectionLookup> tiger_DirectionLookups { get; set; } // direction_lookup
        DbSet<tiger_Edge> tiger_Edges { get; set; } // edges
        DbSet<tiger_Face> tiger_Faces { get; set; } // faces
        DbSet<tiger_Featname> tiger_Featnames { get; set; } // featnames
        DbSet<tiger_GeocodeSetting> tiger_GeocodeSettings { get; set; } // geocode_settings
        DbSet<tiger_GeocodeSettingsDefault> tiger_GeocodeSettingsDefaults { get; set; } // geocode_settings_default
        DbSet<tiger_LoaderLookuptable> tiger_LoaderLookuptables { get; set; } // loader_lookuptables
        DbSet<tiger_LoaderPlatform> tiger_LoaderPlatforms { get; set; } // loader_platform
        DbSet<tiger_LoaderVariable> tiger_LoaderVariables { get; set; } // loader_variables
        DbSet<tiger_PagcGaz> tiger_PagcGazs { get; set; } // pagc_gaz
        DbSet<tiger_PagcLex> tiger_PagcLexes { get; set; } // pagc_lex
        DbSet<tiger_PagcRule> tiger_PagcRules { get; set; } // pagc_rules
        DbSet<tiger_Place> tiger_Places { get; set; } // place
        DbSet<tiger_PlaceLookup> tiger_PlaceLookups { get; set; } // place_lookup
        DbSet<tiger_SecondaryUnitLookup> tiger_SecondaryUnitLookups { get; set; } // secondary_unit_lookup
        DbSet<tiger_State> tiger_States { get; set; } // state
        DbSet<tiger_StateLookup> tiger_StateLookups { get; set; } // state_lookup
        DbSet<tiger_StreetTypeLookup> tiger_StreetTypeLookups { get; set; } // street_type_lookup
        DbSet<tiger_Tabblock> tiger_Tabblocks { get; set; } // tabblock
        DbSet<tiger_Tabblock20> tiger_Tabblock20 { get; set; } // tabblock20
        DbSet<tiger_Tract> tiger_Tracts { get; set; } // tract
        DbSet<tiger_Zcta5> tiger_Zcta5 { get; set; } // zcta5
        DbSet<tiger_ZipLookup> tiger_ZipLookups { get; set; } // zip_lookup
        DbSet<tiger_ZipLookupBase> tiger_ZipLookupBases { get; set; } // zip_lookup_base
        DbSet<tiger_ZipState> tiger_ZipStates { get; set; } // zip_state
        DbSet<tiger_ZipStateLoc> tiger_ZipStateLocs { get; set; } // zip_state_loc
        DbSet<topology_Layer> topology_Layers { get; set; } // layer
        DbSet<topology_Topology> topology_Topologies { get; set; } // topology

        int SaveChanges();
        int SaveChanges(bool acceptAllChangesOnSuccess);
        Task<int> SaveChangesAsync(CancellationToken cancellationToken = default(CancellationToken));
        Task<int> SaveChangesAsync(bool acceptAllChangesOnSuccess, CancellationToken cancellationToken = default(CancellationToken));
        DatabaseFacade Database { get; }
        DbSet<TEntity> Set<TEntity>() where TEntity : class;
        string ToString();

        EntityEntry Add(object entity);
        EntityEntry<TEntity> Add<TEntity>(TEntity entity) where TEntity : class;
        Task AddRangeAsync(params object[] entities);
        Task AddRangeAsync(IEnumerable<object> entities, CancellationToken cancellationToken = default);
        ValueTask<EntityEntry<TEntity>> AddAsync<TEntity>(TEntity entity, CancellationToken cancellationToken = default) where TEntity : class;
        ValueTask<EntityEntry> AddAsync(object entity, CancellationToken cancellationToken = default);
        void AddRange(IEnumerable<object> entities);
        void AddRange(params object[] entities);

        EntityEntry Attach(object entity);
        EntityEntry<TEntity> Attach<TEntity>(TEntity entity) where TEntity : class;
        void AttachRange(IEnumerable<object> entities);
        void AttachRange(params object[] entities);

        EntityEntry Entry(object entity);
        EntityEntry<TEntity> Entry<TEntity>(TEntity entity) where TEntity : class;

        TEntity Find<TEntity>(params object[] keyValues) where TEntity : class;
        ValueTask<TEntity> FindAsync<TEntity>(object[] keyValues, CancellationToken cancellationToken) where TEntity : class;
        ValueTask<TEntity> FindAsync<TEntity>(params object[] keyValues) where TEntity : class;
        ValueTask<object> FindAsync(Type entityType, object[] keyValues, CancellationToken cancellationToken);
        ValueTask<object> FindAsync(Type entityType, params object[] keyValues);
        object Find(Type entityType, params object[] keyValues);

        EntityEntry Remove(object entity);
        EntityEntry<TEntity> Remove<TEntity>(TEntity entity) where TEntity : class;
        void RemoveRange(IEnumerable<object> entities);
        void RemoveRange(params object[] entities);

        EntityEntry Update(object entity);
        EntityEntry<TEntity> Update<TEntity>(TEntity entity) where TEntity : class;
        void UpdateRange(IEnumerable<object> entities);
        void UpdateRange(params object[] entities);


        // Scalar Valued Functions
        string OverviewConstraintInfo(string ovschema, string ovtable, string ovcolumn); // public._overview_constraint_info
        string ParseAddress(string p1); // public.parse_address
        long PgrAlphashape(string p1, double? alpha); // public._pgr_alphashape
        int PgrArticulationpoints(string edgesSql); // public._pgr_articulationpoints
        long PgrArticulationpoints(string p1); // public.pgr_articulationpoints
        int PgrAstar(string edgesSql, string edgesSql, string startVids, string combinationsSql, string endVids, bool? directed, bool? directed, int? heuristic, int? heuristic, double? factor, double? factor, double? epsilon, double? epsilon, bool? onlyCost, bool? onlyCost, bool? normal); // public._pgr_astar
        int PgrAstar(string p1, string p5, string p8, string p9, string p12, string p2, long? p4, long? p7, string p10, string p13, bool? directed, string p3, long? p6, long? p11, string p14, int? heuristic, bool? directed, bool? directed, bool? directed, bool? directed, double? factor, int? heuristic, int? heuristic, int? heuristic, int? heuristic, double? epsilon, double? factor, double? factor, double? factor, double? factor, double? epsilon, double? epsilon, double? epsilon, double? epsilon); // public.pgr_astar
        long PgrAstarcost(string p1, string p4, string p7, string p10, string p13, long? p2, long? p5, string p8, string p11, string p14, long? p3, string p6, long? p9, string p12, bool? directed, bool? directed, bool? directed, bool? directed, bool? directed, int? heuristic, int? heuristic, int? heuristic, int? heuristic, int? heuristic, double? factor, double? factor, double? factor, double? factor, double? factor, double? epsilon, double? epsilon, double? epsilon, double? epsilon, double? epsilon); // public.pgr_astarcost
        long PgrAstarcostmatrix(string p2, string p1, bool? directed, int? heuristic, double? factor, double? epsilon); // public.pgr_astarcostmatrix
        int PgrBdastar(string p2, string p3, string p1, string p4, bool? directed, string p5, int? heuristic, bool? directed, double? factor, int? heuristic, double? epsilon, double? factor, bool? onlyCost, double? epsilon, bool? onlyCost); // public._pgr_bdastar
        int PgrBdastar(string p3, string p5, string p6, string p9, string p12, long? p2, string p4, string p7, string p10, long? p14, long? p1, bool? directed, long? p8, string p11, string p13, bool? directed, int? heuristic, bool? directed, bool? directed, bool? directed, decimal? factor, int? heuristic, int? heuristic, int? heuristic, int? heuristic, decimal? epsilon, decimal? factor, decimal? factor, decimal? factor, decimal? factor, decimal? epsilon, decimal? epsilon, decimal? epsilon, decimal? epsilon); // public.pgr_bdastar
        long PgrBdastarcost(string p2, string p4, string p7, string p11, string p14, long? p1, long? p5, string p8, string p10, string p13, long? p3, string p6, long? p9, bool? directed, string p12, bool? directed, bool? directed, bool? directed, int? heuristic, bool? directed, int? heuristic, int? heuristic, int? heuristic, decimal? factor, int? heuristic, decimal? factor, decimal? factor, decimal? factor, decimal? epsilon, decimal? factor, decimal? epsilon, decimal? epsilon, decimal? epsilon, decimal? epsilon); // public.pgr_bdastarcost
        long PgrBdastarcostmatrix(string p2, string p1, bool? directed, int? heuristic, decimal? factor, decimal? epsilon); // public.pgr_bdastarcostmatrix
        int PgrBddijkstra(string p2, string p5, string p1, string p4, bool? directed, string p3, bool? onlyCost, bool? directed, bool? onlyCost); // public._pgr_bddijkstra
        int PgrBddijkstra(string p3, string p6, string p8, string p11, string p14, long? p2, long? p5, string p7, string p10, string p13, string p1, long? p4, string p9, long? p12, bool? directed, bool? directed, bool? directed, bool? directed, bool? directed); // public.pgr_bddijkstra
        long PgrBddijkstracost(string p2, string p5, string p8, string p11, string p14, string p1, string p4, string p7, long? p10, long? p13, bool? directed, string p3, long? p6, string p9, long? p12, bool? directed, bool? directed, bool? directed, bool? directed); // public.pgr_bddijkstracost
        long PgrBddijkstracostmatrix(string p2, string p1, bool? directed); // public.pgr_bddijkstracostmatrix
        int PgrBellmanford(string edgesSql, string edgesSql, string combinationsSql, string fromVids, string toVids, bool? directed, bool? onlyCost, bool? directed, bool? onlyCost); // public._pgr_bellmanford
        int PgrBellmanford(string p2, string p5, string p8, string p10, string p12, string p1, string p4, string p7, long? p9, long? p13, bool? directed, string p3, long? p6, string p11, long? p14, bool? directed, bool? directed, bool? directed, bool? directed); // public.pgr_bellmanford
        long PgrBiconnectedcomponents(string edgesSql); // public._pgr_biconnectedcomponents
        long PgrBiconnectedcomponents(string p1); // public.pgr_biconnectedcomponents
        int PgrBinarybreadthfirstsearch(string edgesSql, string edgesSql, string fromVids, string combinationsSql, string toVids, bool? directed, bool? directed); // public._pgr_binarybreadthfirstsearch
        int PgrBinarybreadthfirstsearch(string p1, string p4, string p7, string p10, string p13, long? p2, long? p5, string p8, string p11, string p14, long? p3, string p6, long? p9, string p12, bool? directed, bool? directed, bool? directed, bool? directed, bool? directed); // public.pgr_binarybreadthfirstsearch
        long PgrBipartite(string edgesSql); // public._pgr_bipartite
        long PgrBipartite(string p1); // public.pgr_bipartite
        int PgrBoykovkolmogorov(string p2, string p5, string p6, string p8, string p13, string p1, long? p4, string p7, long? p9, string p12, string p3, long? p10, string p11, long? p14); // public.pgr_boykovkolmogorov
        long PgrBreadthfirstsearch(string edgesSql, string fromVids, long? maxDepth, bool? directed); // public._pgr_breadthfirstsearch
        long PgrBreadthfirstsearch(string p1, string p3, string p2, long? p4, long? maxDepth, long? maxDepth, bool? directed, bool? directed); // public.pgr_breadthfirstsearch
        int PgrBridges(string edgesSql); // public._pgr_bridges
        long PgrBridges(string p1); // public.pgr_bridges
        string PgrCheckverttab(string vertname, string columnsarr, int? reporterrs, string fnname); // public._pgr_checkverttab
        int PgrChinesepostman(string edgesSql, bool? onlyCost); // public._pgr_chinesepostman
        int PgrChinesepostman(string p1); // public.pgr_chinesepostman
        long PgrConnectedcomponents(string edgesSql); // public._pgr_connectedcomponents
        long PgrConnectedcomponents(string p1); // public.pgr_connectedcomponents
        string PgrContraction(string edgesSql, string contractionOrder, int? maxCycles, string forbiddenVertices, bool? directed); // public._pgr_contraction
        string PgrContraction(string p1, string p2, int? maxCycles, string forbiddenVertices, bool? directed); // public.pgr_contraction
        int PgrDagshortestpath(string p3, string p5, string p2, string p4, string p1, bool? directed, bool? directed, bool? onlyCost, bool? onlyCost); // public._pgr_dagshortestpath
        int PgrDagshortestpath(string p2, string p5, string p7, string p10, string p13, string p4, long? p6, long? p9, string p11, string p14, string p1, long? p3, long? p8, string p12); // public.pgr_dagshortestpath
        long PgrDepthfirstsearch(string edgesSql, string rootVids, bool? directed, long? maxDepth); // public._pgr_depthfirstsearch
        long PgrDepthfirstsearch(string p1, string p4, string p2, long? p3, bool? directed, bool? directed, long? maxDepth, long? maxDepth); // public.pgr_depthfirstsearch
        int PgrDijkstra(string edgesSql, string edgesSql, string edgesSql, string edgesSql, string combinationsSql, string startVids, string combinationsSql, string startVids, bool? directed, string endVids, bool? directed, string endVids, bool? onlyCost, bool? directed, bool? onlyCost, bool? directed, long? nGoals, bool? onlyCost, bool? normal, bool? onlyCost, bool? global, bool? normal, bool? normal, long? nGoals, long? nGoals, bool? global); // public._pgr_dijkstra
        int PgrDijkstra(string p1, string p4, string p5, string p9, string p12, string p2, string p3, long? p6, long? p10, string p13, bool? directed, long? p7, string p8, string p11, long? p14, bool? directed, bool? directed, bool? directed, bool? directed); // public.pgr_dijkstra
        long PgrDijkstracost(string p2, string p5, string p8, string p11, string p14, string p1, string p4, string p7, long? p10, long? p13, bool? directed, string p3, long? p6, string p9, long? p12, bool? directed, bool? directed, bool? directed, bool? directed); // public.pgr_dijkstracost
        long PgrDijkstracostmatrix(string p2, string p1, bool? directed); // public.pgr_dijkstracostmatrix
        int PgrDijkstranear(string p4, string p8, string p12, string p3, string p7, long? p11, string p2, long? p6, string p10, long? p1, long? p5, long? p9, bool? directed, bool? directed, bool? directed); // public._pgr_dijkstranear
        int PgrDijkstranear(string p3, string p6, string p7, string p11, string p2, string p5, long? p8, string p10, string p1, long? p4, string p9, bool? directed, bool? directed, bool? directed, bool? directed, long? cap, long? cap, long? cap, long? cap, bool? global, bool? global); // public.pgr_dijkstranear
        long PgrDijkstranearcost(string p3, string p6, string p9, string p11, string p2, string p5, long? p8, string p10, string p1, long? p4, string p7, bool? directed, bool? directed, bool? directed, bool? directed, long? cap, long? cap, long? cap, long? cap, bool? global, bool? global); // public.pgr_dijkstranearcost
        int PgrDijkstravia(string edgesSql, string viaVids, bool? directed, bool? strict, bool? uTurnOnEdge); // public._pgr_dijkstravia
        int PgrDijkstravia(string p2, string p1, bool? directed, bool? strict, bool? uTurnOnEdge); // public.pgr_dijkstravia
        int PgrDrivingdistance(string edgesSql, string startVids, double? distance, bool? directed, bool? equicost); // public._pgr_drivingdistance
        int PgrDrivingdistance(string p1, string p6, long? p2, string p5, double? p3, double? p4, bool? directed, bool? directed, bool? equicost); // public.pgr_drivingdistance
        long PgrEdgecoloring(string edgesSql); // public._pgr_edgecoloring
        long PgrEdgecoloring(string p1); // public.pgr_edgecoloring
        int PgrEdgedisjointpaths(string p2, string p5, string p1, string p4, bool? directed, string p3, bool? directed); // public._pgr_edgedisjointpaths
        int PgrEdgedisjointpaths(string p3, string p4, string p7, string p11, string p14, string p2, long? p5, string p8, string p10, long? p13, bool? directed, string p1, long? p6, long? p9, string p12, bool? directed, bool? directed, bool? directed, bool? directed); // public.pgr_edgedisjointpaths
        int PgrEdmondskarp(string p1, string p4, string p8, string p11, string p14, long? p2, long? p5, string p7, string p10, string p13, long? p3, string p6, string p9, long? p12); // public.pgr_edmondskarp
        int PgrEdwardmoore(string edgesSql, string edgesSql, string fromVids, string combinationsSql, bool? directed, string toVids, bool? directed); // public._pgr_edwardmoore
        int PgrEdwardmoore(string p1, string p4, string p7, string p10, string p13, string p2, string p5, string p6, long? p9, long? p12, bool? directed, string p3, string p8, long? p11, long? p14, bool? directed, bool? directed, bool? directed, bool? directed); // public.pgr_edwardmoore
        long PgrExtractvertices(string p1, bool? dryrun); // public.pgr_extractvertices
        long PgrFloydwarshall(string edgesSql, bool? directed); // public._pgr_floydwarshall
        long PgrFloydwarshall(string p1, bool? directed); // public.pgr_floydwarshall
        string PgrFullVersion(); // public.pgr_full_version
        string PgrGettablename(string tab, int? reporterrs, string fnname); // public._pgr_gettablename
        long PgrJohnson(string edgesSql, bool? directed); // public._pgr_johnson
        long PgrJohnson(string p1, bool? directed); // public.pgr_johnson
        long PgrKruskal(string p2, string p1, string fnSuffix, long? maxDepth, double? distance); // public._pgr_kruskal
        long PgrKruskal(string p1); // public.pgr_kruskal
        long PgrKruskalbfs(string p1, string p3, string p2, long? p4, long? maxDepth, long? maxDepth); // public.pgr_kruskalbfs
        long PgrKruskaldd(string p3, string p6, string p9, string p12, string p2, string p5, long? p8, long? p11, double? p1, decimal? p4, double? p7, decimal? p10); // public.pgr_kruskaldd
        long PgrKruskaldfs(string p3, string p4, long? p1, string p2, long? maxDepth, long? maxDepth); // public.pgr_kruskaldfs
        int PgrKsp(string edgesSql, long? startVid, long? endVid, int? k, bool? directed, bool? heapPaths); // public._pgr_ksp
        int PgrKsp(string p2, long? p1, long? p4, int? p3, bool? directed, bool? heapPaths); // public.pgr_ksp
        int PgrLengauertarjandominatortree(string edgesSql, long? rootVid); // public._pgr_lengauertarjandominatortree
        int PgrLengauertarjandominatortree(string p1, long? p2); // public.pgr_lengauertarjandominatortree
        int PgrLinegraph(string p1, bool? directed); // public._pgr_linegraph
        int PgrLinegraph(string p1, bool? directed); // public.pgr_linegraph
        int PgrLinegraphfull(string p1); // public._pgr_linegraphfull
        int PgrLinegraphfull(string p1); // public.pgr_linegraphfull
        long PgrMakeconnected(string p1); // public._pgr_makeconnected
        long PgrMakeconnected(string p1); // public.pgr_makeconnected
        int PgrMaxcardinalitymatch(string edgesSql, bool? directed); // public._pgr_maxcardinalitymatch
        int PgrMaxcardinalitymatch(string p1, bool? directed); // public.pgr_maxcardinalitymatch
        int PgrMaxflow(string edgesSql, string edgesSql, string combinationsSql, string sources, int? algorithm, string targets, bool? onlyFlow, int? algorithm, bool? onlyFlow); // public._pgr_maxflow
        int PgrMaxflowmincost(string edgesSql, string edgesSql, string combinationsSql, string sources, bool? onlyCost, string targets, bool? onlyCost); // public._pgr_maxflowmincost
        int PgrMaxflowmincost(string p1, string p3, string p6, string p8, string p13, long? p2, long? p5, string p7, string p10, string p12, long? p4, string p9, long? p11, string p14); // public.pgr_maxflowmincost
        int PgrPickdeliver(string p1, string p2, string p3, double? factor, int? maxCycles, int? initialSol); // public._pgr_pickdeliver
        int PgrPickdeliver(string p1, string p2, string p3, double? factor, int? maxCycles, int? initialSol); // public.pgr_pickdeliver
        int PgrPickdelivereuclidean(string p2, string p1, double? factor, int? maxCycles, int? initialSol); // public._pgr_pickdelivereuclidean
        int PgrPickdelivereuclidean(string p2, string p1, double? factor, int? maxCycles, int? initialSol); // public.pgr_pickdelivereuclidean
        long PgrPrim(string p1, string p2, string orderBy, long? maxDepth, double? distance); // public._pgr_prim
        long PgrPrim(string p1); // public.pgr_prim
        long PgrPrimbfs(string p2, string p3, string p1, long? p4, long? maxDepth, long? maxDepth); // public.pgr_primbfs
        long PgrPrimdd(string p1, string p4, string p7, string p10, long? p2, long? p5, string p8, string p11, decimal? p3, double? p6, decimal? p9, double? p12); // public.pgr_primdd
        long PgrPrimdfs(string p1, string p3, long? p2, string p4, long? maxDepth, long? maxDepth); // public.pgr_primdfs
        int PgrPushrelabel(string p1, string p4, string p5, string p7, string p14, string p2, string p6, long? p8, long? p12, string p13, string p3, string p9, long? p10, long? p11); // public.pgr_pushrelabel
        long PgrSequentialvertexcoloring(string edgesSql); // public._pgr_sequentialvertexcoloring
        long PgrSequentialvertexcoloring(string p1); // public.pgr_sequentialvertexcoloring
        int PgrStoerwagner(string edgesSql); // public._pgr_stoerwagner
        int PgrStoerwagner(string p1); // public.pgr_stoerwagner
        long PgrStrongcomponents(string edgesSql); // public._pgr_strongcomponents
        long PgrStrongcomponents(string p1); // public.pgr_strongcomponents
        int PgrTopologicalsort(string edgesSql); // public._pgr_topologicalsort
        int PgrTopologicalsort(string p1); // public.pgr_topologicalsort
        int PgrTransitiveclosure(string edgesSql); // public._pgr_transitiveclosure
        int PgrTransitiveclosure(string p1); // public.pgr_transitiveclosure
        int PgrTrsp(string sql, string p4, string p8, string p12, string p16, int? sourceEid, string p3, string p7, string p11, string p15, double? sourcePos, string p2, string p6, long? p10, long? p14, int? targetEid, string p1, long? p5, string p9, long? p13, double? targetPos, bool? directed, bool? directed, bool? directed, bool? directed, bool? directed, bool? hasReverseCost, string turnRestrictSql); // public._pgr_trsp
        int PgrTrsp(string p4, string p9, int? p3, int? p8, double? p2, int? p7, int? p1, bool? p6, bool? p5, double? p10, string restrictionsSql, bool? p11, bool? p12, string turnRestrictSql); // public.pgr_trsp
        int PgrTrspviaedges(string p5, string p1, string p2, bool? p3, bool? p4, string turnRestrictSql); // public.pgr_trspviaedges
        int PgrTrspviavertices(string sql, string vids, bool? directed, bool? hasRcost, string turnRestrictSql); // public._pgr_trspviavertices
        int PgrTrspviavertices(string p3, string p1, bool? p2, bool? p4, string restrictionsSql); // public.pgr_trspviavertices
        int PgrTsp(string matrixRowSql, long? startId, long? endId, double? maxProcessingTime, int? triesPerTemperature, int? maxChangesPerTemperature, int? maxConsecutiveNonChanges, double? initialTemperature, double? finalTemperature, double? coolingFactor, bool? randomize); // public._pgr_tsp
        int PgrTsp(string p1, long? startId, long? endId, double? maxProcessingTime, int? triesPerTemperature, int? maxChangesPerTemperature, int? maxConsecutiveNonChanges, double? initialTemperature, double? finalTemperature, double? coolingFactor, bool? randomize); // public.pgr_tsp
        int PgrTspeuclidean(string coordinatesSql, long? startId, long? endId, double? maxProcessingTime, int? triesPerTemperature, int? maxChangesPerTemperature, int? maxConsecutiveNonChanges, double? initialTemperature, double? finalTemperature, double? coolingFactor, bool? randomize); // public._pgr_tspeuclidean
        int PgrTspeuclidean(string p1, long? startId, long? endId, double? maxProcessingTime, int? triesPerTemperature, int? maxChangesPerTemperature, int? maxConsecutiveNonChanges, double? initialTemperature, double? finalTemperature, double? coolingFactor, bool? randomize); // public.pgr_tspeuclidean
        int PgrTurnrestrictedpath(string p2, string p5, long? p1, long? p3, int? p4, bool? directed, bool? heapPaths, bool? stopOnFirst, bool? strict); // public._pgr_turnrestrictedpath
        int PgrTurnrestrictedpath(string p5, string p3, long? p4, long? p2, int? p1, bool? directed, bool? heapPaths, bool? stopOnFirst, bool? strict); // public.pgr_turnrestrictedpath
        int PgrVrponedepot(string p1, string p2, string p3, int? p4); // public._pgr_vrponedepot
        int PgrVrponedepot(string p4, string p1, string p2, int? p3); // public.pgr_vrponedepot
        int PgrWithpoints(string edgesSql, string edgesSql, string pointsSql, string pointsSql, string startPids, string combinationsSql, string endPids, bool? directed, bool? directed, string drivingSide, string drivingSide, bool? details, bool? details, bool? onlyCost, bool? onlyCost, bool? normal); // public._pgr_withpoints
        int PgrWithpoints(string p1, string p7, string p11, string p12, string p16, string p2, string p6, string p8, string p13, string p17, string p3, string p5, string p9, long? p14, long? p18, bool? directed, long? p4, string p10, long? p15, string p19, bool? directed, string drivingSide, bool? directed, bool? directed, bool? directed, string drivingSide, bool? details, string drivingSide, string drivingSide, string drivingSide, bool? details, bool? details, bool? details, bool? details); // public.pgr_withpoints
        long PgrWithpointscost(string p1, string p4, string p8, string p15, string p19, string p3, string p7, string p11, string p14, string p18, string p2, string p6, string p10, long? p13, long? p17, bool? directed, string p5, long? p9, string p12, long? p16, string drivingSide, bool? directed, bool? directed, bool? directed, bool? directed, string drivingSide, string drivingSide, string drivingSide, string drivingSide); // public.pgr_withpointscost
        long PgrWithpointscostmatrix(string p2, string p1, string p3, bool? directed, string drivingSide); // public.pgr_withpointscostmatrix
        int PgrWithpointsdd(string edgesSql, string pointsSql, string startPid, double? distance, bool? directed, string drivingSide, bool? details, bool? equicost); // public._pgr_withpointsdd
        int PgrWithpointsdd(string p4, string p5, string p3, string p6, string p2, long? p7, double? p1, double? p8, bool? directed, bool? directed, string drivingSide, string drivingSide, bool? details, bool? details, bool? equicost); // public.pgr_withpointsdd
        int PgrWithpointsksp(string edgesSql, string pointsSql, long? startPid, long? endPid, int? k, bool? directed, bool? heapPaths, string drivingSide, bool? details); // public._pgr_withpointsksp
        int PgrWithpointsksp(string p5, string p4, long? p3, long? p1, int? p2, bool? directed, bool? heapPaths, string drivingSide, bool? details); // public.pgr_withpointsksp
        int PgrWithpointsvia(string sql, string viaEdges, string fraction, bool? directed); // public._pgr_withpointsvia
        double StApproxhistogram(string rast, string rast, string rast, string rast, string rast, string rast, int? nband, double? samplePercent, int? nband, int? nband, int? nband, int? nband, double? samplePercent, bool? excludeNodataValue, bool? excludeNodataValue, double? samplePercent, double? samplePercent, double? samplePercent, double? samplePercent, int? bins, int? bins, int? bins, int? bins, bool? right, string width, string width, bool? right, bool? right, bool? right); // public.st_approxhistogram
        double StApproxquantile(string rast, string rast, string rast, string rast, string rast, string rast, string rast, string rast, string rast, int? nband, string quantiles, double? samplePercent, int? nband, int? nband, int? nband, bool? excludeNodataValue, double? quantile, double? samplePercent, bool? excludeNodataValue, string quantiles, double? samplePercent, double? samplePercent, bool? excludeNodataValue, double? quantile, double? quantile, double? samplePercent, string quantiles, double? samplePercent, double? quantile, double? quantile, string quantiles); // public.st_approxquantile
        string StBandmetadata(string rast, string rast, int? band, string band); // public.st_bandmetadata
        string StContour(string rast, int? bandnumber, double? levelInterval, double? levelBase, string fixedLevels, bool? polygonize); // public.st_contour
        int StDumpvalues(string rast, string rast, string nband, int? nband, bool? excludeNodataValue, bool? excludeNodataValue); // public.st_dumpvalues
        int StGdaldrivers(); // public.st_gdaldrivers
        double StGeotransform(string p1); // public.st_geotransform
        string StHexagongrid(double? size, string bounds); // public.st_hexagongrid
        double StHistogram(string rast, int? nband, bool? excludeNodataValue, double? samplePercent, int? bins, string width, bool? right, double? min, double? max); // public._st_histogram
        double StHistogram(string rast, string rast, string rast, string rast, int? nband, int? nband, int? nband, int? nband, int? bins, int? bins, bool? excludeNodataValue, bool? excludeNodataValue, bool? right, string width, int? bins, int? bins, bool? right, bool? right, string width, bool? right); // public.st_histogram
        string StMaximuminscribedcircle(string p1); // public.st_maximuminscribedcircle
        double StMetadata(string rast); // public.st_metadata
        string StMinimumboundingradius(string p1); // public.st_minimumboundingradius
        string StPixelascentroids(string rast, int? band, int? columnx, int? rowy, bool? excludeNodataValue); // public._st_pixelascentroids
        string StPixelascentroids(string rast, int? band, bool? excludeNodataValue); // public.st_pixelascentroids
        string StPixelaspoints(string rast, int? band, bool? excludeNodataValue); // public.st_pixelaspoints
        string StPixelaspolygons(string rast, int? band, int? columnx, int? rowy, bool? excludeNodataValue); // public._st_pixelaspolygons
        string StPixelaspolygons(string rast, int? band, bool? excludeNodataValue); // public.st_pixelaspolygons
        double StPixelofvalue(string rast, string rast, string rast, string rast, int? nband, double? search, string search, int? nband, double? search, string search, bool? excludeNodataValue, bool? excludeNodataValue, bool? excludeNodataValue, bool? excludeNodataValue); // public.st_pixelofvalue
        double StQuantile(string rast, int? nband, bool? excludeNodataValue, double? samplePercent, string quantiles); // public._st_quantile
        double StQuantile(string rast, string rast, string rast, string rast, string rast, string rast, string rast, int? nband, int? nband, bool? excludeNodataValue, double? quantile, int? nband, string quantiles, int? nband, bool? excludeNodataValue, double? quantile, double? quantile, string quantiles, bool? excludeNodataValue, double? quantile, string quantiles); // public.st_quantile
        double StRastertoworldcoord(string rast, int? columnx, int? rowy); // public._st_rastertoworldcoord
        double StRastertoworldcoord(string rast, int? columnx, int? rowy); // public.st_rastertoworldcoord
        string StSquaregrid(double? size, string bounds); // public.st_squaregrid
        double StValuecount(string rast, string rastertable, int? nband, string rastercolumn, bool? excludeNodataValue, int? nband, string searchvalues, bool? excludeNodataValue, double? roundto, string searchvalues, double? roundto); // public._st_valuecount
        double StValuecount(string rastertable, string rastertable, string rastertable, string rast, string rast, string rast, string rastertable, string rastertable, string rast, string rast, string rast, string rastertable, string rastercolumn, string rastercolumn, string rastercolumn, int? nband, int? nband, double? searchvalue, string rastercolumn, string rastercolumn, int? nband, int? nband, string searchvalues, string rastercolumn, int? nband, int? nband, double? searchvalue, bool? excludeNodataValue, double? searchvalue, double? roundto, int? nband, int? nband, bool? excludeNodataValue, string searchvalues, double? roundto, string searchvalues, bool? excludeNodataValue, double? searchvalue, double? roundto, double? searchvalue, double? roundto, bool? excludeNodataValue, string searchvalues, string searchvalues, double? roundto, double? roundto, double? searchvalue, double? roundto, double? roundto, string searchvalues, double? roundto, double? roundto, double? roundto, double? roundto); // public.st_valuecount
        double StValuepercent(string rastertable, string rastertable, string rastertable, string rastertable, string rastertable, string rastertable, string rast, string rast, string rast, string rast, string rast, string rast, string rastercolumn, string rastercolumn, string rastercolumn, string rastercolumn, string rastercolumn, string rastercolumn, double? searchvalue, int? nband, int? nband, string searchvalues, int? nband, int? nband, double? searchvalue, int? nband, int? nband, string searchvalues, int? nband, int? nband, double? roundto, double? searchvalue, bool? excludeNodataValue, double? roundto, string searchvalues, bool? excludeNodataValue, double? roundto, double? searchvalue, bool? excludeNodataValue, double? roundto, string searchvalues, bool? excludeNodataValue, double? roundto, double? searchvalue, double? roundto, string searchvalues, double? roundto, double? searchvalue, double? roundto, string searchvalues, double? roundto, double? roundto, double? roundto, double? roundto); // public.st_valuepercent
        int StWorldtorastercoord(string rast, double? longitude, double? latitude); // public._st_worldtorastercoord
        int StWorldtorastercoord(string rast, string rast, double? longitude, string pt, double? latitude); // public.st_worldtorastercoord
        string tiger_Geocode(string input, string inAddy, int? maxResults, int? maxResults, string restrictGeom, string restrictGeom); // tiger.geocode
        string tiger_GeocodeAddress(string parsed, int? maxResults, string restrictGeom); // tiger.geocode_address
        string tiger_GeocodeIntersection(string roadway1, string roadway2, string inState, string inCity, string inZip, int? numResults); // tiger.geocode_intersection
        string tiger_GeocodeLocation(string parsed, string restrictGeom); // tiger.geocode_location
        string tiger_ReverseGeocode(string pt, bool? includeStrnumRange); // tiger.reverse_geocode
        string topology_PopulateTopologyLayer(); // topology.populate_topology_layer
        string topology_Validatetopologyrelation(string toponame); // topology.validatetopologyrelation
        int Trsp(string p1, string p2, string p3, string p4, bool? directed); // public._trsp
    }

    #endregion

    #region Database context

    public class MyDbContext : DbContext, IMyDbContext
    {
        public MyDbContext()
        {
        }

        public MyDbContext(DbContextOptions<MyDbContext> options)
            : base(options)
        {
        }

        public DbSet<dbo_TestPostGisTbl> dbo_TestPostGisTbls { get; set; } // TestPostGisTbl
        public DbSet<GeographyColumn> GeographyColumns { get; set; } // geography_columns
        public DbSet<GeometryColumn> GeometryColumns { get; set; } // geometry_columns
        public DbSet<PointcloudColumn> PointcloudColumns { get; set; } // pointcloud_columns
        public DbSet<PointcloudFormat> PointcloudFormats { get; set; } // pointcloud_formats
        public DbSet<RasterColumn> RasterColumns { get; set; } // raster_columns
        public DbSet<RasterOverview> RasterOverviews { get; set; } // raster_overviews
        public DbSet<SpatialRefSy> SpatialRefSies { get; set; } // spatial_ref_sys
        public DbSet<tiger_Addr> tiger_Addrs { get; set; } // addr
        public DbSet<tiger_Addrfeat> tiger_Addrfeats { get; set; } // addrfeat
        public DbSet<tiger_Bg> tiger_Bgs { get; set; } // bg
        public DbSet<tiger_County> tiger_Counties { get; set; } // county
        public DbSet<tiger_CountyLookup> tiger_CountyLookups { get; set; } // county_lookup
        public DbSet<tiger_CountysubLookup> tiger_CountysubLookups { get; set; } // countysub_lookup
        public DbSet<tiger_Cousub> tiger_Cousubs { get; set; } // cousub
        public DbSet<tiger_DirectionLookup> tiger_DirectionLookups { get; set; } // direction_lookup
        public DbSet<tiger_Edge> tiger_Edges { get; set; } // edges
        public DbSet<tiger_Face> tiger_Faces { get; set; } // faces
        public DbSet<tiger_Featname> tiger_Featnames { get; set; } // featnames
        public DbSet<tiger_GeocodeSetting> tiger_GeocodeSettings { get; set; } // geocode_settings
        public DbSet<tiger_GeocodeSettingsDefault> tiger_GeocodeSettingsDefaults { get; set; } // geocode_settings_default
        public DbSet<tiger_LoaderLookuptable> tiger_LoaderLookuptables { get; set; } // loader_lookuptables
        public DbSet<tiger_LoaderPlatform> tiger_LoaderPlatforms { get; set; } // loader_platform
        public DbSet<tiger_LoaderVariable> tiger_LoaderVariables { get; set; } // loader_variables
        public DbSet<tiger_PagcGaz> tiger_PagcGazs { get; set; } // pagc_gaz
        public DbSet<tiger_PagcLex> tiger_PagcLexes { get; set; } // pagc_lex
        public DbSet<tiger_PagcRule> tiger_PagcRules { get; set; } // pagc_rules
        public DbSet<tiger_Place> tiger_Places { get; set; } // place
        public DbSet<tiger_PlaceLookup> tiger_PlaceLookups { get; set; } // place_lookup
        public DbSet<tiger_SecondaryUnitLookup> tiger_SecondaryUnitLookups { get; set; } // secondary_unit_lookup
        public DbSet<tiger_State> tiger_States { get; set; } // state
        public DbSet<tiger_StateLookup> tiger_StateLookups { get; set; } // state_lookup
        public DbSet<tiger_StreetTypeLookup> tiger_StreetTypeLookups { get; set; } // street_type_lookup
        public DbSet<tiger_Tabblock> tiger_Tabblocks { get; set; } // tabblock
        public DbSet<tiger_Tabblock20> tiger_Tabblock20 { get; set; } // tabblock20
        public DbSet<tiger_Tract> tiger_Tracts { get; set; } // tract
        public DbSet<tiger_Zcta5> tiger_Zcta5 { get; set; } // zcta5
        public DbSet<tiger_ZipLookup> tiger_ZipLookups { get; set; } // zip_lookup
        public DbSet<tiger_ZipLookupBase> tiger_ZipLookupBases { get; set; } // zip_lookup_base
        public DbSet<tiger_ZipState> tiger_ZipStates { get; set; } // zip_state
        public DbSet<tiger_ZipStateLoc> tiger_ZipStateLocs { get; set; } // zip_state_loc
        public DbSet<topology_Layer> topology_Layers { get; set; } // layer
        public DbSet<topology_Topology> topology_Topologies { get; set; } // topology

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
                optionsBuilder.UseNpgsql(@"Server=127.0.0.1;Port=5432;Database=postgis_test;User Id=testuser;Password=testtesttest;");
                optionsBuilder.UseLazyLoadingProxies();
            }
        }

        public bool IsSqlParameterNull(NpgsqlParameter param)
        {
            var sqlValue = param.SqlValue;
            var nullableValue = sqlValue as INullable;
            if (nullableValue != null)
                return nullableValue.IsNull;
            return (sqlValue == null || sqlValue == DBNull.Value);
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);

            modelBuilder.ApplyConfiguration(new dbo_TestPostGisTblConfiguration());
            modelBuilder.ApplyConfiguration(new GeographyColumnConfiguration());
            modelBuilder.ApplyConfiguration(new GeometryColumnConfiguration());
            modelBuilder.ApplyConfiguration(new PointcloudColumnConfiguration());
            modelBuilder.ApplyConfiguration(new PointcloudFormatConfiguration());
            modelBuilder.ApplyConfiguration(new RasterColumnConfiguration());
            modelBuilder.ApplyConfiguration(new RasterOverviewConfiguration());
            modelBuilder.ApplyConfiguration(new SpatialRefSyConfiguration());
            modelBuilder.ApplyConfiguration(new tiger_AddrConfiguration());
            modelBuilder.ApplyConfiguration(new tiger_AddrfeatConfiguration());
            modelBuilder.ApplyConfiguration(new tiger_BgConfiguration());
            modelBuilder.ApplyConfiguration(new tiger_CountyConfiguration());
            modelBuilder.ApplyConfiguration(new tiger_CountyLookupConfiguration());
            modelBuilder.ApplyConfiguration(new tiger_CountysubLookupConfiguration());
            modelBuilder.ApplyConfiguration(new tiger_CousubConfiguration());
            modelBuilder.ApplyConfiguration(new tiger_DirectionLookupConfiguration());
            modelBuilder.ApplyConfiguration(new tiger_EdgeConfiguration());
            modelBuilder.ApplyConfiguration(new tiger_FaceConfiguration());
            modelBuilder.ApplyConfiguration(new tiger_FeatnameConfiguration());
            modelBuilder.ApplyConfiguration(new tiger_GeocodeSettingConfiguration());
            modelBuilder.ApplyConfiguration(new tiger_GeocodeSettingsDefaultConfiguration());
            modelBuilder.ApplyConfiguration(new tiger_LoaderLookuptableConfiguration());
            modelBuilder.ApplyConfiguration(new tiger_LoaderPlatformConfiguration());
            modelBuilder.ApplyConfiguration(new tiger_LoaderVariableConfiguration());
            modelBuilder.ApplyConfiguration(new tiger_PagcGazConfiguration());
            modelBuilder.ApplyConfiguration(new tiger_PagcLexConfiguration());
            modelBuilder.ApplyConfiguration(new tiger_PagcRuleConfiguration());
            modelBuilder.ApplyConfiguration(new tiger_PlaceConfiguration());
            modelBuilder.ApplyConfiguration(new tiger_PlaceLookupConfiguration());
            modelBuilder.ApplyConfiguration(new tiger_SecondaryUnitLookupConfiguration());
            modelBuilder.ApplyConfiguration(new tiger_StateConfiguration());
            modelBuilder.ApplyConfiguration(new tiger_StateLookupConfiguration());
            modelBuilder.ApplyConfiguration(new tiger_StreetTypeLookupConfiguration());
            modelBuilder.ApplyConfiguration(new tiger_TabblockConfiguration());
            modelBuilder.ApplyConfiguration(new tiger_Tabblock20Configuration());
            modelBuilder.ApplyConfiguration(new tiger_TractConfiguration());
            modelBuilder.ApplyConfiguration(new tiger_Zcta5Configuration());
            modelBuilder.ApplyConfiguration(new tiger_ZipLookupConfiguration());
            modelBuilder.ApplyConfiguration(new tiger_ZipLookupBaseConfiguration());
            modelBuilder.ApplyConfiguration(new tiger_ZipStateConfiguration());
            modelBuilder.ApplyConfiguration(new tiger_ZipStateLocConfiguration());
            modelBuilder.ApplyConfiguration(new topology_LayerConfiguration());
            modelBuilder.ApplyConfiguration(new topology_TopologyConfiguration());
        }


        // Scalar Valued Functions

        [DbFunction("_overview_constraint_info", "public")]
        public string OverviewConstraintInfo(string ovschema, string ovtable, string ovcolumn)
        {
            throw new Exception("Don't call this directly. Use LINQ to call the scalar valued function as part of your query");
        }

        [DbFunction("parse_address", "public")]
        public string ParseAddress(string p1)
        {
            throw new Exception("Don't call this directly. Use LINQ to call the scalar valued function as part of your query");
        }

        [DbFunction("_pgr_alphashape", "public")]
        public long PgrAlphashape(string p1, double? alpha)
        {
            throw new Exception("Don't call this directly. Use LINQ to call the scalar valued function as part of your query");
        }

        [DbFunction("_pgr_articulationpoints", "public")]
        public int PgrArticulationpoints(string edgesSql)
        {
            throw new Exception("Don't call this directly. Use LINQ to call the scalar valued function as part of your query");
        }

        [DbFunction("pgr_articulationpoints", "public")]
        public long PgrArticulationpoints(string p1)
        {
            throw new Exception("Don't call this directly. Use LINQ to call the scalar valued function as part of your query");
        }

        [DbFunction("_pgr_astar", "public")]
        public int PgrAstar(string edgesSql, string edgesSql, string startVids, string combinationsSql, string endVids, bool? directed, bool? directed, int? heuristic, int? heuristic, double? factor, double? factor, double? epsilon, double? epsilon, bool? onlyCost, bool? onlyCost, bool? normal)
        {
            throw new Exception("Don't call this directly. Use LINQ to call the scalar valued function as part of your query");
        }

        [DbFunction("pgr_astar", "public")]
        public int PgrAstar(string p1, string p5, string p8, string p9, string p12, string p2, long? p4, long? p7, string p10, string p13, bool? directed, string p3, long? p6, long? p11, string p14, int? heuristic, bool? directed, bool? directed, bool? directed, bool? directed, double? factor, int? heuristic, int? heuristic, int? heuristic, int? heuristic, double? epsilon, double? factor, double? factor, double? factor, double? factor, double? epsilon, double? epsilon, double? epsilon, double? epsilon)
        {
            throw new Exception("Don't call this directly. Use LINQ to call the scalar valued function as part of your query");
        }

        [DbFunction("pgr_astarcost", "public")]
        public long PgrAstarcost(string p1, string p4, string p7, string p10, string p13, long? p2, long? p5, string p8, string p11, string p14, long? p3, string p6, long? p9, string p12, bool? directed, bool? directed, bool? directed, bool? directed, bool? directed, int? heuristic, int? heuristic, int? heuristic, int? heuristic, int? heuristic, double? factor, double? factor, double? factor, double? factor, double? factor, double? epsilon, double? epsilon, double? epsilon, double? epsilon, double? epsilon)
        {
            throw new Exception("Don't call this directly. Use LINQ to call the scalar valued function as part of your query");
        }

        [DbFunction("pgr_astarcostmatrix", "public")]
        public long PgrAstarcostmatrix(string p2, string p1, bool? directed, int? heuristic, double? factor, double? epsilon)
        {
            throw new Exception("Don't call this directly. Use LINQ to call the scalar valued function as part of your query");
        }

        [DbFunction("_pgr_bdastar", "public")]
        public int PgrBdastar(string p2, string p3, string p1, string p4, bool? directed, string p5, int? heuristic, bool? directed, double? factor, int? heuristic, double? epsilon, double? factor, bool? onlyCost, double? epsilon, bool? onlyCost)
        {
            throw new Exception("Don't call this directly. Use LINQ to call the scalar valued function as part of your query");
        }

        [DbFunction("pgr_bdastar", "public")]
        public int PgrBdastar(string p3, string p5, string p6, string p9, string p12, long? p2, string p4, string p7, string p10, long? p14, long? p1, bool? directed, long? p8, string p11, string p13, bool? directed, int? heuristic, bool? directed, bool? directed, bool? directed, decimal? factor, int? heuristic, int? heuristic, int? heuristic, int? heuristic, decimal? epsilon, decimal? factor, decimal? factor, decimal? factor, decimal? factor, decimal? epsilon, decimal? epsilon, decimal? epsilon, decimal? epsilon)
        {
            throw new Exception("Don't call this directly. Use LINQ to call the scalar valued function as part of your query");
        }

        [DbFunction("pgr_bdastarcost", "public")]
        public long PgrBdastarcost(string p2, string p4, string p7, string p11, string p14, long? p1, long? p5, string p8, string p10, string p13, long? p3, string p6, long? p9, bool? directed, string p12, bool? directed, bool? directed, bool? directed, int? heuristic, bool? directed, int? heuristic, int? heuristic, int? heuristic, decimal? factor, int? heuristic, decimal? factor, decimal? factor, decimal? factor, decimal? epsilon, decimal? factor, decimal? epsilon, decimal? epsilon, decimal? epsilon, decimal? epsilon)
        {
            throw new Exception("Don't call this directly. Use LINQ to call the scalar valued function as part of your query");
        }

        [DbFunction("pgr_bdastarcostmatrix", "public")]
        public long PgrBdastarcostmatrix(string p2, string p1, bool? directed, int? heuristic, decimal? factor, decimal? epsilon)
        {
            throw new Exception("Don't call this directly. Use LINQ to call the scalar valued function as part of your query");
        }

        [DbFunction("_pgr_bddijkstra", "public")]
        public int PgrBddijkstra(string p2, string p5, string p1, string p4, bool? directed, string p3, bool? onlyCost, bool? directed, bool? onlyCost)
        {
            throw new Exception("Don't call this directly. Use LINQ to call the scalar valued function as part of your query");
        }

        [DbFunction("pgr_bddijkstra", "public")]
        public int PgrBddijkstra(string p3, string p6, string p8, string p11, string p14, long? p2, long? p5, string p7, string p10, string p13, string p1, long? p4, string p9, long? p12, bool? directed, bool? directed, bool? directed, bool? directed, bool? directed)
        {
            throw new Exception("Don't call this directly. Use LINQ to call the scalar valued function as part of your query");
        }

        [DbFunction("pgr_bddijkstracost", "public")]
        public long PgrBddijkstracost(string p2, string p5, string p8, string p11, string p14, string p1, string p4, string p7, long? p10, long? p13, bool? directed, string p3, long? p6, string p9, long? p12, bool? directed, bool? directed, bool? directed, bool? directed)
        {
            throw new Exception("Don't call this directly. Use LINQ to call the scalar valued function as part of your query");
        }

        [DbFunction("pgr_bddijkstracostmatrix", "public")]
        public long PgrBddijkstracostmatrix(string p2, string p1, bool? directed)
        {
            throw new Exception("Don't call this directly. Use LINQ to call the scalar valued function as part of your query");
        }

        [DbFunction("_pgr_bellmanford", "public")]
        public int PgrBellmanford(string edgesSql, string edgesSql, string combinationsSql, string fromVids, string toVids, bool? directed, bool? onlyCost, bool? directed, bool? onlyCost)
        {
            throw new Exception("Don't call this directly. Use LINQ to call the scalar valued function as part of your query");
        }

        [DbFunction("pgr_bellmanford", "public")]
        public int PgrBellmanford(string p2, string p5, string p8, string p10, string p12, string p1, string p4, string p7, long? p9, long? p13, bool? directed, string p3, long? p6, string p11, long? p14, bool? directed, bool? directed, bool? directed, bool? directed)
        {
            throw new Exception("Don't call this directly. Use LINQ to call the scalar valued function as part of your query");
        }

        [DbFunction("_pgr_biconnectedcomponents", "public")]
        public long PgrBiconnectedcomponents(string edgesSql)
        {
            throw new Exception("Don't call this directly. Use LINQ to call the scalar valued function as part of your query");
        }

        [DbFunction("pgr_biconnectedcomponents", "public")]
        public long PgrBiconnectedcomponents(string p1)
        {
            throw new Exception("Don't call this directly. Use LINQ to call the scalar valued function as part of your query");
        }

        [DbFunction("_pgr_binarybreadthfirstsearch", "public")]
        public int PgrBinarybreadthfirstsearch(string edgesSql, string edgesSql, string fromVids, string combinationsSql, string toVids, bool? directed, bool? directed)
        {
            throw new Exception("Don't call this directly. Use LINQ to call the scalar valued function as part of your query");
        }

        [DbFunction("pgr_binarybreadthfirstsearch", "public")]
        public int PgrBinarybreadthfirstsearch(string p1, string p4, string p7, string p10, string p13, long? p2, long? p5, string p8, string p11, string p14, long? p3, string p6, long? p9, string p12, bool? directed, bool? directed, bool? directed, bool? directed, bool? directed)
        {
            throw new Exception("Don't call this directly. Use LINQ to call the scalar valued function as part of your query");
        }

        [DbFunction("_pgr_bipartite", "public")]
        public long PgrBipartite(string edgesSql)
        {
            throw new Exception("Don't call this directly. Use LINQ to call the scalar valued function as part of your query");
        }

        [DbFunction("pgr_bipartite", "public")]
        public long PgrBipartite(string p1)
        {
            throw new Exception("Don't call this directly. Use LINQ to call the scalar valued function as part of your query");
        }

        [DbFunction("pgr_boykovkolmogorov", "public")]
        public int PgrBoykovkolmogorov(string p2, string p5, string p6, string p8, string p13, string p1, long? p4, string p7, long? p9, string p12, string p3, long? p10, string p11, long? p14)
        {
            throw new Exception("Don't call this directly. Use LINQ to call the scalar valued function as part of your query");
        }

        [DbFunction("_pgr_breadthfirstsearch", "public")]
        public long PgrBreadthfirstsearch(string edgesSql, string fromVids, long? maxDepth, bool? directed)
        {
            throw new Exception("Don't call this directly. Use LINQ to call the scalar valued function as part of your query");
        }

        [DbFunction("pgr_breadthfirstsearch", "public")]
        public long PgrBreadthfirstsearch(string p1, string p3, string p2, long? p4, long? maxDepth, long? maxDepth, bool? directed, bool? directed)
        {
            throw new Exception("Don't call this directly. Use LINQ to call the scalar valued function as part of your query");
        }

        [DbFunction("_pgr_bridges", "public")]
        public int PgrBridges(string edgesSql)
        {
            throw new Exception("Don't call this directly. Use LINQ to call the scalar valued function as part of your query");
        }

        [DbFunction("pgr_bridges", "public")]
        public long PgrBridges(string p1)
        {
            throw new Exception("Don't call this directly. Use LINQ to call the scalar valued function as part of your query");
        }

        [DbFunction("_pgr_checkverttab", "public")]
        public string PgrCheckverttab(string vertname, string columnsarr, int? reporterrs, string fnname)
        {
            throw new Exception("Don't call this directly. Use LINQ to call the scalar valued function as part of your query");
        }

        [DbFunction("_pgr_chinesepostman", "public")]
        public int PgrChinesepostman(string edgesSql, bool? onlyCost)
        {
            throw new Exception("Don't call this directly. Use LINQ to call the scalar valued function as part of your query");
        }

        [DbFunction("pgr_chinesepostman", "public")]
        public int PgrChinesepostman(string p1)
        {
            throw new Exception("Don't call this directly. Use LINQ to call the scalar valued function as part of your query");
        }

        [DbFunction("_pgr_connectedcomponents", "public")]
        public long PgrConnectedcomponents(string edgesSql)
        {
            throw new Exception("Don't call this directly. Use LINQ to call the scalar valued function as part of your query");
        }

        [DbFunction("pgr_connectedcomponents", "public")]
        public long PgrConnectedcomponents(string p1)
        {
            throw new Exception("Don't call this directly. Use LINQ to call the scalar valued function as part of your query");
        }

        [DbFunction("_pgr_contraction", "public")]
        public string PgrContraction(string edgesSql, string contractionOrder, int? maxCycles, string forbiddenVertices, bool? directed)
        {
            throw new Exception("Don't call this directly. Use LINQ to call the scalar valued function as part of your query");
        }

        [DbFunction("pgr_contraction", "public")]
        public string PgrContraction(string p1, string p2, int? maxCycles, string forbiddenVertices, bool? directed)
        {
            throw new Exception("Don't call this directly. Use LINQ to call the scalar valued function as part of your query");
        }

        [DbFunction("_pgr_dagshortestpath", "public")]
        public int PgrDagshortestpath(string p3, string p5, string p2, string p4, string p1, bool? directed, bool? directed, bool? onlyCost, bool? onlyCost)
        {
            throw new Exception("Don't call this directly. Use LINQ to call the scalar valued function as part of your query");
        }

        [DbFunction("pgr_dagshortestpath", "public")]
        public int PgrDagshortestpath(string p2, string p5, string p7, string p10, string p13, string p4, long? p6, long? p9, string p11, string p14, string p1, long? p3, long? p8, string p12)
        {
            throw new Exception("Don't call this directly. Use LINQ to call the scalar valued function as part of your query");
        }

        [DbFunction("_pgr_depthfirstsearch", "public")]
        public long PgrDepthfirstsearch(string edgesSql, string rootVids, bool? directed, long? maxDepth)
        {
            throw new Exception("Don't call this directly. Use LINQ to call the scalar valued function as part of your query");
        }

        [DbFunction("pgr_depthfirstsearch", "public")]
        public long PgrDepthfirstsearch(string p1, string p4, string p2, long? p3, bool? directed, bool? directed, long? maxDepth, long? maxDepth)
        {
            throw new Exception("Don't call this directly. Use LINQ to call the scalar valued function as part of your query");
        }

        [DbFunction("_pgr_dijkstra", "public")]
        public int PgrDijkstra(string edgesSql, string edgesSql, string edgesSql, string edgesSql, string combinationsSql, string startVids, string combinationsSql, string startVids, bool? directed, string endVids, bool? directed, string endVids, bool? onlyCost, bool? directed, bool? onlyCost, bool? directed, long? nGoals, bool? onlyCost, bool? normal, bool? onlyCost, bool? global, bool? normal, bool? normal, long? nGoals, long? nGoals, bool? global)
        {
            throw new Exception("Don't call this directly. Use LINQ to call the scalar valued function as part of your query");
        }

        [DbFunction("pgr_dijkstra", "public")]
        public int PgrDijkstra(string p1, string p4, string p5, string p9, string p12, string p2, string p3, long? p6, long? p10, string p13, bool? directed, long? p7, string p8, string p11, long? p14, bool? directed, bool? directed, bool? directed, bool? directed)
        {
            throw new Exception("Don't call this directly. Use LINQ to call the scalar valued function as part of your query");
        }

        [DbFunction("pgr_dijkstracost", "public")]
        public long PgrDijkstracost(string p2, string p5, string p8, string p11, string p14, string p1, string p4, string p7, long? p10, long? p13, bool? directed, string p3, long? p6, string p9, long? p12, bool? directed, bool? directed, bool? directed, bool? directed)
        {
            throw new Exception("Don't call this directly. Use LINQ to call the scalar valued function as part of your query");
        }

        [DbFunction("pgr_dijkstracostmatrix", "public")]
        public long PgrDijkstracostmatrix(string p2, string p1, bool? directed)
        {
            throw new Exception("Don't call this directly. Use LINQ to call the scalar valued function as part of your query");
        }

        [DbFunction("_pgr_dijkstranear", "public")]
        public int PgrDijkstranear(string p4, string p8, string p12, string p3, string p7, long? p11, string p2, long? p6, string p10, long? p1, long? p5, long? p9, bool? directed, bool? directed, bool? directed)
        {
            throw new Exception("Don't call this directly. Use LINQ to call the scalar valued function as part of your query");
        }

        [DbFunction("pgr_dijkstranear", "public")]
        public int PgrDijkstranear(string p3, string p6, string p7, string p11, string p2, string p5, long? p8, string p10, string p1, long? p4, string p9, bool? directed, bool? directed, bool? directed, bool? directed, long? cap, long? cap, long? cap, long? cap, bool? global, bool? global)
        {
            throw new Exception("Don't call this directly. Use LINQ to call the scalar valued function as part of your query");
        }

        [DbFunction("pgr_dijkstranearcost", "public")]
        public long PgrDijkstranearcost(string p3, string p6, string p9, string p11, string p2, string p5, long? p8, string p10, string p1, long? p4, string p7, bool? directed, bool? directed, bool? directed, bool? directed, long? cap, long? cap, long? cap, long? cap, bool? global, bool? global)
        {
            throw new Exception("Don't call this directly. Use LINQ to call the scalar valued function as part of your query");
        }

        [DbFunction("_pgr_dijkstravia", "public")]
        public int PgrDijkstravia(string edgesSql, string viaVids, bool? directed, bool? strict, bool? uTurnOnEdge)
        {
            throw new Exception("Don't call this directly. Use LINQ to call the scalar valued function as part of your query");
        }

        [DbFunction("pgr_dijkstravia", "public")]
        public int PgrDijkstravia(string p2, string p1, bool? directed, bool? strict, bool? uTurnOnEdge)
        {
            throw new Exception("Don't call this directly. Use LINQ to call the scalar valued function as part of your query");
        }

        [DbFunction("_pgr_drivingdistance", "public")]
        public int PgrDrivingdistance(string edgesSql, string startVids, double? distance, bool? directed, bool? equicost)
        {
            throw new Exception("Don't call this directly. Use LINQ to call the scalar valued function as part of your query");
        }

        [DbFunction("pgr_drivingdistance", "public")]
        public int PgrDrivingdistance(string p1, string p6, long? p2, string p5, double? p3, double? p4, bool? directed, bool? directed, bool? equicost)
        {
            throw new Exception("Don't call this directly. Use LINQ to call the scalar valued function as part of your query");
        }

        [DbFunction("_pgr_edgecoloring", "public")]
        public long PgrEdgecoloring(string edgesSql)
        {
            throw new Exception("Don't call this directly. Use LINQ to call the scalar valued function as part of your query");
        }

        [DbFunction("pgr_edgecoloring", "public")]
        public long PgrEdgecoloring(string p1)
        {
            throw new Exception("Don't call this directly. Use LINQ to call the scalar valued function as part of your query");
        }

        [DbFunction("_pgr_edgedisjointpaths", "public")]
        public int PgrEdgedisjointpaths(string p2, string p5, string p1, string p4, bool? directed, string p3, bool? directed)
        {
            throw new Exception("Don't call this directly. Use LINQ to call the scalar valued function as part of your query");
        }

        [DbFunction("pgr_edgedisjointpaths", "public")]
        public int PgrEdgedisjointpaths(string p3, string p4, string p7, string p11, string p14, string p2, long? p5, string p8, string p10, long? p13, bool? directed, string p1, long? p6, long? p9, string p12, bool? directed, bool? directed, bool? directed, bool? directed)
        {
            throw new Exception("Don't call this directly. Use LINQ to call the scalar valued function as part of your query");
        }

        [DbFunction("pgr_edmondskarp", "public")]
        public int PgrEdmondskarp(string p1, string p4, string p8, string p11, string p14, long? p2, long? p5, string p7, string p10, string p13, long? p3, string p6, string p9, long? p12)
        {
            throw new Exception("Don't call this directly. Use LINQ to call the scalar valued function as part of your query");
        }

        [DbFunction("_pgr_edwardmoore", "public")]
        public int PgrEdwardmoore(string edgesSql, string edgesSql, string fromVids, string combinationsSql, bool? directed, string toVids, bool? directed)
        {
            throw new Exception("Don't call this directly. Use LINQ to call the scalar valued function as part of your query");
        }

        [DbFunction("pgr_edwardmoore", "public")]
        public int PgrEdwardmoore(string p1, string p4, string p7, string p10, string p13, string p2, string p5, string p6, long? p9, long? p12, bool? directed, string p3, string p8, long? p11, long? p14, bool? directed, bool? directed, bool? directed, bool? directed)
        {
            throw new Exception("Don't call this directly. Use LINQ to call the scalar valued function as part of your query");
        }

        [DbFunction("pgr_extractvertices", "public")]
        public long PgrExtractvertices(string p1, bool? dryrun)
        {
            throw new Exception("Don't call this directly. Use LINQ to call the scalar valued function as part of your query");
        }

        [DbFunction("_pgr_floydwarshall", "public")]
        public long PgrFloydwarshall(string edgesSql, bool? directed)
        {
            throw new Exception("Don't call this directly. Use LINQ to call the scalar valued function as part of your query");
        }

        [DbFunction("pgr_floydwarshall", "public")]
        public long PgrFloydwarshall(string p1, bool? directed)
        {
            throw new Exception("Don't call this directly. Use LINQ to call the scalar valued function as part of your query");
        }

        [DbFunction("pgr_full_version", "public")]
        public string PgrFullVersion()
        {
            throw new Exception("Don't call this directly. Use LINQ to call the scalar valued function as part of your query");
        }

        [DbFunction("_pgr_gettablename", "public")]
        public string PgrGettablename(string tab, int? reporterrs, string fnname)
        {
            throw new Exception("Don't call this directly. Use LINQ to call the scalar valued function as part of your query");
        }

        [DbFunction("_pgr_johnson", "public")]
        public long PgrJohnson(string edgesSql, bool? directed)
        {
            throw new Exception("Don't call this directly. Use LINQ to call the scalar valued function as part of your query");
        }

        [DbFunction("pgr_johnson", "public")]
        public long PgrJohnson(string p1, bool? directed)
        {
            throw new Exception("Don't call this directly. Use LINQ to call the scalar valued function as part of your query");
        }

        [DbFunction("_pgr_kruskal", "public")]
        public long PgrKruskal(string p2, string p1, string fnSuffix, long? maxDepth, double? distance)
        {
            throw new Exception("Don't call this directly. Use LINQ to call the scalar valued function as part of your query");
        }

        [DbFunction("pgr_kruskal", "public")]
        public long PgrKruskal(string p1)
        {
            throw new Exception("Don't call this directly. Use LINQ to call the scalar valued function as part of your query");
        }

        [DbFunction("pgr_kruskalbfs", "public")]
        public long PgrKruskalbfs(string p1, string p3, string p2, long? p4, long? maxDepth, long? maxDepth)
        {
            throw new Exception("Don't call this directly. Use LINQ to call the scalar valued function as part of your query");
        }

        [DbFunction("pgr_kruskaldd", "public")]
        public long PgrKruskaldd(string p3, string p6, string p9, string p12, string p2, string p5, long? p8, long? p11, double? p1, decimal? p4, double? p7, decimal? p10)
        {
            throw new Exception("Don't call this directly. Use LINQ to call the scalar valued function as part of your query");
        }

        [DbFunction("pgr_kruskaldfs", "public")]
        public long PgrKruskaldfs(string p3, string p4, long? p1, string p2, long? maxDepth, long? maxDepth)
        {
            throw new Exception("Don't call this directly. Use LINQ to call the scalar valued function as part of your query");
        }

        [DbFunction("_pgr_ksp", "public")]
        public int PgrKsp(string edgesSql, long? startVid, long? endVid, int? k, bool? directed, bool? heapPaths)
        {
            throw new Exception("Don't call this directly. Use LINQ to call the scalar valued function as part of your query");
        }

        [DbFunction("pgr_ksp", "public")]
        public int PgrKsp(string p2, long? p1, long? p4, int? p3, bool? directed, bool? heapPaths)
        {
            throw new Exception("Don't call this directly. Use LINQ to call the scalar valued function as part of your query");
        }

        [DbFunction("_pgr_lengauertarjandominatortree", "public")]
        public int PgrLengauertarjandominatortree(string edgesSql, long? rootVid)
        {
            throw new Exception("Don't call this directly. Use LINQ to call the scalar valued function as part of your query");
        }

        [DbFunction("pgr_lengauertarjandominatortree", "public")]
        public int PgrLengauertarjandominatortree(string p1, long? p2)
        {
            throw new Exception("Don't call this directly. Use LINQ to call the scalar valued function as part of your query");
        }

        [DbFunction("_pgr_linegraph", "public")]
        public int PgrLinegraph(string p1, bool? directed)
        {
            throw new Exception("Don't call this directly. Use LINQ to call the scalar valued function as part of your query");
        }

        [DbFunction("pgr_linegraph", "public")]
        public int PgrLinegraph(string p1, bool? directed)
        {
            throw new Exception("Don't call this directly. Use LINQ to call the scalar valued function as part of your query");
        }

        [DbFunction("_pgr_linegraphfull", "public")]
        public int PgrLinegraphfull(string p1)
        {
            throw new Exception("Don't call this directly. Use LINQ to call the scalar valued function as part of your query");
        }

        [DbFunction("pgr_linegraphfull", "public")]
        public int PgrLinegraphfull(string p1)
        {
            throw new Exception("Don't call this directly. Use LINQ to call the scalar valued function as part of your query");
        }

        [DbFunction("_pgr_makeconnected", "public")]
        public long PgrMakeconnected(string p1)
        {
            throw new Exception("Don't call this directly. Use LINQ to call the scalar valued function as part of your query");
        }

        [DbFunction("pgr_makeconnected", "public")]
        public long PgrMakeconnected(string p1)
        {
            throw new Exception("Don't call this directly. Use LINQ to call the scalar valued function as part of your query");
        }

        [DbFunction("_pgr_maxcardinalitymatch", "public")]
        public int PgrMaxcardinalitymatch(string edgesSql, bool? directed)
        {
            throw new Exception("Don't call this directly. Use LINQ to call the scalar valued function as part of your query");
        }

        [DbFunction("pgr_maxcardinalitymatch", "public")]
        public int PgrMaxcardinalitymatch(string p1, bool? directed)
        {
            throw new Exception("Don't call this directly. Use LINQ to call the scalar valued function as part of your query");
        }

        [DbFunction("_pgr_maxflow", "public")]
        public int PgrMaxflow(string edgesSql, string edgesSql, string combinationsSql, string sources, int? algorithm, string targets, bool? onlyFlow, int? algorithm, bool? onlyFlow)
        {
            throw new Exception("Don't call this directly. Use LINQ to call the scalar valued function as part of your query");
        }

        [DbFunction("_pgr_maxflowmincost", "public")]
        public int PgrMaxflowmincost(string edgesSql, string edgesSql, string combinationsSql, string sources, bool? onlyCost, string targets, bool? onlyCost)
        {
            throw new Exception("Don't call this directly. Use LINQ to call the scalar valued function as part of your query");
        }

        [DbFunction("pgr_maxflowmincost", "public")]
        public int PgrMaxflowmincost(string p1, string p3, string p6, string p8, string p13, long? p2, long? p5, string p7, string p10, string p12, long? p4, string p9, long? p11, string p14)
        {
            throw new Exception("Don't call this directly. Use LINQ to call the scalar valued function as part of your query");
        }

        [DbFunction("_pgr_pickdeliver", "public")]
        public int PgrPickdeliver(string p1, string p2, string p3, double? factor, int? maxCycles, int? initialSol)
        {
            throw new Exception("Don't call this directly. Use LINQ to call the scalar valued function as part of your query");
        }

        [DbFunction("pgr_pickdeliver", "public")]
        public int PgrPickdeliver(string p1, string p2, string p3, double? factor, int? maxCycles, int? initialSol)
        {
            throw new Exception("Don't call this directly. Use LINQ to call the scalar valued function as part of your query");
        }

        [DbFunction("_pgr_pickdelivereuclidean", "public")]
        public int PgrPickdelivereuclidean(string p2, string p1, double? factor, int? maxCycles, int? initialSol)
        {
            throw new Exception("Don't call this directly. Use LINQ to call the scalar valued function as part of your query");
        }

        [DbFunction("pgr_pickdelivereuclidean", "public")]
        public int PgrPickdelivereuclidean(string p2, string p1, double? factor, int? maxCycles, int? initialSol)
        {
            throw new Exception("Don't call this directly. Use LINQ to call the scalar valued function as part of your query");
        }

        [DbFunction("_pgr_prim", "public")]
        public long PgrPrim(string p1, string p2, string orderBy, long? maxDepth, double? distance)
        {
            throw new Exception("Don't call this directly. Use LINQ to call the scalar valued function as part of your query");
        }

        [DbFunction("pgr_prim", "public")]
        public long PgrPrim(string p1)
        {
            throw new Exception("Don't call this directly. Use LINQ to call the scalar valued function as part of your query");
        }

        [DbFunction("pgr_primbfs", "public")]
        public long PgrPrimbfs(string p2, string p3, string p1, long? p4, long? maxDepth, long? maxDepth)
        {
            throw new Exception("Don't call this directly. Use LINQ to call the scalar valued function as part of your query");
        }

        [DbFunction("pgr_primdd", "public")]
        public long PgrPrimdd(string p1, string p4, string p7, string p10, long? p2, long? p5, string p8, string p11, decimal? p3, double? p6, decimal? p9, double? p12)
        {
            throw new Exception("Don't call this directly. Use LINQ to call the scalar valued function as part of your query");
        }

        [DbFunction("pgr_primdfs", "public")]
        public long PgrPrimdfs(string p1, string p3, long? p2, string p4, long? maxDepth, long? maxDepth)
        {
            throw new Exception("Don't call this directly. Use LINQ to call the scalar valued function as part of your query");
        }

        [DbFunction("pgr_pushrelabel", "public")]
        public int PgrPushrelabel(string p1, string p4, string p5, string p7, string p14, string p2, string p6, long? p8, long? p12, string p13, string p3, string p9, long? p10, long? p11)
        {
            throw new Exception("Don't call this directly. Use LINQ to call the scalar valued function as part of your query");
        }

        [DbFunction("_pgr_sequentialvertexcoloring", "public")]
        public long PgrSequentialvertexcoloring(string edgesSql)
        {
            throw new Exception("Don't call this directly. Use LINQ to call the scalar valued function as part of your query");
        }

        [DbFunction("pgr_sequentialvertexcoloring", "public")]
        public long PgrSequentialvertexcoloring(string p1)
        {
            throw new Exception("Don't call this directly. Use LINQ to call the scalar valued function as part of your query");
        }

        [DbFunction("_pgr_stoerwagner", "public")]
        public int PgrStoerwagner(string edgesSql)
        {
            throw new Exception("Don't call this directly. Use LINQ to call the scalar valued function as part of your query");
        }

        [DbFunction("pgr_stoerwagner", "public")]
        public int PgrStoerwagner(string p1)
        {
            throw new Exception("Don't call this directly. Use LINQ to call the scalar valued function as part of your query");
        }

        [DbFunction("_pgr_strongcomponents", "public")]
        public long PgrStrongcomponents(string edgesSql)
        {
            throw new Exception("Don't call this directly. Use LINQ to call the scalar valued function as part of your query");
        }

        [DbFunction("pgr_strongcomponents", "public")]
        public long PgrStrongcomponents(string p1)
        {
            throw new Exception("Don't call this directly. Use LINQ to call the scalar valued function as part of your query");
        }

        [DbFunction("_pgr_topologicalsort", "public")]
        public int PgrTopologicalsort(string edgesSql)
        {
            throw new Exception("Don't call this directly. Use LINQ to call the scalar valued function as part of your query");
        }

        [DbFunction("pgr_topologicalsort", "public")]
        public int PgrTopologicalsort(string p1)
        {
            throw new Exception("Don't call this directly. Use LINQ to call the scalar valued function as part of your query");
        }

        [DbFunction("_pgr_transitiveclosure", "public")]
        public int PgrTransitiveclosure(string edgesSql)
        {
            throw new Exception("Don't call this directly. Use LINQ to call the scalar valued function as part of your query");
        }

        [DbFunction("pgr_transitiveclosure", "public")]
        public int PgrTransitiveclosure(string p1)
        {
            throw new Exception("Don't call this directly. Use LINQ to call the scalar valued function as part of your query");
        }

        [DbFunction("_pgr_trsp", "public")]
        public int PgrTrsp(string sql, string p4, string p8, string p12, string p16, int? sourceEid, string p3, string p7, string p11, string p15, double? sourcePos, string p2, string p6, long? p10, long? p14, int? targetEid, string p1, long? p5, string p9, long? p13, double? targetPos, bool? directed, bool? directed, bool? directed, bool? directed, bool? directed, bool? hasReverseCost, string turnRestrictSql)
        {
            throw new Exception("Don't call this directly. Use LINQ to call the scalar valued function as part of your query");
        }

        [DbFunction("pgr_trsp", "public")]
        public int PgrTrsp(string p4, string p9, int? p3, int? p8, double? p2, int? p7, int? p1, bool? p6, bool? p5, double? p10, string restrictionsSql, bool? p11, bool? p12, string turnRestrictSql)
        {
            throw new Exception("Don't call this directly. Use LINQ to call the scalar valued function as part of your query");
        }

        [DbFunction("pgr_trspviaedges", "public")]
        public int PgrTrspviaedges(string p5, string p1, string p2, bool? p3, bool? p4, string turnRestrictSql)
        {
            throw new Exception("Don't call this directly. Use LINQ to call the scalar valued function as part of your query");
        }

        [DbFunction("_pgr_trspviavertices", "public")]
        public int PgrTrspviavertices(string sql, string vids, bool? directed, bool? hasRcost, string turnRestrictSql)
        {
            throw new Exception("Don't call this directly. Use LINQ to call the scalar valued function as part of your query");
        }

        [DbFunction("pgr_trspviavertices", "public")]
        public int PgrTrspviavertices(string p3, string p1, bool? p2, bool? p4, string restrictionsSql)
        {
            throw new Exception("Don't call this directly. Use LINQ to call the scalar valued function as part of your query");
        }

        [DbFunction("_pgr_tsp", "public")]
        public int PgrTsp(string matrixRowSql, long? startId, long? endId, double? maxProcessingTime, int? triesPerTemperature, int? maxChangesPerTemperature, int? maxConsecutiveNonChanges, double? initialTemperature, double? finalTemperature, double? coolingFactor, bool? randomize)
        {
            throw new Exception("Don't call this directly. Use LINQ to call the scalar valued function as part of your query");
        }

        [DbFunction("pgr_tsp", "public")]
        public int PgrTsp(string p1, long? startId, long? endId, double? maxProcessingTime, int? triesPerTemperature, int? maxChangesPerTemperature, int? maxConsecutiveNonChanges, double? initialTemperature, double? finalTemperature, double? coolingFactor, bool? randomize)
        {
            throw new Exception("Don't call this directly. Use LINQ to call the scalar valued function as part of your query");
        }

        [DbFunction("_pgr_tspeuclidean", "public")]
        public int PgrTspeuclidean(string coordinatesSql, long? startId, long? endId, double? maxProcessingTime, int? triesPerTemperature, int? maxChangesPerTemperature, int? maxConsecutiveNonChanges, double? initialTemperature, double? finalTemperature, double? coolingFactor, bool? randomize)
        {
            throw new Exception("Don't call this directly. Use LINQ to call the scalar valued function as part of your query");
        }

        [DbFunction("pgr_tspeuclidean", "public")]
        public int PgrTspeuclidean(string p1, long? startId, long? endId, double? maxProcessingTime, int? triesPerTemperature, int? maxChangesPerTemperature, int? maxConsecutiveNonChanges, double? initialTemperature, double? finalTemperature, double? coolingFactor, bool? randomize)
        {
            throw new Exception("Don't call this directly. Use LINQ to call the scalar valued function as part of your query");
        }

        [DbFunction("_pgr_turnrestrictedpath", "public")]
        public int PgrTurnrestrictedpath(string p2, string p5, long? p1, long? p3, int? p4, bool? directed, bool? heapPaths, bool? stopOnFirst, bool? strict)
        {
            throw new Exception("Don't call this directly. Use LINQ to call the scalar valued function as part of your query");
        }

        [DbFunction("pgr_turnrestrictedpath", "public")]
        public int PgrTurnrestrictedpath(string p5, string p3, long? p4, long? p2, int? p1, bool? directed, bool? heapPaths, bool? stopOnFirst, bool? strict)
        {
            throw new Exception("Don't call this directly. Use LINQ to call the scalar valued function as part of your query");
        }

        [DbFunction("_pgr_vrponedepot", "public")]
        public int PgrVrponedepot(string p1, string p2, string p3, int? p4)
        {
            throw new Exception("Don't call this directly. Use LINQ to call the scalar valued function as part of your query");
        }

        [DbFunction("pgr_vrponedepot", "public")]
        public int PgrVrponedepot(string p4, string p1, string p2, int? p3)
        {
            throw new Exception("Don't call this directly. Use LINQ to call the scalar valued function as part of your query");
        }

        [DbFunction("_pgr_withpoints", "public")]
        public int PgrWithpoints(string edgesSql, string edgesSql, string pointsSql, string pointsSql, string startPids, string combinationsSql, string endPids, bool? directed, bool? directed, string drivingSide, string drivingSide, bool? details, bool? details, bool? onlyCost, bool? onlyCost, bool? normal)
        {
            throw new Exception("Don't call this directly. Use LINQ to call the scalar valued function as part of your query");
        }

        [DbFunction("pgr_withpoints", "public")]
        public int PgrWithpoints(string p1, string p7, string p11, string p12, string p16, string p2, string p6, string p8, string p13, string p17, string p3, string p5, string p9, long? p14, long? p18, bool? directed, long? p4, string p10, long? p15, string p19, bool? directed, string drivingSide, bool? directed, bool? directed, bool? directed, string drivingSide, bool? details, string drivingSide, string drivingSide, string drivingSide, bool? details, bool? details, bool? details, bool? details)
        {
            throw new Exception("Don't call this directly. Use LINQ to call the scalar valued function as part of your query");
        }

        [DbFunction("pgr_withpointscost", "public")]
        public long PgrWithpointscost(string p1, string p4, string p8, string p15, string p19, string p3, string p7, string p11, string p14, string p18, string p2, string p6, string p10, long? p13, long? p17, bool? directed, string p5, long? p9, string p12, long? p16, string drivingSide, bool? directed, bool? directed, bool? directed, bool? directed, string drivingSide, string drivingSide, string drivingSide, string drivingSide)
        {
            throw new Exception("Don't call this directly. Use LINQ to call the scalar valued function as part of your query");
        }

        [DbFunction("pgr_withpointscostmatrix", "public")]
        public long PgrWithpointscostmatrix(string p2, string p1, string p3, bool? directed, string drivingSide)
        {
            throw new Exception("Don't call this directly. Use LINQ to call the scalar valued function as part of your query");
        }

        [DbFunction("_pgr_withpointsdd", "public")]
        public int PgrWithpointsdd(string edgesSql, string pointsSql, string startPid, double? distance, bool? directed, string drivingSide, bool? details, bool? equicost)
        {
            throw new Exception("Don't call this directly. Use LINQ to call the scalar valued function as part of your query");
        }

        [DbFunction("pgr_withpointsdd", "public")]
        public int PgrWithpointsdd(string p4, string p5, string p3, string p6, string p2, long? p7, double? p1, double? p8, bool? directed, bool? directed, string drivingSide, string drivingSide, bool? details, bool? details, bool? equicost)
        {
            throw new Exception("Don't call this directly. Use LINQ to call the scalar valued function as part of your query");
        }

        [DbFunction("_pgr_withpointsksp", "public")]
        public int PgrWithpointsksp(string edgesSql, string pointsSql, long? startPid, long? endPid, int? k, bool? directed, bool? heapPaths, string drivingSide, bool? details)
        {
            throw new Exception("Don't call this directly. Use LINQ to call the scalar valued function as part of your query");
        }

        [DbFunction("pgr_withpointsksp", "public")]
        public int PgrWithpointsksp(string p5, string p4, long? p3, long? p1, int? p2, bool? directed, bool? heapPaths, string drivingSide, bool? details)
        {
            throw new Exception("Don't call this directly. Use LINQ to call the scalar valued function as part of your query");
        }

        [DbFunction("_pgr_withpointsvia", "public")]
        public int PgrWithpointsvia(string sql, string viaEdges, string fraction, bool? directed)
        {
            throw new Exception("Don't call this directly. Use LINQ to call the scalar valued function as part of your query");
        }

        [DbFunction("st_approxhistogram", "public")]
        public double StApproxhistogram(string rast, string rast, string rast, string rast, string rast, string rast, int? nband, double? samplePercent, int? nband, int? nband, int? nband, int? nband, double? samplePercent, bool? excludeNodataValue, bool? excludeNodataValue, double? samplePercent, double? samplePercent, double? samplePercent, double? samplePercent, int? bins, int? bins, int? bins, int? bins, bool? right, string width, string width, bool? right, bool? right, bool? right)
        {
            throw new Exception("Don't call this directly. Use LINQ to call the scalar valued function as part of your query");
        }

        [DbFunction("st_approxquantile", "public")]
        public double StApproxquantile(string rast, string rast, string rast, string rast, string rast, string rast, string rast, string rast, string rast, int? nband, string quantiles, double? samplePercent, int? nband, int? nband, int? nband, bool? excludeNodataValue, double? quantile, double? samplePercent, bool? excludeNodataValue, string quantiles, double? samplePercent, double? samplePercent, bool? excludeNodataValue, double? quantile, double? quantile, double? samplePercent, string quantiles, double? samplePercent, double? quantile, double? quantile, string quantiles)
        {
            throw new Exception("Don't call this directly. Use LINQ to call the scalar valued function as part of your query");
        }

        [DbFunction("st_bandmetadata", "public")]
        public string StBandmetadata(string rast, string rast, int? band, string band)
        {
            throw new Exception("Don't call this directly. Use LINQ to call the scalar valued function as part of your query");
        }

        [DbFunction("st_contour", "public")]
        public string StContour(string rast, int? bandnumber, double? levelInterval, double? levelBase, string fixedLevels, bool? polygonize)
        {
            throw new Exception("Don't call this directly. Use LINQ to call the scalar valued function as part of your query");
        }

        [DbFunction("st_dumpvalues", "public")]
        public int StDumpvalues(string rast, string rast, string nband, int? nband, bool? excludeNodataValue, bool? excludeNodataValue)
        {
            throw new Exception("Don't call this directly. Use LINQ to call the scalar valued function as part of your query");
        }

        [DbFunction("st_gdaldrivers", "public")]
        public int StGdaldrivers()
        {
            throw new Exception("Don't call this directly. Use LINQ to call the scalar valued function as part of your query");
        }

        [DbFunction("st_geotransform", "public")]
        public double StGeotransform(string p1)
        {
            throw new Exception("Don't call this directly. Use LINQ to call the scalar valued function as part of your query");
        }

        [DbFunction("st_hexagongrid", "public")]
        public string StHexagongrid(double? size, string bounds)
        {
            throw new Exception("Don't call this directly. Use LINQ to call the scalar valued function as part of your query");
        }

        [DbFunction("_st_histogram", "public")]
        public double StHistogram(string rast, int? nband, bool? excludeNodataValue, double? samplePercent, int? bins, string width, bool? right, double? min, double? max)
        {
            throw new Exception("Don't call this directly. Use LINQ to call the scalar valued function as part of your query");
        }

        [DbFunction("st_histogram", "public")]
        public double StHistogram(string rast, string rast, string rast, string rast, int? nband, int? nband, int? nband, int? nband, int? bins, int? bins, bool? excludeNodataValue, bool? excludeNodataValue, bool? right, string width, int? bins, int? bins, bool? right, bool? right, string width, bool? right)
        {
            throw new Exception("Don't call this directly. Use LINQ to call the scalar valued function as part of your query");
        }

        [DbFunction("st_maximuminscribedcircle", "public")]
        public string StMaximuminscribedcircle(string p1)
        {
            throw new Exception("Don't call this directly. Use LINQ to call the scalar valued function as part of your query");
        }

        [DbFunction("st_metadata", "public")]
        public double StMetadata(string rast)
        {
            throw new Exception("Don't call this directly. Use LINQ to call the scalar valued function as part of your query");
        }

        [DbFunction("st_minimumboundingradius", "public")]
        public string StMinimumboundingradius(string p1)
        {
            throw new Exception("Don't call this directly. Use LINQ to call the scalar valued function as part of your query");
        }

        [DbFunction("_st_pixelascentroids", "public")]
        public string StPixelascentroids(string rast, int? band, int? columnx, int? rowy, bool? excludeNodataValue)
        {
            throw new Exception("Don't call this directly. Use LINQ to call the scalar valued function as part of your query");
        }

        [DbFunction("st_pixelascentroids", "public")]
        public string StPixelascentroids(string rast, int? band, bool? excludeNodataValue)
        {
            throw new Exception("Don't call this directly. Use LINQ to call the scalar valued function as part of your query");
        }

        [DbFunction("st_pixelaspoints", "public")]
        public string StPixelaspoints(string rast, int? band, bool? excludeNodataValue)
        {
            throw new Exception("Don't call this directly. Use LINQ to call the scalar valued function as part of your query");
        }

        [DbFunction("_st_pixelaspolygons", "public")]
        public string StPixelaspolygons(string rast, int? band, int? columnx, int? rowy, bool? excludeNodataValue)
        {
            throw new Exception("Don't call this directly. Use LINQ to call the scalar valued function as part of your query");
        }

        [DbFunction("st_pixelaspolygons", "public")]
        public string StPixelaspolygons(string rast, int? band, bool? excludeNodataValue)
        {
            throw new Exception("Don't call this directly. Use LINQ to call the scalar valued function as part of your query");
        }

        [DbFunction("st_pixelofvalue", "public")]
        public double StPixelofvalue(string rast, string rast, string rast, string rast, int? nband, double? search, string search, int? nband, double? search, string search, bool? excludeNodataValue, bool? excludeNodataValue, bool? excludeNodataValue, bool? excludeNodataValue)
        {
            throw new Exception("Don't call this directly. Use LINQ to call the scalar valued function as part of your query");
        }

        [DbFunction("_st_quantile", "public")]
        public double StQuantile(string rast, int? nband, bool? excludeNodataValue, double? samplePercent, string quantiles)
        {
            throw new Exception("Don't call this directly. Use LINQ to call the scalar valued function as part of your query");
        }

        [DbFunction("st_quantile", "public")]
        public double StQuantile(string rast, string rast, string rast, string rast, string rast, string rast, string rast, int? nband, int? nband, bool? excludeNodataValue, double? quantile, int? nband, string quantiles, int? nband, bool? excludeNodataValue, double? quantile, double? quantile, string quantiles, bool? excludeNodataValue, double? quantile, string quantiles)
        {
            throw new Exception("Don't call this directly. Use LINQ to call the scalar valued function as part of your query");
        }

        [DbFunction("_st_rastertoworldcoord", "public")]
        public double StRastertoworldcoord(string rast, int? columnx, int? rowy)
        {
            throw new Exception("Don't call this directly. Use LINQ to call the scalar valued function as part of your query");
        }

        [DbFunction("st_rastertoworldcoord", "public")]
        public double StRastertoworldcoord(string rast, int? columnx, int? rowy)
        {
            throw new Exception("Don't call this directly. Use LINQ to call the scalar valued function as part of your query");
        }

        [DbFunction("st_squaregrid", "public")]
        public string StSquaregrid(double? size, string bounds)
        {
            throw new Exception("Don't call this directly. Use LINQ to call the scalar valued function as part of your query");
        }

        [DbFunction("_st_valuecount", "public")]
        public double StValuecount(string rast, string rastertable, int? nband, string rastercolumn, bool? excludeNodataValue, int? nband, string searchvalues, bool? excludeNodataValue, double? roundto, string searchvalues, double? roundto)
        {
            throw new Exception("Don't call this directly. Use LINQ to call the scalar valued function as part of your query");
        }

        [DbFunction("st_valuecount", "public")]
        public double StValuecount(string rastertable, string rastertable, string rastertable, string rast, string rast, string rast, string rastertable, string rastertable, string rast, string rast, string rast, string rastertable, string rastercolumn, string rastercolumn, string rastercolumn, int? nband, int? nband, double? searchvalue, string rastercolumn, string rastercolumn, int? nband, int? nband, string searchvalues, string rastercolumn, int? nband, int? nband, double? searchvalue, bool? excludeNodataValue, double? searchvalue, double? roundto, int? nband, int? nband, bool? excludeNodataValue, string searchvalues, double? roundto, string searchvalues, bool? excludeNodataValue, double? searchvalue, double? roundto, double? searchvalue, double? roundto, bool? excludeNodataValue, string searchvalues, string searchvalues, double? roundto, double? roundto, double? searchvalue, double? roundto, double? roundto, string searchvalues, double? roundto, double? roundto, double? roundto, double? roundto)
        {
            throw new Exception("Don't call this directly. Use LINQ to call the scalar valued function as part of your query");
        }

        [DbFunction("st_valuepercent", "public")]
        public double StValuepercent(string rastertable, string rastertable, string rastertable, string rastertable, string rastertable, string rastertable, string rast, string rast, string rast, string rast, string rast, string rast, string rastercolumn, string rastercolumn, string rastercolumn, string rastercolumn, string rastercolumn, string rastercolumn, double? searchvalue, int? nband, int? nband, string searchvalues, int? nband, int? nband, double? searchvalue, int? nband, int? nband, string searchvalues, int? nband, int? nband, double? roundto, double? searchvalue, bool? excludeNodataValue, double? roundto, string searchvalues, bool? excludeNodataValue, double? roundto, double? searchvalue, bool? excludeNodataValue, double? roundto, string searchvalues, bool? excludeNodataValue, double? roundto, double? searchvalue, double? roundto, string searchvalues, double? roundto, double? searchvalue, double? roundto, string searchvalues, double? roundto, double? roundto, double? roundto, double? roundto)
        {
            throw new Exception("Don't call this directly. Use LINQ to call the scalar valued function as part of your query");
        }

        [DbFunction("_st_worldtorastercoord", "public")]
        public int StWorldtorastercoord(string rast, double? longitude, double? latitude)
        {
            throw new Exception("Don't call this directly. Use LINQ to call the scalar valued function as part of your query");
        }

        [DbFunction("st_worldtorastercoord", "public")]
        public int StWorldtorastercoord(string rast, string rast, double? longitude, string pt, double? latitude)
        {
            throw new Exception("Don't call this directly. Use LINQ to call the scalar valued function as part of your query");
        }

        [DbFunction("geocode", "tiger")]
        public string tiger_Geocode(string input, string inAddy, int? maxResults, int? maxResults, string restrictGeom, string restrictGeom)
        {
            throw new Exception("Don't call this directly. Use LINQ to call the scalar valued function as part of your query");
        }

        [DbFunction("geocode_address", "tiger")]
        public string tiger_GeocodeAddress(string parsed, int? maxResults, string restrictGeom)
        {
            throw new Exception("Don't call this directly. Use LINQ to call the scalar valued function as part of your query");
        }

        [DbFunction("geocode_intersection", "tiger")]
        public string tiger_GeocodeIntersection(string roadway1, string roadway2, string inState, string inCity, string inZip, int? numResults)
        {
            throw new Exception("Don't call this directly. Use LINQ to call the scalar valued function as part of your query");
        }

        [DbFunction("geocode_location", "tiger")]
        public string tiger_GeocodeLocation(string parsed, string restrictGeom)
        {
            throw new Exception("Don't call this directly. Use LINQ to call the scalar valued function as part of your query");
        }

        [DbFunction("reverse_geocode", "tiger")]
        public string tiger_ReverseGeocode(string pt, bool? includeStrnumRange)
        {
            throw new Exception("Don't call this directly. Use LINQ to call the scalar valued function as part of your query");
        }

        [DbFunction("populate_topology_layer", "topology")]
        public string topology_PopulateTopologyLayer()
        {
            throw new Exception("Don't call this directly. Use LINQ to call the scalar valued function as part of your query");
        }

        [DbFunction("validatetopologyrelation", "topology")]
        public string topology_Validatetopologyrelation(string toponame)
        {
            throw new Exception("Don't call this directly. Use LINQ to call the scalar valued function as part of your query");
        }

        [DbFunction("_trsp", "public")]
        public int Trsp(string p1, string p2, string p3, string p4, bool? directed)
        {
            throw new Exception("Don't call this directly. Use LINQ to call the scalar valued function as part of your query");
        }
    }

    #endregion

    #region Database context factory

    public class MyDbContextFactory : IDesignTimeDbContextFactory<MyDbContext>
    {
        public MyDbContext CreateDbContext(string[] args)
        {
            return new MyDbContext();
        }
    }

    #endregion

    #region Fake Database context

    public class FakeMyDbContext : IMyDbContext
    {
        public DbSet<dbo_TestPostGisTbl> dbo_TestPostGisTbls { get; set; } // TestPostGisTbl
        public DbSet<GeographyColumn> GeographyColumns { get; set; } // geography_columns
        public DbSet<GeometryColumn> GeometryColumns { get; set; } // geometry_columns
        public DbSet<PointcloudColumn> PointcloudColumns { get; set; } // pointcloud_columns
        public DbSet<PointcloudFormat> PointcloudFormats { get; set; } // pointcloud_formats
        public DbSet<RasterColumn> RasterColumns { get; set; } // raster_columns
        public DbSet<RasterOverview> RasterOverviews { get; set; } // raster_overviews
        public DbSet<SpatialRefSy> SpatialRefSies { get; set; } // spatial_ref_sys
        public DbSet<tiger_Addr> tiger_Addrs { get; set; } // addr
        public DbSet<tiger_Addrfeat> tiger_Addrfeats { get; set; } // addrfeat
        public DbSet<tiger_Bg> tiger_Bgs { get; set; } // bg
        public DbSet<tiger_County> tiger_Counties { get; set; } // county
        public DbSet<tiger_CountyLookup> tiger_CountyLookups { get; set; } // county_lookup
        public DbSet<tiger_CountysubLookup> tiger_CountysubLookups { get; set; } // countysub_lookup
        public DbSet<tiger_Cousub> tiger_Cousubs { get; set; } // cousub
        public DbSet<tiger_DirectionLookup> tiger_DirectionLookups { get; set; } // direction_lookup
        public DbSet<tiger_Edge> tiger_Edges { get; set; } // edges
        public DbSet<tiger_Face> tiger_Faces { get; set; } // faces
        public DbSet<tiger_Featname> tiger_Featnames { get; set; } // featnames
        public DbSet<tiger_GeocodeSetting> tiger_GeocodeSettings { get; set; } // geocode_settings
        public DbSet<tiger_GeocodeSettingsDefault> tiger_GeocodeSettingsDefaults { get; set; } // geocode_settings_default
        public DbSet<tiger_LoaderLookuptable> tiger_LoaderLookuptables { get; set; } // loader_lookuptables
        public DbSet<tiger_LoaderPlatform> tiger_LoaderPlatforms { get; set; } // loader_platform
        public DbSet<tiger_LoaderVariable> tiger_LoaderVariables { get; set; } // loader_variables
        public DbSet<tiger_PagcGaz> tiger_PagcGazs { get; set; } // pagc_gaz
        public DbSet<tiger_PagcLex> tiger_PagcLexes { get; set; } // pagc_lex
        public DbSet<tiger_PagcRule> tiger_PagcRules { get; set; } // pagc_rules
        public DbSet<tiger_Place> tiger_Places { get; set; } // place
        public DbSet<tiger_PlaceLookup> tiger_PlaceLookups { get; set; } // place_lookup
        public DbSet<tiger_SecondaryUnitLookup> tiger_SecondaryUnitLookups { get; set; } // secondary_unit_lookup
        public DbSet<tiger_State> tiger_States { get; set; } // state
        public DbSet<tiger_StateLookup> tiger_StateLookups { get; set; } // state_lookup
        public DbSet<tiger_StreetTypeLookup> tiger_StreetTypeLookups { get; set; } // street_type_lookup
        public DbSet<tiger_Tabblock> tiger_Tabblocks { get; set; } // tabblock
        public DbSet<tiger_Tabblock20> tiger_Tabblock20 { get; set; } // tabblock20
        public DbSet<tiger_Tract> tiger_Tracts { get; set; } // tract
        public DbSet<tiger_Zcta5> tiger_Zcta5 { get; set; } // zcta5
        public DbSet<tiger_ZipLookup> tiger_ZipLookups { get; set; } // zip_lookup
        public DbSet<tiger_ZipLookupBase> tiger_ZipLookupBases { get; set; } // zip_lookup_base
        public DbSet<tiger_ZipState> tiger_ZipStates { get; set; } // zip_state
        public DbSet<tiger_ZipStateLoc> tiger_ZipStateLocs { get; set; } // zip_state_loc
        public DbSet<topology_Layer> topology_Layers { get; set; } // layer
        public DbSet<topology_Topology> topology_Topologies { get; set; } // topology

        public FakeMyDbContext()
        {
            _database = new FakeDatabaseFacade(new MyDbContext());

            dbo_TestPostGisTbls = new FakeDbSet<dbo_TestPostGisTbl>("Id");
            GeographyColumns = new FakeDbSet<GeographyColumn>();
            GeometryColumns = new FakeDbSet<GeometryColumn>();
            PointcloudColumns = new FakeDbSet<PointcloudColumn>();
            PointcloudFormats = new FakeDbSet<PointcloudFormat>("Pcid");
            RasterColumns = new FakeDbSet<RasterColumn>();
            RasterOverviews = new FakeDbSet<RasterOverview>();
            SpatialRefSies = new FakeDbSet<SpatialRefSy>("Srid");
            tiger_Addrs = new FakeDbSet<tiger_Addr>("Gid");
            tiger_Addrfeats = new FakeDbSet<tiger_Addrfeat>("Gid");
            tiger_Bgs = new FakeDbSet<tiger_Bg>("BgId");
            tiger_Counties = new FakeDbSet<tiger_County>("Cntyidfp");
            tiger_CountyLookups = new FakeDbSet<tiger_CountyLookup>("StCode", "CoCode");
            tiger_CountysubLookups = new FakeDbSet<tiger_CountysubLookup>("StCode", "CoCode", "CsCode");
            tiger_Cousubs = new FakeDbSet<tiger_Cousub>("Cosbidfp");
            tiger_DirectionLookups = new FakeDbSet<tiger_DirectionLookup>("Name");
            tiger_Edges = new FakeDbSet<tiger_Edge>("Gid");
            tiger_Faces = new FakeDbSet<tiger_Face>("Gid");
            tiger_Featnames = new FakeDbSet<tiger_Featname>("Gid");
            tiger_GeocodeSettings = new FakeDbSet<tiger_GeocodeSetting>("Name");
            tiger_GeocodeSettingsDefaults = new FakeDbSet<tiger_GeocodeSettingsDefault>("Name");
            tiger_LoaderLookuptables = new FakeDbSet<tiger_LoaderLookuptable>("LookupName");
            tiger_LoaderPlatforms = new FakeDbSet<tiger_LoaderPlatform>("Os");
            tiger_LoaderVariables = new FakeDbSet<tiger_LoaderVariable>("TigerYear");
            tiger_PagcGazs = new FakeDbSet<tiger_PagcGaz>("Id");
            tiger_PagcLexes = new FakeDbSet<tiger_PagcLex>("Id");
            tiger_PagcRules = new FakeDbSet<tiger_PagcRule>("Id");
            tiger_Places = new FakeDbSet<tiger_Place>("Plcidfp");
            tiger_PlaceLookups = new FakeDbSet<tiger_PlaceLookup>("StCode", "PlCode");
            tiger_SecondaryUnitLookups = new FakeDbSet<tiger_SecondaryUnitLookup>("Name");
            tiger_States = new FakeDbSet<tiger_State>("Statefp");
            tiger_StateLookups = new FakeDbSet<tiger_StateLookup>("StCode");
            tiger_StreetTypeLookups = new FakeDbSet<tiger_StreetTypeLookup>("Name");
            tiger_Tabblocks = new FakeDbSet<tiger_Tabblock>("TabblockId");
            tiger_Tabblock20 = new FakeDbSet<tiger_Tabblock20>("Geoid");
            tiger_Tracts = new FakeDbSet<tiger_Tract>("TractId");
            tiger_Zcta5 = new FakeDbSet<tiger_Zcta5>("Zcta5Ce", "Statefp");
            tiger_ZipLookups = new FakeDbSet<tiger_ZipLookup>("Zip");
            tiger_ZipLookupBases = new FakeDbSet<tiger_ZipLookupBase>("Zip");
            tiger_ZipStates = new FakeDbSet<tiger_ZipState>("Zip", "Stusps");
            tiger_ZipStateLocs = new FakeDbSet<tiger_ZipStateLoc>("Zip", "Stusps", "Place");
            topology_Layers = new FakeDbSet<topology_Layer>("TopologyId", "LayerId");
            topology_Topologies = new FakeDbSet<topology_Topology>("Id");

        }

        public int SaveChangesCount { get; private set; }
        public virtual int SaveChanges()
        {
            ++SaveChangesCount;
            return 1;
        }

        public virtual int SaveChanges(bool acceptAllChangesOnSuccess)
        {
            return SaveChanges();
        }

        public virtual Task<int> SaveChangesAsync(CancellationToken cancellationToken)
        {
            ++SaveChangesCount;
            return Task<int>.Factory.StartNew(() => 1, cancellationToken);
        }
        public virtual Task<int> SaveChangesAsync(bool acceptAllChangesOnSuccess, CancellationToken cancellationToken)
        {
            ++SaveChangesCount;
            return Task<int>.Factory.StartNew(x => 1, acceptAllChangesOnSuccess, cancellationToken);
        }

        protected virtual void Dispose(bool disposing)
        {
        }

        public void Dispose()
        {
            Dispose(true);
        }

        private DatabaseFacade _database;
        public DatabaseFacade Database { get { return _database; } }

        public DbSet<TEntity> Set<TEntity>() where TEntity : class
        {
            throw new NotImplementedException();
        }

        public override string ToString()
        {
            throw new NotImplementedException();
        }

        public virtual EntityEntry Add(object entity)
        {
            throw new NotImplementedException();
        }

        public virtual EntityEntry<TEntity> Add<TEntity>(TEntity entity) where TEntity : class
        {
            throw new NotImplementedException();
        }

        public virtual Task AddRangeAsync(params object[] entities)
        {
            throw new NotImplementedException();
        }

        public virtual async Task AddRangeAsync(IEnumerable<object> entities, CancellationToken cancellationToken = default)
        {
            await Task.CompletedTask;
            throw new NotImplementedException();
        }

        public virtual async ValueTask<EntityEntry<TEntity>> AddAsync<TEntity>(TEntity entity, CancellationToken cancellationToken = default) where TEntity : class
        {
            await Task.CompletedTask;
            throw new NotImplementedException();
        }

        public virtual async ValueTask<EntityEntry> AddAsync(object entity, CancellationToken cancellationToken = default)
        {
            await Task.CompletedTask;
            throw new NotImplementedException();
        }

        public virtual void AddRange(IEnumerable<object> entities)
        {
            throw new NotImplementedException();
        }

        public virtual void AddRange(params object[] entities)
        {
            throw new NotImplementedException();
        }

        public virtual EntityEntry Attach(object entity)
        {
            throw new NotImplementedException();
        }

        public virtual EntityEntry<TEntity> Attach<TEntity>(TEntity entity) where TEntity : class
        {
            throw new NotImplementedException();
        }

        public virtual void AttachRange(IEnumerable<object> entities)
        {
            throw new NotImplementedException();
        }

        public virtual void AttachRange(params object[] entities)
        {
            throw new NotImplementedException();
        }

        public virtual EntityEntry Entry(object entity)
        {
            throw new NotImplementedException();
        }

        public virtual EntityEntry<TEntity> Entry<TEntity>(TEntity entity) where TEntity : class
        {
            throw new NotImplementedException();
        }

        public virtual TEntity Find<TEntity>(params object[] keyValues) where TEntity : class
        {
            throw new NotImplementedException();
        }

        public virtual ValueTask<TEntity> FindAsync<TEntity>(object[] keyValues, CancellationToken cancellationToken) where TEntity : class
        {
            throw new NotImplementedException();
        }

        public virtual ValueTask<TEntity> FindAsync<TEntity>(params object[] keyValues) where TEntity : class
        {
            throw new NotImplementedException();
        }

        public virtual ValueTask<object> FindAsync(Type entityType, object[] keyValues, CancellationToken cancellationToken)
        {
            throw new NotImplementedException();
        }

        public virtual ValueTask<object> FindAsync(Type entityType, params object[] keyValues)
        {
            throw new NotImplementedException();
        }

        public virtual object Find(Type entityType, params object[] keyValues)
        {
            throw new NotImplementedException();
        }

        public virtual EntityEntry Remove(object entity)
        {
            throw new NotImplementedException();
        }

        public virtual EntityEntry<TEntity> Remove<TEntity>(TEntity entity) where TEntity : class
        {
            throw new NotImplementedException();
        }

        public virtual void RemoveRange(IEnumerable<object> entities)
        {
            throw new NotImplementedException();
        }

        public virtual void RemoveRange(params object[] entities)
        {
            throw new NotImplementedException();
        }

        public virtual EntityEntry Update(object entity)
        {
            throw new NotImplementedException();
        }

        public virtual EntityEntry<TEntity> Update<TEntity>(TEntity entity) where TEntity : class
        {
            throw new NotImplementedException();
        }

        public virtual void UpdateRange(IEnumerable<object> entities)
        {
            throw new NotImplementedException();
        }

        public virtual void UpdateRange(params object[] entities)
        {
            throw new NotImplementedException();
        }


        // Scalar Valued Functions

        // public._overview_constraint_info
        public string OverviewConstraintInfo(string ovschema, string ovtable, string ovcolumn)
        {
            return default(string);
        }

        // public.parse_address
        public string ParseAddress(string p1)
        {
            return default(string);
        }

        // public._pgr_alphashape
        public long PgrAlphashape(string p1, double? alpha)
        {
            return default(long);
        }

        // public._pgr_articulationpoints
        public int PgrArticulationpoints(string edgesSql)
        {
            return default(int);
        }

        // public.pgr_articulationpoints
        public long PgrArticulationpoints(string p1)
        {
            return default(long);
        }

        // public._pgr_astar
        public int PgrAstar(string edgesSql, string edgesSql, string startVids, string combinationsSql, string endVids, bool? directed, bool? directed, int? heuristic, int? heuristic, double? factor, double? factor, double? epsilon, double? epsilon, bool? onlyCost, bool? onlyCost, bool? normal)
        {
            return default(int);
        }

        // public.pgr_astar
        public int PgrAstar(string p1, string p5, string p8, string p9, string p12, string p2, long? p4, long? p7, string p10, string p13, bool? directed, string p3, long? p6, long? p11, string p14, int? heuristic, bool? directed, bool? directed, bool? directed, bool? directed, double? factor, int? heuristic, int? heuristic, int? heuristic, int? heuristic, double? epsilon, double? factor, double? factor, double? factor, double? factor, double? epsilon, double? epsilon, double? epsilon, double? epsilon)
        {
            return default(int);
        }

        // public.pgr_astarcost
        public long PgrAstarcost(string p1, string p4, string p7, string p10, string p13, long? p2, long? p5, string p8, string p11, string p14, long? p3, string p6, long? p9, string p12, bool? directed, bool? directed, bool? directed, bool? directed, bool? directed, int? heuristic, int? heuristic, int? heuristic, int? heuristic, int? heuristic, double? factor, double? factor, double? factor, double? factor, double? factor, double? epsilon, double? epsilon, double? epsilon, double? epsilon, double? epsilon)
        {
            return default(long);
        }

        // public.pgr_astarcostmatrix
        public long PgrAstarcostmatrix(string p2, string p1, bool? directed, int? heuristic, double? factor, double? epsilon)
        {
            return default(long);
        }

        // public._pgr_bdastar
        public int PgrBdastar(string p2, string p3, string p1, string p4, bool? directed, string p5, int? heuristic, bool? directed, double? factor, int? heuristic, double? epsilon, double? factor, bool? onlyCost, double? epsilon, bool? onlyCost)
        {
            return default(int);
        }

        // public.pgr_bdastar
        public int PgrBdastar(string p3, string p5, string p6, string p9, string p12, long? p2, string p4, string p7, string p10, long? p14, long? p1, bool? directed, long? p8, string p11, string p13, bool? directed, int? heuristic, bool? directed, bool? directed, bool? directed, decimal? factor, int? heuristic, int? heuristic, int? heuristic, int? heuristic, decimal? epsilon, decimal? factor, decimal? factor, decimal? factor, decimal? factor, decimal? epsilon, decimal? epsilon, decimal? epsilon, decimal? epsilon)
        {
            return default(int);
        }

        // public.pgr_bdastarcost
        public long PgrBdastarcost(string p2, string p4, string p7, string p11, string p14, long? p1, long? p5, string p8, string p10, string p13, long? p3, string p6, long? p9, bool? directed, string p12, bool? directed, bool? directed, bool? directed, int? heuristic, bool? directed, int? heuristic, int? heuristic, int? heuristic, decimal? factor, int? heuristic, decimal? factor, decimal? factor, decimal? factor, decimal? epsilon, decimal? factor, decimal? epsilon, decimal? epsilon, decimal? epsilon, decimal? epsilon)
        {
            return default(long);
        }

        // public.pgr_bdastarcostmatrix
        public long PgrBdastarcostmatrix(string p2, string p1, bool? directed, int? heuristic, decimal? factor, decimal? epsilon)
        {
            return default(long);
        }

        // public._pgr_bddijkstra
        public int PgrBddijkstra(string p2, string p5, string p1, string p4, bool? directed, string p3, bool? onlyCost, bool? directed, bool? onlyCost)
        {
            return default(int);
        }

        // public.pgr_bddijkstra
        public int PgrBddijkstra(string p3, string p6, string p8, string p11, string p14, long? p2, long? p5, string p7, string p10, string p13, string p1, long? p4, string p9, long? p12, bool? directed, bool? directed, bool? directed, bool? directed, bool? directed)
        {
            return default(int);
        }

        // public.pgr_bddijkstracost
        public long PgrBddijkstracost(string p2, string p5, string p8, string p11, string p14, string p1, string p4, string p7, long? p10, long? p13, bool? directed, string p3, long? p6, string p9, long? p12, bool? directed, bool? directed, bool? directed, bool? directed)
        {
            return default(long);
        }

        // public.pgr_bddijkstracostmatrix
        public long PgrBddijkstracostmatrix(string p2, string p1, bool? directed)
        {
            return default(long);
        }

        // public._pgr_bellmanford
        public int PgrBellmanford(string edgesSql, string edgesSql, string combinationsSql, string fromVids, string toVids, bool? directed, bool? onlyCost, bool? directed, bool? onlyCost)
        {
            return default(int);
        }

        // public.pgr_bellmanford
        public int PgrBellmanford(string p2, string p5, string p8, string p10, string p12, string p1, string p4, string p7, long? p9, long? p13, bool? directed, string p3, long? p6, string p11, long? p14, bool? directed, bool? directed, bool? directed, bool? directed)
        {
            return default(int);
        }

        // public._pgr_biconnectedcomponents
        public long PgrBiconnectedcomponents(string edgesSql)
        {
            return default(long);
        }

        // public.pgr_biconnectedcomponents
        public long PgrBiconnectedcomponents(string p1)
        {
            return default(long);
        }

        // public._pgr_binarybreadthfirstsearch
        public int PgrBinarybreadthfirstsearch(string edgesSql, string edgesSql, string fromVids, string combinationsSql, string toVids, bool? directed, bool? directed)
        {
            return default(int);
        }

        // public.pgr_binarybreadthfirstsearch
        public int PgrBinarybreadthfirstsearch(string p1, string p4, string p7, string p10, string p13, long? p2, long? p5, string p8, string p11, string p14, long? p3, string p6, long? p9, string p12, bool? directed, bool? directed, bool? directed, bool? directed, bool? directed)
        {
            return default(int);
        }

        // public._pgr_bipartite
        public long PgrBipartite(string edgesSql)
        {
            return default(long);
        }

        // public.pgr_bipartite
        public long PgrBipartite(string p1)
        {
            return default(long);
        }

        // public.pgr_boykovkolmogorov
        public int PgrBoykovkolmogorov(string p2, string p5, string p6, string p8, string p13, string p1, long? p4, string p7, long? p9, string p12, string p3, long? p10, string p11, long? p14)
        {
            return default(int);
        }

        // public._pgr_breadthfirstsearch
        public long PgrBreadthfirstsearch(string edgesSql, string fromVids, long? maxDepth, bool? directed)
        {
            return default(long);
        }

        // public.pgr_breadthfirstsearch
        public long PgrBreadthfirstsearch(string p1, string p3, string p2, long? p4, long? maxDepth, long? maxDepth, bool? directed, bool? directed)
        {
            return default(long);
        }

        // public._pgr_bridges
        public int PgrBridges(string edgesSql)
        {
            return default(int);
        }

        // public.pgr_bridges
        public long PgrBridges(string p1)
        {
            return default(long);
        }

        // public._pgr_checkverttab
        public string PgrCheckverttab(string vertname, string columnsarr, int? reporterrs, string fnname)
        {
            return default(string);
        }

        // public._pgr_chinesepostman
        public int PgrChinesepostman(string edgesSql, bool? onlyCost)
        {
            return default(int);
        }

        // public.pgr_chinesepostman
        public int PgrChinesepostman(string p1)
        {
            return default(int);
        }

        // public._pgr_connectedcomponents
        public long PgrConnectedcomponents(string edgesSql)
        {
            return default(long);
        }

        // public.pgr_connectedcomponents
        public long PgrConnectedcomponents(string p1)
        {
            return default(long);
        }

        // public._pgr_contraction
        public string PgrContraction(string edgesSql, string contractionOrder, int? maxCycles, string forbiddenVertices, bool? directed)
        {
            return default(string);
        }

        // public.pgr_contraction
        public string PgrContraction(string p1, string p2, int? maxCycles, string forbiddenVertices, bool? directed)
        {
            return default(string);
        }

        // public._pgr_dagshortestpath
        public int PgrDagshortestpath(string p3, string p5, string p2, string p4, string p1, bool? directed, bool? directed, bool? onlyCost, bool? onlyCost)
        {
            return default(int);
        }

        // public.pgr_dagshortestpath
        public int PgrDagshortestpath(string p2, string p5, string p7, string p10, string p13, string p4, long? p6, long? p9, string p11, string p14, string p1, long? p3, long? p8, string p12)
        {
            return default(int);
        }

        // public._pgr_depthfirstsearch
        public long PgrDepthfirstsearch(string edgesSql, string rootVids, bool? directed, long? maxDepth)
        {
            return default(long);
        }

        // public.pgr_depthfirstsearch
        public long PgrDepthfirstsearch(string p1, string p4, string p2, long? p3, bool? directed, bool? directed, long? maxDepth, long? maxDepth)
        {
            return default(long);
        }

        // public._pgr_dijkstra
        public int PgrDijkstra(string edgesSql, string edgesSql, string edgesSql, string edgesSql, string combinationsSql, string startVids, string combinationsSql, string startVids, bool? directed, string endVids, bool? directed, string endVids, bool? onlyCost, bool? directed, bool? onlyCost, bool? directed, long? nGoals, bool? onlyCost, bool? normal, bool? onlyCost, bool? global, bool? normal, bool? normal, long? nGoals, long? nGoals, bool? global)
        {
            return default(int);
        }

        // public.pgr_dijkstra
        public int PgrDijkstra(string p1, string p4, string p5, string p9, string p12, string p2, string p3, long? p6, long? p10, string p13, bool? directed, long? p7, string p8, string p11, long? p14, bool? directed, bool? directed, bool? directed, bool? directed)
        {
            return default(int);
        }

        // public.pgr_dijkstracost
        public long PgrDijkstracost(string p2, string p5, string p8, string p11, string p14, string p1, string p4, string p7, long? p10, long? p13, bool? directed, string p3, long? p6, string p9, long? p12, bool? directed, bool? directed, bool? directed, bool? directed)
        {
            return default(long);
        }

        // public.pgr_dijkstracostmatrix
        public long PgrDijkstracostmatrix(string p2, string p1, bool? directed)
        {
            return default(long);
        }

        // public._pgr_dijkstranear
        public int PgrDijkstranear(string p4, string p8, string p12, string p3, string p7, long? p11, string p2, long? p6, string p10, long? p1, long? p5, long? p9, bool? directed, bool? directed, bool? directed)
        {
            return default(int);
        }

        // public.pgr_dijkstranear
        public int PgrDijkstranear(string p3, string p6, string p7, string p11, string p2, string p5, long? p8, string p10, string p1, long? p4, string p9, bool? directed, bool? directed, bool? directed, bool? directed, long? cap, long? cap, long? cap, long? cap, bool? global, bool? global)
        {
            return default(int);
        }

        // public.pgr_dijkstranearcost
        public long PgrDijkstranearcost(string p3, string p6, string p9, string p11, string p2, string p5, long? p8, string p10, string p1, long? p4, string p7, bool? directed, bool? directed, bool? directed, bool? directed, long? cap, long? cap, long? cap, long? cap, bool? global, bool? global)
        {
            return default(long);
        }

        // public._pgr_dijkstravia
        public int PgrDijkstravia(string edgesSql, string viaVids, bool? directed, bool? strict, bool? uTurnOnEdge)
        {
            return default(int);
        }

        // public.pgr_dijkstravia
        public int PgrDijkstravia(string p2, string p1, bool? directed, bool? strict, bool? uTurnOnEdge)
        {
            return default(int);
        }

        // public._pgr_drivingdistance
        public int PgrDrivingdistance(string edgesSql, string startVids, double? distance, bool? directed, bool? equicost)
        {
            return default(int);
        }

        // public.pgr_drivingdistance
        public int PgrDrivingdistance(string p1, string p6, long? p2, string p5, double? p3, double? p4, bool? directed, bool? directed, bool? equicost)
        {
            return default(int);
        }

        // public._pgr_edgecoloring
        public long PgrEdgecoloring(string edgesSql)
        {
            return default(long);
        }

        // public.pgr_edgecoloring
        public long PgrEdgecoloring(string p1)
        {
            return default(long);
        }

        // public._pgr_edgedisjointpaths
        public int PgrEdgedisjointpaths(string p2, string p5, string p1, string p4, bool? directed, string p3, bool? directed)
        {
            return default(int);
        }

        // public.pgr_edgedisjointpaths
        public int PgrEdgedisjointpaths(string p3, string p4, string p7, string p11, string p14, string p2, long? p5, string p8, string p10, long? p13, bool? directed, string p1, long? p6, long? p9, string p12, bool? directed, bool? directed, bool? directed, bool? directed)
        {
            return default(int);
        }

        // public.pgr_edmondskarp
        public int PgrEdmondskarp(string p1, string p4, string p8, string p11, string p14, long? p2, long? p5, string p7, string p10, string p13, long? p3, string p6, string p9, long? p12)
        {
            return default(int);
        }

        // public._pgr_edwardmoore
        public int PgrEdwardmoore(string edgesSql, string edgesSql, string fromVids, string combinationsSql, bool? directed, string toVids, bool? directed)
        {
            return default(int);
        }

        // public.pgr_edwardmoore
        public int PgrEdwardmoore(string p1, string p4, string p7, string p10, string p13, string p2, string p5, string p6, long? p9, long? p12, bool? directed, string p3, string p8, long? p11, long? p14, bool? directed, bool? directed, bool? directed, bool? directed)
        {
            return default(int);
        }

        // public.pgr_extractvertices
        public long PgrExtractvertices(string p1, bool? dryrun)
        {
            return default(long);
        }

        // public._pgr_floydwarshall
        public long PgrFloydwarshall(string edgesSql, bool? directed)
        {
            return default(long);
        }

        // public.pgr_floydwarshall
        public long PgrFloydwarshall(string p1, bool? directed)
        {
            return default(long);
        }

        // public.pgr_full_version
        public string PgrFullVersion()
        {
            return default(string);
        }

        // public._pgr_gettablename
        public string PgrGettablename(string tab, int? reporterrs, string fnname)
        {
            return default(string);
        }

        // public._pgr_johnson
        public long PgrJohnson(string edgesSql, bool? directed)
        {
            return default(long);
        }

        // public.pgr_johnson
        public long PgrJohnson(string p1, bool? directed)
        {
            return default(long);
        }

        // public._pgr_kruskal
        public long PgrKruskal(string p2, string p1, string fnSuffix, long? maxDepth, double? distance)
        {
            return default(long);
        }

        // public.pgr_kruskal
        public long PgrKruskal(string p1)
        {
            return default(long);
        }

        // public.pgr_kruskalbfs
        public long PgrKruskalbfs(string p1, string p3, string p2, long? p4, long? maxDepth, long? maxDepth)
        {
            return default(long);
        }

        // public.pgr_kruskaldd
        public long PgrKruskaldd(string p3, string p6, string p9, string p12, string p2, string p5, long? p8, long? p11, double? p1, decimal? p4, double? p7, decimal? p10)
        {
            return default(long);
        }

        // public.pgr_kruskaldfs
        public long PgrKruskaldfs(string p3, string p4, long? p1, string p2, long? maxDepth, long? maxDepth)
        {
            return default(long);
        }

        // public._pgr_ksp
        public int PgrKsp(string edgesSql, long? startVid, long? endVid, int? k, bool? directed, bool? heapPaths)
        {
            return default(int);
        }

        // public.pgr_ksp
        public int PgrKsp(string p2, long? p1, long? p4, int? p3, bool? directed, bool? heapPaths)
        {
            return default(int);
        }

        // public._pgr_lengauertarjandominatortree
        public int PgrLengauertarjandominatortree(string edgesSql, long? rootVid)
        {
            return default(int);
        }

        // public.pgr_lengauertarjandominatortree
        public int PgrLengauertarjandominatortree(string p1, long? p2)
        {
            return default(int);
        }

        // public._pgr_linegraph
        public int PgrLinegraph(string p1, bool? directed)
        {
            return default(int);
        }

        // public.pgr_linegraph
        public int PgrLinegraph(string p1, bool? directed)
        {
            return default(int);
        }

        // public._pgr_linegraphfull
        public int PgrLinegraphfull(string p1)
        {
            return default(int);
        }

        // public.pgr_linegraphfull
        public int PgrLinegraphfull(string p1)
        {
            return default(int);
        }

        // public._pgr_makeconnected
        public long PgrMakeconnected(string p1)
        {
            return default(long);
        }

        // public.pgr_makeconnected
        public long PgrMakeconnected(string p1)
        {
            return default(long);
        }

        // public._pgr_maxcardinalitymatch
        public int PgrMaxcardinalitymatch(string edgesSql, bool? directed)
        {
            return default(int);
        }

        // public.pgr_maxcardinalitymatch
        public int PgrMaxcardinalitymatch(string p1, bool? directed)
        {
            return default(int);
        }

        // public._pgr_maxflow
        public int PgrMaxflow(string edgesSql, string edgesSql, string combinationsSql, string sources, int? algorithm, string targets, bool? onlyFlow, int? algorithm, bool? onlyFlow)
        {
            return default(int);
        }

        // public._pgr_maxflowmincost
        public int PgrMaxflowmincost(string edgesSql, string edgesSql, string combinationsSql, string sources, bool? onlyCost, string targets, bool? onlyCost)
        {
            return default(int);
        }

        // public.pgr_maxflowmincost
        public int PgrMaxflowmincost(string p1, string p3, string p6, string p8, string p13, long? p2, long? p5, string p7, string p10, string p12, long? p4, string p9, long? p11, string p14)
        {
            return default(int);
        }

        // public._pgr_pickdeliver
        public int PgrPickdeliver(string p1, string p2, string p3, double? factor, int? maxCycles, int? initialSol)
        {
            return default(int);
        }

        // public.pgr_pickdeliver
        public int PgrPickdeliver(string p1, string p2, string p3, double? factor, int? maxCycles, int? initialSol)
        {
            return default(int);
        }

        // public._pgr_pickdelivereuclidean
        public int PgrPickdelivereuclidean(string p2, string p1, double? factor, int? maxCycles, int? initialSol)
        {
            return default(int);
        }

        // public.pgr_pickdelivereuclidean
        public int PgrPickdelivereuclidean(string p2, string p1, double? factor, int? maxCycles, int? initialSol)
        {
            return default(int);
        }

        // public._pgr_prim
        public long PgrPrim(string p1, string p2, string orderBy, long? maxDepth, double? distance)
        {
            return default(long);
        }

        // public.pgr_prim
        public long PgrPrim(string p1)
        {
            return default(long);
        }

        // public.pgr_primbfs
        public long PgrPrimbfs(string p2, string p3, string p1, long? p4, long? maxDepth, long? maxDepth)
        {
            return default(long);
        }

        // public.pgr_primdd
        public long PgrPrimdd(string p1, string p4, string p7, string p10, long? p2, long? p5, string p8, string p11, decimal? p3, double? p6, decimal? p9, double? p12)
        {
            return default(long);
        }

        // public.pgr_primdfs
        public long PgrPrimdfs(string p1, string p3, long? p2, string p4, long? maxDepth, long? maxDepth)
        {
            return default(long);
        }

        // public.pgr_pushrelabel
        public int PgrPushrelabel(string p1, string p4, string p5, string p7, string p14, string p2, string p6, long? p8, long? p12, string p13, string p3, string p9, long? p10, long? p11)
        {
            return default(int);
        }

        // public._pgr_sequentialvertexcoloring
        public long PgrSequentialvertexcoloring(string edgesSql)
        {
            return default(long);
        }

        // public.pgr_sequentialvertexcoloring
        public long PgrSequentialvertexcoloring(string p1)
        {
            return default(long);
        }

        // public._pgr_stoerwagner
        public int PgrStoerwagner(string edgesSql)
        {
            return default(int);
        }

        // public.pgr_stoerwagner
        public int PgrStoerwagner(string p1)
        {
            return default(int);
        }

        // public._pgr_strongcomponents
        public long PgrStrongcomponents(string edgesSql)
        {
            return default(long);
        }

        // public.pgr_strongcomponents
        public long PgrStrongcomponents(string p1)
        {
            return default(long);
        }

        // public._pgr_topologicalsort
        public int PgrTopologicalsort(string edgesSql)
        {
            return default(int);
        }

        // public.pgr_topologicalsort
        public int PgrTopologicalsort(string p1)
        {
            return default(int);
        }

        // public._pgr_transitiveclosure
        public int PgrTransitiveclosure(string edgesSql)
        {
            return default(int);
        }

        // public.pgr_transitiveclosure
        public int PgrTransitiveclosure(string p1)
        {
            return default(int);
        }

        // public._pgr_trsp
        public int PgrTrsp(string sql, string p4, string p8, string p12, string p16, int? sourceEid, string p3, string p7, string p11, string p15, double? sourcePos, string p2, string p6, long? p10, long? p14, int? targetEid, string p1, long? p5, string p9, long? p13, double? targetPos, bool? directed, bool? directed, bool? directed, bool? directed, bool? directed, bool? hasReverseCost, string turnRestrictSql)
        {
            return default(int);
        }

        // public.pgr_trsp
        public int PgrTrsp(string p4, string p9, int? p3, int? p8, double? p2, int? p7, int? p1, bool? p6, bool? p5, double? p10, string restrictionsSql, bool? p11, bool? p12, string turnRestrictSql)
        {
            return default(int);
        }

        // public.pgr_trspviaedges
        public int PgrTrspviaedges(string p5, string p1, string p2, bool? p3, bool? p4, string turnRestrictSql)
        {
            return default(int);
        }

        // public._pgr_trspviavertices
        public int PgrTrspviavertices(string sql, string vids, bool? directed, bool? hasRcost, string turnRestrictSql)
        {
            return default(int);
        }

        // public.pgr_trspviavertices
        public int PgrTrspviavertices(string p3, string p1, bool? p2, bool? p4, string restrictionsSql)
        {
            return default(int);
        }

        // public._pgr_tsp
        public int PgrTsp(string matrixRowSql, long? startId, long? endId, double? maxProcessingTime, int? triesPerTemperature, int? maxChangesPerTemperature, int? maxConsecutiveNonChanges, double? initialTemperature, double? finalTemperature, double? coolingFactor, bool? randomize)
        {
            return default(int);
        }

        // public.pgr_tsp
        public int PgrTsp(string p1, long? startId, long? endId, double? maxProcessingTime, int? triesPerTemperature, int? maxChangesPerTemperature, int? maxConsecutiveNonChanges, double? initialTemperature, double? finalTemperature, double? coolingFactor, bool? randomize)
        {
            return default(int);
        }

        // public._pgr_tspeuclidean
        public int PgrTspeuclidean(string coordinatesSql, long? startId, long? endId, double? maxProcessingTime, int? triesPerTemperature, int? maxChangesPerTemperature, int? maxConsecutiveNonChanges, double? initialTemperature, double? finalTemperature, double? coolingFactor, bool? randomize)
        {
            return default(int);
        }

        // public.pgr_tspeuclidean
        public int PgrTspeuclidean(string p1, long? startId, long? endId, double? maxProcessingTime, int? triesPerTemperature, int? maxChangesPerTemperature, int? maxConsecutiveNonChanges, double? initialTemperature, double? finalTemperature, double? coolingFactor, bool? randomize)
        {
            return default(int);
        }

        // public._pgr_turnrestrictedpath
        public int PgrTurnrestrictedpath(string p2, string p5, long? p1, long? p3, int? p4, bool? directed, bool? heapPaths, bool? stopOnFirst, bool? strict)
        {
            return default(int);
        }

        // public.pgr_turnrestrictedpath
        public int PgrTurnrestrictedpath(string p5, string p3, long? p4, long? p2, int? p1, bool? directed, bool? heapPaths, bool? stopOnFirst, bool? strict)
        {
            return default(int);
        }

        // public._pgr_vrponedepot
        public int PgrVrponedepot(string p1, string p2, string p3, int? p4)
        {
            return default(int);
        }

        // public.pgr_vrponedepot
        public int PgrVrponedepot(string p4, string p1, string p2, int? p3)
        {
            return default(int);
        }

        // public._pgr_withpoints
        public int PgrWithpoints(string edgesSql, string edgesSql, string pointsSql, string pointsSql, string startPids, string combinationsSql, string endPids, bool? directed, bool? directed, string drivingSide, string drivingSide, bool? details, bool? details, bool? onlyCost, bool? onlyCost, bool? normal)
        {
            return default(int);
        }

        // public.pgr_withpoints
        public int PgrWithpoints(string p1, string p7, string p11, string p12, string p16, string p2, string p6, string p8, string p13, string p17, string p3, string p5, string p9, long? p14, long? p18, bool? directed, long? p4, string p10, long? p15, string p19, bool? directed, string drivingSide, bool? directed, bool? directed, bool? directed, string drivingSide, bool? details, string drivingSide, string drivingSide, string drivingSide, bool? details, bool? details, bool? details, bool? details)
        {
            return default(int);
        }

        // public.pgr_withpointscost
        public long PgrWithpointscost(string p1, string p4, string p8, string p15, string p19, string p3, string p7, string p11, string p14, string p18, string p2, string p6, string p10, long? p13, long? p17, bool? directed, string p5, long? p9, string p12, long? p16, string drivingSide, bool? directed, bool? directed, bool? directed, bool? directed, string drivingSide, string drivingSide, string drivingSide, string drivingSide)
        {
            return default(long);
        }

        // public.pgr_withpointscostmatrix
        public long PgrWithpointscostmatrix(string p2, string p1, string p3, bool? directed, string drivingSide)
        {
            return default(long);
        }

        // public._pgr_withpointsdd
        public int PgrWithpointsdd(string edgesSql, string pointsSql, string startPid, double? distance, bool? directed, string drivingSide, bool? details, bool? equicost)
        {
            return default(int);
        }

        // public.pgr_withpointsdd
        public int PgrWithpointsdd(string p4, string p5, string p3, string p6, string p2, long? p7, double? p1, double? p8, bool? directed, bool? directed, string drivingSide, string drivingSide, bool? details, bool? details, bool? equicost)
        {
            return default(int);
        }

        // public._pgr_withpointsksp
        public int PgrWithpointsksp(string edgesSql, string pointsSql, long? startPid, long? endPid, int? k, bool? directed, bool? heapPaths, string drivingSide, bool? details)
        {
            return default(int);
        }

        // public.pgr_withpointsksp
        public int PgrWithpointsksp(string p5, string p4, long? p3, long? p1, int? p2, bool? directed, bool? heapPaths, string drivingSide, bool? details)
        {
            return default(int);
        }

        // public._pgr_withpointsvia
        public int PgrWithpointsvia(string sql, string viaEdges, string fraction, bool? directed)
        {
            return default(int);
        }

        // public.st_approxhistogram
        public double StApproxhistogram(string rast, string rast, string rast, string rast, string rast, string rast, int? nband, double? samplePercent, int? nband, int? nband, int? nband, int? nband, double? samplePercent, bool? excludeNodataValue, bool? excludeNodataValue, double? samplePercent, double? samplePercent, double? samplePercent, double? samplePercent, int? bins, int? bins, int? bins, int? bins, bool? right, string width, string width, bool? right, bool? right, bool? right)
        {
            return default(double);
        }

        // public.st_approxquantile
        public double StApproxquantile(string rast, string rast, string rast, string rast, string rast, string rast, string rast, string rast, string rast, int? nband, string quantiles, double? samplePercent, int? nband, int? nband, int? nband, bool? excludeNodataValue, double? quantile, double? samplePercent, bool? excludeNodataValue, string quantiles, double? samplePercent, double? samplePercent, bool? excludeNodataValue, double? quantile, double? quantile, double? samplePercent, string quantiles, double? samplePercent, double? quantile, double? quantile, string quantiles)
        {
            return default(double);
        }

        // public.st_bandmetadata
        public string StBandmetadata(string rast, string rast, int? band, string band)
        {
            return default(string);
        }

        // public.st_contour
        public string StContour(string rast, int? bandnumber, double? levelInterval, double? levelBase, string fixedLevels, bool? polygonize)
        {
            return default(string);
        }

        // public.st_dumpvalues
        public int StDumpvalues(string rast, string rast, string nband, int? nband, bool? excludeNodataValue, bool? excludeNodataValue)
        {
            return default(int);
        }

        // public.st_gdaldrivers
        public int StGdaldrivers()
        {
            return default(int);
        }

        // public.st_geotransform
        public double StGeotransform(string p1)
        {
            return default(double);
        }

        // public.st_hexagongrid
        public string StHexagongrid(double? size, string bounds)
        {
            return default(string);
        }

        // public._st_histogram
        public double StHistogram(string rast, int? nband, bool? excludeNodataValue, double? samplePercent, int? bins, string width, bool? right, double? min, double? max)
        {
            return default(double);
        }

        // public.st_histogram
        public double StHistogram(string rast, string rast, string rast, string rast, int? nband, int? nband, int? nband, int? nband, int? bins, int? bins, bool? excludeNodataValue, bool? excludeNodataValue, bool? right, string width, int? bins, int? bins, bool? right, bool? right, string width, bool? right)
        {
            return default(double);
        }

        // public.st_maximuminscribedcircle
        public string StMaximuminscribedcircle(string p1)
        {
            return default(string);
        }

        // public.st_metadata
        public double StMetadata(string rast)
        {
            return default(double);
        }

        // public.st_minimumboundingradius
        public string StMinimumboundingradius(string p1)
        {
            return default(string);
        }

        // public._st_pixelascentroids
        public string StPixelascentroids(string rast, int? band, int? columnx, int? rowy, bool? excludeNodataValue)
        {
            return default(string);
        }

        // public.st_pixelascentroids
        public string StPixelascentroids(string rast, int? band, bool? excludeNodataValue)
        {
            return default(string);
        }

        // public.st_pixelaspoints
        public string StPixelaspoints(string rast, int? band, bool? excludeNodataValue)
        {
            return default(string);
        }

        // public._st_pixelaspolygons
        public string StPixelaspolygons(string rast, int? band, int? columnx, int? rowy, bool? excludeNodataValue)
        {
            return default(string);
        }

        // public.st_pixelaspolygons
        public string StPixelaspolygons(string rast, int? band, bool? excludeNodataValue)
        {
            return default(string);
        }

        // public.st_pixelofvalue
        public double StPixelofvalue(string rast, string rast, string rast, string rast, int? nband, double? search, string search, int? nband, double? search, string search, bool? excludeNodataValue, bool? excludeNodataValue, bool? excludeNodataValue, bool? excludeNodataValue)
        {
            return default(double);
        }

        // public._st_quantile
        public double StQuantile(string rast, int? nband, bool? excludeNodataValue, double? samplePercent, string quantiles)
        {
            return default(double);
        }

        // public.st_quantile
        public double StQuantile(string rast, string rast, string rast, string rast, string rast, string rast, string rast, int? nband, int? nband, bool? excludeNodataValue, double? quantile, int? nband, string quantiles, int? nband, bool? excludeNodataValue, double? quantile, double? quantile, string quantiles, bool? excludeNodataValue, double? quantile, string quantiles)
        {
            return default(double);
        }

        // public._st_rastertoworldcoord
        public double StRastertoworldcoord(string rast, int? columnx, int? rowy)
        {
            return default(double);
        }

        // public.st_rastertoworldcoord
        public double StRastertoworldcoord(string rast, int? columnx, int? rowy)
        {
            return default(double);
        }

        // public.st_squaregrid
        public string StSquaregrid(double? size, string bounds)
        {
            return default(string);
        }

        // public._st_valuecount
        public double StValuecount(string rast, string rastertable, int? nband, string rastercolumn, bool? excludeNodataValue, int? nband, string searchvalues, bool? excludeNodataValue, double? roundto, string searchvalues, double? roundto)
        {
            return default(double);
        }

        // public.st_valuecount
        public double StValuecount(string rastertable, string rastertable, string rastertable, string rast, string rast, string rast, string rastertable, string rastertable, string rast, string rast, string rast, string rastertable, string rastercolumn, string rastercolumn, string rastercolumn, int? nband, int? nband, double? searchvalue, string rastercolumn, string rastercolumn, int? nband, int? nband, string searchvalues, string rastercolumn, int? nband, int? nband, double? searchvalue, bool? excludeNodataValue, double? searchvalue, double? roundto, int? nband, int? nband, bool? excludeNodataValue, string searchvalues, double? roundto, string searchvalues, bool? excludeNodataValue, double? searchvalue, double? roundto, double? searchvalue, double? roundto, bool? excludeNodataValue, string searchvalues, string searchvalues, double? roundto, double? roundto, double? searchvalue, double? roundto, double? roundto, string searchvalues, double? roundto, double? roundto, double? roundto, double? roundto)
        {
            return default(double);
        }

        // public.st_valuepercent
        public double StValuepercent(string rastertable, string rastertable, string rastertable, string rastertable, string rastertable, string rastertable, string rast, string rast, string rast, string rast, string rast, string rast, string rastercolumn, string rastercolumn, string rastercolumn, string rastercolumn, string rastercolumn, string rastercolumn, double? searchvalue, int? nband, int? nband, string searchvalues, int? nband, int? nband, double? searchvalue, int? nband, int? nband, string searchvalues, int? nband, int? nband, double? roundto, double? searchvalue, bool? excludeNodataValue, double? roundto, string searchvalues, bool? excludeNodataValue, double? roundto, double? searchvalue, bool? excludeNodataValue, double? roundto, string searchvalues, bool? excludeNodataValue, double? roundto, double? searchvalue, double? roundto, string searchvalues, double? roundto, double? searchvalue, double? roundto, string searchvalues, double? roundto, double? roundto, double? roundto, double? roundto)
        {
            return default(double);
        }

        // public._st_worldtorastercoord
        public int StWorldtorastercoord(string rast, double? longitude, double? latitude)
        {
            return default(int);
        }

        // public.st_worldtorastercoord
        public int StWorldtorastercoord(string rast, string rast, double? longitude, string pt, double? latitude)
        {
            return default(int);
        }

        // tiger.geocode
        public string tiger_Geocode(string input, string inAddy, int? maxResults, int? maxResults, string restrictGeom, string restrictGeom)
        {
            return default(string);
        }

        // tiger.geocode_address
        public string tiger_GeocodeAddress(string parsed, int? maxResults, string restrictGeom)
        {
            return default(string);
        }

        // tiger.geocode_intersection
        public string tiger_GeocodeIntersection(string roadway1, string roadway2, string inState, string inCity, string inZip, int? numResults)
        {
            return default(string);
        }

        // tiger.geocode_location
        public string tiger_GeocodeLocation(string parsed, string restrictGeom)
        {
            return default(string);
        }

        // tiger.reverse_geocode
        public string tiger_ReverseGeocode(string pt, bool? includeStrnumRange)
        {
            return default(string);
        }

        // topology.populate_topology_layer
        public string topology_PopulateTopologyLayer()
        {
            return default(string);
        }

        // topology.validatetopologyrelation
        public string topology_Validatetopologyrelation(string toponame)
        {
            return default(string);
        }

        // public._trsp
        public int Trsp(string p1, string p2, string p3, string p4, bool? directed)
        {
            return default(int);
        }
    }

    #endregion

    #region Fake DbSet

    // ************************************************************************
    // Fake DbSet
    // Implementing Find:
    //      The Find method is difficult to implement in a generic fashion. If
    //      you need to test code that makes use of the Find method it is
    //      easiest to create a test DbSet for each of the entity types that
    //      need to support find. You can then write logic to find that
    //      particular type of entity, as shown below:
    //      public class FakeBlogDbSet : FakeDbSet<Blog>
    //      {
    //          public override Blog Find(params object[] keyValues)
    //          {
    //              var id = (int) keyValues.Single();
    //              return this.SingleOrDefault(b => b.BlogId == id);
    //          }
    //      }
    //      Read more about it here: https://msdn.microsoft.com/en-us/data/dn314431.aspx
    public class FakeDbSet<TEntity> : DbSet<TEntity>, IQueryable<TEntity>, IAsyncEnumerable<TEntity>, IListSource where TEntity : class
    {
        private readonly PropertyInfo[] _primaryKeys;
        private readonly ObservableCollection<TEntity> _data;
        private readonly IQueryable _query;

        public FakeDbSet()
        {
            _primaryKeys = null;
            _data        = new ObservableCollection<TEntity>();
            _query       = _data.AsQueryable();
        }

        public FakeDbSet(params string[] primaryKeys)
        {
            _primaryKeys = typeof(TEntity).GetProperties().Where(x => primaryKeys.Contains(x.Name)).ToArray();
            _data        = new ObservableCollection<TEntity>();
            _query       = _data.AsQueryable();
        }

        public override TEntity Find(params object[] keyValues)
        {
            if (_primaryKeys == null)
                throw new ArgumentException("No primary keys defined");
            if (keyValues.Length != _primaryKeys.Length)
                throw new ArgumentException("Incorrect number of keys passed to Find method");

            var keyQuery = this.AsQueryable();
            keyQuery = keyValues
                .Select((t, i) => i)
                .Aggregate(keyQuery,
                    (current, x) =>
                        current.Where(entity => _primaryKeys[x].GetValue(entity, null).Equals(keyValues[x])));

            return keyQuery.SingleOrDefault();
        }

        public override ValueTask<TEntity> FindAsync(object[] keyValues, CancellationToken cancellationToken)
        {
            return new ValueTask<TEntity>(Task<TEntity>.Factory.StartNew(() => Find(keyValues), cancellationToken));
        }

        public override ValueTask<TEntity> FindAsync(params object[] keyValues)
        {
            return new ValueTask<TEntity>(Task<TEntity>.Factory.StartNew(() => Find(keyValues)));
        }

        IAsyncEnumerator<TEntity> IAsyncEnumerable<TEntity>.GetAsyncEnumerator(CancellationToken cancellationToken)
        {
            return GetAsyncEnumerator(cancellationToken);
        }

        public override EntityEntry<TEntity> Add(TEntity entity)
        {
            _data.Add(entity);
            return null;
        }

        public override ValueTask<EntityEntry<TEntity>> AddAsync(TEntity entity, CancellationToken cancellationToken = default)
        {
            return new ValueTask<EntityEntry<TEntity>>(Task<EntityEntry<TEntity>>.Factory.StartNew(() => Add(entity), cancellationToken));
        }

        public override void AddRange(params TEntity[] entities)
        {
            if (entities == null) throw new ArgumentNullException("entities");
            foreach (var entity in entities)
                _data.Add(entity);
        }

        public override void AddRange(IEnumerable<TEntity> entities)
        {
            if (entities == null) throw new ArgumentNullException("entities");
            foreach (var entity in entities)
                _data.Add(entity);
        }

        public override Task AddRangeAsync(params TEntity[] entities)
        {
            if (entities == null) throw new ArgumentNullException("entities");
            return Task.Factory.StartNew(() => AddRange(entities));
        }

        public override Task AddRangeAsync(IEnumerable<TEntity> entities, CancellationToken cancellationToken = default)
        {
            if (entities == null) throw new ArgumentNullException("entities");
            return Task.Factory.StartNew(() => AddRange(entities), cancellationToken);
        }

        public override EntityEntry<TEntity> Attach(TEntity entity)
        {
            if (entity == null) throw new ArgumentNullException("entity");
            return Add(entity);
        }

        public override void AttachRange(params TEntity[] entities)
        {
            if (entities == null) throw new ArgumentNullException("entities");
            AddRange(entities);
        }

        public override void AttachRange(IEnumerable<TEntity> entities)
        {
            if (entities == null) throw new ArgumentNullException("entities");
            AddRange(entities);
        }

        public override EntityEntry<TEntity> Remove(TEntity entity)
        {
            _data.Remove(entity);
            return null;
        }

        public override void RemoveRange(params TEntity[] entities)
        {
            if (entities == null) throw new ArgumentNullException("entities");
            foreach (var entity in entities.ToList())
                _data.Remove(entity);
        }

        public override void RemoveRange(IEnumerable<TEntity> entities)
        {
            RemoveRange(entities.ToArray());
        }

        public override EntityEntry<TEntity> Update(TEntity entity)
        {
            _data.Remove(entity);
            _data.Add(entity);
            return null;
        }

        public override void UpdateRange(params TEntity[] entities)
        {
            if (entities == null) throw new ArgumentNullException("entities");
            RemoveRange(entities);
            AddRange(entities);
        }

        public override void UpdateRange(IEnumerable<TEntity> entities)
        {
            if (entities == null) throw new ArgumentNullException("entities");
            var array = entities.ToArray();        RemoveRange(array);
            AddRange(array);
        }

        public IList GetList()
        {
            return _data;
        }

        IList IListSource.GetList()
        {
            return _data;
        }

        Type IQueryable.ElementType
        {
            get { return _query.ElementType; }
        }

        Expression IQueryable.Expression
        {
            get { return _query.Expression; }
        }

        IQueryProvider IQueryable.Provider
        {
            get { return new FakeDbAsyncQueryProvider<TEntity>(_data); }
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return _data.GetEnumerator();
        }

        IEnumerator<TEntity> IEnumerable<TEntity>.GetEnumerator()
        {
            return _data.GetEnumerator();
        }

        IAsyncEnumerator<TEntity> GetAsyncEnumerator(CancellationToken cancellationToken = default(CancellationToken))
        {
            return new FakeDbAsyncEnumerator<TEntity>(this.AsEnumerable().GetEnumerator());
        }
    }

    public class FakeDbAsyncQueryProvider<TEntity> : FakeQueryProvider<TEntity>, IAsyncEnumerable<TEntity>, IAsyncQueryProvider
    {
        public FakeDbAsyncQueryProvider(Expression expression) : base(expression)
        {
        }

        public FakeDbAsyncQueryProvider(IEnumerable<TEntity> enumerable) : base(enumerable)
        {
        }

        public TResult ExecuteAsync<TResult>(Expression expression, CancellationToken cancellationToken)
        {
            var expectedResultType = typeof(TResult).GetGenericArguments()[0];
            var executionResult = typeof(IQueryProvider)
                .GetMethods()
                .First(method => method.Name == nameof(IQueryProvider.Execute) && method.IsGenericMethod)
                .MakeGenericMethod(expectedResultType)
                .Invoke(this, new object[] { expression });

            return (TResult) typeof(Task).GetMethod(nameof(Task.FromResult))
                ?.MakeGenericMethod(expectedResultType)
                .Invoke(null, new[] { executionResult });
        }

        public IAsyncEnumerator<TEntity> GetAsyncEnumerator(CancellationToken cancellationToken = default)
        {
            return new FakeDbAsyncEnumerator<TEntity>(this.AsEnumerable().GetEnumerator());
        }
    }

    public class FakeDbAsyncEnumerable<T> : EnumerableQuery<T>, IAsyncEnumerable<T>, IQueryable<T>
    {
        public FakeDbAsyncEnumerable(IEnumerable<T> enumerable)
            : base(enumerable)
        {
        }

        public FakeDbAsyncEnumerable(Expression expression)
            : base(expression)
        {
        }

        public IAsyncEnumerator<T> GetAsyncEnumerator(CancellationToken cancellationToken = new CancellationToken())
        {
            return new FakeDbAsyncEnumerator<T>(this.AsEnumerable().GetEnumerator());
        }

        IAsyncEnumerator<T> IAsyncEnumerable<T>.GetAsyncEnumerator(CancellationToken cancellationToken)
        {
            return GetAsyncEnumerator(cancellationToken);
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return this.AsEnumerable().GetEnumerator();
        }
    }

    public class FakeDbAsyncEnumerator<T> : IAsyncEnumerator<T>
    {
        private readonly IEnumerator<T> _inner;

        public FakeDbAsyncEnumerator(IEnumerator<T> inner)
        {
            _inner = inner;
        }

        public T Current
        {
            get { return _inner.Current; }
        }
        public ValueTask<bool> MoveNextAsync()
        {
            return new ValueTask<bool>(_inner.MoveNext());
        }

        public ValueTask DisposeAsync()
        {
            _inner.Dispose();
            return new ValueTask(Task.CompletedTask);
        }
    }

    public abstract class FakeQueryProvider<T> : IOrderedQueryable<T>, IQueryProvider
    {
        private IEnumerable<T> _enumerable;

        protected FakeQueryProvider(Expression expression)
        {
            Expression = expression;
        }

        protected FakeQueryProvider(IEnumerable<T> enumerable)
        {
            _enumerable = enumerable;
            Expression = enumerable.AsQueryable().Expression;
        }

        public IQueryable CreateQuery(Expression expression)
        {
            if (expression is MethodCallExpression m)
            {
                var resultType = m.Method.ReturnType; // it should be IQueryable<T>
                var tElement = resultType.GetGenericArguments().First();
                return (IQueryable) CreateInstance(tElement, expression);
            }

            return CreateQuery<T>(expression);
        }

        public IQueryable<TEntity> CreateQuery<TEntity>(Expression expression)
        {
            return (IQueryable<TEntity>) CreateInstance(typeof(TEntity), expression);
        }

        private object CreateInstance(Type tElement, Expression expression)
        {
            var queryType = GetType().GetGenericTypeDefinition().MakeGenericType(tElement);
            return Activator.CreateInstance(queryType, expression);
        }

        public object Execute(Expression expression)
        {
            return CompileExpressionItem<object>(expression);
        }

        public TResult Execute<TResult>(Expression expression)
        {
            return CompileExpressionItem<TResult>(expression);
        }

        IEnumerator<T> IEnumerable<T>.GetEnumerator()
        {
            if (_enumerable == null) _enumerable = CompileExpressionItem<IEnumerable<T>>(Expression);
            return _enumerable.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            if (_enumerable == null) _enumerable = CompileExpressionItem<IEnumerable<T>>(Expression);
            return _enumerable.GetEnumerator();
        }

        public Type ElementType => typeof(T);

        public Expression Expression { get; }

        public IQueryProvider Provider => this;

        private static TResult CompileExpressionItem<TResult>(Expression expression)
        {
            var visitor = new FakeExpressionVisitor();
            var body = visitor.Visit(expression);
            var f = Expression.Lambda<Func<TResult>>(body ?? throw new InvalidOperationException(string.Format("{0} is null", nameof(body))), (IEnumerable<ParameterExpression>) null);
            return f.Compile()();
        }
    }

    public class FakeExpressionVisitor : ExpressionVisitor
    {
    }

    public class FakeDatabaseFacade : DatabaseFacade
    {
        public FakeDatabaseFacade(DbContext context) : base(context)
        {
        }

        public override bool EnsureCreated()
        {
            return true;
        }

        public override Task<bool> EnsureCreatedAsync(CancellationToken cancellationToken = new CancellationToken())
        {
            return Task.FromResult(EnsureCreated());
        }

        public override bool EnsureDeleted()
        {
            return true;
        }

        public override Task<bool> EnsureDeletedAsync(CancellationToken cancellationToken = new CancellationToken())
        {
            return Task.FromResult(EnsureDeleted());
        }

        public override bool CanConnect()
        {
            return true;
        }

        public override Task<bool> CanConnectAsync(CancellationToken cancellationToken = new CancellationToken())
        {
            return Task.FromResult(CanConnect());
        }

        public override IDbContextTransaction BeginTransaction()
        {
            return new FakeDbContextTransaction();
        }

        public override Task<IDbContextTransaction> BeginTransactionAsync(CancellationToken cancellationToken = new CancellationToken())
        {
            return Task.FromResult(BeginTransaction());
        }

        public override void CommitTransaction()
        {
        }

        public override void RollbackTransaction()
        {
        }

        public override IExecutionStrategy CreateExecutionStrategy()
        {
            return null;
        }

        public override string ToString()
        {
            return string.Empty;
        }

    }

    public class FakeDbContextTransaction : IDbContextTransaction
    {
        public virtual Guid TransactionId => Guid.NewGuid();
        public virtual void Commit() { }
        public virtual void Rollback() { }
        public virtual Task CommitAsync(CancellationToken cancellationToken = default) => Task.CompletedTask;
        public virtual Task RollbackAsync(CancellationToken cancellationToken = default) => Task.CompletedTask;
        public virtual void Dispose() { }
        public virtual ValueTask DisposeAsync() => default;
    }

    #endregion

    #region POCO classes

    // TestPostGisTbl
    public class dbo_TestPostGisTbl
    {
        public int Id { get; set; } // Id (Primary key)
        public decimal TblMinValue { get; set; } // TblMinValue
        public decimal TblMaxValue { get; set; } // TblMaxValue
        public string AtdLocation { get; set; } // ATDLocation
    }

    // geography_columns
    public class GeographyColumn
    {
        public string FTableCatalog { get; set; } // f_table_catalog
        public string FTableSchema { get; set; } // f_table_schema
        public string FTableName { get; set; } // f_table_name
        public string FGeographyColumn { get; set; } // f_geography_column
        public int? CoordDimension { get; set; } // coord_dimension
        public int? Srid { get; set; } // srid
        public string Type { get; set; } // type
    }

    // geometry_columns
    public class GeometryColumn
    {
        public string FTableCatalog { get; set; } // f_table_catalog (length: 256)
        public string FTableSchema { get; set; } // f_table_schema
        public string FTableName { get; set; } // f_table_name
        public string FGeometryColumn { get; set; } // f_geometry_column
        public int? CoordDimension { get; set; } // coord_dimension
        public int? Srid { get; set; } // srid
        public string Type { get; set; } // type (length: 30)
    }

    // pointcloud_columns
    public class PointcloudColumn
    {
        public string Schema { get; set; } // schema
        public string Table { get; set; } // table
        public string Column { get; set; } // column
        public int? Pcid { get; set; } // pcid
        public int? Srid { get; set; } // srid
        public string Type { get; set; } // type
    }

    // pointcloud_formats
    public class PointcloudFormat
    {
        public int Pcid { get; set; } // pcid (Primary key)
        public int? Srid { get; set; } // srid
        public string Schema { get; set; } // schema
    }

    // raster_columns
    public class RasterColumn
    {
        public string RTableCatalog { get; set; } // r_table_catalog
        public string RTableSchema { get; set; } // r_table_schema
        public string RTableName { get; set; } // r_table_name
        public string RRasterColumn { get; set; } // r_raster_column
        public int? Srid { get; set; } // srid
        public double? ScaleX { get; set; } // scale_x
        public double? ScaleY { get; set; } // scale_y
        public int? BlocksizeX { get; set; } // blocksize_x
        public int? BlocksizeY { get; set; } // blocksize_y
        public bool? SameAlignment { get; set; } // same_alignment
        public bool? RegularBlocking { get; set; } // regular_blocking
        public int? NumBands { get; set; } // num_bands
        public string PixelTypes { get; set; } // pixel_types
        public string NodataValues { get; set; } // nodata_values
        public string OutDb { get; set; } // out_db
        public string Extent { get; set; } // extent
        public bool? SpatialIndex { get; set; } // spatial_index
    }

    // raster_overviews
    public class RasterOverview
    {
        public string OTableCatalog { get; set; } // o_table_catalog
        public string OTableSchema { get; set; } // o_table_schema
        public string OTableName { get; set; } // o_table_name
        public string ORasterColumn { get; set; } // o_raster_column
        public string RTableCatalog { get; set; } // r_table_catalog
        public string RTableSchema { get; set; } // r_table_schema
        public string RTableName { get; set; } // r_table_name
        public string RRasterColumn { get; set; } // r_raster_column
        public int? OverviewFactor { get; set; } // overview_factor
    }

    // spatial_ref_sys
    public class SpatialRefSy
    {
        public int Srid { get; set; } // srid (Primary key)
        public string AuthName { get; set; } // auth_name (length: 256)
        public int? AuthSrid { get; set; } // auth_srid
        public string Srtext { get; set; } // srtext (length: 2048)
        public string Proj4Text { get; set; } // proj4text (length: 2048)
    }

    // addr
    public class tiger_Addr
    {
        public int Gid { get; set; } // gid (Primary key)
        public long? Tlid { get; set; } // tlid
        public string Fromhn { get; set; } // fromhn (length: 12)
        public string Tohn { get; set; } // tohn (length: 12)
        public string Side { get; set; } // side (length: 1)
        public string Zip { get; set; } // zip (length: 5)
        public string Plus4 { get; set; } // plus4 (length: 4)
        public string Fromtyp { get; set; } // fromtyp (length: 1)
        public string Totyp { get; set; } // totyp (length: 1)
        public int? Fromarmid { get; set; } // fromarmid
        public int? Toarmid { get; set; } // toarmid
        public string Arid { get; set; } // arid (length: 22)
        public string Mtfcc { get; set; } // mtfcc (length: 5)
        public string Statefp { get; set; } // statefp (length: 2)
    }

    // addrfeat
    public class tiger_Addrfeat
    {
        public int Gid { get; set; } // gid (Primary key)
        public long? Tlid { get; set; } // tlid
        public string Statefp { get; set; } // statefp (length: 2)
        public string Aridl { get; set; } // aridl (length: 22)
        public string Aridr { get; set; } // aridr (length: 22)
        public string Linearid { get; set; } // linearid (length: 22)
        public string Fullname { get; set; } // fullname (length: 100)
        public string Lfromhn { get; set; } // lfromhn (length: 12)
        public string Ltohn { get; set; } // ltohn (length: 12)
        public string Rfromhn { get; set; } // rfromhn (length: 12)
        public string Rtohn { get; set; } // rtohn (length: 12)
        public string Zipl { get; set; } // zipl (length: 5)
        public string Zipr { get; set; } // zipr (length: 5)
        public string EdgeMtfcc { get; set; } // edge_mtfcc (length: 5)
        public string Parityl { get; set; } // parityl (length: 1)
        public string Parityr { get; set; } // parityr (length: 1)
        public string Plus4L { get; set; } // plus4l (length: 4)
        public string Plus4R { get; set; } // plus4r (length: 4)
        public string Lfromtyp { get; set; } // lfromtyp (length: 1)
        public string Ltotyp { get; set; } // ltotyp (length: 1)
        public string Rfromtyp { get; set; } // rfromtyp (length: 1)
        public string Rtotyp { get; set; } // rtotyp (length: 1)
        public string Offsetl { get; set; } // offsetl (length: 1)
        public string Offsetr { get; set; } // offsetr (length: 1)
        public string TheGeom { get; set; } // the_geom
    }

    // bg
    public class tiger_Bg
    {
        public int Gid { get; set; } // gid
        public string Statefp { get; set; } // statefp (length: 2)
        public string Countyfp { get; set; } // countyfp (length: 3)
        public string Tractce { get; set; } // tractce (length: 6)
        public string Blkgrpce { get; set; } // blkgrpce (length: 1)
        public string BgId { get; set; } // bg_id (Primary key) (length: 12)
        public string Namelsad { get; set; } // namelsad (length: 13)
        public string Mtfcc { get; set; } // mtfcc (length: 5)
        public string Funcstat { get; set; } // funcstat (length: 1)
        public double? Aland { get; set; } // aland
        public double? Awater { get; set; } // awater
        public string Intptlat { get; set; } // intptlat (length: 11)
        public string Intptlon { get; set; } // intptlon (length: 12)
        public string TheGeom { get; set; } // the_geom
    }

    // county
    public class tiger_County
    {
        public int Gid { get; set; } // gid
        public string Statefp { get; set; } // statefp (length: 2)
        public string Countyfp { get; set; } // countyfp (length: 3)
        public string Countyns { get; set; } // countyns (length: 8)
        public string Cntyidfp { get; set; } // cntyidfp (Primary key) (length: 5)
        public string Name { get; set; } // name (length: 100)
        public string Namelsad { get; set; } // namelsad (length: 100)
        public string Lsad { get; set; } // lsad (length: 2)
        public string Classfp { get; set; } // classfp (length: 2)
        public string Mtfcc { get; set; } // mtfcc (length: 5)
        public string Csafp { get; set; } // csafp (length: 3)
        public string Cbsafp { get; set; } // cbsafp (length: 5)
        public string Metdivfp { get; set; } // metdivfp (length: 5)
        public string Funcstat { get; set; } // funcstat (length: 1)
        public long? Aland { get; set; } // aland
        public double? Awater { get; set; } // awater
        public string Intptlat { get; set; } // intptlat (length: 11)
        public string Intptlon { get; set; } // intptlon (length: 12)
        public string TheGeom { get; set; } // the_geom
    }

    // county_lookup
    public class tiger_CountyLookup
    {
        public int StCode { get; set; } // st_code (Primary key)
        public string State { get; set; } // state (length: 2)
        public int CoCode { get; set; } // co_code (Primary key)
        public string Name { get; set; } // name (length: 90)
    }

    // countysub_lookup
    public class tiger_CountysubLookup
    {
        public int StCode { get; set; } // st_code (Primary key)
        public string State { get; set; } // state (length: 2)
        public int CoCode { get; set; } // co_code (Primary key)
        public string County { get; set; } // county (length: 90)
        public int CsCode { get; set; } // cs_code (Primary key)
        public string Name { get; set; } // name (length: 90)
    }

    // cousub
    public class tiger_Cousub
    {
        public int Gid { get; set; } // gid
        public string Statefp { get; set; } // statefp (length: 2)
        public string Countyfp { get; set; } // countyfp (length: 3)
        public string Cousubfp { get; set; } // cousubfp (length: 5)
        public string Cousubns { get; set; } // cousubns (length: 8)
        public string Cosbidfp { get; set; } // cosbidfp (Primary key) (length: 10)
        public string Name { get; set; } // name (length: 100)
        public string Namelsad { get; set; } // namelsad (length: 100)
        public string Lsad { get; set; } // lsad (length: 2)
        public string Classfp { get; set; } // classfp (length: 2)
        public string Mtfcc { get; set; } // mtfcc (length: 5)
        public string Cnectafp { get; set; } // cnectafp (length: 3)
        public string Nectafp { get; set; } // nectafp (length: 5)
        public string Nctadvfp { get; set; } // nctadvfp (length: 5)
        public string Funcstat { get; set; } // funcstat (length: 1)
        public decimal? Aland { get; set; } // aland
        public decimal? Awater { get; set; } // awater
        public string Intptlat { get; set; } // intptlat (length: 11)
        public string Intptlon { get; set; } // intptlon (length: 12)
        public string TheGeom { get; set; } // the_geom
    }

    // direction_lookup
    public class tiger_DirectionLookup
    {
        public string Name { get; set; } // name (Primary key) (length: 20)
        public string Abbrev { get; set; } // abbrev (length: 3)
    }

    // edges
    public class tiger_Edge
    {
        public int Gid { get; set; } // gid (Primary key)
        public string Statefp { get; set; } // statefp (length: 2)
        public string Countyfp { get; set; } // countyfp (length: 3)
        public long? Tlid { get; set; } // tlid
        public decimal? Tfidl { get; set; } // tfidl
        public decimal? Tfidr { get; set; } // tfidr
        public string Mtfcc { get; set; } // mtfcc (length: 5)
        public string Fullname { get; set; } // fullname (length: 100)
        public string Smid { get; set; } // smid (length: 22)
        public string Lfromadd { get; set; } // lfromadd (length: 12)
        public string Ltoadd { get; set; } // ltoadd (length: 12)
        public string Rfromadd { get; set; } // rfromadd (length: 12)
        public string Rtoadd { get; set; } // rtoadd (length: 12)
        public string Zipl { get; set; } // zipl (length: 5)
        public string Zipr { get; set; } // zipr (length: 5)
        public string Featcat { get; set; } // featcat (length: 1)
        public string Hydroflg { get; set; } // hydroflg (length: 1)
        public string Railflg { get; set; } // railflg (length: 1)
        public string Roadflg { get; set; } // roadflg (length: 1)
        public string Olfflg { get; set; } // olfflg (length: 1)
        public string Passflg { get; set; } // passflg (length: 1)
        public string Divroad { get; set; } // divroad (length: 1)
        public string Exttyp { get; set; } // exttyp (length: 1)
        public string Ttyp { get; set; } // ttyp (length: 1)
        public string Deckedroad { get; set; } // deckedroad (length: 1)
        public string Artpath { get; set; } // artpath (length: 1)
        public string Persist { get; set; } // persist (length: 1)
        public string Gcseflg { get; set; } // gcseflg (length: 1)
        public string Offsetl { get; set; } // offsetl (length: 1)
        public string Offsetr { get; set; } // offsetr (length: 1)
        public decimal? Tnidf { get; set; } // tnidf
        public decimal? Tnidt { get; set; } // tnidt
        public string TheGeom { get; set; } // the_geom
    }

    // faces
    public class tiger_Face
    {
        public int Gid { get; set; } // gid (Primary key)
        public decimal? Tfid { get; set; } // tfid
        public string Statefp00 { get; set; } // statefp00 (length: 2)
        public string Countyfp00 { get; set; } // countyfp00 (length: 3)
        public string Tractce00 { get; set; } // tractce00 (length: 6)
        public string Blkgrpce00 { get; set; } // blkgrpce00 (length: 1)
        public string Blockce00 { get; set; } // blockce00 (length: 4)
        public string Cousubfp00 { get; set; } // cousubfp00 (length: 5)
        public string Submcdfp00 { get; set; } // submcdfp00 (length: 5)
        public string Conctyfp00 { get; set; } // conctyfp00 (length: 5)
        public string Placefp00 { get; set; } // placefp00 (length: 5)
        public string Aiannhfp00 { get; set; } // aiannhfp00 (length: 5)
        public string Aiannhce00 { get; set; } // aiannhce00 (length: 4)
        public string Comptyp00 { get; set; } // comptyp00 (length: 1)
        public string Trsubfp00 { get; set; } // trsubfp00 (length: 5)
        public string Trsubce00 { get; set; } // trsubce00 (length: 3)
        public string Anrcfp00 { get; set; } // anrcfp00 (length: 5)
        public string Elsdlea00 { get; set; } // elsdlea00 (length: 5)
        public string Scsdlea00 { get; set; } // scsdlea00 (length: 5)
        public string Unsdlea00 { get; set; } // unsdlea00 (length: 5)
        public string Uace00 { get; set; } // uace00 (length: 5)
        public string Cd108Fp { get; set; } // cd108fp (length: 2)
        public string Sldust00 { get; set; } // sldust00 (length: 3)
        public string Sldlst00 { get; set; } // sldlst00 (length: 3)
        public string Vtdst00 { get; set; } // vtdst00 (length: 6)
        public string Zcta5Ce00 { get; set; } // zcta5ce00 (length: 5)
        public string Tazce00 { get; set; } // tazce00 (length: 6)
        public string Ugace00 { get; set; } // ugace00 (length: 5)
        public string Puma5Ce00 { get; set; } // puma5ce00 (length: 5)
        public string Statefp { get; set; } // statefp (length: 2)
        public string Countyfp { get; set; } // countyfp (length: 3)
        public string Tractce { get; set; } // tractce (length: 6)
        public string Blkgrpce { get; set; } // blkgrpce (length: 1)
        public string Blockce { get; set; } // blockce (length: 4)
        public string Cousubfp { get; set; } // cousubfp (length: 5)
        public string Submcdfp { get; set; } // submcdfp (length: 5)
        public string Conctyfp { get; set; } // conctyfp (length: 5)
        public string Placefp { get; set; } // placefp (length: 5)
        public string Aiannhfp { get; set; } // aiannhfp (length: 5)
        public string Aiannhce { get; set; } // aiannhce (length: 4)
        public string Comptyp { get; set; } // comptyp (length: 1)
        public string Trsubfp { get; set; } // trsubfp (length: 5)
        public string Trsubce { get; set; } // trsubce (length: 3)
        public string Anrcfp { get; set; } // anrcfp (length: 5)
        public string Ttractce { get; set; } // ttractce (length: 6)
        public string Tblkgpce { get; set; } // tblkgpce (length: 1)
        public string Elsdlea { get; set; } // elsdlea (length: 5)
        public string Scsdlea { get; set; } // scsdlea (length: 5)
        public string Unsdlea { get; set; } // unsdlea (length: 5)
        public string Uace { get; set; } // uace (length: 5)
        public string Cd111Fp { get; set; } // cd111fp (length: 2)
        public string Sldust { get; set; } // sldust (length: 3)
        public string Sldlst { get; set; } // sldlst (length: 3)
        public string Vtdst { get; set; } // vtdst (length: 6)
        public string Zcta5Ce { get; set; } // zcta5ce (length: 5)
        public string Tazce { get; set; } // tazce (length: 6)
        public string Ugace { get; set; } // ugace (length: 5)
        public string Puma5Ce { get; set; } // puma5ce (length: 5)
        public string Csafp { get; set; } // csafp (length: 3)
        public string Cbsafp { get; set; } // cbsafp (length: 5)
        public string Metdivfp { get; set; } // metdivfp (length: 5)
        public string Cnectafp { get; set; } // cnectafp (length: 3)
        public string Nectafp { get; set; } // nectafp (length: 5)
        public string Nctadvfp { get; set; } // nctadvfp (length: 5)
        public string Lwflag { get; set; } // lwflag (length: 1)
        public string Offset { get; set; } // offset (length: 1)
        public double? Atotal { get; set; } // atotal
        public string Intptlat { get; set; } // intptlat (length: 11)
        public string Intptlon { get; set; } // intptlon (length: 12)
        public string TheGeom { get; set; } // the_geom
    }

    // featnames
    public class tiger_Featname
    {
        public int Gid { get; set; } // gid (Primary key)
        public long? Tlid { get; set; } // tlid
        public string Fullname { get; set; } // fullname (length: 100)
        public string Name { get; set; } // name (length: 100)
        public string Predirabrv { get; set; } // predirabrv (length: 15)
        public string Pretypabrv { get; set; } // pretypabrv (length: 50)
        public string Prequalabr { get; set; } // prequalabr (length: 15)
        public string Sufdirabrv { get; set; } // sufdirabrv (length: 15)
        public string Suftypabrv { get; set; } // suftypabrv (length: 50)
        public string Sufqualabr { get; set; } // sufqualabr (length: 15)
        public string Predir { get; set; } // predir (length: 2)
        public string Pretyp { get; set; } // pretyp (length: 3)
        public string Prequal { get; set; } // prequal (length: 2)
        public string Sufdir { get; set; } // sufdir (length: 2)
        public string Suftyp { get; set; } // suftyp (length: 3)
        public string Sufqual { get; set; } // sufqual (length: 2)
        public string Linearid { get; set; } // linearid (length: 22)
        public string Mtfcc { get; set; } // mtfcc (length: 5)
        public string Paflag { get; set; } // paflag (length: 1)
        public string Statefp { get; set; } // statefp (length: 2)
    }

    // geocode_settings
    public class tiger_GeocodeSetting
    {
        public string Name { get; set; } // name (Primary key)
        public string Setting { get; set; } // setting
        public string Unit { get; set; } // unit
        public string Category { get; set; } // category
        public string ShortDesc { get; set; } // short_desc
    }

    // geocode_settings_default
    public class tiger_GeocodeSettingsDefault
    {
        public string Name { get; set; } // name (Primary key)
        public string Setting { get; set; } // setting
        public string Unit { get; set; } // unit
        public string Category { get; set; } // category
        public string ShortDesc { get; set; } // short_desc
    }

    // loader_lookuptables
    public class tiger_LoaderLookuptable
    {
        public int ProcessOrder { get; set; } // process_order

        /// <summary>
        /// This is the table name to inherit from and suffix of resulting output table -- how the table will be named --  edges here would mean -- ma_edges , pa_edges etc. except in the case of national tables. national level tables have no prefix
        /// </summary>
        public string LookupName { get; set; } // lookup_name (Primary key)

        /// <summary>
        /// suffix of the tables to load e.g.  edges would load all tables like *edges.dbf(shp)  -- so tl_2010_42129_edges.dbf .
        /// </summary>
        public string TableName { get; set; } // table_name
        public bool SingleMode { get; set; } // single_mode

        /// <summary>
        /// Whether or not to load the table.  For states and zcta5 (you may just want to download states10, zcta510 nationwide file manually) load your own into a single table that inherits from tiger.states, tiger.zcta5.  You&apos;ll get improved performance for some geocoding cases.
        /// </summary>
        public bool Load { get; set; } // load
        public bool LevelCounty { get; set; } // level_county
        public bool LevelState { get; set; } // level_state

        /// <summary>
        /// These are tables that contain all data for the whole US so there is just a single file
        /// </summary>
        public bool LevelNation { get; set; } // level_nation
        public string PostLoadProcess { get; set; } // post_load_process
        public bool? SingleGeomMode { get; set; } // single_geom_mode
        public string InsertMode { get; set; } // insert_mode (length: 1)
        public string PreLoadProcess { get; set; } // pre_load_process

        /// <summary>
        /// List of columns to exclude as an array. This is excluded from both input table and output table and rest of columns remaining are assumed to be in same order in both tables. gid, geoid,cpi,suffix1ce are excluded if no columns are specified.
        /// </summary>
        public string ColumnsExclude { get; set; } // columns_exclude

        /// <summary>
        /// Path to use for wget instead of that specified in year table.  Needed currently for zcta where they release that only for 2000 and 2010
        /// </summary>
        public string WebsiteRootOverride { get; set; } // website_root_override

        public tiger_LoaderLookuptable()
        {
            ProcessOrder = 1000;
            SingleMode = true;
            Load = true;
            LevelCounty = false;
            LevelState = false;
            LevelNation = false;
            SingleGeomMode = false;
            InsertMode = "'c'::bpchar";
        }
    }

    // loader_platform
    public class tiger_LoaderPlatform
    {
        public string Os { get; set; } // os (Primary key) (length: 50)
        public string DeclareSect { get; set; } // declare_sect
        public string Pgbin { get; set; } // pgbin
        public string Wget { get; set; } // wget
        public string UnzipCommand { get; set; } // unzip_command
        public string Psql { get; set; } // psql
        public string PathSep { get; set; } // path_sep
        public string Loader { get; set; } // loader
        public string EnvironSetCommand { get; set; } // environ_set_command
        public string CountyProcessCommand { get; set; } // county_process_command
    }

    // loader_variables
    public class tiger_LoaderVariable
    {
        public string TigerYear { get; set; } // tiger_year (Primary key) (length: 4)
        public string WebsiteRoot { get; set; } // website_root
        public string StagingFold { get; set; } // staging_fold
        public string DataSchema { get; set; } // data_schema
        public string StagingSchema { get; set; } // staging_schema
    }

    // pagc_gaz
    public class tiger_PagcGaz
    {
        public int Id { get; set; } // id (Primary key)
        public int? Seq { get; set; } // seq
        public string Word { get; set; } // word
        public string Stdword { get; set; } // stdword
        public int? Token { get; set; } // token
        public bool IsCustom { get; set; } // is_custom

        public tiger_PagcGaz()
        {
            IsCustom = true;
        }
    }

    // pagc_lex
    public class tiger_PagcLex
    {
        public int Id { get; set; } // id (Primary key)
        public int? Seq { get; set; } // seq
        public string Word { get; set; } // word
        public string Stdword { get; set; } // stdword
        public int? Token { get; set; } // token
        public bool IsCustom { get; set; } // is_custom

        public tiger_PagcLex()
        {
            IsCustom = true;
        }
    }

    // pagc_rules
    public class tiger_PagcRule
    {
        public int Id { get; set; } // id (Primary key)
        public string Rule { get; set; } // rule
        public bool? IsCustom { get; set; } // is_custom

        public tiger_PagcRule()
        {
            IsCustom = true;
        }
    }

    // place
    public class tiger_Place
    {
        public int Gid { get; set; } // gid
        public string Statefp { get; set; } // statefp (length: 2)
        public string Placefp { get; set; } // placefp (length: 5)
        public string Placens { get; set; } // placens (length: 8)
        public string Plcidfp { get; set; } // plcidfp (Primary key) (length: 7)
        public string Name { get; set; } // name (length: 100)
        public string Namelsad { get; set; } // namelsad (length: 100)
        public string Lsad { get; set; } // lsad (length: 2)
        public string Classfp { get; set; } // classfp (length: 2)
        public string Cpi { get; set; } // cpi (length: 1)
        public string Pcicbsa { get; set; } // pcicbsa (length: 1)
        public string Pcinecta { get; set; } // pcinecta (length: 1)
        public string Mtfcc { get; set; } // mtfcc (length: 5)
        public string Funcstat { get; set; } // funcstat (length: 1)
        public long? Aland { get; set; } // aland
        public long? Awater { get; set; } // awater
        public string Intptlat { get; set; } // intptlat (length: 11)
        public string Intptlon { get; set; } // intptlon (length: 12)
        public string TheGeom { get; set; } // the_geom
    }

    // place_lookup
    public class tiger_PlaceLookup
    {
        public int StCode { get; set; } // st_code (Primary key)
        public string State { get; set; } // state (length: 2)
        public int PlCode { get; set; } // pl_code (Primary key)
        public string Name { get; set; } // name (length: 90)
    }

    // secondary_unit_lookup
    public class tiger_SecondaryUnitLookup
    {
        public string Name { get; set; } // name (Primary key) (length: 20)
        public string Abbrev { get; set; } // abbrev (length: 5)
    }

    // state
    public class tiger_State
    {
        public int Gid { get; set; } // gid
        public string Region { get; set; } // region (length: 2)
        public string Division { get; set; } // division (length: 2)
        public string Statefp { get; set; } // statefp (Primary key) (length: 2)
        public string Statens { get; set; } // statens (length: 8)
        public string Stusps { get; set; } // stusps (length: 2)
        public string Name { get; set; } // name (length: 100)
        public string Lsad { get; set; } // lsad (length: 2)
        public string Mtfcc { get; set; } // mtfcc (length: 5)
        public string Funcstat { get; set; } // funcstat (length: 1)
        public long? Aland { get; set; } // aland
        public long? Awater { get; set; } // awater
        public string Intptlat { get; set; } // intptlat (length: 11)
        public string Intptlon { get; set; } // intptlon (length: 12)
        public string TheGeom { get; set; } // the_geom
    }

    // state_lookup
    public class tiger_StateLookup
    {
        public int StCode { get; set; } // st_code (Primary key)
        public string Name { get; set; } // name (length: 40)
        public string Abbrev { get; set; } // abbrev (length: 3)
        public string Statefp { get; set; } // statefp (length: 2)
    }

    // street_type_lookup
    public class tiger_StreetTypeLookup
    {
        public string Name { get; set; } // name (Primary key) (length: 50)
        public string Abbrev { get; set; } // abbrev (length: 50)
        public bool IsHw { get; set; } // is_hw

        public tiger_StreetTypeLookup()
        {
            IsHw = false;
        }
    }

    // tabblock
    public class tiger_Tabblock
    {
        public int Gid { get; set; } // gid
        public string Statefp { get; set; } // statefp (length: 2)
        public string Countyfp { get; set; } // countyfp (length: 3)
        public string Tractce { get; set; } // tractce (length: 6)
        public string Blockce { get; set; } // blockce (length: 4)
        public string TabblockId { get; set; } // tabblock_id (Primary key) (length: 16)
        public string Name { get; set; } // name (length: 20)
        public string Mtfcc { get; set; } // mtfcc (length: 5)
        public string Ur { get; set; } // ur (length: 1)
        public string Uace { get; set; } // uace (length: 5)
        public string Funcstat { get; set; } // funcstat (length: 1)
        public double? Aland { get; set; } // aland
        public double? Awater { get; set; } // awater
        public string Intptlat { get; set; } // intptlat (length: 11)
        public string Intptlon { get; set; } // intptlon (length: 12)
        public string TheGeom { get; set; } // the_geom
    }

    // tabblock20
    public class tiger_Tabblock20
    {
        public string Statefp { get; set; } // statefp (length: 2)
        public string Countyfp { get; set; } // countyfp (length: 3)
        public string Tractce { get; set; } // tractce (length: 6)
        public string Blockce { get; set; } // blockce (length: 4)
        public string Geoid { get; set; } // geoid (Primary key) (length: 15)
        public string Name { get; set; } // name (length: 10)
        public string Mtfcc { get; set; } // mtfcc (length: 5)
        public string Ur { get; set; } // ur (length: 1)
        public string Uace { get; set; } // uace (length: 5)
        public string Uatype { get; set; } // uatype (length: 1)
        public string Funcstat { get; set; } // funcstat (length: 1)
        public double? Aland { get; set; } // aland
        public double? Awater { get; set; } // awater
        public string Intptlat { get; set; } // intptlat (length: 11)
        public string Intptlon { get; set; } // intptlon (length: 12)
        public string TheGeom { get; set; } // the_geom
    }

    // tract
    public class tiger_Tract
    {
        public int Gid { get; set; } // gid
        public string Statefp { get; set; } // statefp (length: 2)
        public string Countyfp { get; set; } // countyfp (length: 3)
        public string Tractce { get; set; } // tractce (length: 6)
        public string TractId { get; set; } // tract_id (Primary key) (length: 11)
        public string Name { get; set; } // name (length: 7)
        public string Namelsad { get; set; } // namelsad (length: 20)
        public string Mtfcc { get; set; } // mtfcc (length: 5)
        public string Funcstat { get; set; } // funcstat (length: 1)
        public double? Aland { get; set; } // aland
        public double? Awater { get; set; } // awater
        public string Intptlat { get; set; } // intptlat (length: 11)
        public string Intptlon { get; set; } // intptlon (length: 12)
        public string TheGeom { get; set; } // the_geom
    }

    // zcta5
    public class tiger_Zcta5
    {
        public int Gid { get; set; } // gid
        public string Statefp { get; set; } // statefp (Primary key) (length: 2)
        public string Zcta5Ce { get; set; } // zcta5ce (Primary key) (length: 5)
        public string Classfp { get; set; } // classfp (length: 2)
        public string Mtfcc { get; set; } // mtfcc (length: 5)
        public string Funcstat { get; set; } // funcstat (length: 1)
        public double? Aland { get; set; } // aland
        public double? Awater { get; set; } // awater
        public string Intptlat { get; set; } // intptlat (length: 11)
        public string Intptlon { get; set; } // intptlon (length: 12)
        public string Partflg { get; set; } // partflg (length: 1)
        public string TheGeom { get; set; } // the_geom
    }

    // zip_lookup
    public class tiger_ZipLookup
    {
        public int Zip { get; set; } // zip (Primary key)
        public int? StCode { get; set; } // st_code
        public string State { get; set; } // state (length: 2)
        public int? CoCode { get; set; } // co_code
        public string County { get; set; } // county (length: 90)
        public int? CsCode { get; set; } // cs_code
        public string Cousub { get; set; } // cousub (length: 90)
        public int? PlCode { get; set; } // pl_code
        public string Place { get; set; } // place (length: 90)
        public int? Cnt { get; set; } // cnt
    }

    // The table 'zip_lookup_all' is not usable by entity framework because it
    // does not have a primary key. It is listed here for completeness.
    // zip_lookup_all
    public class tiger_ZipLookupAll
    {
        public int? Zip { get; set; } // zip
        public int? StCode { get; set; } // st_code
        public string State { get; set; } // state (length: 2)
        public int? CoCode { get; set; } // co_code
        public string County { get; set; } // county (length: 90)
        public int? CsCode { get; set; } // cs_code
        public string Cousub { get; set; } // cousub (length: 90)
        public int? PlCode { get; set; } // pl_code
        public string Place { get; set; } // place (length: 90)
        public int? Cnt { get; set; } // cnt
    }

    // zip_lookup_base
    public class tiger_ZipLookupBase
    {
        public string Zip { get; set; } // zip (Primary key) (length: 5)
        public string State { get; set; } // state (length: 40)
        public string County { get; set; } // county (length: 90)
        public string City { get; set; } // city (length: 90)
        public string Statefp { get; set; } // statefp (length: 2)
    }

    // zip_state
    public class tiger_ZipState
    {
        public string Zip { get; set; } // zip (Primary key) (length: 5)
        public string Stusps { get; set; } // stusps (Primary key) (length: 2)
        public string Statefp { get; set; } // statefp (length: 2)
    }

    // zip_state_loc
    public class tiger_ZipStateLoc
    {
        public string Zip { get; set; } // zip (Primary key) (length: 5)
        public string Stusps { get; set; } // stusps (Primary key) (length: 2)
        public string Statefp { get; set; } // statefp (length: 2)
        public string Place { get; set; } // place (Primary key) (length: 100)
    }

    // layer
    public class topology_Layer
    {
        public int TopologyId { get; set; } // topology_id (Primary key)
        public int LayerId { get; set; } // layer_id (Primary key)
        public string SchemaName { get; set; } // schema_name
        public string TableName { get; set; } // table_name
        public string FeatureColumn { get; set; } // feature_column
        public int FeatureType { get; set; } // feature_type
        public int Level { get; set; } // level
        public int? ChildId { get; set; } // child_id

        // Foreign keys

        /// <summary>
        /// Parent topology_Topology pointed by [layer].([TopologyId]) (layer_topology_id_fkey)
        /// </summary>
        public virtual topology_Topology topology_Topology { get; set; } // layer_topology_id_fkey

        public topology_Layer()
        {
            Level = 0;
        }
    }

    // topology
    public class topology_Topology
    {
        public int Id { get; set; } // id (Primary key)
        public string Name { get; set; } // name
        public int Srid { get; set; } // srid
        public double Precision { get; set; } // precision
        public bool Hasz { get; set; } // hasz

        // Reverse navigation

        /// <summary>
        /// Child topology_Layers where [layer].[topology_id] point to this entity (layer_topology_id_fkey)
        /// </summary>
        public virtual ICollection<topology_Layer> topology_Layers { get; set; } // layer.layer_topology_id_fkey

        public topology_Topology()
        {
            Hasz = false;
            topology_Layers = new List<topology_Layer>();
        }
    }


    #endregion

    #region POCO Configuration

    // TestPostGisTbl
    public class dbo_TestPostGisTblConfiguration : IEntityTypeConfiguration<dbo_TestPostGisTbl>
    {
        public void Configure(EntityTypeBuilder<dbo_TestPostGisTbl> builder)
        {
            builder.ToTable("TestPostGisTbl", "dbo");
            builder.HasKey(x => x.Id).HasName("TestPostGisTbl_pk");

            builder.Property(x => x.Id).HasColumnName(@"Id").HasColumnType("integer").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.TblMinValue).HasColumnName(@"TblMinValue").HasColumnType("numeric(22,0)").IsRequired();
            builder.Property(x => x.TblMaxValue).HasColumnName(@"TblMaxValue").HasColumnType("numeric(22,0)").IsRequired();
            builder.Property(x => x.AtdLocation).HasColumnName(@"ATDLocation").IsRequired(); // .HasColumnType("user-defined") was excluded
        }
    }

    // geography_columns
    public class GeographyColumnConfiguration : IEntityTypeConfiguration<GeographyColumn>
    {
        public void Configure(EntityTypeBuilder<GeographyColumn> builder)
        {
            builder.ToView("geography_columns", "public");
            builder.HasNoKey();

            builder.Property(x => x.FTableCatalog).HasColumnName(@"f_table_catalog").HasColumnType("name").IsRequired(false);
            builder.Property(x => x.FTableSchema).HasColumnName(@"f_table_schema").HasColumnType("name").IsRequired(false);
            builder.Property(x => x.FTableName).HasColumnName(@"f_table_name").HasColumnType("name").IsRequired(false);
            builder.Property(x => x.FGeographyColumn).HasColumnName(@"f_geography_column").HasColumnType("name").IsRequired(false);
            builder.Property(x => x.CoordDimension).HasColumnName(@"coord_dimension").HasColumnType("integer").IsRequired(false);
            builder.Property(x => x.Srid).HasColumnName(@"srid").HasColumnType("integer").IsRequired(false);
            builder.Property(x => x.Type).HasColumnName(@"type").HasColumnType("text").IsRequired(false).IsUnicode(false);
        }
    }

    // geometry_columns
    public class GeometryColumnConfiguration : IEntityTypeConfiguration<GeometryColumn>
    {
        public void Configure(EntityTypeBuilder<GeometryColumn> builder)
        {
            builder.ToView("geometry_columns", "public");
            builder.HasNoKey();

            builder.Property(x => x.FTableCatalog).HasColumnName(@"f_table_catalog").HasColumnType("character varying(256)").IsRequired(false).HasMaxLength(256);
            builder.Property(x => x.FTableSchema).HasColumnName(@"f_table_schema").HasColumnType("name").IsRequired(false);
            builder.Property(x => x.FTableName).HasColumnName(@"f_table_name").HasColumnType("name").IsRequired(false);
            builder.Property(x => x.FGeometryColumn).HasColumnName(@"f_geometry_column").HasColumnType("name").IsRequired(false);
            builder.Property(x => x.CoordDimension).HasColumnName(@"coord_dimension").HasColumnType("integer").IsRequired(false);
            builder.Property(x => x.Srid).HasColumnName(@"srid").HasColumnType("integer").IsRequired(false);
            builder.Property(x => x.Type).HasColumnName(@"type").HasColumnType("character varying(30)").IsRequired(false).HasMaxLength(30);
        }
    }

    // pointcloud_columns
    public class PointcloudColumnConfiguration : IEntityTypeConfiguration<PointcloudColumn>
    {
        public void Configure(EntityTypeBuilder<PointcloudColumn> builder)
        {
            builder.ToView("pointcloud_columns", "public");
            builder.HasNoKey();

            builder.Property(x => x.Schema).HasColumnName(@"schema").HasColumnType("name").IsRequired(false);
            builder.Property(x => x.Table).HasColumnName(@"table").HasColumnType("name").IsRequired(false);
            builder.Property(x => x.Column).HasColumnName(@"column").HasColumnType("name").IsRequired(false);
            builder.Property(x => x.Pcid).HasColumnName(@"pcid").HasColumnType("integer").IsRequired(false);
            builder.Property(x => x.Srid).HasColumnName(@"srid").HasColumnType("integer").IsRequired(false);
            builder.Property(x => x.Type).HasColumnName(@"type").HasColumnType("name").IsRequired(false);
        }
    }

    // pointcloud_formats
    public class PointcloudFormatConfiguration : IEntityTypeConfiguration<PointcloudFormat>
    {
        public void Configure(EntityTypeBuilder<PointcloudFormat> builder)
        {
            builder.ToTable("pointcloud_formats", "public");
            builder.HasKey(x => x.Pcid).HasName("pointcloud_formats_pkey");

            builder.Property(x => x.Pcid).HasColumnName(@"pcid").HasColumnType("integer").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.Srid).HasColumnName(@"srid").HasColumnType("integer").IsRequired(false);
            builder.Property(x => x.Schema).HasColumnName(@"schema").HasColumnType("text").IsRequired(false).IsUnicode(false);
        }
    }

    // raster_columns
    public class RasterColumnConfiguration : IEntityTypeConfiguration<RasterColumn>
    {
        public void Configure(EntityTypeBuilder<RasterColumn> builder)
        {
            builder.ToView("raster_columns", "public");
            builder.HasNoKey();

            builder.Property(x => x.RTableCatalog).HasColumnName(@"r_table_catalog").HasColumnType("name").IsRequired(false);
            builder.Property(x => x.RTableSchema).HasColumnName(@"r_table_schema").HasColumnType("name").IsRequired(false);
            builder.Property(x => x.RTableName).HasColumnName(@"r_table_name").HasColumnType("name").IsRequired(false);
            builder.Property(x => x.RRasterColumn).HasColumnName(@"r_raster_column").HasColumnType("name").IsRequired(false);
            builder.Property(x => x.Srid).HasColumnName(@"srid").HasColumnType("integer").IsRequired(false);
            builder.Property(x => x.ScaleX).HasColumnName(@"scale_x").HasColumnType("double precision").IsRequired(false);
            builder.Property(x => x.ScaleY).HasColumnName(@"scale_y").HasColumnType("double precision").IsRequired(false);
            builder.Property(x => x.BlocksizeX).HasColumnName(@"blocksize_x").HasColumnType("integer").IsRequired(false);
            builder.Property(x => x.BlocksizeY).HasColumnName(@"blocksize_y").HasColumnType("integer").IsRequired(false);
            builder.Property(x => x.SameAlignment).HasColumnName(@"same_alignment").HasColumnType("boolean").IsRequired(false);
            builder.Property(x => x.RegularBlocking).HasColumnName(@"regular_blocking").HasColumnType("boolean").IsRequired(false);
            builder.Property(x => x.NumBands).HasColumnName(@"num_bands").HasColumnType("integer").IsRequired(false);
            builder.Property(x => x.PixelTypes).HasColumnName(@"pixel_types").HasColumnType("array").IsRequired(false);
            builder.Property(x => x.NodataValues).HasColumnName(@"nodata_values").HasColumnType("array").IsRequired(false);
            builder.Property(x => x.OutDb).HasColumnName(@"out_db").HasColumnType("array").IsRequired(false);
            builder.Property(x => x.Extent).HasColumnName(@"extent").IsRequired(false); // .HasColumnType("user-defined") was excluded
            builder.Property(x => x.SpatialIndex).HasColumnName(@"spatial_index").HasColumnType("boolean").IsRequired(false);
        }
    }

    // raster_overviews
    public class RasterOverviewConfiguration : IEntityTypeConfiguration<RasterOverview>
    {
        public void Configure(EntityTypeBuilder<RasterOverview> builder)
        {
            builder.ToView("raster_overviews", "public");
            builder.HasNoKey();

            builder.Property(x => x.OTableCatalog).HasColumnName(@"o_table_catalog").HasColumnType("name").IsRequired(false);
            builder.Property(x => x.OTableSchema).HasColumnName(@"o_table_schema").HasColumnType("name").IsRequired(false);
            builder.Property(x => x.OTableName).HasColumnName(@"o_table_name").HasColumnType("name").IsRequired(false);
            builder.Property(x => x.ORasterColumn).HasColumnName(@"o_raster_column").HasColumnType("name").IsRequired(false);
            builder.Property(x => x.RTableCatalog).HasColumnName(@"r_table_catalog").HasColumnType("name").IsRequired(false);
            builder.Property(x => x.RTableSchema).HasColumnName(@"r_table_schema").HasColumnType("name").IsRequired(false);
            builder.Property(x => x.RTableName).HasColumnName(@"r_table_name").HasColumnType("name").IsRequired(false);
            builder.Property(x => x.RRasterColumn).HasColumnName(@"r_raster_column").HasColumnType("name").IsRequired(false);
            builder.Property(x => x.OverviewFactor).HasColumnName(@"overview_factor").HasColumnType("integer").IsRequired(false);
        }
    }

    // spatial_ref_sys
    public class SpatialRefSyConfiguration : IEntityTypeConfiguration<SpatialRefSy>
    {
        public void Configure(EntityTypeBuilder<SpatialRefSy> builder)
        {
            builder.ToTable("spatial_ref_sys", "public");
            builder.HasKey(x => x.Srid).HasName("spatial_ref_sys_pkey");

            builder.Property(x => x.Srid).HasColumnName(@"srid").HasColumnType("integer").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.AuthName).HasColumnName(@"auth_name").HasColumnType("character varying(256)").IsRequired(false).HasMaxLength(256);
            builder.Property(x => x.AuthSrid).HasColumnName(@"auth_srid").HasColumnType("integer").IsRequired(false);
            builder.Property(x => x.Srtext).HasColumnName(@"srtext").HasColumnType("character varying(2048)").IsRequired(false).HasMaxLength(2048);
            builder.Property(x => x.Proj4Text).HasColumnName(@"proj4text").HasColumnType("character varying(2048)").IsRequired(false).HasMaxLength(2048);
        }
    }

    // addr
    public class tiger_AddrConfiguration : IEntityTypeConfiguration<tiger_Addr>
    {
        public void Configure(EntityTypeBuilder<tiger_Addr> builder)
        {
            builder.ToTable("addr", "tiger");
            builder.HasKey(x => x.Gid).HasName("addr_pkey");

            builder.Property(x => x.Gid).HasColumnName(@"gid").HasColumnType("integer").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.Tlid).HasColumnName(@"tlid").HasColumnType("bigint").IsRequired(false);
            builder.Property(x => x.Fromhn).HasColumnName(@"fromhn").HasColumnType("character varying(12)").IsRequired(false).HasMaxLength(12);
            builder.Property(x => x.Tohn).HasColumnName(@"tohn").HasColumnType("character varying(12)").IsRequired(false).HasMaxLength(12);
            builder.Property(x => x.Side).HasColumnName(@"side").HasColumnType("character varying(1)").IsRequired(false).HasMaxLength(1);
            builder.Property(x => x.Zip).HasColumnName(@"zip").HasColumnType("character varying(5)").IsRequired(false).HasMaxLength(5);
            builder.Property(x => x.Plus4).HasColumnName(@"plus4").HasColumnType("character varying(4)").IsRequired(false).HasMaxLength(4);
            builder.Property(x => x.Fromtyp).HasColumnName(@"fromtyp").HasColumnType("character varying(1)").IsRequired(false).HasMaxLength(1);
            builder.Property(x => x.Totyp).HasColumnName(@"totyp").HasColumnType("character varying(1)").IsRequired(false).HasMaxLength(1);
            builder.Property(x => x.Fromarmid).HasColumnName(@"fromarmid").HasColumnType("integer").IsRequired(false);
            builder.Property(x => x.Toarmid).HasColumnName(@"toarmid").HasColumnType("integer").IsRequired(false);
            builder.Property(x => x.Arid).HasColumnName(@"arid").HasColumnType("character varying(22)").IsRequired(false).HasMaxLength(22);
            builder.Property(x => x.Mtfcc).HasColumnName(@"mtfcc").HasColumnType("character varying(5)").IsRequired(false).HasMaxLength(5);
            builder.Property(x => x.Statefp).HasColumnName(@"statefp").HasColumnType("character varying(2)").IsRequired(false).HasMaxLength(2);

            builder.HasIndex(x => new { x.Tlid, x.Statefp }).HasName("idx_tiger_addr_tlid_statefp");
            builder.HasIndex(x => x.Zip).HasName("idx_tiger_addr_zip");
        }
    }

    // addrfeat
    public class tiger_AddrfeatConfiguration : IEntityTypeConfiguration<tiger_Addrfeat>
    {
        public void Configure(EntityTypeBuilder<tiger_Addrfeat> builder)
        {
            builder.ToTable("addrfeat", "tiger");
            builder.HasKey(x => x.Gid).HasName("addrfeat_pkey");

            builder.Property(x => x.Gid).HasColumnName(@"gid").HasColumnType("integer").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.Tlid).HasColumnName(@"tlid").HasColumnType("bigint").IsRequired(false);
            builder.Property(x => x.Statefp).HasColumnName(@"statefp").HasColumnType("character varying(2)").IsRequired().HasMaxLength(2);
            builder.Property(x => x.Aridl).HasColumnName(@"aridl").HasColumnType("character varying(22)").IsRequired(false).HasMaxLength(22);
            builder.Property(x => x.Aridr).HasColumnName(@"aridr").HasColumnType("character varying(22)").IsRequired(false).HasMaxLength(22);
            builder.Property(x => x.Linearid).HasColumnName(@"linearid").HasColumnType("character varying(22)").IsRequired(false).HasMaxLength(22);
            builder.Property(x => x.Fullname).HasColumnName(@"fullname").HasColumnType("character varying(100)").IsRequired(false).HasMaxLength(100);
            builder.Property(x => x.Lfromhn).HasColumnName(@"lfromhn").HasColumnType("character varying(12)").IsRequired(false).HasMaxLength(12);
            builder.Property(x => x.Ltohn).HasColumnName(@"ltohn").HasColumnType("character varying(12)").IsRequired(false).HasMaxLength(12);
            builder.Property(x => x.Rfromhn).HasColumnName(@"rfromhn").HasColumnType("character varying(12)").IsRequired(false).HasMaxLength(12);
            builder.Property(x => x.Rtohn).HasColumnName(@"rtohn").HasColumnType("character varying(12)").IsRequired(false).HasMaxLength(12);
            builder.Property(x => x.Zipl).HasColumnName(@"zipl").HasColumnType("character varying(5)").IsRequired(false).HasMaxLength(5);
            builder.Property(x => x.Zipr).HasColumnName(@"zipr").HasColumnType("character varying(5)").IsRequired(false).HasMaxLength(5);
            builder.Property(x => x.EdgeMtfcc).HasColumnName(@"edge_mtfcc").HasColumnType("character varying(5)").IsRequired(false).HasMaxLength(5);
            builder.Property(x => x.Parityl).HasColumnName(@"parityl").HasColumnType("character varying(1)").IsRequired(false).HasMaxLength(1);
            builder.Property(x => x.Parityr).HasColumnName(@"parityr").HasColumnType("character varying(1)").IsRequired(false).HasMaxLength(1);
            builder.Property(x => x.Plus4L).HasColumnName(@"plus4l").HasColumnType("character varying(4)").IsRequired(false).HasMaxLength(4);
            builder.Property(x => x.Plus4R).HasColumnName(@"plus4r").HasColumnType("character varying(4)").IsRequired(false).HasMaxLength(4);
            builder.Property(x => x.Lfromtyp).HasColumnName(@"lfromtyp").HasColumnType("character varying(1)").IsRequired(false).HasMaxLength(1);
            builder.Property(x => x.Ltotyp).HasColumnName(@"ltotyp").HasColumnType("character varying(1)").IsRequired(false).HasMaxLength(1);
            builder.Property(x => x.Rfromtyp).HasColumnName(@"rfromtyp").HasColumnType("character varying(1)").IsRequired(false).HasMaxLength(1);
            builder.Property(x => x.Rtotyp).HasColumnName(@"rtotyp").HasColumnType("character varying(1)").IsRequired(false).HasMaxLength(1);
            builder.Property(x => x.Offsetl).HasColumnName(@"offsetl").HasColumnType("character varying(1)").IsRequired(false).HasMaxLength(1);
            builder.Property(x => x.Offsetr).HasColumnName(@"offsetr").HasColumnType("character varying(1)").IsRequired(false).HasMaxLength(1);
            builder.Property(x => x.TheGeom).HasColumnName(@"the_geom").IsRequired(false); // .HasColumnType("user-defined") was excluded

            builder.HasIndex(x => x.TheGeom).HasName("idx_addrfeat_geom_gist");
            builder.HasIndex(x => x.Tlid).HasName("idx_addrfeat_tlid");
            builder.HasIndex(x => x.Zipl).HasName("idx_addrfeat_zipl");
            builder.HasIndex(x => x.Zipr).HasName("idx_addrfeat_zipr");
        }
    }

    // bg
    public class tiger_BgConfiguration : IEntityTypeConfiguration<tiger_Bg>
    {
        public void Configure(EntityTypeBuilder<tiger_Bg> builder)
        {
            builder.ToTable("bg", "tiger");
            builder.HasKey(x => x.BgId).HasName("bg_pkey");

            builder.Property(x => x.Gid).HasColumnName(@"gid").HasColumnType("integer").IsRequired();
            builder.Property(x => x.Statefp).HasColumnName(@"statefp").HasColumnType("character varying(2)").IsRequired(false).HasMaxLength(2);
            builder.Property(x => x.Countyfp).HasColumnName(@"countyfp").HasColumnType("character varying(3)").IsRequired(false).HasMaxLength(3);
            builder.Property(x => x.Tractce).HasColumnName(@"tractce").HasColumnType("character varying(6)").IsRequired(false).HasMaxLength(6);
            builder.Property(x => x.Blkgrpce).HasColumnName(@"blkgrpce").HasColumnType("character varying(1)").IsRequired(false).HasMaxLength(1);
            builder.Property(x => x.BgId).HasColumnName(@"bg_id").HasColumnType("character varying(12)").IsRequired().HasMaxLength(12).ValueGeneratedNever();
            builder.Property(x => x.Namelsad).HasColumnName(@"namelsad").HasColumnType("character varying(13)").IsRequired(false).HasMaxLength(13);
            builder.Property(x => x.Mtfcc).HasColumnName(@"mtfcc").HasColumnType("character varying(5)").IsRequired(false).HasMaxLength(5);
            builder.Property(x => x.Funcstat).HasColumnName(@"funcstat").HasColumnType("character varying(1)").IsRequired(false).HasMaxLength(1);
            builder.Property(x => x.Aland).HasColumnName(@"aland").HasColumnType("double precision").IsRequired(false);
            builder.Property(x => x.Awater).HasColumnName(@"awater").HasColumnType("double precision").IsRequired(false);
            builder.Property(x => x.Intptlat).HasColumnName(@"intptlat").HasColumnType("character varying(11)").IsRequired(false).HasMaxLength(11);
            builder.Property(x => x.Intptlon).HasColumnName(@"intptlon").HasColumnType("character varying(12)").IsRequired(false).HasMaxLength(12);
            builder.Property(x => x.TheGeom).HasColumnName(@"the_geom").IsRequired(false); // .HasColumnType("user-defined") was excluded
        }
    }

    // county
    public class tiger_CountyConfiguration : IEntityTypeConfiguration<tiger_County>
    {
        public void Configure(EntityTypeBuilder<tiger_County> builder)
        {
            builder.ToTable("county", "tiger");
            builder.HasKey(x => x.Cntyidfp).HasName("pk_tiger_county");

            builder.Property(x => x.Gid).HasColumnName(@"gid").HasColumnType("integer").IsRequired();
            builder.Property(x => x.Statefp).HasColumnName(@"statefp").HasColumnType("character varying(2)").IsRequired(false).HasMaxLength(2);
            builder.Property(x => x.Countyfp).HasColumnName(@"countyfp").HasColumnType("character varying(3)").IsRequired(false).HasMaxLength(3);
            builder.Property(x => x.Countyns).HasColumnName(@"countyns").HasColumnType("character varying(8)").IsRequired(false).HasMaxLength(8);
            builder.Property(x => x.Cntyidfp).HasColumnName(@"cntyidfp").HasColumnType("character varying(5)").IsRequired().HasMaxLength(5).ValueGeneratedNever();
            builder.Property(x => x.Name).HasColumnName(@"name").HasColumnType("character varying(100)").IsRequired(false).HasMaxLength(100);
            builder.Property(x => x.Namelsad).HasColumnName(@"namelsad").HasColumnType("character varying(100)").IsRequired(false).HasMaxLength(100);
            builder.Property(x => x.Lsad).HasColumnName(@"lsad").HasColumnType("character varying(2)").IsRequired(false).HasMaxLength(2);
            builder.Property(x => x.Classfp).HasColumnName(@"classfp").HasColumnType("character varying(2)").IsRequired(false).HasMaxLength(2);
            builder.Property(x => x.Mtfcc).HasColumnName(@"mtfcc").HasColumnType("character varying(5)").IsRequired(false).HasMaxLength(5);
            builder.Property(x => x.Csafp).HasColumnName(@"csafp").HasColumnType("character varying(3)").IsRequired(false).HasMaxLength(3);
            builder.Property(x => x.Cbsafp).HasColumnName(@"cbsafp").HasColumnType("character varying(5)").IsRequired(false).HasMaxLength(5);
            builder.Property(x => x.Metdivfp).HasColumnName(@"metdivfp").HasColumnType("character varying(5)").IsRequired(false).HasMaxLength(5);
            builder.Property(x => x.Funcstat).HasColumnName(@"funcstat").HasColumnType("character varying(1)").IsRequired(false).HasMaxLength(1);
            builder.Property(x => x.Aland).HasColumnName(@"aland").HasColumnType("bigint").IsRequired(false);
            builder.Property(x => x.Awater).HasColumnName(@"awater").HasColumnType("double precision").IsRequired(false);
            builder.Property(x => x.Intptlat).HasColumnName(@"intptlat").HasColumnType("character varying(11)").IsRequired(false).HasMaxLength(11);
            builder.Property(x => x.Intptlon).HasColumnName(@"intptlon").HasColumnType("character varying(12)").IsRequired(false).HasMaxLength(12);
            builder.Property(x => x.TheGeom).HasColumnName(@"the_geom").IsRequired(false); // .HasColumnType("user-defined") was excluded

            builder.HasIndex(x => x.Countyfp).HasName("idx_tiger_county");
            builder.HasIndex(x => x.Gid).HasName("uidx_county_gid").IsUnique();
        }
    }

    // county_lookup
    public class tiger_CountyLookupConfiguration : IEntityTypeConfiguration<tiger_CountyLookup>
    {
        public void Configure(EntityTypeBuilder<tiger_CountyLookup> builder)
        {
            builder.ToTable("county_lookup", "tiger");
            builder.HasKey(x => new { x.StCode, x.CoCode }).HasName("county_lookup_pkey");

            builder.Property(x => x.StCode).HasColumnName(@"st_code").HasColumnType("integer").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.State).HasColumnName(@"state").HasColumnType("character varying(2)").IsRequired(false).HasMaxLength(2);
            builder.Property(x => x.CoCode).HasColumnName(@"co_code").HasColumnType("integer").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.Name).HasColumnName(@"name").HasColumnType("character varying(90)").IsRequired(false).HasMaxLength(90);

            builder.HasIndex(x => x.State).HasName("county_lookup_state_idx");
        }
    }

    // countysub_lookup
    public class tiger_CountysubLookupConfiguration : IEntityTypeConfiguration<tiger_CountysubLookup>
    {
        public void Configure(EntityTypeBuilder<tiger_CountysubLookup> builder)
        {
            builder.ToTable("countysub_lookup", "tiger");
            builder.HasKey(x => new { x.StCode, x.CoCode, x.CsCode }).HasName("countysub_lookup_pkey");

            builder.Property(x => x.StCode).HasColumnName(@"st_code").HasColumnType("integer").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.State).HasColumnName(@"state").HasColumnType("character varying(2)").IsRequired(false).HasMaxLength(2);
            builder.Property(x => x.CoCode).HasColumnName(@"co_code").HasColumnType("integer").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.County).HasColumnName(@"county").HasColumnType("character varying(90)").IsRequired(false).HasMaxLength(90);
            builder.Property(x => x.CsCode).HasColumnName(@"cs_code").HasColumnType("integer").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.Name).HasColumnName(@"name").HasColumnType("character varying(90)").IsRequired(false).HasMaxLength(90);

            builder.HasIndex(x => x.State).HasName("countysub_lookup_state_idx");
        }
    }

    // cousub
    public class tiger_CousubConfiguration : IEntityTypeConfiguration<tiger_Cousub>
    {
        public void Configure(EntityTypeBuilder<tiger_Cousub> builder)
        {
            builder.ToTable("cousub", "tiger");
            builder.HasKey(x => x.Cosbidfp).HasName("cousub_pkey");

            builder.Property(x => x.Gid).HasColumnName(@"gid").HasColumnType("integer").IsRequired();
            builder.Property(x => x.Statefp).HasColumnName(@"statefp").HasColumnType("character varying(2)").IsRequired(false).HasMaxLength(2);
            builder.Property(x => x.Countyfp).HasColumnName(@"countyfp").HasColumnType("character varying(3)").IsRequired(false).HasMaxLength(3);
            builder.Property(x => x.Cousubfp).HasColumnName(@"cousubfp").HasColumnType("character varying(5)").IsRequired(false).HasMaxLength(5);
            builder.Property(x => x.Cousubns).HasColumnName(@"cousubns").HasColumnType("character varying(8)").IsRequired(false).HasMaxLength(8);
            builder.Property(x => x.Cosbidfp).HasColumnName(@"cosbidfp").HasColumnType("character varying(10)").IsRequired().HasMaxLength(10).ValueGeneratedNever();
            builder.Property(x => x.Name).HasColumnName(@"name").HasColumnType("character varying(100)").IsRequired(false).HasMaxLength(100);
            builder.Property(x => x.Namelsad).HasColumnName(@"namelsad").HasColumnType("character varying(100)").IsRequired(false).HasMaxLength(100);
            builder.Property(x => x.Lsad).HasColumnName(@"lsad").HasColumnType("character varying(2)").IsRequired(false).HasMaxLength(2);
            builder.Property(x => x.Classfp).HasColumnName(@"classfp").HasColumnType("character varying(2)").IsRequired(false).HasMaxLength(2);
            builder.Property(x => x.Mtfcc).HasColumnName(@"mtfcc").HasColumnType("character varying(5)").IsRequired(false).HasMaxLength(5);
            builder.Property(x => x.Cnectafp).HasColumnName(@"cnectafp").HasColumnType("character varying(3)").IsRequired(false).HasMaxLength(3);
            builder.Property(x => x.Nectafp).HasColumnName(@"nectafp").HasColumnType("character varying(5)").IsRequired(false).HasMaxLength(5);
            builder.Property(x => x.Nctadvfp).HasColumnName(@"nctadvfp").HasColumnType("character varying(5)").IsRequired(false).HasMaxLength(5);
            builder.Property(x => x.Funcstat).HasColumnName(@"funcstat").HasColumnType("character varying(1)").IsRequired(false).HasMaxLength(1);
            builder.Property(x => x.Aland).HasColumnName(@"aland").HasColumnType("numeric(14,0)").IsRequired(false);
            builder.Property(x => x.Awater).HasColumnName(@"awater").HasColumnType("numeric(14,0)").IsRequired(false);
            builder.Property(x => x.Intptlat).HasColumnName(@"intptlat").HasColumnType("character varying(11)").IsRequired(false).HasMaxLength(11);
            builder.Property(x => x.Intptlon).HasColumnName(@"intptlon").HasColumnType("character varying(12)").IsRequired(false).HasMaxLength(12);
            builder.Property(x => x.TheGeom).HasColumnName(@"the_geom").IsRequired(false); // .HasColumnType("user-defined") was excluded

            builder.HasIndex(x => x.TheGeom).HasName("tige_cousub_the_geom_gist");
            builder.HasIndex(x => x.Gid).HasName("uidx_cousub_gid").IsUnique();
        }
    }

    // direction_lookup
    public class tiger_DirectionLookupConfiguration : IEntityTypeConfiguration<tiger_DirectionLookup>
    {
        public void Configure(EntityTypeBuilder<tiger_DirectionLookup> builder)
        {
            builder.ToTable("direction_lookup", "tiger");
            builder.HasKey(x => x.Name).HasName("direction_lookup_pkey");

            builder.Property(x => x.Name).HasColumnName(@"name").HasColumnType("character varying(20)").IsRequired().HasMaxLength(20).ValueGeneratedNever();
            builder.Property(x => x.Abbrev).HasColumnName(@"abbrev").HasColumnType("character varying(3)").IsRequired(false).HasMaxLength(3);

            builder.HasIndex(x => x.Abbrev).HasName("direction_lookup_abbrev_idx");
        }
    }

    // edges
    public class tiger_EdgeConfiguration : IEntityTypeConfiguration<tiger_Edge>
    {
        public void Configure(EntityTypeBuilder<tiger_Edge> builder)
        {
            builder.ToTable("edges", "tiger");
            builder.HasKey(x => x.Gid).HasName("edges_pkey");

            builder.Property(x => x.Gid).HasColumnName(@"gid").HasColumnType("integer").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.Statefp).HasColumnName(@"statefp").HasColumnType("character varying(2)").IsRequired(false).HasMaxLength(2);
            builder.Property(x => x.Countyfp).HasColumnName(@"countyfp").HasColumnType("character varying(3)").IsRequired(false).HasMaxLength(3);
            builder.Property(x => x.Tlid).HasColumnName(@"tlid").HasColumnType("bigint").IsRequired(false);
            builder.Property(x => x.Tfidl).HasColumnName(@"tfidl").HasColumnType("numeric(10,0)").IsRequired(false);
            builder.Property(x => x.Tfidr).HasColumnName(@"tfidr").HasColumnType("numeric(10,0)").IsRequired(false);
            builder.Property(x => x.Mtfcc).HasColumnName(@"mtfcc").HasColumnType("character varying(5)").IsRequired(false).HasMaxLength(5);
            builder.Property(x => x.Fullname).HasColumnName(@"fullname").HasColumnType("character varying(100)").IsRequired(false).HasMaxLength(100);
            builder.Property(x => x.Smid).HasColumnName(@"smid").HasColumnType("character varying(22)").IsRequired(false).HasMaxLength(22);
            builder.Property(x => x.Lfromadd).HasColumnName(@"lfromadd").HasColumnType("character varying(12)").IsRequired(false).HasMaxLength(12);
            builder.Property(x => x.Ltoadd).HasColumnName(@"ltoadd").HasColumnType("character varying(12)").IsRequired(false).HasMaxLength(12);
            builder.Property(x => x.Rfromadd).HasColumnName(@"rfromadd").HasColumnType("character varying(12)").IsRequired(false).HasMaxLength(12);
            builder.Property(x => x.Rtoadd).HasColumnName(@"rtoadd").HasColumnType("character varying(12)").IsRequired(false).HasMaxLength(12);
            builder.Property(x => x.Zipl).HasColumnName(@"zipl").HasColumnType("character varying(5)").IsRequired(false).HasMaxLength(5);
            builder.Property(x => x.Zipr).HasColumnName(@"zipr").HasColumnType("character varying(5)").IsRequired(false).HasMaxLength(5);
            builder.Property(x => x.Featcat).HasColumnName(@"featcat").HasColumnType("character varying(1)").IsRequired(false).HasMaxLength(1);
            builder.Property(x => x.Hydroflg).HasColumnName(@"hydroflg").HasColumnType("character varying(1)").IsRequired(false).HasMaxLength(1);
            builder.Property(x => x.Railflg).HasColumnName(@"railflg").HasColumnType("character varying(1)").IsRequired(false).HasMaxLength(1);
            builder.Property(x => x.Roadflg).HasColumnName(@"roadflg").HasColumnType("character varying(1)").IsRequired(false).HasMaxLength(1);
            builder.Property(x => x.Olfflg).HasColumnName(@"olfflg").HasColumnType("character varying(1)").IsRequired(false).HasMaxLength(1);
            builder.Property(x => x.Passflg).HasColumnName(@"passflg").HasColumnType("character varying(1)").IsRequired(false).HasMaxLength(1);
            builder.Property(x => x.Divroad).HasColumnName(@"divroad").HasColumnType("character varying(1)").IsRequired(false).HasMaxLength(1);
            builder.Property(x => x.Exttyp).HasColumnName(@"exttyp").HasColumnType("character varying(1)").IsRequired(false).HasMaxLength(1);
            builder.Property(x => x.Ttyp).HasColumnName(@"ttyp").HasColumnType("character varying(1)").IsRequired(false).HasMaxLength(1);
            builder.Property(x => x.Deckedroad).HasColumnName(@"deckedroad").HasColumnType("character varying(1)").IsRequired(false).HasMaxLength(1);
            builder.Property(x => x.Artpath).HasColumnName(@"artpath").HasColumnType("character varying(1)").IsRequired(false).HasMaxLength(1);
            builder.Property(x => x.Persist).HasColumnName(@"persist").HasColumnType("character varying(1)").IsRequired(false).HasMaxLength(1);
            builder.Property(x => x.Gcseflg).HasColumnName(@"gcseflg").HasColumnType("character varying(1)").IsRequired(false).HasMaxLength(1);
            builder.Property(x => x.Offsetl).HasColumnName(@"offsetl").HasColumnType("character varying(1)").IsRequired(false).HasMaxLength(1);
            builder.Property(x => x.Offsetr).HasColumnName(@"offsetr").HasColumnType("character varying(1)").IsRequired(false).HasMaxLength(1);
            builder.Property(x => x.Tnidf).HasColumnName(@"tnidf").HasColumnType("numeric(10,0)").IsRequired(false);
            builder.Property(x => x.Tnidt).HasColumnName(@"tnidt").HasColumnType("numeric(10,0)").IsRequired(false);
            builder.Property(x => x.TheGeom).HasColumnName(@"the_geom").IsRequired(false); // .HasColumnType("user-defined") was excluded

            builder.HasIndex(x => x.Tlid).HasName("idx_edges_tlid");
            builder.HasIndex(x => x.Countyfp).HasName("idx_tiger_edges_countyfp");
            builder.HasIndex(x => x.TheGeom).HasName("idx_tiger_edges_the_geom_gist");
        }
    }

    // faces
    public class tiger_FaceConfiguration : IEntityTypeConfiguration<tiger_Face>
    {
        public void Configure(EntityTypeBuilder<tiger_Face> builder)
        {
            builder.ToTable("faces", "tiger");
            builder.HasKey(x => x.Gid).HasName("faces_pkey");

            builder.Property(x => x.Gid).HasColumnName(@"gid").HasColumnType("integer").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.Tfid).HasColumnName(@"tfid").HasColumnType("numeric(10,0)").IsRequired(false);
            builder.Property(x => x.Statefp00).HasColumnName(@"statefp00").HasColumnType("character varying(2)").IsRequired(false).HasMaxLength(2);
            builder.Property(x => x.Countyfp00).HasColumnName(@"countyfp00").HasColumnType("character varying(3)").IsRequired(false).HasMaxLength(3);
            builder.Property(x => x.Tractce00).HasColumnName(@"tractce00").HasColumnType("character varying(6)").IsRequired(false).HasMaxLength(6);
            builder.Property(x => x.Blkgrpce00).HasColumnName(@"blkgrpce00").HasColumnType("character varying(1)").IsRequired(false).HasMaxLength(1);
            builder.Property(x => x.Blockce00).HasColumnName(@"blockce00").HasColumnType("character varying(4)").IsRequired(false).HasMaxLength(4);
            builder.Property(x => x.Cousubfp00).HasColumnName(@"cousubfp00").HasColumnType("character varying(5)").IsRequired(false).HasMaxLength(5);
            builder.Property(x => x.Submcdfp00).HasColumnName(@"submcdfp00").HasColumnType("character varying(5)").IsRequired(false).HasMaxLength(5);
            builder.Property(x => x.Conctyfp00).HasColumnName(@"conctyfp00").HasColumnType("character varying(5)").IsRequired(false).HasMaxLength(5);
            builder.Property(x => x.Placefp00).HasColumnName(@"placefp00").HasColumnType("character varying(5)").IsRequired(false).HasMaxLength(5);
            builder.Property(x => x.Aiannhfp00).HasColumnName(@"aiannhfp00").HasColumnType("character varying(5)").IsRequired(false).HasMaxLength(5);
            builder.Property(x => x.Aiannhce00).HasColumnName(@"aiannhce00").HasColumnType("character varying(4)").IsRequired(false).HasMaxLength(4);
            builder.Property(x => x.Comptyp00).HasColumnName(@"comptyp00").HasColumnType("character varying(1)").IsRequired(false).HasMaxLength(1);
            builder.Property(x => x.Trsubfp00).HasColumnName(@"trsubfp00").HasColumnType("character varying(5)").IsRequired(false).HasMaxLength(5);
            builder.Property(x => x.Trsubce00).HasColumnName(@"trsubce00").HasColumnType("character varying(3)").IsRequired(false).HasMaxLength(3);
            builder.Property(x => x.Anrcfp00).HasColumnName(@"anrcfp00").HasColumnType("character varying(5)").IsRequired(false).HasMaxLength(5);
            builder.Property(x => x.Elsdlea00).HasColumnName(@"elsdlea00").HasColumnType("character varying(5)").IsRequired(false).HasMaxLength(5);
            builder.Property(x => x.Scsdlea00).HasColumnName(@"scsdlea00").HasColumnType("character varying(5)").IsRequired(false).HasMaxLength(5);
            builder.Property(x => x.Unsdlea00).HasColumnName(@"unsdlea00").HasColumnType("character varying(5)").IsRequired(false).HasMaxLength(5);
            builder.Property(x => x.Uace00).HasColumnName(@"uace00").HasColumnType("character varying(5)").IsRequired(false).HasMaxLength(5);
            builder.Property(x => x.Cd108Fp).HasColumnName(@"cd108fp").HasColumnType("character varying(2)").IsRequired(false).HasMaxLength(2);
            builder.Property(x => x.Sldust00).HasColumnName(@"sldust00").HasColumnType("character varying(3)").IsRequired(false).HasMaxLength(3);
            builder.Property(x => x.Sldlst00).HasColumnName(@"sldlst00").HasColumnType("character varying(3)").IsRequired(false).HasMaxLength(3);
            builder.Property(x => x.Vtdst00).HasColumnName(@"vtdst00").HasColumnType("character varying(6)").IsRequired(false).HasMaxLength(6);
            builder.Property(x => x.Zcta5Ce00).HasColumnName(@"zcta5ce00").HasColumnType("character varying(5)").IsRequired(false).HasMaxLength(5);
            builder.Property(x => x.Tazce00).HasColumnName(@"tazce00").HasColumnType("character varying(6)").IsRequired(false).HasMaxLength(6);
            builder.Property(x => x.Ugace00).HasColumnName(@"ugace00").HasColumnType("character varying(5)").IsRequired(false).HasMaxLength(5);
            builder.Property(x => x.Puma5Ce00).HasColumnName(@"puma5ce00").HasColumnType("character varying(5)").IsRequired(false).HasMaxLength(5);
            builder.Property(x => x.Statefp).HasColumnName(@"statefp").HasColumnType("character varying(2)").IsRequired(false).HasMaxLength(2);
            builder.Property(x => x.Countyfp).HasColumnName(@"countyfp").HasColumnType("character varying(3)").IsRequired(false).HasMaxLength(3);
            builder.Property(x => x.Tractce).HasColumnName(@"tractce").HasColumnType("character varying(6)").IsRequired(false).HasMaxLength(6);
            builder.Property(x => x.Blkgrpce).HasColumnName(@"blkgrpce").HasColumnType("character varying(1)").IsRequired(false).HasMaxLength(1);
            builder.Property(x => x.Blockce).HasColumnName(@"blockce").HasColumnType("character varying(4)").IsRequired(false).HasMaxLength(4);
            builder.Property(x => x.Cousubfp).HasColumnName(@"cousubfp").HasColumnType("character varying(5)").IsRequired(false).HasMaxLength(5);
            builder.Property(x => x.Submcdfp).HasColumnName(@"submcdfp").HasColumnType("character varying(5)").IsRequired(false).HasMaxLength(5);
            builder.Property(x => x.Conctyfp).HasColumnName(@"conctyfp").HasColumnType("character varying(5)").IsRequired(false).HasMaxLength(5);
            builder.Property(x => x.Placefp).HasColumnName(@"placefp").HasColumnType("character varying(5)").IsRequired(false).HasMaxLength(5);
            builder.Property(x => x.Aiannhfp).HasColumnName(@"aiannhfp").HasColumnType("character varying(5)").IsRequired(false).HasMaxLength(5);
            builder.Property(x => x.Aiannhce).HasColumnName(@"aiannhce").HasColumnType("character varying(4)").IsRequired(false).HasMaxLength(4);
            builder.Property(x => x.Comptyp).HasColumnName(@"comptyp").HasColumnType("character varying(1)").IsRequired(false).HasMaxLength(1);
            builder.Property(x => x.Trsubfp).HasColumnName(@"trsubfp").HasColumnType("character varying(5)").IsRequired(false).HasMaxLength(5);
            builder.Property(x => x.Trsubce).HasColumnName(@"trsubce").HasColumnType("character varying(3)").IsRequired(false).HasMaxLength(3);
            builder.Property(x => x.Anrcfp).HasColumnName(@"anrcfp").HasColumnType("character varying(5)").IsRequired(false).HasMaxLength(5);
            builder.Property(x => x.Ttractce).HasColumnName(@"ttractce").HasColumnType("character varying(6)").IsRequired(false).HasMaxLength(6);
            builder.Property(x => x.Tblkgpce).HasColumnName(@"tblkgpce").HasColumnType("character varying(1)").IsRequired(false).HasMaxLength(1);
            builder.Property(x => x.Elsdlea).HasColumnName(@"elsdlea").HasColumnType("character varying(5)").IsRequired(false).HasMaxLength(5);
            builder.Property(x => x.Scsdlea).HasColumnName(@"scsdlea").HasColumnType("character varying(5)").IsRequired(false).HasMaxLength(5);
            builder.Property(x => x.Unsdlea).HasColumnName(@"unsdlea").HasColumnType("character varying(5)").IsRequired(false).HasMaxLength(5);
            builder.Property(x => x.Uace).HasColumnName(@"uace").HasColumnType("character varying(5)").IsRequired(false).HasMaxLength(5);
            builder.Property(x => x.Cd111Fp).HasColumnName(@"cd111fp").HasColumnType("character varying(2)").IsRequired(false).HasMaxLength(2);
            builder.Property(x => x.Sldust).HasColumnName(@"sldust").HasColumnType("character varying(3)").IsRequired(false).HasMaxLength(3);
            builder.Property(x => x.Sldlst).HasColumnName(@"sldlst").HasColumnType("character varying(3)").IsRequired(false).HasMaxLength(3);
            builder.Property(x => x.Vtdst).HasColumnName(@"vtdst").HasColumnType("character varying(6)").IsRequired(false).HasMaxLength(6);
            builder.Property(x => x.Zcta5Ce).HasColumnName(@"zcta5ce").HasColumnType("character varying(5)").IsRequired(false).HasMaxLength(5);
            builder.Property(x => x.Tazce).HasColumnName(@"tazce").HasColumnType("character varying(6)").IsRequired(false).HasMaxLength(6);
            builder.Property(x => x.Ugace).HasColumnName(@"ugace").HasColumnType("character varying(5)").IsRequired(false).HasMaxLength(5);
            builder.Property(x => x.Puma5Ce).HasColumnName(@"puma5ce").HasColumnType("character varying(5)").IsRequired(false).HasMaxLength(5);
            builder.Property(x => x.Csafp).HasColumnName(@"csafp").HasColumnType("character varying(3)").IsRequired(false).HasMaxLength(3);
            builder.Property(x => x.Cbsafp).HasColumnName(@"cbsafp").HasColumnType("character varying(5)").IsRequired(false).HasMaxLength(5);
            builder.Property(x => x.Metdivfp).HasColumnName(@"metdivfp").HasColumnType("character varying(5)").IsRequired(false).HasMaxLength(5);
            builder.Property(x => x.Cnectafp).HasColumnName(@"cnectafp").HasColumnType("character varying(3)").IsRequired(false).HasMaxLength(3);
            builder.Property(x => x.Nectafp).HasColumnName(@"nectafp").HasColumnType("character varying(5)").IsRequired(false).HasMaxLength(5);
            builder.Property(x => x.Nctadvfp).HasColumnName(@"nctadvfp").HasColumnType("character varying(5)").IsRequired(false).HasMaxLength(5);
            builder.Property(x => x.Lwflag).HasColumnName(@"lwflag").HasColumnType("character varying(1)").IsRequired(false).HasMaxLength(1);
            builder.Property(x => x.Offset).HasColumnName(@"offset").HasColumnType("character varying(1)").IsRequired(false).HasMaxLength(1);
            builder.Property(x => x.Atotal).HasColumnName(@"atotal").HasColumnType("double precision").IsRequired(false);
            builder.Property(x => x.Intptlat).HasColumnName(@"intptlat").HasColumnType("character varying(11)").IsRequired(false).HasMaxLength(11);
            builder.Property(x => x.Intptlon).HasColumnName(@"intptlon").HasColumnType("character varying(12)").IsRequired(false).HasMaxLength(12);
            builder.Property(x => x.TheGeom).HasColumnName(@"the_geom").IsRequired(false); // .HasColumnType("user-defined") was excluded

            builder.HasIndex(x => x.Countyfp).HasName("idx_tiger_faces_countyfp");
            builder.HasIndex(x => x.Tfid).HasName("idx_tiger_faces_tfid");
            builder.HasIndex(x => x.TheGeom).HasName("tiger_faces_the_geom_gist");
        }
    }

    // featnames
    public class tiger_FeatnameConfiguration : IEntityTypeConfiguration<tiger_Featname>
    {
        public void Configure(EntityTypeBuilder<tiger_Featname> builder)
        {
            builder.ToTable("featnames", "tiger");
            builder.HasKey(x => x.Gid).HasName("featnames_pkey");

            builder.Property(x => x.Gid).HasColumnName(@"gid").HasColumnType("integer").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.Tlid).HasColumnName(@"tlid").HasColumnType("bigint").IsRequired(false);
            builder.Property(x => x.Fullname).HasColumnName(@"fullname").HasColumnType("character varying(100)").IsRequired(false).HasMaxLength(100);
            builder.Property(x => x.Name).HasColumnName(@"name").HasColumnType("character varying(100)").IsRequired(false).HasMaxLength(100);
            builder.Property(x => x.Predirabrv).HasColumnName(@"predirabrv").HasColumnType("character varying(15)").IsRequired(false).HasMaxLength(15);
            builder.Property(x => x.Pretypabrv).HasColumnName(@"pretypabrv").HasColumnType("character varying(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.Prequalabr).HasColumnName(@"prequalabr").HasColumnType("character varying(15)").IsRequired(false).HasMaxLength(15);
            builder.Property(x => x.Sufdirabrv).HasColumnName(@"sufdirabrv").HasColumnType("character varying(15)").IsRequired(false).HasMaxLength(15);
            builder.Property(x => x.Suftypabrv).HasColumnName(@"suftypabrv").HasColumnType("character varying(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.Sufqualabr).HasColumnName(@"sufqualabr").HasColumnType("character varying(15)").IsRequired(false).HasMaxLength(15);
            builder.Property(x => x.Predir).HasColumnName(@"predir").HasColumnType("character varying(2)").IsRequired(false).HasMaxLength(2);
            builder.Property(x => x.Pretyp).HasColumnName(@"pretyp").HasColumnType("character varying(3)").IsRequired(false).HasMaxLength(3);
            builder.Property(x => x.Prequal).HasColumnName(@"prequal").HasColumnType("character varying(2)").IsRequired(false).HasMaxLength(2);
            builder.Property(x => x.Sufdir).HasColumnName(@"sufdir").HasColumnType("character varying(2)").IsRequired(false).HasMaxLength(2);
            builder.Property(x => x.Suftyp).HasColumnName(@"suftyp").HasColumnType("character varying(3)").IsRequired(false).HasMaxLength(3);
            builder.Property(x => x.Sufqual).HasColumnName(@"sufqual").HasColumnType("character varying(2)").IsRequired(false).HasMaxLength(2);
            builder.Property(x => x.Linearid).HasColumnName(@"linearid").HasColumnType("character varying(22)").IsRequired(false).HasMaxLength(22);
            builder.Property(x => x.Mtfcc).HasColumnName(@"mtfcc").HasColumnType("character varying(5)").IsRequired(false).HasMaxLength(5);
            builder.Property(x => x.Paflag).HasColumnName(@"paflag").HasColumnType("character varying(1)").IsRequired(false).HasMaxLength(1);
            builder.Property(x => x.Statefp).HasColumnName(@"statefp").HasColumnType("character varying(2)").IsRequired(false).HasMaxLength(2);

            builder.HasIndex(x => new { x.Tlid, x.Statefp }).HasName("idx_tiger_featnames_tlid_statefp");
        }
    }

    // geocode_settings
    public class tiger_GeocodeSettingConfiguration : IEntityTypeConfiguration<tiger_GeocodeSetting>
    {
        public void Configure(EntityTypeBuilder<tiger_GeocodeSetting> builder)
        {
            builder.ToTable("geocode_settings", "tiger");
            builder.HasKey(x => x.Name).HasName("geocode_settings_pkey");

            builder.Property(x => x.Name).HasColumnName(@"name").HasColumnType("text").IsRequired().IsUnicode(false).ValueGeneratedNever();
            builder.Property(x => x.Setting).HasColumnName(@"setting").HasColumnType("text").IsRequired(false).IsUnicode(false);
            builder.Property(x => x.Unit).HasColumnName(@"unit").HasColumnType("text").IsRequired(false).IsUnicode(false);
            builder.Property(x => x.Category).HasColumnName(@"category").HasColumnType("text").IsRequired(false).IsUnicode(false);
            builder.Property(x => x.ShortDesc).HasColumnName(@"short_desc").HasColumnType("text").IsRequired(false).IsUnicode(false);
        }
    }

    // geocode_settings_default
    public class tiger_GeocodeSettingsDefaultConfiguration : IEntityTypeConfiguration<tiger_GeocodeSettingsDefault>
    {
        public void Configure(EntityTypeBuilder<tiger_GeocodeSettingsDefault> builder)
        {
            builder.ToTable("geocode_settings_default", "tiger");
            builder.HasKey(x => x.Name).HasName("geocode_settings_default_pkey");

            builder.Property(x => x.Name).HasColumnName(@"name").HasColumnType("text").IsRequired().IsUnicode(false).ValueGeneratedNever();
            builder.Property(x => x.Setting).HasColumnName(@"setting").HasColumnType("text").IsRequired(false).IsUnicode(false);
            builder.Property(x => x.Unit).HasColumnName(@"unit").HasColumnType("text").IsRequired(false).IsUnicode(false);
            builder.Property(x => x.Category).HasColumnName(@"category").HasColumnType("text").IsRequired(false).IsUnicode(false);
            builder.Property(x => x.ShortDesc).HasColumnName(@"short_desc").HasColumnType("text").IsRequired(false).IsUnicode(false);
        }
    }

    // loader_lookuptables
    public class tiger_LoaderLookuptableConfiguration : IEntityTypeConfiguration<tiger_LoaderLookuptable>
    {
        public void Configure(EntityTypeBuilder<tiger_LoaderLookuptable> builder)
        {
            builder.ToTable("loader_lookuptables", "tiger");
            builder.HasKey(x => x.LookupName).HasName("loader_lookuptables_pkey");

            builder.Property(x => x.ProcessOrder).HasColumnName(@"process_order").HasColumnType("integer").IsRequired();
            builder.Property(x => x.LookupName).HasColumnName(@"lookup_name").HasColumnType("text").IsRequired().IsUnicode(false).ValueGeneratedNever();
            builder.Property(x => x.TableName).HasColumnName(@"table_name").HasColumnType("text").IsRequired(false).IsUnicode(false);
            builder.Property(x => x.SingleMode).HasColumnName(@"single_mode").HasColumnType("boolean").IsRequired();
            builder.Property(x => x.Load).HasColumnName(@"load").HasColumnType("boolean").IsRequired();
            builder.Property(x => x.LevelCounty).HasColumnName(@"level_county").HasColumnType("boolean").IsRequired();
            builder.Property(x => x.LevelState).HasColumnName(@"level_state").HasColumnType("boolean").IsRequired();
            builder.Property(x => x.LevelNation).HasColumnName(@"level_nation").HasColumnType("boolean").IsRequired();
            builder.Property(x => x.PostLoadProcess).HasColumnName(@"post_load_process").HasColumnType("text").IsRequired(false).IsUnicode(false);
            builder.Property(x => x.SingleGeomMode).HasColumnName(@"single_geom_mode").HasColumnType("boolean").IsRequired(false);
            builder.Property(x => x.InsertMode).HasColumnName(@"insert_mode").HasColumnType("character(1)").IsRequired().HasMaxLength(1);
            builder.Property(x => x.PreLoadProcess).HasColumnName(@"pre_load_process").HasColumnType("text").IsRequired(false).IsUnicode(false);
            builder.Property(x => x.ColumnsExclude).HasColumnName(@"columns_exclude").HasColumnType("array").IsRequired(false);
            builder.Property(x => x.WebsiteRootOverride).HasColumnName(@"website_root_override").HasColumnType("text").IsRequired(false).IsUnicode(false);
        }
    }

    // loader_platform
    public class tiger_LoaderPlatformConfiguration : IEntityTypeConfiguration<tiger_LoaderPlatform>
    {
        public void Configure(EntityTypeBuilder<tiger_LoaderPlatform> builder)
        {
            builder.ToTable("loader_platform", "tiger");
            builder.HasKey(x => x.Os).HasName("loader_platform_pkey");

            builder.Property(x => x.Os).HasColumnName(@"os").HasColumnType("character varying(50)").IsRequired().HasMaxLength(50).ValueGeneratedNever();
            builder.Property(x => x.DeclareSect).HasColumnName(@"declare_sect").HasColumnType("text").IsRequired(false).IsUnicode(false);
            builder.Property(x => x.Pgbin).HasColumnName(@"pgbin").HasColumnType("text").IsRequired(false).IsUnicode(false);
            builder.Property(x => x.Wget).HasColumnName(@"wget").HasColumnType("text").IsRequired(false).IsUnicode(false);
            builder.Property(x => x.UnzipCommand).HasColumnName(@"unzip_command").HasColumnType("text").IsRequired(false).IsUnicode(false);
            builder.Property(x => x.Psql).HasColumnName(@"psql").HasColumnType("text").IsRequired(false).IsUnicode(false);
            builder.Property(x => x.PathSep).HasColumnName(@"path_sep").HasColumnType("text").IsRequired(false).IsUnicode(false);
            builder.Property(x => x.Loader).HasColumnName(@"loader").HasColumnType("text").IsRequired(false).IsUnicode(false);
            builder.Property(x => x.EnvironSetCommand).HasColumnName(@"environ_set_command").HasColumnType("text").IsRequired(false).IsUnicode(false);
            builder.Property(x => x.CountyProcessCommand).HasColumnName(@"county_process_command").HasColumnType("text").IsRequired(false).IsUnicode(false);
        }
    }

    // loader_variables
    public class tiger_LoaderVariableConfiguration : IEntityTypeConfiguration<tiger_LoaderVariable>
    {
        public void Configure(EntityTypeBuilder<tiger_LoaderVariable> builder)
        {
            builder.ToTable("loader_variables", "tiger");
            builder.HasKey(x => x.TigerYear).HasName("loader_variables_pkey");

            builder.Property(x => x.TigerYear).HasColumnName(@"tiger_year").HasColumnType("character varying(4)").IsRequired().HasMaxLength(4).ValueGeneratedNever();
            builder.Property(x => x.WebsiteRoot).HasColumnName(@"website_root").HasColumnType("text").IsRequired(false).IsUnicode(false);
            builder.Property(x => x.StagingFold).HasColumnName(@"staging_fold").HasColumnType("text").IsRequired(false).IsUnicode(false);
            builder.Property(x => x.DataSchema).HasColumnName(@"data_schema").HasColumnType("text").IsRequired(false).IsUnicode(false);
            builder.Property(x => x.StagingSchema).HasColumnName(@"staging_schema").HasColumnType("text").IsRequired(false).IsUnicode(false);
        }
    }

    // pagc_gaz
    public class tiger_PagcGazConfiguration : IEntityTypeConfiguration<tiger_PagcGaz>
    {
        public void Configure(EntityTypeBuilder<tiger_PagcGaz> builder)
        {
            builder.ToTable("pagc_gaz", "tiger");
            builder.HasKey(x => x.Id).HasName("pagc_gaz_pkey");

            builder.Property(x => x.Id).HasColumnName(@"id").HasColumnType("integer").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.Seq).HasColumnName(@"seq").HasColumnType("integer").IsRequired(false);
            builder.Property(x => x.Word).HasColumnName(@"word").HasColumnType("text").IsRequired(false).IsUnicode(false);
            builder.Property(x => x.Stdword).HasColumnName(@"stdword").HasColumnType("text").IsRequired(false).IsUnicode(false);
            builder.Property(x => x.Token).HasColumnName(@"token").HasColumnType("integer").IsRequired(false);
            builder.Property(x => x.IsCustom).HasColumnName(@"is_custom").HasColumnType("boolean").IsRequired();
        }
    }

    // pagc_lex
    public class tiger_PagcLexConfiguration : IEntityTypeConfiguration<tiger_PagcLex>
    {
        public void Configure(EntityTypeBuilder<tiger_PagcLex> builder)
        {
            builder.ToTable("pagc_lex", "tiger");
            builder.HasKey(x => x.Id).HasName("pagc_lex_pkey");

            builder.Property(x => x.Id).HasColumnName(@"id").HasColumnType("integer").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.Seq).HasColumnName(@"seq").HasColumnType("integer").IsRequired(false);
            builder.Property(x => x.Word).HasColumnName(@"word").HasColumnType("text").IsRequired(false).IsUnicode(false);
            builder.Property(x => x.Stdword).HasColumnName(@"stdword").HasColumnType("text").IsRequired(false).IsUnicode(false);
            builder.Property(x => x.Token).HasColumnName(@"token").HasColumnType("integer").IsRequired(false);
            builder.Property(x => x.IsCustom).HasColumnName(@"is_custom").HasColumnType("boolean").IsRequired();
        }
    }

    // pagc_rules
    public class tiger_PagcRuleConfiguration : IEntityTypeConfiguration<tiger_PagcRule>
    {
        public void Configure(EntityTypeBuilder<tiger_PagcRule> builder)
        {
            builder.ToTable("pagc_rules", "tiger");
            builder.HasKey(x => x.Id).HasName("pagc_rules_pkey");

            builder.Property(x => x.Id).HasColumnName(@"id").HasColumnType("integer").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.Rule).HasColumnName(@"rule").HasColumnType("text").IsRequired(false).IsUnicode(false);
            builder.Property(x => x.IsCustom).HasColumnName(@"is_custom").HasColumnType("boolean").IsRequired(false);
        }
    }

    // place
    public class tiger_PlaceConfiguration : IEntityTypeConfiguration<tiger_Place>
    {
        public void Configure(EntityTypeBuilder<tiger_Place> builder)
        {
            builder.ToTable("place", "tiger");
            builder.HasKey(x => x.Plcidfp).HasName("place_pkey");

            builder.Property(x => x.Gid).HasColumnName(@"gid").HasColumnType("integer").IsRequired();
            builder.Property(x => x.Statefp).HasColumnName(@"statefp").HasColumnType("character varying(2)").IsRequired(false).HasMaxLength(2);
            builder.Property(x => x.Placefp).HasColumnName(@"placefp").HasColumnType("character varying(5)").IsRequired(false).HasMaxLength(5);
            builder.Property(x => x.Placens).HasColumnName(@"placens").HasColumnType("character varying(8)").IsRequired(false).HasMaxLength(8);
            builder.Property(x => x.Plcidfp).HasColumnName(@"plcidfp").HasColumnType("character varying(7)").IsRequired().HasMaxLength(7).ValueGeneratedNever();
            builder.Property(x => x.Name).HasColumnName(@"name").HasColumnType("character varying(100)").IsRequired(false).HasMaxLength(100);
            builder.Property(x => x.Namelsad).HasColumnName(@"namelsad").HasColumnType("character varying(100)").IsRequired(false).HasMaxLength(100);
            builder.Property(x => x.Lsad).HasColumnName(@"lsad").HasColumnType("character varying(2)").IsRequired(false).HasMaxLength(2);
            builder.Property(x => x.Classfp).HasColumnName(@"classfp").HasColumnType("character varying(2)").IsRequired(false).HasMaxLength(2);
            builder.Property(x => x.Cpi).HasColumnName(@"cpi").HasColumnType("character varying(1)").IsRequired(false).HasMaxLength(1);
            builder.Property(x => x.Pcicbsa).HasColumnName(@"pcicbsa").HasColumnType("character varying(1)").IsRequired(false).HasMaxLength(1);
            builder.Property(x => x.Pcinecta).HasColumnName(@"pcinecta").HasColumnType("character varying(1)").IsRequired(false).HasMaxLength(1);
            builder.Property(x => x.Mtfcc).HasColumnName(@"mtfcc").HasColumnType("character varying(5)").IsRequired(false).HasMaxLength(5);
            builder.Property(x => x.Funcstat).HasColumnName(@"funcstat").HasColumnType("character varying(1)").IsRequired(false).HasMaxLength(1);
            builder.Property(x => x.Aland).HasColumnName(@"aland").HasColumnType("bigint").IsRequired(false);
            builder.Property(x => x.Awater).HasColumnName(@"awater").HasColumnType("bigint").IsRequired(false);
            builder.Property(x => x.Intptlat).HasColumnName(@"intptlat").HasColumnType("character varying(11)").IsRequired(false).HasMaxLength(11);
            builder.Property(x => x.Intptlon).HasColumnName(@"intptlon").HasColumnType("character varying(12)").IsRequired(false).HasMaxLength(12);
            builder.Property(x => x.TheGeom).HasColumnName(@"the_geom").IsRequired(false); // .HasColumnType("user-defined") was excluded

            builder.HasIndex(x => x.TheGeom).HasName("tiger_place_the_geom_gist");
            builder.HasIndex(x => x.Gid).HasName("uidx_tiger_place_gid").IsUnique();
        }
    }

    // place_lookup
    public class tiger_PlaceLookupConfiguration : IEntityTypeConfiguration<tiger_PlaceLookup>
    {
        public void Configure(EntityTypeBuilder<tiger_PlaceLookup> builder)
        {
            builder.ToTable("place_lookup", "tiger");
            builder.HasKey(x => new { x.StCode, x.PlCode }).HasName("place_lookup_pkey");

            builder.Property(x => x.StCode).HasColumnName(@"st_code").HasColumnType("integer").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.State).HasColumnName(@"state").HasColumnType("character varying(2)").IsRequired(false).HasMaxLength(2);
            builder.Property(x => x.PlCode).HasColumnName(@"pl_code").HasColumnType("integer").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.Name).HasColumnName(@"name").HasColumnType("character varying(90)").IsRequired(false).HasMaxLength(90);

            builder.HasIndex(x => x.State).HasName("place_lookup_state_idx");
        }
    }

    // secondary_unit_lookup
    public class tiger_SecondaryUnitLookupConfiguration : IEntityTypeConfiguration<tiger_SecondaryUnitLookup>
    {
        public void Configure(EntityTypeBuilder<tiger_SecondaryUnitLookup> builder)
        {
            builder.ToTable("secondary_unit_lookup", "tiger");
            builder.HasKey(x => x.Name).HasName("secondary_unit_lookup_pkey");

            builder.Property(x => x.Name).HasColumnName(@"name").HasColumnType("character varying(20)").IsRequired().HasMaxLength(20).ValueGeneratedNever();
            builder.Property(x => x.Abbrev).HasColumnName(@"abbrev").HasColumnType("character varying(5)").IsRequired(false).HasMaxLength(5);

            builder.HasIndex(x => x.Abbrev).HasName("secondary_unit_lookup_abbrev_idx");
        }
    }

    // state
    public class tiger_StateConfiguration : IEntityTypeConfiguration<tiger_State>
    {
        public void Configure(EntityTypeBuilder<tiger_State> builder)
        {
            builder.ToTable("state", "tiger");
            builder.HasKey(x => x.Statefp).HasName("pk_tiger_state");

            builder.Property(x => x.Gid).HasColumnName(@"gid").HasColumnType("integer").IsRequired();
            builder.Property(x => x.Region).HasColumnName(@"region").HasColumnType("character varying(2)").IsRequired(false).HasMaxLength(2);
            builder.Property(x => x.Division).HasColumnName(@"division").HasColumnType("character varying(2)").IsRequired(false).HasMaxLength(2);
            builder.Property(x => x.Statefp).HasColumnName(@"statefp").HasColumnType("character varying(2)").IsRequired().HasMaxLength(2).ValueGeneratedNever();
            builder.Property(x => x.Statens).HasColumnName(@"statens").HasColumnType("character varying(8)").IsRequired(false).HasMaxLength(8);
            builder.Property(x => x.Stusps).HasColumnName(@"stusps").HasColumnType("character varying(2)").IsRequired().HasMaxLength(2);
            builder.Property(x => x.Name).HasColumnName(@"name").HasColumnType("character varying(100)").IsRequired(false).HasMaxLength(100);
            builder.Property(x => x.Lsad).HasColumnName(@"lsad").HasColumnType("character varying(2)").IsRequired(false).HasMaxLength(2);
            builder.Property(x => x.Mtfcc).HasColumnName(@"mtfcc").HasColumnType("character varying(5)").IsRequired(false).HasMaxLength(5);
            builder.Property(x => x.Funcstat).HasColumnName(@"funcstat").HasColumnType("character varying(1)").IsRequired(false).HasMaxLength(1);
            builder.Property(x => x.Aland).HasColumnName(@"aland").HasColumnType("bigint").IsRequired(false);
            builder.Property(x => x.Awater).HasColumnName(@"awater").HasColumnType("bigint").IsRequired(false);
            builder.Property(x => x.Intptlat).HasColumnName(@"intptlat").HasColumnType("character varying(11)").IsRequired(false).HasMaxLength(11);
            builder.Property(x => x.Intptlon).HasColumnName(@"intptlon").HasColumnType("character varying(12)").IsRequired(false).HasMaxLength(12);
            builder.Property(x => x.TheGeom).HasColumnName(@"the_geom").IsRequired(false); // .HasColumnType("user-defined") was excluded

            builder.HasIndex(x => x.TheGeom).HasName("idx_tiger_state_the_geom_gist");
            builder.HasIndex(x => x.Gid).HasName("uidx_tiger_state_gid").IsUnique();
            builder.HasIndex(x => x.Stusps).HasName("uidx_tiger_state_stusps").IsUnique();
        }
    }

    // state_lookup
    public class tiger_StateLookupConfiguration : IEntityTypeConfiguration<tiger_StateLookup>
    {
        public void Configure(EntityTypeBuilder<tiger_StateLookup> builder)
        {
            builder.ToTable("state_lookup", "tiger");
            builder.HasKey(x => x.StCode).HasName("state_lookup_pkey");

            builder.Property(x => x.StCode).HasColumnName(@"st_code").HasColumnType("integer").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.Name).HasColumnName(@"name").HasColumnType("character varying(40)").IsRequired(false).HasMaxLength(40);
            builder.Property(x => x.Abbrev).HasColumnName(@"abbrev").HasColumnType("character varying(3)").IsRequired(false).HasMaxLength(3);
            builder.Property(x => x.Statefp).HasColumnName(@"statefp").HasColumnType("character(2)").IsRequired(false).HasMaxLength(2);

            builder.HasIndex(x => x.Abbrev).HasName("state_lookup_abbrev_key").IsUnique();
            builder.HasIndex(x => x.Name).HasName("state_lookup_name_key").IsUnique();
            builder.HasIndex(x => x.Statefp).HasName("state_lookup_statefp_key").IsUnique();
        }
    }

    // street_type_lookup
    public class tiger_StreetTypeLookupConfiguration : IEntityTypeConfiguration<tiger_StreetTypeLookup>
    {
        public void Configure(EntityTypeBuilder<tiger_StreetTypeLookup> builder)
        {
            builder.ToTable("street_type_lookup", "tiger");
            builder.HasKey(x => x.Name).HasName("street_type_lookup_pkey");

            builder.Property(x => x.Name).HasColumnName(@"name").HasColumnType("character varying(50)").IsRequired().HasMaxLength(50).ValueGeneratedNever();
            builder.Property(x => x.Abbrev).HasColumnName(@"abbrev").HasColumnType("character varying(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.IsHw).HasColumnName(@"is_hw").HasColumnType("boolean").IsRequired();

            builder.HasIndex(x => x.Abbrev).HasName("street_type_lookup_abbrev_idx");
        }
    }

    // tabblock
    public class tiger_TabblockConfiguration : IEntityTypeConfiguration<tiger_Tabblock>
    {
        public void Configure(EntityTypeBuilder<tiger_Tabblock> builder)
        {
            builder.ToTable("tabblock", "tiger");
            builder.HasKey(x => x.TabblockId).HasName("tabblock_pkey");

            builder.Property(x => x.Gid).HasColumnName(@"gid").HasColumnType("integer").IsRequired();
            builder.Property(x => x.Statefp).HasColumnName(@"statefp").HasColumnType("character varying(2)").IsRequired(false).HasMaxLength(2);
            builder.Property(x => x.Countyfp).HasColumnName(@"countyfp").HasColumnType("character varying(3)").IsRequired(false).HasMaxLength(3);
            builder.Property(x => x.Tractce).HasColumnName(@"tractce").HasColumnType("character varying(6)").IsRequired(false).HasMaxLength(6);
            builder.Property(x => x.Blockce).HasColumnName(@"blockce").HasColumnType("character varying(4)").IsRequired(false).HasMaxLength(4);
            builder.Property(x => x.TabblockId).HasColumnName(@"tabblock_id").HasColumnType("character varying(16)").IsRequired().HasMaxLength(16).ValueGeneratedNever();
            builder.Property(x => x.Name).HasColumnName(@"name").HasColumnType("character varying(20)").IsRequired(false).HasMaxLength(20);
            builder.Property(x => x.Mtfcc).HasColumnName(@"mtfcc").HasColumnType("character varying(5)").IsRequired(false).HasMaxLength(5);
            builder.Property(x => x.Ur).HasColumnName(@"ur").HasColumnType("character varying(1)").IsRequired(false).HasMaxLength(1);
            builder.Property(x => x.Uace).HasColumnName(@"uace").HasColumnType("character varying(5)").IsRequired(false).HasMaxLength(5);
            builder.Property(x => x.Funcstat).HasColumnName(@"funcstat").HasColumnType("character varying(1)").IsRequired(false).HasMaxLength(1);
            builder.Property(x => x.Aland).HasColumnName(@"aland").HasColumnType("double precision").IsRequired(false);
            builder.Property(x => x.Awater).HasColumnName(@"awater").HasColumnType("double precision").IsRequired(false);
            builder.Property(x => x.Intptlat).HasColumnName(@"intptlat").HasColumnType("character varying(11)").IsRequired(false).HasMaxLength(11);
            builder.Property(x => x.Intptlon).HasColumnName(@"intptlon").HasColumnType("character varying(12)").IsRequired(false).HasMaxLength(12);
            builder.Property(x => x.TheGeom).HasColumnName(@"the_geom").IsRequired(false); // .HasColumnType("user-defined") was excluded
        }
    }

    // tabblock20
    public class tiger_Tabblock20Configuration : IEntityTypeConfiguration<tiger_Tabblock20>
    {
        public void Configure(EntityTypeBuilder<tiger_Tabblock20> builder)
        {
            builder.ToTable("tabblock20", "tiger");
            builder.HasKey(x => x.Geoid).HasName("pk_tabblock20");

            builder.Property(x => x.Statefp).HasColumnName(@"statefp").HasColumnType("character varying(2)").IsRequired(false).HasMaxLength(2);
            builder.Property(x => x.Countyfp).HasColumnName(@"countyfp").HasColumnType("character varying(3)").IsRequired(false).HasMaxLength(3);
            builder.Property(x => x.Tractce).HasColumnName(@"tractce").HasColumnType("character varying(6)").IsRequired(false).HasMaxLength(6);
            builder.Property(x => x.Blockce).HasColumnName(@"blockce").HasColumnType("character varying(4)").IsRequired(false).HasMaxLength(4);
            builder.Property(x => x.Geoid).HasColumnName(@"geoid").HasColumnType("character varying(15)").IsRequired().HasMaxLength(15).ValueGeneratedNever();
            builder.Property(x => x.Name).HasColumnName(@"name").HasColumnType("character varying(10)").IsRequired(false).HasMaxLength(10);
            builder.Property(x => x.Mtfcc).HasColumnName(@"mtfcc").HasColumnType("character varying(5)").IsRequired(false).HasMaxLength(5);
            builder.Property(x => x.Ur).HasColumnName(@"ur").HasColumnType("character varying(1)").IsRequired(false).HasMaxLength(1);
            builder.Property(x => x.Uace).HasColumnName(@"uace").HasColumnType("character varying(5)").IsRequired(false).HasMaxLength(5);
            builder.Property(x => x.Uatype).HasColumnName(@"uatype").HasColumnType("character varying(1)").IsRequired(false).HasMaxLength(1);
            builder.Property(x => x.Funcstat).HasColumnName(@"funcstat").HasColumnType("character varying(1)").IsRequired(false).HasMaxLength(1);
            builder.Property(x => x.Aland).HasColumnName(@"aland").HasColumnType("double precision").IsRequired(false);
            builder.Property(x => x.Awater).HasColumnName(@"awater").HasColumnType("double precision").IsRequired(false);
            builder.Property(x => x.Intptlat).HasColumnName(@"intptlat").HasColumnType("character varying(11)").IsRequired(false).HasMaxLength(11);
            builder.Property(x => x.Intptlon).HasColumnName(@"intptlon").HasColumnType("character varying(12)").IsRequired(false).HasMaxLength(12);
            builder.Property(x => x.TheGeom).HasColumnName(@"the_geom").IsRequired(false); // .HasColumnType("user-defined") was excluded
        }
    }

    // tract
    public class tiger_TractConfiguration : IEntityTypeConfiguration<tiger_Tract>
    {
        public void Configure(EntityTypeBuilder<tiger_Tract> builder)
        {
            builder.ToTable("tract", "tiger");
            builder.HasKey(x => x.TractId).HasName("tract_pkey");

            builder.Property(x => x.Gid).HasColumnName(@"gid").HasColumnType("integer").IsRequired();
            builder.Property(x => x.Statefp).HasColumnName(@"statefp").HasColumnType("character varying(2)").IsRequired(false).HasMaxLength(2);
            builder.Property(x => x.Countyfp).HasColumnName(@"countyfp").HasColumnType("character varying(3)").IsRequired(false).HasMaxLength(3);
            builder.Property(x => x.Tractce).HasColumnName(@"tractce").HasColumnType("character varying(6)").IsRequired(false).HasMaxLength(6);
            builder.Property(x => x.TractId).HasColumnName(@"tract_id").HasColumnType("character varying(11)").IsRequired().HasMaxLength(11).ValueGeneratedNever();
            builder.Property(x => x.Name).HasColumnName(@"name").HasColumnType("character varying(7)").IsRequired(false).HasMaxLength(7);
            builder.Property(x => x.Namelsad).HasColumnName(@"namelsad").HasColumnType("character varying(20)").IsRequired(false).HasMaxLength(20);
            builder.Property(x => x.Mtfcc).HasColumnName(@"mtfcc").HasColumnType("character varying(5)").IsRequired(false).HasMaxLength(5);
            builder.Property(x => x.Funcstat).HasColumnName(@"funcstat").HasColumnType("character varying(1)").IsRequired(false).HasMaxLength(1);
            builder.Property(x => x.Aland).HasColumnName(@"aland").HasColumnType("double precision").IsRequired(false);
            builder.Property(x => x.Awater).HasColumnName(@"awater").HasColumnType("double precision").IsRequired(false);
            builder.Property(x => x.Intptlat).HasColumnName(@"intptlat").HasColumnType("character varying(11)").IsRequired(false).HasMaxLength(11);
            builder.Property(x => x.Intptlon).HasColumnName(@"intptlon").HasColumnType("character varying(12)").IsRequired(false).HasMaxLength(12);
            builder.Property(x => x.TheGeom).HasColumnName(@"the_geom").IsRequired(false); // .HasColumnType("user-defined") was excluded
        }
    }

    // zcta5
    public class tiger_Zcta5Configuration : IEntityTypeConfiguration<tiger_Zcta5>
    {
        public void Configure(EntityTypeBuilder<tiger_Zcta5> builder)
        {
            builder.ToTable("zcta5", "tiger");
            builder.HasKey(x => new { x.Zcta5Ce, x.Statefp }).HasName("pk_tiger_zcta5_zcta5ce");

            builder.Property(x => x.Gid).HasColumnName(@"gid").HasColumnType("integer").IsRequired();
            builder.Property(x => x.Statefp).HasColumnName(@"statefp").HasColumnType("character varying(2)").IsRequired().HasMaxLength(2).ValueGeneratedNever();
            builder.Property(x => x.Zcta5Ce).HasColumnName(@"zcta5ce").HasColumnType("character varying(5)").IsRequired().HasMaxLength(5).ValueGeneratedNever();
            builder.Property(x => x.Classfp).HasColumnName(@"classfp").HasColumnType("character varying(2)").IsRequired(false).HasMaxLength(2);
            builder.Property(x => x.Mtfcc).HasColumnName(@"mtfcc").HasColumnType("character varying(5)").IsRequired(false).HasMaxLength(5);
            builder.Property(x => x.Funcstat).HasColumnName(@"funcstat").HasColumnType("character varying(1)").IsRequired(false).HasMaxLength(1);
            builder.Property(x => x.Aland).HasColumnName(@"aland").HasColumnType("double precision").IsRequired(false);
            builder.Property(x => x.Awater).HasColumnName(@"awater").HasColumnType("double precision").IsRequired(false);
            builder.Property(x => x.Intptlat).HasColumnName(@"intptlat").HasColumnType("character varying(11)").IsRequired(false).HasMaxLength(11);
            builder.Property(x => x.Intptlon).HasColumnName(@"intptlon").HasColumnType("character varying(12)").IsRequired(false).HasMaxLength(12);
            builder.Property(x => x.Partflg).HasColumnName(@"partflg").HasColumnType("character varying(1)").IsRequired(false).HasMaxLength(1);
            builder.Property(x => x.TheGeom).HasColumnName(@"the_geom").IsRequired(false); // .HasColumnType("user-defined") was excluded

            builder.HasIndex(x => x.Gid).HasName("uidx_tiger_zcta5_gid").IsUnique();
        }
    }

    // zip_lookup
    public class tiger_ZipLookupConfiguration : IEntityTypeConfiguration<tiger_ZipLookup>
    {
        public void Configure(EntityTypeBuilder<tiger_ZipLookup> builder)
        {
            builder.ToTable("zip_lookup", "tiger");
            builder.HasKey(x => x.Zip).HasName("zip_lookup_pkey");

            builder.Property(x => x.Zip).HasColumnName(@"zip").HasColumnType("integer").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.StCode).HasColumnName(@"st_code").HasColumnType("integer").IsRequired(false);
            builder.Property(x => x.State).HasColumnName(@"state").HasColumnType("character varying(2)").IsRequired(false).HasMaxLength(2);
            builder.Property(x => x.CoCode).HasColumnName(@"co_code").HasColumnType("integer").IsRequired(false);
            builder.Property(x => x.County).HasColumnName(@"county").HasColumnType("character varying(90)").IsRequired(false).HasMaxLength(90);
            builder.Property(x => x.CsCode).HasColumnName(@"cs_code").HasColumnType("integer").IsRequired(false);
            builder.Property(x => x.Cousub).HasColumnName(@"cousub").HasColumnType("character varying(90)").IsRequired(false).HasMaxLength(90);
            builder.Property(x => x.PlCode).HasColumnName(@"pl_code").HasColumnType("integer").IsRequired(false);
            builder.Property(x => x.Place).HasColumnName(@"place").HasColumnType("character varying(90)").IsRequired(false).HasMaxLength(90);
            builder.Property(x => x.Cnt).HasColumnName(@"cnt").HasColumnType("integer").IsRequired(false);
        }
    }

    // zip_lookup_base
    public class tiger_ZipLookupBaseConfiguration : IEntityTypeConfiguration<tiger_ZipLookupBase>
    {
        public void Configure(EntityTypeBuilder<tiger_ZipLookupBase> builder)
        {
            builder.ToTable("zip_lookup_base", "tiger");
            builder.HasKey(x => x.Zip).HasName("zip_lookup_base_pkey");

            builder.Property(x => x.Zip).HasColumnName(@"zip").HasColumnType("character varying(5)").IsRequired().HasMaxLength(5).ValueGeneratedNever();
            builder.Property(x => x.State).HasColumnName(@"state").HasColumnType("character varying(40)").IsRequired(false).HasMaxLength(40);
            builder.Property(x => x.County).HasColumnName(@"county").HasColumnType("character varying(90)").IsRequired(false).HasMaxLength(90);
            builder.Property(x => x.City).HasColumnName(@"city").HasColumnType("character varying(90)").IsRequired(false).HasMaxLength(90);
            builder.Property(x => x.Statefp).HasColumnName(@"statefp").HasColumnType("character varying(2)").IsRequired(false).HasMaxLength(2);
        }
    }

    // zip_state
    public class tiger_ZipStateConfiguration : IEntityTypeConfiguration<tiger_ZipState>
    {
        public void Configure(EntityTypeBuilder<tiger_ZipState> builder)
        {
            builder.ToTable("zip_state", "tiger");
            builder.HasKey(x => new { x.Zip, x.Stusps }).HasName("zip_state_pkey");

            builder.Property(x => x.Zip).HasColumnName(@"zip").HasColumnType("character varying(5)").IsRequired().HasMaxLength(5).ValueGeneratedNever();
            builder.Property(x => x.Stusps).HasColumnName(@"stusps").HasColumnType("character varying(2)").IsRequired().HasMaxLength(2).ValueGeneratedNever();
            builder.Property(x => x.Statefp).HasColumnName(@"statefp").HasColumnType("character varying(2)").IsRequired(false).HasMaxLength(2);
        }
    }

    // zip_state_loc
    public class tiger_ZipStateLocConfiguration : IEntityTypeConfiguration<tiger_ZipStateLoc>
    {
        public void Configure(EntityTypeBuilder<tiger_ZipStateLoc> builder)
        {
            builder.ToTable("zip_state_loc", "tiger");
            builder.HasKey(x => new { x.Zip, x.Stusps, x.Place }).HasName("zip_state_loc_pkey");

            builder.Property(x => x.Zip).HasColumnName(@"zip").HasColumnType("character varying(5)").IsRequired().HasMaxLength(5).ValueGeneratedNever();
            builder.Property(x => x.Stusps).HasColumnName(@"stusps").HasColumnType("character varying(2)").IsRequired().HasMaxLength(2).ValueGeneratedNever();
            builder.Property(x => x.Statefp).HasColumnName(@"statefp").HasColumnType("character varying(2)").IsRequired(false).HasMaxLength(2);
            builder.Property(x => x.Place).HasColumnName(@"place").HasColumnType("character varying(100)").IsRequired().HasMaxLength(100).ValueGeneratedNever();
        }
    }

    // layer
    public class topology_LayerConfiguration : IEntityTypeConfiguration<topology_Layer>
    {
        public void Configure(EntityTypeBuilder<topology_Layer> builder)
        {
            builder.ToTable("layer", "topology");
            builder.HasKey(x => new { x.TopologyId, x.LayerId }).HasName("layer_pkey");

            builder.Property(x => x.TopologyId).HasColumnName(@"topology_id").HasColumnType("integer").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.LayerId).HasColumnName(@"layer_id").HasColumnType("integer").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.SchemaName).HasColumnName(@"schema_name").HasColumnType("character varying").IsRequired();
            builder.Property(x => x.TableName).HasColumnName(@"table_name").HasColumnType("character varying").IsRequired();
            builder.Property(x => x.FeatureColumn).HasColumnName(@"feature_column").HasColumnType("character varying").IsRequired();
            builder.Property(x => x.FeatureType).HasColumnName(@"feature_type").HasColumnType("integer").IsRequired();
            builder.Property(x => x.Level).HasColumnName(@"level").HasColumnType("integer").IsRequired();
            builder.Property(x => x.ChildId).HasColumnName(@"child_id").HasColumnType("integer").IsRequired(false);

            // Foreign keys
            builder.HasOne(a => a.topology_Topology).WithMany(b => b.topology_Layers).HasForeignKey(c => c.TopologyId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("layer_topology_id_fkey");

            builder.HasIndex(x => new { x.SchemaName, x.TableName, x.FeatureColumn }).HasName("layer_schema_name_table_name_feature_column_key").IsUnique();
        }
    }

    // topology
    public class topology_TopologyConfiguration : IEntityTypeConfiguration<topology_Topology>
    {
        public void Configure(EntityTypeBuilder<topology_Topology> builder)
        {
            builder.ToTable("topology", "topology");
            builder.HasKey(x => x.Id).HasName("topology_pkey");

            builder.Property(x => x.Id).HasColumnName(@"id").HasColumnType("integer").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.Name).HasColumnName(@"name").HasColumnType("character varying").IsRequired();
            builder.Property(x => x.Srid).HasColumnName(@"srid").HasColumnType("integer").IsRequired();
            builder.Property(x => x.Precision).HasColumnName(@"precision").HasColumnType("double precision").IsRequired();
            builder.Property(x => x.Hasz).HasColumnName(@"hasz").HasColumnType("boolean").IsRequired();

            builder.HasIndex(x => x.Name).HasName("topology_name_key").IsUnique();
        }
    }


    #endregion

}
// </auto-generated>
