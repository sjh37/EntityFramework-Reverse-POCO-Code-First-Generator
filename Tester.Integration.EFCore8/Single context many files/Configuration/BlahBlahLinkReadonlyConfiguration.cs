// <auto-generated>

using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;

namespace Tester.Integration.EFCore8.Single_context_many_files
{
    // BlahBlahLink_readonly
    public class BlahBlahLinkReadonlyConfiguration : IEntityTypeConfiguration<BlahBlahLinkReadonly>
    {
        public void Configure(EntityTypeBuilder<BlahBlahLinkReadonly> builder)
        {
            builder.ToTable("BlahBlahLink_readonly", "dbo");
            builder.HasKey(x => new { x.BlahId, x.BlahId2 }).HasName("PK_BlahBlahLink_ro").IsClustered();

            builder.Property(x => x.BlahId).HasColumnName(@"BlahID").HasColumnType("int").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.BlahId2).HasColumnName(@"BlahID2").HasColumnType("int").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.RowVersion).HasColumnName(@"RowVersion").HasColumnType("timestamp(8)").IsRequired(false).IsFixedLength().HasMaxLength(8).IsRowVersion().IsConcurrencyToken();
            builder.Property(x => x.Id).HasColumnName(@"id").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.Id2).HasColumnName(@"id2").HasColumnType("int").IsRequired(false).ValueGeneratedOnAddOrUpdate();

            // Foreign keys
            builder.HasOne(a => a.Blah_BlahId).WithMany(b => b.BlahBlahLinkReadonlies_BlahId).HasForeignKey(c => c.BlahId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_BlahBlahLink_Blah_ro");
            builder.HasOne(a => a.Blah_BlahId2).WithMany(b => b.BlahBlahLinkReadonlies_BlahId2).HasForeignKey(c => c.BlahId2).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_BlahBlahLink_Blah_ro2");
        }
    }

}
// </auto-generated>
