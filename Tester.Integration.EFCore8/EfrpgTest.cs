
// -----------------------------------------------------------------------------------------
// Failed to read database schema in LoadTables() - Object reference not set to an instance of an object.
/*   at Microsoft.VisualStudio.TextTemplating03012101DA88F922FA21DA7684731CE62F241880D039A13160E18BA02FEA229620DD75E490F466046073D8314832E72E512D8B12D0E83974757C2C01F0EB38D4.GeneratedTextTransformation.Generator.AddTablesToFilters(List`1 rawTables) in C:\S\Source (open source)\EntityFramework-Reverse-POCO-Code-First-Generator\Tester.Integration.EFCore8\..\EntityFramework.Reverse.POCO.Generator\EF.Reverse.POCO.v3.ttinclude:line 4609
   at Microsoft.VisualStudio.TextTemplating03012101DA88F922FA21DA7684731CE62F241880D039A13160E18BA02FEA229620DD75E490F466046073D8314832E72E512D8B12D0E83974757C2C01F0EB38D4.GeneratedTextTransformation.Generator.LoadTables() in C:\S\Source (open source)\EntityFramework-Reverse-POCO-Code-First-Generator\Tester.Integration.EFCore8\..\EntityFramework.Reverse.POCO.Generator\EF.Reverse.POCO.v3.ttinclude:line 4487*/
// -----------------------------------------------------------------------------------------

// <auto-generated>

using Microsoft.Data.SqlClient;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.ChangeTracking;
using Microsoft.EntityFrameworkCore.Design;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Metadata.Builders;
using Microsoft.EntityFrameworkCore.Query;
using Microsoft.EntityFrameworkCore.Query.Internal;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Data;
using System.Data.SqlTypes;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;
using System.Threading;
using System.Threading.Tasks;

namespace V8EfrpgTest
{
    #region Database context interface

    public interface IV8EfrpgTestDbContext : IDisposable
    {
        DbSet<AllColumnsNull> AllColumnsNulls { get; set; } // AllColumnsNull
        DbSet<ComplexView> ComplexViews { get; set; } // ComplexView
        DbSet<SmallDecimalTestView> SmallDecimalTestViews { get; set; } // SmallDecimalTestView

        int SaveChanges();
        int SaveChanges(bool acceptAllChangesOnSuccess);
        Task<int> SaveChangesAsync(CancellationToken cancellationToken = default(CancellationToken));
        Task<int> SaveChangesAsync(bool acceptAllChangesOnSuccess, CancellationToken cancellationToken = default(CancellationToken));
        DatabaseFacade Database { get; }
        DbSet<TEntity> Set<TEntity>() where TEntity : class;
        string ToString();

        EntityEntry Add(object entity);
        EntityEntry<TEntity> Add<TEntity>(TEntity entity) where TEntity : class;
        Task AddRangeAsync(params object[] entities);
        Task AddRangeAsync(IEnumerable<object> entities, CancellationToken cancellationToken = default);
        ValueTask<EntityEntry<TEntity>> AddAsync<TEntity>(TEntity entity, CancellationToken cancellationToken = default) where TEntity : class;
        ValueTask<EntityEntry> AddAsync(object entity, CancellationToken cancellationToken = default);
        void AddRange(IEnumerable<object> entities);
        void AddRange(params object[] entities);

        EntityEntry Attach(object entity);
        EntityEntry<TEntity> Attach<TEntity>(TEntity entity) where TEntity : class;
        void AttachRange(IEnumerable<object> entities);
        void AttachRange(params object[] entities);

        EntityEntry Entry(object entity);
        EntityEntry<TEntity> Entry<TEntity>(TEntity entity) where TEntity : class;

        TEntity Find<TEntity>(params object[] keyValues) where TEntity : class;
        ValueTask<TEntity> FindAsync<TEntity>(object[] keyValues, CancellationToken cancellationToken) where TEntity : class;
        ValueTask<TEntity> FindAsync<TEntity>(params object[] keyValues) where TEntity : class;
        ValueTask<object> FindAsync(Type entityType, object[] keyValues, CancellationToken cancellationToken);
        ValueTask<object> FindAsync(Type entityType, params object[] keyValues);
        object Find(Type entityType, params object[] keyValues);

        EntityEntry Remove(object entity);
        EntityEntry<TEntity> Remove<TEntity>(TEntity entity) where TEntity : class;
        void RemoveRange(IEnumerable<object> entities);
        void RemoveRange(params object[] entities);

        EntityEntry Update(object entity);
        EntityEntry<TEntity> Update<TEntity>(TEntity entity) where TEntity : class;
        void UpdateRange(IEnumerable<object> entities);
        void UpdateRange(params object[] entities);

        IQueryable<TResult> FromExpression<TResult> (Expression<Func<IQueryable<TResult>>> expression);

        // Stored Procedures
        int AddTwoValues(int? a, int? b);
        Task<int> AddTwoValuesAsync(int? a, int? b, CancellationToken cancellationToken = default(CancellationToken));

        int AddTwoValuesWithResult(int? a, int? b, out int? result, out int? result2);
        // AddTwoValuesWithResultAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        int Alpha_Overclock(DateTime? parameter);
        Task<int> Alpha_OverclockAsync(DateTime? parameter, CancellationToken cancellationToken = default(CancellationToken));

        int App_UspCmtUserFsrUpdate(int? userId, int? fsrId, out int? ufsrId);
        // App_UspCmtUserFsrUpdateAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        List<ASimpleExampleReturnModel> ASimpleExample();
        List<ASimpleExampleReturnModel> ASimpleExample(out int procResult);
        Task<List<ASimpleExampleReturnModel>> ASimpleExampleAsync(CancellationToken cancellationToken = default(CancellationToken));

        int Beta_Overclock(DateTime? parameter);
        Task<int> Beta_OverclockAsync(DateTime? parameter, CancellationToken cancellationToken = default(CancellationToken));

        // C182Test2ReturnModel C182Test2(int? flag); Cannot be created as EF Core does not yet support stored procedures with multiple result sets.
        // Task<C182Test2ReturnModel> C182Test2Async(int? flag); Cannot be created as EF Core does not yet support stored procedures with multiple result sets.

        List<CheckIfApplicationIsCompleteReturnModel> CheckIfApplicationIsComplete(int? applicationId, out bool? isApplicationComplete);
        List<CheckIfApplicationIsCompleteReturnModel> CheckIfApplicationIsComplete(int? applicationId, out bool? isApplicationComplete, out int procResult);
        // CheckIfApplicationIsCompleteAsync() cannot be created due to having out parameters, or is relying on the procedure result (List<CheckIfApplicationIsCompleteReturnModel>)

        List<ColourPivotReturnModel> ColourPivot();
        List<ColourPivotReturnModel> ColourPivot(out int procResult);
        Task<List<ColourPivotReturnModel>> ColourPivotAsync(CancellationToken cancellationToken = default(CancellationToken));

        List<ColumnNameAndTypesProcReturnModel> ColumnNameAndTypesProc();
        List<ColumnNameAndTypesProcReturnModel> ColumnNameAndTypesProc(out int procResult);
        Task<List<ColumnNameAndTypesProcReturnModel>> ColumnNameAndTypesProcAsync(CancellationToken cancellationToken = default(CancellationToken));

        int ConvertToString(int? someValue, out string someString);
        // ConvertToStringAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        List<DboProcDataFromFfrsReturnModel> DboProcDataFromFfrs(int? maxId);
        List<DboProcDataFromFfrsReturnModel> DboProcDataFromFfrs(int? maxId, out int procResult);
        Task<List<DboProcDataFromFfrsReturnModel>> DboProcDataFromFfrsAsync(int? maxId, CancellationToken cancellationToken = default(CancellationToken));

        List<DboProcDataFromFfrsAndDboReturnModel> DboProcDataFromFfrsAndDbo();
        List<DboProcDataFromFfrsAndDboReturnModel> DboProcDataFromFfrsAndDbo(out int procResult);
        Task<List<DboProcDataFromFfrsAndDboReturnModel>> DboProcDataFromFfrsAndDboAsync(CancellationToken cancellationToken = default(CancellationToken));

        List<DsOpeProcReturnModel> DsOpeProc();
        List<DsOpeProcReturnModel> DsOpeProc(out int procResult);
        Task<List<DsOpeProcReturnModel>> DsOpeProcAsync(CancellationToken cancellationToken = default(CancellationToken));

        List<FFRS_CvDataReturnModel> FFRS_CvData(int? maxId);
        List<FFRS_CvDataReturnModel> FFRS_CvData(int? maxId, out int procResult);
        Task<List<FFRS_CvDataReturnModel>> FFRS_CvDataAsync(int? maxId, CancellationToken cancellationToken = default(CancellationToken));

        List<FFRS_DataFromDboReturnModel> FFRS_DataFromDbo();
        List<FFRS_DataFromDboReturnModel> FFRS_DataFromDbo(out int procResult);
        Task<List<FFRS_DataFromDboReturnModel>> FFRS_DataFromDboAsync(CancellationToken cancellationToken = default(CancellationToken));

        List<FFRS_DataFromDboAndFfrsReturnModel> FFRS_DataFromDboAndFfrs();
        List<FFRS_DataFromDboAndFfrsReturnModel> FFRS_DataFromDboAndFfrs(out int procResult);
        Task<List<FFRS_DataFromDboAndFfrsReturnModel>> FFRS_DataFromDboAndFfrsAsync(CancellationToken cancellationToken = default(CancellationToken));

        List<FkTest_HelloReturnModel> FkTest_Hello();
        List<FkTest_HelloReturnModel> FkTest_Hello(out int procResult);
        Task<List<FkTest_HelloReturnModel>> FkTest_HelloAsync(CancellationToken cancellationToken = default(CancellationToken));

        List<GetSmallDecimalTestReturnModel> GetSmallDecimalTest(int? maxId);
        List<GetSmallDecimalTestReturnModel> GetSmallDecimalTest(int? maxId, out int procResult);
        Task<List<GetSmallDecimalTestReturnModel>> GetSmallDecimalTestAsync(int? maxId, CancellationToken cancellationToken = default(CancellationToken));

        int InsertRecord(string data, out int? insertedId);
        // InsertRecordAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        int InsertRecordThree(string data, out int? insertedId, int? someId, out int? anotherInsertedId);
        // InsertRecordThreeAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        int InsertRecordTwo(string data, out int? insertedId, out int? anotherInsertedId);
        // InsertRecordTwoAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        int MinTripSequenceStart(out DateTime? minTripSequenceStartParam);
        // MinTripSequenceStartAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        int MinTripSequenceStartNull(out DateTime? minTripSequenceStartParam);
        // MinTripSequenceStartNullAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        int MultipleReturnColumnsFromTempTable();
        Task<int> MultipleReturnColumnsFromTempTableAsync(CancellationToken cancellationToken = default(CancellationToken));

        int NvarcharTest(string maxOutputParam, string normalOutputParam);
        Task<int> NvarcharTestAsync(string maxOutputParam, string normalOutputParam, CancellationToken cancellationToken = default(CancellationToken));

        int Omega_Overclock(DateTime? parameter);
        Task<int> Omega_OverclockAsync(DateTime? parameter, CancellationToken cancellationToken = default(CancellationToken));

        int ProcTestDecimalOutput(out decimal? perfectNumber);
        // ProcTestDecimalOutputAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        int ProcTestDecimalOutputV2(out decimal? perfectNumber);
        // ProcTestDecimalOutputV2Async() cannot be created due to having out parameters, or is relying on the procedure result (int)

        int ProcTestDecimalOutputV3Default(out decimal? perfectNumber);
        // ProcTestDecimalOutputV3DefaultAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        List<SpatialTypesNoParamsReturnModel> SpatialTypesNoParams();
        List<SpatialTypesNoParamsReturnModel> SpatialTypesNoParams(out int procResult);
        Task<List<SpatialTypesNoParamsReturnModel>> SpatialTypesNoParamsAsync(CancellationToken cancellationToken = default(CancellationToken));

        List<SpatialTypesWithParamsReturnModel> SpatialTypesWithParams(NetTopologySuite.Geometries.Geometry geometry, NetTopologySuite.Geometries.Point geography);
        List<SpatialTypesWithParamsReturnModel> SpatialTypesWithParams(NetTopologySuite.Geometries.Geometry geometry, NetTopologySuite.Geometries.Point geography, out int procResult);
        Task<List<SpatialTypesWithParamsReturnModel>> SpatialTypesWithParamsAsync(NetTopologySuite.Geometries.Geometry geometry, NetTopologySuite.Geometries.Point geography, CancellationToken cancellationToken = default(CancellationToken));

        List<StpMultipleIdenticalResultsReturnModel> StpMultipleIdenticalResults(int? someVar);
        List<StpMultipleIdenticalResultsReturnModel> StpMultipleIdenticalResults(int? someVar, out int procResult);
        Task<List<StpMultipleIdenticalResultsReturnModel>> StpMultipleIdenticalResultsAsync(int? someVar, CancellationToken cancellationToken = default(CancellationToken));

        // StpMultipleMultipleResultsWithParamsReturnModel StpMultipleMultipleResultsWithParams(int? firstVal, int? secondVal, int? thirdVal); Cannot be created as EF Core does not yet support stored procedures with multiple result sets.
        // Task<StpMultipleMultipleResultsWithParamsReturnModel> StpMultipleMultipleResultsWithParamsAsync(int? firstVal, int? secondVal, int? thirdVal); Cannot be created as EF Core does not yet support stored procedures with multiple result sets.

        // StpMultipleResultsReturnModel StpMultipleResults(); Cannot be created as EF Core does not yet support stored procedures with multiple result sets.
        // Task<StpMultipleResultsReturnModel> StpMultipleResultsAsync(); Cannot be created as EF Core does not yet support stored procedures with multiple result sets.

        // StpMultipleResultsWithParamsReturnModel StpMultipleResultsWithParams(int? firstVal, int? secondVal); Cannot be created as EF Core does not yet support stored procedures with multiple result sets.
        // Task<StpMultipleResultsWithParamsReturnModel> StpMultipleResultsWithParamsAsync(int? firstVal, int? secondVal); Cannot be created as EF Core does not yet support stored procedures with multiple result sets.

        List<StpNoParamsTestReturnModel> StpNoParamsTest();
        List<StpNoParamsTestReturnModel> StpNoParamsTest(out int procResult);
        Task<List<StpNoParamsTestReturnModel>> StpNoParamsTestAsync(CancellationToken cancellationToken = default(CancellationToken));

        int StpNoReturnFields();
        Task<int> StpNoReturnFieldsAsync(CancellationToken cancellationToken = default(CancellationToken));

        List<StpNullableParamsTestReturnModel> StpNullableParamsTest(int? aVal, int? bVal);
        List<StpNullableParamsTestReturnModel> StpNullableParamsTest(int? aVal, int? bVal, out int procResult);
        Task<List<StpNullableParamsTestReturnModel>> StpNullableParamsTestAsync(int? aVal, int? bVal, CancellationToken cancellationToken = default(CancellationToken));

        List<StpTestReturnModel> StpTest(string strDateFrom, string strDateTo, out bool? retBool);
        List<StpTestReturnModel> StpTest(string strDateFrom, string strDateTo, out bool? retBool, out int procResult);
        // StpTestAsync() cannot be created due to having out parameters, or is relying on the procedure result (List<StpTestReturnModel>)

        List<StpTestUnderscoreTestReturnModel> StpTestUnderscoreTest(string strDateFrom, string strDateTo);
        List<StpTestUnderscoreTestReturnModel> StpTestUnderscoreTest(string strDateFrom, string strDateTo, out int procResult);
        Task<List<StpTestUnderscoreTestReturnModel>> StpTestUnderscoreTestAsync(string strDateFrom, string strDateTo, CancellationToken cancellationToken = default(CancellationToken));

        int StupidStoredProcedureParams(string reqType, short? dept, short? @class, short? item);
        Task<int> StupidStoredProcedureParamsAsync(string reqType, short? dept, short? @class, short? item, CancellationToken cancellationToken = default(CancellationToken));

        int StupidStoredProcedureParams2(string @override, short? @readonly, short? @class, short? @enum);
        Task<int> StupidStoredProcedureParams2Async(string @override, short? @readonly, short? @class, short? @enum, CancellationToken cancellationToken = default(CancellationToken));

        List<Synonyms_SimpleStoredProcReturnModel> Synonyms_SimpleStoredProc(int? inputInt);
        List<Synonyms_SimpleStoredProcReturnModel> Synonyms_SimpleStoredProc(int? inputInt, out int procResult);
        Task<List<Synonyms_SimpleStoredProcReturnModel>> Synonyms_SimpleStoredProcAsync(int? inputInt, CancellationToken cancellationToken = default(CancellationToken));

        List<TestReturnStringReturnModel> TestReturnString();
        List<TestReturnStringReturnModel> TestReturnString(out int procResult);
        Task<List<TestReturnStringReturnModel>> TestReturnStringAsync(CancellationToken cancellationToken = default(CancellationToken));

        int ThisHasMixedOutParameters(DateTime? foo, out int? firstOutParam, DateTime? bar, out int? secondOutParam, DateTime? baz);
        // ThisHasMixedOutParametersAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        int UserDefinedTypeSampleStoredProc(int? a, DataTable type, int? b);
        Task<int> UserDefinedTypeSampleStoredProcAsync(int? a, DataTable type, int? b, CancellationToken cancellationToken = default(CancellationToken));

        List<XmlDataV1ReturnModel> XmlDataV1();
        List<XmlDataV1ReturnModel> XmlDataV1(out int procResult);
        Task<List<XmlDataV1ReturnModel>> XmlDataV1Async(CancellationToken cancellationToken = default(CancellationToken));

        int XmlDataV2();
        Task<int> XmlDataV2Async(CancellationToken cancellationToken = default(CancellationToken));


        // Table Valued Functions
        IQueryable<C182Test1ReturnModel> C182Test1(int? test); // dbo.182_test1
        IQueryable<CsvToIntReturnModel> CsvToInt(string array, string array2); // dbo.CsvToInt
        IQueryable<CustomSchema_CsvToIntWithSchemaReturnModel> CustomSchema_CsvToIntWithSchema(string array, string array2); // CustomSchema.CsvToIntWithSchema
        IQueryable<FFRS_CsvToInt2ReturnModel> FFRS_CsvToInt2(string array, string array2); // FFRS.CsvToInt2

        // Scalar Valued Functions
        decimal UdfNetSale(int? quantity, decimal? listPrice, decimal? discount); // dbo.udfNetSale
    }

    #endregion

    #region Database context

    public class V8EfrpgTestDbContext : DbContext, IV8EfrpgTestDbContext
    {
        public V8EfrpgTestDbContext()
        {
        }

        public V8EfrpgTestDbContext(DbContextOptions<V8EfrpgTestDbContext> options)
            : base(options)
        {
        }

        public DbSet<AllColumnsNull> AllColumnsNulls { get; set; } // AllColumnsNull
        public DbSet<ComplexView> ComplexViews { get; set; } // ComplexView
        public DbSet<SmallDecimalTestView> SmallDecimalTestViews { get; set; } // SmallDecimalTestView

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
                optionsBuilder.UseSqlServer(@"Data Source=(local);Initial Catalog=EfrpgTest;Integrated Security=True;MultipleActiveResultSets=True;Encrypt=false;TrustServerCertificate=true");
                optionsBuilder.UseLazyLoadingProxies();
            }
        }

        public bool IsSqlParameterNull(SqlParameter param)
        {
            var sqlValue = param.SqlValue;
            var nullableValue = sqlValue as INullable;
            if (nullableValue != null)
                return nullableValue.IsNull;
            return (sqlValue == null || sqlValue == DBNull.Value);
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);

            modelBuilder.HasSequence<int>("CountBy1", "dbo").StartsAt(1).IncrementsBy(1).IsCyclic(false);
            modelBuilder.HasSequence<long>("CountByBigInt", "dbo").StartsAt(22).IncrementsBy(234).IsCyclic(true).HasMin(1).HasMax(9876543);
            modelBuilder.HasSequence<decimal>("CountByDecimal", "dbo").StartsAt(593).IncrementsBy(82).IsCyclic(false).HasMin(5).HasMax(777777);
            modelBuilder.HasSequence<decimal>("CountByNumeric", "dbo").StartsAt(789).IncrementsBy(987).IsCyclic(false).HasMin(345).HasMax(999999999999999999);
            modelBuilder.HasSequence<short>("CountBySmallInt", "dbo").StartsAt(44).IncrementsBy(456).IsCyclic(true);
            modelBuilder.HasSequence<byte>("CountByTinyInt", "dbo").StartsAt(33).IncrementsBy(3).IsCyclic(false);

            modelBuilder.ApplyConfiguration(new AllColumnsNullConfiguration());
            modelBuilder.ApplyConfiguration(new ComplexViewConfiguration());
            modelBuilder.ApplyConfiguration(new SmallDecimalTestViewConfiguration());

            modelBuilder.Entity<ASimpleExampleReturnModel>().HasNoKey();
            modelBuilder.Entity<CheckIfApplicationIsCompleteReturnModel>().HasNoKey();
            modelBuilder.Entity<ColourPivotReturnModel>().HasNoKey();
            modelBuilder.Entity<ColumnNameAndTypesProcReturnModel>().HasNoKey();
            modelBuilder.Entity<DboProcDataFromFfrsReturnModel>().HasNoKey();
            modelBuilder.Entity<DboProcDataFromFfrsAndDboReturnModel>().HasNoKey();
            modelBuilder.Entity<DsOpeProcReturnModel>().HasNoKey();
            modelBuilder.Entity<FFRS_CvDataReturnModel>().HasNoKey();
            modelBuilder.Entity<FFRS_DataFromDboReturnModel>().HasNoKey();
            modelBuilder.Entity<FFRS_DataFromDboAndFfrsReturnModel>().HasNoKey();
            modelBuilder.Entity<FkTest_HelloReturnModel>().HasNoKey();
            modelBuilder.Entity<GetSmallDecimalTestReturnModel>().HasNoKey();
            modelBuilder.Entity<SpatialTypesNoParamsReturnModel>().HasNoKey();
            modelBuilder.Entity<SpatialTypesWithParamsReturnModel>().HasNoKey();
            modelBuilder.Entity<StpMultipleIdenticalResultsReturnModel>().HasNoKey();
            modelBuilder.Entity<StpNoParamsTestReturnModel>().HasNoKey();
            modelBuilder.Entity<StpNullableParamsTestReturnModel>().HasNoKey();
            modelBuilder.Entity<StpTestReturnModel>().HasNoKey();
            modelBuilder.Entity<StpTestUnderscoreTestReturnModel>().HasNoKey();
            modelBuilder.Entity<Synonyms_SimpleStoredProcReturnModel>().HasNoKey();
            modelBuilder.Entity<TestReturnStringReturnModel>().HasNoKey();
            modelBuilder.Entity<XmlDataV1ReturnModel>().HasNoKey();

            // Table Valued Functions
            modelBuilder.Entity<C182Test1ReturnModel>().HasNoKey();
            modelBuilder.Entity<CsvToIntReturnModel>().HasNoKey();
            modelBuilder.Entity<CustomSchema_CsvToIntWithSchemaReturnModel>().HasNoKey();
            modelBuilder.Entity<FFRS_CsvToInt2ReturnModel>().HasNoKey();
        }


        // Stored Procedures
        public int AddTwoValues(int? a = null, int? b = null)
        {
            var aParam = new SqlParameter { ParameterName = "@a", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = a.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!a.HasValue)
                aParam.Value = DBNull.Value;

            var bParam = new SqlParameter { ParameterName = "@b", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = b.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!b.HasValue)
                bParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };

            Database.ExecuteSqlRaw("EXEC @procResult = [dbo].[AddTwoValues] @a, @b", aParam, bParam, procResultParam);

            return (int)procResultParam.Value;
        }

        public async Task<int> AddTwoValuesAsync(int? a = null, int? b = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            var aParam = new SqlParameter { ParameterName = "@a", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = a.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!a.HasValue)
                aParam.Value = DBNull.Value;

            var bParam = new SqlParameter { ParameterName = "@b", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = b.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!b.HasValue)
                bParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };

            await Database.ExecuteSqlRawAsync("EXEC @procResult = [dbo].[AddTwoValues] @a, @b",  new[] {aParam, bParam, procResultParam}, cancellationToken);

            return (int)procResultParam.Value;
        }

        public int AddTwoValuesWithResult(int? a, int? b, out int? result, out int? result2)
        {
            var aParam = new SqlParameter { ParameterName = "@a", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = a.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!a.HasValue)
                aParam.Value = DBNull.Value;

            var bParam = new SqlParameter { ParameterName = "@b", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = b.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!b.HasValue)
                bParam.Value = DBNull.Value;

            var resultParam = new SqlParameter { ParameterName = "@result", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output, Precision = 10, Scale = 0 };
            var result2Param = new SqlParameter { ParameterName = "@result2", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output, Precision = 10, Scale = 0 };
            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };

            Database.ExecuteSqlRaw("EXEC @procResult = [dbo].[AddTwoValuesWithResult] @a, @b, @result OUTPUT, @result2 OUTPUT", aParam, bParam, resultParam, result2Param, procResultParam);

            if (IsSqlParameterNull(resultParam))
                result = null;
            else
                result = (int) resultParam.Value;

            if (IsSqlParameterNull(result2Param))
                result2 = null;
            else
                result2 = (int) result2Param.Value;

            return (int)procResultParam.Value;
        }

        // AddTwoValuesWithResultAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public int Alpha_Overclock(DateTime? parameter = null)
        {
            var parameterParam = new SqlParameter { ParameterName = "@Parameter", SqlDbType = SqlDbType.DateTime, Direction = ParameterDirection.Input, Value = parameter.GetValueOrDefault() };
            if (!parameter.HasValue)
                parameterParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };

            Database.ExecuteSqlRaw("EXEC @procResult = [Alpha].[Overclock] @Parameter", parameterParam, procResultParam);

            return (int)procResultParam.Value;
        }

        public async Task<int> Alpha_OverclockAsync(DateTime? parameter = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            var parameterParam = new SqlParameter { ParameterName = "@Parameter", SqlDbType = SqlDbType.DateTime, Direction = ParameterDirection.Input, Value = parameter.GetValueOrDefault() };
            if (!parameter.HasValue)
                parameterParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };

            await Database.ExecuteSqlRawAsync("EXEC @procResult = [Alpha].[Overclock] @Parameter",  new[] {parameterParam, procResultParam}, cancellationToken);

            return (int)procResultParam.Value;
        }

        public int App_UspCmtUserFsrUpdate(int? userId, int? fsrId, out int? ufsrId)
        {
            var userIdParam = new SqlParameter { ParameterName = "@userId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = userId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!userId.HasValue)
                userIdParam.Value = DBNull.Value;

            var fsrIdParam = new SqlParameter { ParameterName = "@fsrId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = fsrId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!fsrId.HasValue)
                fsrIdParam.Value = DBNull.Value;

            var ufsrIdParam = new SqlParameter { ParameterName = "@ufsrId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output, Precision = 10, Scale = 0 };
            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };

            Database.ExecuteSqlRaw("EXEC @procResult = [App].[usp_CMTUserFSRUpdate] @userId, @fsrId, @ufsrId OUTPUT", userIdParam, fsrIdParam, ufsrIdParam, procResultParam);

            if (IsSqlParameterNull(ufsrIdParam))
                ufsrId = null;
            else
                ufsrId = (int) ufsrIdParam.Value;

            return (int)procResultParam.Value;
        }

        // App_UspCmtUserFsrUpdateAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public List<ASimpleExampleReturnModel> ASimpleExample()
        {
            int procResult;
            return ASimpleExample(out procResult);
        }

        public List<ASimpleExampleReturnModel> ASimpleExample(out int procResult)
        {
            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };
            const string sqlCommand = "EXEC @procResult = [dbo].[aSimpleExample]";
            var procResultData = Set<ASimpleExampleReturnModel>()
                .FromSqlRaw(sqlCommand, procResultParam)
                .ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async Task<List<ASimpleExampleReturnModel>> ASimpleExampleAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            const string sqlCommand = "EXEC [dbo].[aSimpleExample]";
            var procResultData = await Set<ASimpleExampleReturnModel>()
                .FromSqlRaw(sqlCommand)
                .ToListAsync(cancellationToken);

            return procResultData;
        }

        public int Beta_Overclock(DateTime? parameter = null)
        {
            var parameterParam = new SqlParameter { ParameterName = "@Parameter", SqlDbType = SqlDbType.DateTime, Direction = ParameterDirection.Input, Value = parameter.GetValueOrDefault() };
            if (!parameter.HasValue)
                parameterParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };

            Database.ExecuteSqlRaw("EXEC @procResult = [Beta].[Overclock] @Parameter", parameterParam, procResultParam);

            return (int)procResultParam.Value;
        }

        public async Task<int> Beta_OverclockAsync(DateTime? parameter = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            var parameterParam = new SqlParameter { ParameterName = "@Parameter", SqlDbType = SqlDbType.DateTime, Direction = ParameterDirection.Input, Value = parameter.GetValueOrDefault() };
            if (!parameter.HasValue)
                parameterParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };

            await Database.ExecuteSqlRawAsync("EXEC @procResult = [Beta].[Overclock] @Parameter",  new[] {parameterParam, procResultParam}, cancellationToken);

            return (int)procResultParam.Value;
        }

        // public C182Test2ReturnModel C182Test2(int? flag = null) Cannot be created as EF Core does not yet support stored procedures with multiple result sets.

        // public async Task<C182Test2ReturnModel> C182Test2Async(int? flag = null) Cannot be created as EF Core does not yet support stored procedures with multiple result sets.

        public List<CheckIfApplicationIsCompleteReturnModel> CheckIfApplicationIsComplete(int? applicationId, out bool? isApplicationComplete)
        {
            int procResult;
            return CheckIfApplicationIsComplete(applicationId, out isApplicationComplete, out procResult);
        }

        public List<CheckIfApplicationIsCompleteReturnModel> CheckIfApplicationIsComplete(int? applicationId, out bool? isApplicationComplete, out int procResult)
        {
            var applicationIdParam = new SqlParameter { ParameterName = "@ApplicationId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = applicationId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!applicationId.HasValue)
                applicationIdParam.Value = DBNull.Value;

            var isApplicationCompleteParam = new SqlParameter { ParameterName = "@IsApplicationComplete", SqlDbType = SqlDbType.Bit, Direction = ParameterDirection.Output };
            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };
            const string sqlCommand = "EXEC @procResult = [dbo].[CheckIfApplicationIsComplete] @ApplicationId, @IsApplicationComplete OUTPUT";
            var procResultData = Set<CheckIfApplicationIsCompleteReturnModel>()
                .FromSqlRaw(sqlCommand, applicationIdParam, isApplicationCompleteParam, procResultParam)
                .ToList();

            if (IsSqlParameterNull(isApplicationCompleteParam))
                isApplicationComplete = null;
            else
                isApplicationComplete = (bool) isApplicationCompleteParam.Value;

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        // CheckIfApplicationIsCompleteAsync() cannot be created due to having out parameters, or is relying on the procedure result (List<CheckIfApplicationIsCompleteReturnModel>)

        public List<ColourPivotReturnModel> ColourPivot()
        {
            int procResult;
            return ColourPivot(out procResult);
        }

        public List<ColourPivotReturnModel> ColourPivot(out int procResult)
        {
            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };
            const string sqlCommand = "EXEC @procResult = [dbo].[ColourPivot]";
            var procResultData = Set<ColourPivotReturnModel>()
                .FromSqlRaw(sqlCommand, procResultParam)
                .ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async Task<List<ColourPivotReturnModel>> ColourPivotAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            const string sqlCommand = "EXEC [dbo].[ColourPivot]";
            var procResultData = await Set<ColourPivotReturnModel>()
                .FromSqlRaw(sqlCommand)
                .ToListAsync(cancellationToken);

            return procResultData;
        }

        public List<ColumnNameAndTypesProcReturnModel> ColumnNameAndTypesProc()
        {
            int procResult;
            return ColumnNameAndTypesProc(out procResult);
        }

        public List<ColumnNameAndTypesProcReturnModel> ColumnNameAndTypesProc(out int procResult)
        {
            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };
            const string sqlCommand = "EXEC @procResult = [dbo].[ColumnNameAndTypesProc]";
            var procResultData = Set<ColumnNameAndTypesProcReturnModel>()
                .FromSqlRaw(sqlCommand, procResultParam)
                .ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async Task<List<ColumnNameAndTypesProcReturnModel>> ColumnNameAndTypesProcAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            const string sqlCommand = "EXEC [dbo].[ColumnNameAndTypesProc]";
            var procResultData = await Set<ColumnNameAndTypesProcReturnModel>()
                .FromSqlRaw(sqlCommand)
                .ToListAsync(cancellationToken);

            return procResultData;
        }

        public int ConvertToString(int? someValue, out string someString)
        {
            var someValueParam = new SqlParameter { ParameterName = "@someValue", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = someValue.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!someValue.HasValue)
                someValueParam.Value = DBNull.Value;

            var someStringParam = new SqlParameter { ParameterName = "@someString", SqlDbType = SqlDbType.VarChar, Direction = ParameterDirection.Output, Size = 20 };
            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };

            Database.ExecuteSqlRaw("EXEC @procResult = [dbo].[ConvertToString] @someValue, @someString OUTPUT", someValueParam, someStringParam, procResultParam);

            if (IsSqlParameterNull(someStringParam))
                someString = default(string);
            else
                someString = (string) someStringParam.Value;

            return (int)procResultParam.Value;
        }

        // ConvertToStringAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public List<DboProcDataFromFfrsReturnModel> DboProcDataFromFfrs(int? maxId = null)
        {
            int procResult;
            return DboProcDataFromFfrs(maxId, out procResult);
        }

        public List<DboProcDataFromFfrsReturnModel> DboProcDataFromFfrs(int? maxId, out int procResult)
        {
            var maxIdParam = new SqlParameter { ParameterName = "@maxId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = maxId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!maxId.HasValue)
                maxIdParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };
            const string sqlCommand = "EXEC @procResult = [dbo].[dbo_proc_data_from_ffrs] @maxId";
            var procResultData = Set<DboProcDataFromFfrsReturnModel>()
                .FromSqlRaw(sqlCommand, maxIdParam, procResultParam)
                .ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async Task<List<DboProcDataFromFfrsReturnModel>> DboProcDataFromFfrsAsync(int? maxId = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            var maxIdParam = new SqlParameter { ParameterName = "@maxId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = maxId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!maxId.HasValue)
                maxIdParam.Value = DBNull.Value;

            const string sqlCommand = "EXEC [dbo].[dbo_proc_data_from_ffrs] @maxId";
            var procResultData = await Set<DboProcDataFromFfrsReturnModel>()
                .FromSqlRaw(sqlCommand, maxIdParam)
                .ToListAsync(cancellationToken);

            return procResultData;
        }

        public List<DboProcDataFromFfrsAndDboReturnModel> DboProcDataFromFfrsAndDbo()
        {
            int procResult;
            return DboProcDataFromFfrsAndDbo(out procResult);
        }

        public List<DboProcDataFromFfrsAndDboReturnModel> DboProcDataFromFfrsAndDbo(out int procResult)
        {
            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };
            const string sqlCommand = "EXEC @procResult = [dbo].[dbo_proc_data_from_ffrs_and_dbo]";
            var procResultData = Set<DboProcDataFromFfrsAndDboReturnModel>()
                .FromSqlRaw(sqlCommand, procResultParam)
                .ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async Task<List<DboProcDataFromFfrsAndDboReturnModel>> DboProcDataFromFfrsAndDboAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            const string sqlCommand = "EXEC [dbo].[dbo_proc_data_from_ffrs_and_dbo]";
            var procResultData = await Set<DboProcDataFromFfrsAndDboReturnModel>()
                .FromSqlRaw(sqlCommand)
                .ToListAsync(cancellationToken);

            return procResultData;
        }

        public List<DsOpeProcReturnModel> DsOpeProc()
        {
            int procResult;
            return DsOpeProc(out procResult);
        }

        public List<DsOpeProcReturnModel> DsOpeProc(out int procResult)
        {
            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };
            const string sqlCommand = "EXEC @procResult = [dbo].[DSOpeProc]";
            var procResultData = Set<DsOpeProcReturnModel>()
                .FromSqlRaw(sqlCommand, procResultParam)
                .ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async Task<List<DsOpeProcReturnModel>> DsOpeProcAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            const string sqlCommand = "EXEC [dbo].[DSOpeProc]";
            var procResultData = await Set<DsOpeProcReturnModel>()
                .FromSqlRaw(sqlCommand)
                .ToListAsync(cancellationToken);

            return procResultData;
        }

        public List<FFRS_CvDataReturnModel> FFRS_CvData(int? maxId = null)
        {
            int procResult;
            return FFRS_CvData(maxId, out procResult);
        }

        public List<FFRS_CvDataReturnModel> FFRS_CvData(int? maxId, out int procResult)
        {
            var maxIdParam = new SqlParameter { ParameterName = "@maxId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = maxId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!maxId.HasValue)
                maxIdParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };
            const string sqlCommand = "EXEC @procResult = [FFRS].[cv_data] @maxId";
            var procResultData = Set<FFRS_CvDataReturnModel>()
                .FromSqlRaw(sqlCommand, maxIdParam, procResultParam)
                .ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async Task<List<FFRS_CvDataReturnModel>> FFRS_CvDataAsync(int? maxId = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            var maxIdParam = new SqlParameter { ParameterName = "@maxId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = maxId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!maxId.HasValue)
                maxIdParam.Value = DBNull.Value;

            const string sqlCommand = "EXEC [FFRS].[cv_data] @maxId";
            var procResultData = await Set<FFRS_CvDataReturnModel>()
                .FromSqlRaw(sqlCommand, maxIdParam)
                .ToListAsync(cancellationToken);

            return procResultData;
        }

        public List<FFRS_DataFromDboReturnModel> FFRS_DataFromDbo()
        {
            int procResult;
            return FFRS_DataFromDbo(out procResult);
        }

        public List<FFRS_DataFromDboReturnModel> FFRS_DataFromDbo(out int procResult)
        {
            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };
            const string sqlCommand = "EXEC @procResult = [FFRS].[data_from_dbo]";
            var procResultData = Set<FFRS_DataFromDboReturnModel>()
                .FromSqlRaw(sqlCommand, procResultParam)
                .ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async Task<List<FFRS_DataFromDboReturnModel>> FFRS_DataFromDboAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            const string sqlCommand = "EXEC [FFRS].[data_from_dbo]";
            var procResultData = await Set<FFRS_DataFromDboReturnModel>()
                .FromSqlRaw(sqlCommand)
                .ToListAsync(cancellationToken);

            return procResultData;
        }

        public List<FFRS_DataFromDboAndFfrsReturnModel> FFRS_DataFromDboAndFfrs()
        {
            int procResult;
            return FFRS_DataFromDboAndFfrs(out procResult);
        }

        public List<FFRS_DataFromDboAndFfrsReturnModel> FFRS_DataFromDboAndFfrs(out int procResult)
        {
            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };
            const string sqlCommand = "EXEC @procResult = [FFRS].[data_from_dbo_and_ffrs]";
            var procResultData = Set<FFRS_DataFromDboAndFfrsReturnModel>()
                .FromSqlRaw(sqlCommand, procResultParam)
                .ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async Task<List<FFRS_DataFromDboAndFfrsReturnModel>> FFRS_DataFromDboAndFfrsAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            const string sqlCommand = "EXEC [FFRS].[data_from_dbo_and_ffrs]";
            var procResultData = await Set<FFRS_DataFromDboAndFfrsReturnModel>()
                .FromSqlRaw(sqlCommand)
                .ToListAsync(cancellationToken);

            return procResultData;
        }

        public List<FkTest_HelloReturnModel> FkTest_Hello()
        {
            int procResult;
            return FkTest_Hello(out procResult);
        }

        public List<FkTest_HelloReturnModel> FkTest_Hello(out int procResult)
        {
            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };
            const string sqlCommand = "EXEC @procResult = [FkTest].[Hello]";
            var procResultData = Set<FkTest_HelloReturnModel>()
                .FromSqlRaw(sqlCommand, procResultParam)
                .ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async Task<List<FkTest_HelloReturnModel>> FkTest_HelloAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            const string sqlCommand = "EXEC [FkTest].[Hello]";
            var procResultData = await Set<FkTest_HelloReturnModel>()
                .FromSqlRaw(sqlCommand)
                .ToListAsync(cancellationToken);

            return procResultData;
        }

        public List<GetSmallDecimalTestReturnModel> GetSmallDecimalTest(int? maxId = null)
        {
            int procResult;
            return GetSmallDecimalTest(maxId, out procResult);
        }

        public List<GetSmallDecimalTestReturnModel> GetSmallDecimalTest(int? maxId, out int procResult)
        {
            var maxIdParam = new SqlParameter { ParameterName = "@maxId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = maxId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!maxId.HasValue)
                maxIdParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };
            const string sqlCommand = "EXEC @procResult = [dbo].[GetSmallDecimalTest] @maxId";
            var procResultData = Set<GetSmallDecimalTestReturnModel>()
                .FromSqlRaw(sqlCommand, maxIdParam, procResultParam)
                .ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async Task<List<GetSmallDecimalTestReturnModel>> GetSmallDecimalTestAsync(int? maxId = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            var maxIdParam = new SqlParameter { ParameterName = "@maxId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = maxId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!maxId.HasValue)
                maxIdParam.Value = DBNull.Value;

            const string sqlCommand = "EXEC [dbo].[GetSmallDecimalTest] @maxId";
            var procResultData = await Set<GetSmallDecimalTestReturnModel>()
                .FromSqlRaw(sqlCommand, maxIdParam)
                .ToListAsync(cancellationToken);

            return procResultData;
        }

        public int InsertRecord(string data, out int? insertedId)
        {
            var dataParam = new SqlParameter { ParameterName = "@Data", SqlDbType = SqlDbType.VarChar, Direction = ParameterDirection.Input, Value = data, Size = 256 };
            if (dataParam.Value == null)
                dataParam.Value = DBNull.Value;

            var insertedIdParam = new SqlParameter { ParameterName = "@InsertedId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output, Precision = 10, Scale = 0 };
            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };

            Database.ExecuteSqlRaw("EXEC @procResult = [dbo].[InsertRecord] @Data, @InsertedId OUTPUT", dataParam, insertedIdParam, procResultParam);

            if (IsSqlParameterNull(insertedIdParam))
                insertedId = null;
            else
                insertedId = (int) insertedIdParam.Value;

            return (int)procResultParam.Value;
        }

        // InsertRecordAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public int InsertRecordThree(string data, out int? insertedId, int? someId, out int? anotherInsertedId)
        {
            var dataParam = new SqlParameter { ParameterName = "@Data", SqlDbType = SqlDbType.VarChar, Direction = ParameterDirection.Input, Value = data, Size = 256 };
            if (dataParam.Value == null)
                dataParam.Value = DBNull.Value;

            var insertedIdParam = new SqlParameter { ParameterName = "@InsertedId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output, Precision = 10, Scale = 0 };
            var someIdParam = new SqlParameter { ParameterName = "@SomeId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = someId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!someId.HasValue)
                someIdParam.Value = DBNull.Value;

            var anotherInsertedIdParam = new SqlParameter { ParameterName = "@AnotherInsertedId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output, Precision = 10, Scale = 0 };
            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };

            Database.ExecuteSqlRaw("EXEC @procResult = [dbo].[InsertRecordThree] @Data, @InsertedId OUTPUT, @SomeId, @AnotherInsertedId OUTPUT", dataParam, insertedIdParam, someIdParam, anotherInsertedIdParam, procResultParam);

            if (IsSqlParameterNull(insertedIdParam))
                insertedId = null;
            else
                insertedId = (int) insertedIdParam.Value;

            if (IsSqlParameterNull(anotherInsertedIdParam))
                anotherInsertedId = null;
            else
                anotherInsertedId = (int) anotherInsertedIdParam.Value;

            return (int)procResultParam.Value;
        }

        // InsertRecordThreeAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public int InsertRecordTwo(string data, out int? insertedId, out int? anotherInsertedId)
        {
            var dataParam = new SqlParameter { ParameterName = "@Data", SqlDbType = SqlDbType.VarChar, Direction = ParameterDirection.Input, Value = data, Size = 256 };
            if (dataParam.Value == null)
                dataParam.Value = DBNull.Value;

            var insertedIdParam = new SqlParameter { ParameterName = "@InsertedId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output, Precision = 10, Scale = 0 };
            var anotherInsertedIdParam = new SqlParameter { ParameterName = "@AnotherInsertedId", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output, Precision = 10, Scale = 0 };
            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };

            Database.ExecuteSqlRaw("EXEC @procResult = [dbo].[InsertRecordTwo] @Data, @InsertedId OUTPUT, @AnotherInsertedId OUTPUT", dataParam, insertedIdParam, anotherInsertedIdParam, procResultParam);

            if (IsSqlParameterNull(insertedIdParam))
                insertedId = null;
            else
                insertedId = (int) insertedIdParam.Value;

            if (IsSqlParameterNull(anotherInsertedIdParam))
                anotherInsertedId = null;
            else
                anotherInsertedId = (int) anotherInsertedIdParam.Value;

            return (int)procResultParam.Value;
        }

        // InsertRecordTwoAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public int MinTripSequenceStart(out DateTime? minTripSequenceStartParam)
        {
            var minTripSequenceStartParamParam = new SqlParameter { ParameterName = "@minTripSequenceStartParam", SqlDbType = SqlDbType.DateTime2, Direction = ParameterDirection.Output };
            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };

            Database.ExecuteSqlRaw("EXEC @procResult = [dbo].[MinTripSequenceStart] @minTripSequenceStartParam OUTPUT", minTripSequenceStartParamParam, procResultParam);

            if (IsSqlParameterNull(minTripSequenceStartParamParam))
                minTripSequenceStartParam = null;
            else
                minTripSequenceStartParam = (DateTime) minTripSequenceStartParamParam.Value;

            return (int)procResultParam.Value;
        }

        // MinTripSequenceStartAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public int MinTripSequenceStartNull(out DateTime? minTripSequenceStartParam)
        {
            var minTripSequenceStartParamParam = new SqlParameter { ParameterName = "@minTripSequenceStartParam", SqlDbType = SqlDbType.DateTime2, Direction = ParameterDirection.Output };
            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };

            Database.ExecuteSqlRaw("EXEC @procResult = [dbo].[MinTripSequenceStartNull] @minTripSequenceStartParam OUTPUT", minTripSequenceStartParamParam, procResultParam);

            if (IsSqlParameterNull(minTripSequenceStartParamParam))
                minTripSequenceStartParam = null;
            else
                minTripSequenceStartParam = (DateTime) minTripSequenceStartParamParam.Value;

            return (int)procResultParam.Value;
        }

        // MinTripSequenceStartNullAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public int MultipleReturnColumnsFromTempTable()
        {
            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };

            Database.ExecuteSqlRaw("EXEC @procResult = [dbo].[MultipleReturnColumnsFromTempTable] ", procResultParam);

            return (int)procResultParam.Value;
        }

        public async Task<int> MultipleReturnColumnsFromTempTableAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };

            await Database.ExecuteSqlRawAsync("EXEC @procResult = [dbo].[MultipleReturnColumnsFromTempTable]",  new[] {procResultParam}, cancellationToken);

            return (int)procResultParam.Value;
        }

        public int NvarcharTest(string maxOutputParam, string normalOutputParam)
        {
            var maxOutputParamParam = new SqlParameter { ParameterName = "@maxOutputParam", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = maxOutputParam, Size = -1 };
            if (maxOutputParamParam.Value == null)
                maxOutputParamParam.Value = DBNull.Value;

            var normalOutputParamParam = new SqlParameter { ParameterName = "@normalOutputParam", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = normalOutputParam, Size = 20 };
            if (normalOutputParamParam.Value == null)
                normalOutputParamParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };

            Database.ExecuteSqlRaw("EXEC @procResult = [dbo].[NvarcharTest] @maxOutputParam, @normalOutputParam", maxOutputParamParam, normalOutputParamParam, procResultParam);

            return (int)procResultParam.Value;
        }

        public async Task<int> NvarcharTestAsync(string maxOutputParam, string normalOutputParam, CancellationToken cancellationToken = default(CancellationToken))
        {
            var maxOutputParamParam = new SqlParameter { ParameterName = "@maxOutputParam", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = maxOutputParam, Size = -1 };
            if (maxOutputParamParam.Value == null)
                maxOutputParamParam.Value = DBNull.Value;

            var normalOutputParamParam = new SqlParameter { ParameterName = "@normalOutputParam", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = normalOutputParam, Size = 20 };
            if (normalOutputParamParam.Value == null)
                normalOutputParamParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };

            await Database.ExecuteSqlRawAsync("EXEC @procResult = [dbo].[NvarcharTest] @maxOutputParam, @normalOutputParam",  new[] {maxOutputParamParam, normalOutputParamParam, procResultParam}, cancellationToken);

            return (int)procResultParam.Value;
        }

        public int Omega_Overclock(DateTime? parameter = null)
        {
            var parameterParam = new SqlParameter { ParameterName = "@Parameter", SqlDbType = SqlDbType.DateTime, Direction = ParameterDirection.Input, Value = parameter.GetValueOrDefault() };
            if (!parameter.HasValue)
                parameterParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };

            Database.ExecuteSqlRaw("EXEC @procResult = [Omega].[Overclock] @Parameter", parameterParam, procResultParam);

            return (int)procResultParam.Value;
        }

        public async Task<int> Omega_OverclockAsync(DateTime? parameter = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            var parameterParam = new SqlParameter { ParameterName = "@Parameter", SqlDbType = SqlDbType.DateTime, Direction = ParameterDirection.Input, Value = parameter.GetValueOrDefault() };
            if (!parameter.HasValue)
                parameterParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };

            await Database.ExecuteSqlRawAsync("EXEC @procResult = [Omega].[Overclock] @Parameter",  new[] {parameterParam, procResultParam}, cancellationToken);

            return (int)procResultParam.Value;
        }

        public int ProcTestDecimalOutput(out decimal? perfectNumber)
        {
            var perfectNumberParam = new SqlParameter { ParameterName = "@PerfectNumber", SqlDbType = SqlDbType.Decimal, Direction = ParameterDirection.Output, Precision = 18, Scale = 2 };
            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };

            Database.ExecuteSqlRaw("EXEC @procResult = [dbo].[proc_TestDecimalOutput] @PerfectNumber OUTPUT", perfectNumberParam, procResultParam);

            if (IsSqlParameterNull(perfectNumberParam))
                perfectNumber = null;
            else
                perfectNumber = (decimal) perfectNumberParam.Value;

            return (int)procResultParam.Value;
        }

        // ProcTestDecimalOutputAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public int ProcTestDecimalOutputV2(out decimal? perfectNumber)
        {
            var perfectNumberParam = new SqlParameter { ParameterName = "@PerfectNumber", SqlDbType = SqlDbType.Decimal, Direction = ParameterDirection.Output, Precision = 12, Scale = 8 };
            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };

            Database.ExecuteSqlRaw("EXEC @procResult = [dbo].[proc_TestDecimalOutputV2] @PerfectNumber OUTPUT", perfectNumberParam, procResultParam);

            if (IsSqlParameterNull(perfectNumberParam))
                perfectNumber = null;
            else
                perfectNumber = (decimal) perfectNumberParam.Value;

            return (int)procResultParam.Value;
        }

        // ProcTestDecimalOutputV2Async() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public int ProcTestDecimalOutputV3Default(out decimal? perfectNumber)
        {
            var perfectNumberParam = new SqlParameter { ParameterName = "@PerfectNumber", SqlDbType = SqlDbType.Decimal, Direction = ParameterDirection.Output, Precision = 18, Scale = 0 };
            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };

            Database.ExecuteSqlRaw("EXEC @procResult = [dbo].[proc_TestDecimalOutputV3Default] @PerfectNumber OUTPUT", perfectNumberParam, procResultParam);

            if (IsSqlParameterNull(perfectNumberParam))
                perfectNumber = null;
            else
                perfectNumber = (decimal) perfectNumberParam.Value;

            return (int)procResultParam.Value;
        }

        // ProcTestDecimalOutputV3DefaultAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public List<SpatialTypesNoParamsReturnModel> SpatialTypesNoParams()
        {
            int procResult;
            return SpatialTypesNoParams(out procResult);
        }

        public List<SpatialTypesNoParamsReturnModel> SpatialTypesNoParams(out int procResult)
        {
            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };
            const string sqlCommand = "EXEC @procResult = [dbo].[SpatialTypesNoParams]";
            var procResultData = Set<SpatialTypesNoParamsReturnModel>()
                .FromSqlRaw(sqlCommand, procResultParam)
                .ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async Task<List<SpatialTypesNoParamsReturnModel>> SpatialTypesNoParamsAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            const string sqlCommand = "EXEC [dbo].[SpatialTypesNoParams]";
            var procResultData = await Set<SpatialTypesNoParamsReturnModel>()
                .FromSqlRaw(sqlCommand)
                .ToListAsync(cancellationToken);

            return procResultData;
        }

        public List<SpatialTypesWithParamsReturnModel> SpatialTypesWithParams(NetTopologySuite.Geometries.Geometry geometry, NetTopologySuite.Geometries.Point geography)
        {
            int procResult;
            return SpatialTypesWithParams(geometry, geography, out procResult);
        }

        public List<SpatialTypesWithParamsReturnModel> SpatialTypesWithParams(NetTopologySuite.Geometries.Geometry geometry, NetTopologySuite.Geometries.Point geography, out int procResult)
        {
            var geometryParam = new SqlParameter { ParameterName = "@geometry", SqlDbType = SqlDbType.VarChar, Direction = ParameterDirection.Input, Value = geometry, Size = -1 };
            if (geometryParam.Value == null)
                geometryParam.Value = DBNull.Value;

            var geographyParam = new SqlParameter { ParameterName = "@geography", SqlDbType = SqlDbType.VarChar, Direction = ParameterDirection.Input, Value = geography, Size = -1 };
            if (geographyParam.Value == null)
                geographyParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };
            const string sqlCommand = "EXEC @procResult = [dbo].[SpatialTypesWithParams] @geometry, @geography";
            var procResultData = Set<SpatialTypesWithParamsReturnModel>()
                .FromSqlRaw(sqlCommand, geometryParam, geographyParam, procResultParam)
                .ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async Task<List<SpatialTypesWithParamsReturnModel>> SpatialTypesWithParamsAsync(NetTopologySuite.Geometries.Geometry geometry, NetTopologySuite.Geometries.Point geography, CancellationToken cancellationToken = default(CancellationToken))
        {
            var geometryParam = new SqlParameter { ParameterName = "@geometry", SqlDbType = SqlDbType.VarChar, Direction = ParameterDirection.Input, Value = geometry, Size = -1 };
            if (geometryParam.Value == null)
                geometryParam.Value = DBNull.Value;

            var geographyParam = new SqlParameter { ParameterName = "@geography", SqlDbType = SqlDbType.VarChar, Direction = ParameterDirection.Input, Value = geography, Size = -1 };
            if (geographyParam.Value == null)
                geographyParam.Value = DBNull.Value;

            const string sqlCommand = "EXEC [dbo].[SpatialTypesWithParams] @geometry, @geography";
            var procResultData = await Set<SpatialTypesWithParamsReturnModel>()
                .FromSqlRaw(sqlCommand, geometryParam, geographyParam)
                .ToListAsync(cancellationToken);

            return procResultData;
        }

        public List<StpMultipleIdenticalResultsReturnModel> StpMultipleIdenticalResults(int? someVar = null)
        {
            int procResult;
            return StpMultipleIdenticalResults(someVar, out procResult);
        }

        public List<StpMultipleIdenticalResultsReturnModel> StpMultipleIdenticalResults(int? someVar, out int procResult)
        {
            var someVarParam = new SqlParameter { ParameterName = "@someVar", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = someVar.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!someVar.HasValue)
                someVarParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };
            const string sqlCommand = "EXEC @procResult = [dbo].[stp_multiple_identical_results] @someVar";
            var procResultData = Set<StpMultipleIdenticalResultsReturnModel>()
                .FromSqlRaw(sqlCommand, someVarParam, procResultParam)
                .ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async Task<List<StpMultipleIdenticalResultsReturnModel>> StpMultipleIdenticalResultsAsync(int? someVar = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            var someVarParam = new SqlParameter { ParameterName = "@someVar", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = someVar.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!someVar.HasValue)
                someVarParam.Value = DBNull.Value;

            const string sqlCommand = "EXEC [dbo].[stp_multiple_identical_results] @someVar";
            var procResultData = await Set<StpMultipleIdenticalResultsReturnModel>()
                .FromSqlRaw(sqlCommand, someVarParam)
                .ToListAsync(cancellationToken);

            return procResultData;
        }

        // public StpMultipleMultipleResultsWithParamsReturnModel StpMultipleMultipleResultsWithParams(int? firstVal = null, int? secondVal = null, int? thirdVal = null) Cannot be created as EF Core does not yet support stored procedures with multiple result sets.

        // public async Task<StpMultipleMultipleResultsWithParamsReturnModel> StpMultipleMultipleResultsWithParamsAsync(int? firstVal = null, int? secondVal = null, int? thirdVal = null) Cannot be created as EF Core does not yet support stored procedures with multiple result sets.

        // public StpMultipleResultsReturnModel StpMultipleResults() Cannot be created as EF Core does not yet support stored procedures with multiple result sets.

        // public async Task<StpMultipleResultsReturnModel> StpMultipleResultsAsync() Cannot be created as EF Core does not yet support stored procedures with multiple result sets.

        // public StpMultipleResultsWithParamsReturnModel StpMultipleResultsWithParams(int? firstVal = null, int? secondVal = null) Cannot be created as EF Core does not yet support stored procedures with multiple result sets.

        // public async Task<StpMultipleResultsWithParamsReturnModel> StpMultipleResultsWithParamsAsync(int? firstVal = null, int? secondVal = null) Cannot be created as EF Core does not yet support stored procedures with multiple result sets.

        public List<StpNoParamsTestReturnModel> StpNoParamsTest()
        {
            int procResult;
            return StpNoParamsTest(out procResult);
        }

        public List<StpNoParamsTestReturnModel> StpNoParamsTest(out int procResult)
        {
            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };
            const string sqlCommand = "EXEC @procResult = [dbo].[stp_no_params_test]";
            var procResultData = Set<StpNoParamsTestReturnModel>()
                .FromSqlRaw(sqlCommand, procResultParam)
                .ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async Task<List<StpNoParamsTestReturnModel>> StpNoParamsTestAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            const string sqlCommand = "EXEC [dbo].[stp_no_params_test]";
            var procResultData = await Set<StpNoParamsTestReturnModel>()
                .FromSqlRaw(sqlCommand)
                .ToListAsync(cancellationToken);

            return procResultData;
        }

        public int StpNoReturnFields()
        {
            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };

            Database.ExecuteSqlRaw("EXEC @procResult = [dbo].[stp_no_return_fields] ", procResultParam);

            return (int)procResultParam.Value;
        }

        public async Task<int> StpNoReturnFieldsAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };

            await Database.ExecuteSqlRawAsync("EXEC @procResult = [dbo].[stp_no_return_fields]",  new[] {procResultParam}, cancellationToken);

            return (int)procResultParam.Value;
        }

        public List<StpNullableParamsTestReturnModel> StpNullableParamsTest(int? aVal = null, int? bVal = null)
        {
            int procResult;
            return StpNullableParamsTest(aVal, bVal, out procResult);
        }

        public List<StpNullableParamsTestReturnModel> StpNullableParamsTest(int? aVal, int? bVal, out int procResult)
        {
            var aValParam = new SqlParameter { ParameterName = "@a_val", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = aVal.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!aVal.HasValue)
                aValParam.Value = DBNull.Value;

            var bValParam = new SqlParameter { ParameterName = "@b_val", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = bVal.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!bVal.HasValue)
                bValParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };
            const string sqlCommand = "EXEC @procResult = [dbo].[stp_nullable_params_test] @a_val, @b_val";
            var procResultData = Set<StpNullableParamsTestReturnModel>()
                .FromSqlRaw(sqlCommand, aValParam, bValParam, procResultParam)
                .ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async Task<List<StpNullableParamsTestReturnModel>> StpNullableParamsTestAsync(int? aVal = null, int? bVal = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            var aValParam = new SqlParameter { ParameterName = "@a_val", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = aVal.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!aVal.HasValue)
                aValParam.Value = DBNull.Value;

            var bValParam = new SqlParameter { ParameterName = "@b_val", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = bVal.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!bVal.HasValue)
                bValParam.Value = DBNull.Value;

            const string sqlCommand = "EXEC [dbo].[stp_nullable_params_test] @a_val, @b_val";
            var procResultData = await Set<StpNullableParamsTestReturnModel>()
                .FromSqlRaw(sqlCommand, aValParam, bValParam)
                .ToListAsync(cancellationToken);

            return procResultData;
        }

        public List<StpTestReturnModel> StpTest(string strDateFrom, string strDateTo, out bool? retBool)
        {
            int procResult;
            return StpTest(strDateFrom, strDateTo, out retBool, out procResult);
        }

        public List<StpTestReturnModel> StpTest(string strDateFrom, string strDateTo, out bool? retBool, out int procResult)
        {
            var strDateFromParam = new SqlParameter { ParameterName = "@strDateFROM", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = strDateFrom, Size = 20 };
            if (strDateFromParam.Value == null)
                strDateFromParam.Value = DBNull.Value;

            var strDateToParam = new SqlParameter { ParameterName = "@strDateTo", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = strDateTo, Size = 20 };
            if (strDateToParam.Value == null)
                strDateToParam.Value = DBNull.Value;

            var retBoolParam = new SqlParameter { ParameterName = "@retBool", SqlDbType = SqlDbType.Bit, Direction = ParameterDirection.Output };
            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };
            const string sqlCommand = "EXEC @procResult = [dbo].[stp_test] @strDateFROM, @strDateTo, @retBool OUTPUT";
            var procResultData = Set<StpTestReturnModel>()
                .FromSqlRaw(sqlCommand, strDateFromParam, strDateToParam, retBoolParam, procResultParam)
                .ToList();

            if (IsSqlParameterNull(retBoolParam))
                retBool = null;
            else
                retBool = (bool) retBoolParam.Value;

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        // StpTestAsync() cannot be created due to having out parameters, or is relying on the procedure result (List<StpTestReturnModel>)

        public List<StpTestUnderscoreTestReturnModel> StpTestUnderscoreTest(string strDateFrom, string strDateTo)
        {
            int procResult;
            return StpTestUnderscoreTest(strDateFrom, strDateTo, out procResult);
        }

        public List<StpTestUnderscoreTestReturnModel> StpTestUnderscoreTest(string strDateFrom, string strDateTo, out int procResult)
        {
            var strDateFromParam = new SqlParameter { ParameterName = "@str_Date_FROM", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = strDateFrom, Size = 20 };
            if (strDateFromParam.Value == null)
                strDateFromParam.Value = DBNull.Value;

            var strDateToParam = new SqlParameter { ParameterName = "@str_date_to", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = strDateTo, Size = 20 };
            if (strDateToParam.Value == null)
                strDateToParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };
            const string sqlCommand = "EXEC @procResult = [dbo].[stp_test_underscore_test] @str_Date_FROM, @str_date_to";
            var procResultData = Set<StpTestUnderscoreTestReturnModel>()
                .FromSqlRaw(sqlCommand, strDateFromParam, strDateToParam, procResultParam)
                .ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async Task<List<StpTestUnderscoreTestReturnModel>> StpTestUnderscoreTestAsync(string strDateFrom, string strDateTo, CancellationToken cancellationToken = default(CancellationToken))
        {
            var strDateFromParam = new SqlParameter { ParameterName = "@str_Date_FROM", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = strDateFrom, Size = 20 };
            if (strDateFromParam.Value == null)
                strDateFromParam.Value = DBNull.Value;

            var strDateToParam = new SqlParameter { ParameterName = "@str_date_to", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = strDateTo, Size = 20 };
            if (strDateToParam.Value == null)
                strDateToParam.Value = DBNull.Value;

            const string sqlCommand = "EXEC [dbo].[stp_test_underscore_test] @str_Date_FROM, @str_date_to";
            var procResultData = await Set<StpTestUnderscoreTestReturnModel>()
                .FromSqlRaw(sqlCommand, strDateFromParam, strDateToParam)
                .ToListAsync(cancellationToken);

            return procResultData;
        }

        public int StupidStoredProcedureParams(string reqType, short? dept = null, short? @class = null, short? item = null)
        {
            var reqTypeParam = new SqlParameter { ParameterName = "@ReqType", SqlDbType = SqlDbType.VarChar, Direction = ParameterDirection.Input, Value = reqType, Size = 25 };
            if (reqTypeParam.Value == null)
                reqTypeParam.Value = DBNull.Value;

            var deptParam = new SqlParameter { ParameterName = "@Dept", SqlDbType = SqlDbType.SmallInt, Direction = ParameterDirection.Input, Value = dept.GetValueOrDefault(), Precision = 5, Scale = 0 };
            if (!dept.HasValue)
                deptParam.Value = DBNull.Value;

            var @classParam = new SqlParameter { ParameterName = "@Class", SqlDbType = SqlDbType.SmallInt, Direction = ParameterDirection.Input, Value = @class.GetValueOrDefault(), Precision = 5, Scale = 0 };
            if (!@class.HasValue)
                @classParam.Value = DBNull.Value;

            var itemParam = new SqlParameter { ParameterName = "@Item", SqlDbType = SqlDbType.SmallInt, Direction = ParameterDirection.Input, Value = item.GetValueOrDefault(), Precision = 5, Scale = 0 };
            if (!item.HasValue)
                itemParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };

            Database.ExecuteSqlRaw("EXEC @procResult = [dbo].[StupidStoredProcedureParams] @ReqType, @Dept, @Class, @Item", reqTypeParam, deptParam, @classParam, itemParam, procResultParam);

            return (int)procResultParam.Value;
        }

        public async Task<int> StupidStoredProcedureParamsAsync(string reqType, short? dept = null, short? @class = null, short? item = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            var reqTypeParam = new SqlParameter { ParameterName = "@ReqType", SqlDbType = SqlDbType.VarChar, Direction = ParameterDirection.Input, Value = reqType, Size = 25 };
            if (reqTypeParam.Value == null)
                reqTypeParam.Value = DBNull.Value;

            var deptParam = new SqlParameter { ParameterName = "@Dept", SqlDbType = SqlDbType.SmallInt, Direction = ParameterDirection.Input, Value = dept.GetValueOrDefault(), Precision = 5, Scale = 0 };
            if (!dept.HasValue)
                deptParam.Value = DBNull.Value;

            var @classParam = new SqlParameter { ParameterName = "@Class", SqlDbType = SqlDbType.SmallInt, Direction = ParameterDirection.Input, Value = @class.GetValueOrDefault(), Precision = 5, Scale = 0 };
            if (!@class.HasValue)
                @classParam.Value = DBNull.Value;

            var itemParam = new SqlParameter { ParameterName = "@Item", SqlDbType = SqlDbType.SmallInt, Direction = ParameterDirection.Input, Value = item.GetValueOrDefault(), Precision = 5, Scale = 0 };
            if (!item.HasValue)
                itemParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };

            await Database.ExecuteSqlRawAsync("EXEC @procResult = [dbo].[StupidStoredProcedureParams] @ReqType, @Dept, @Class, @Item",  new[] {reqTypeParam, deptParam, @classParam, itemParam, procResultParam}, cancellationToken);

            return (int)procResultParam.Value;
        }

        public int StupidStoredProcedureParams2(string @override, short? @readonly = null, short? @class = null, short? @enum = null)
        {
            var @overrideParam = new SqlParameter { ParameterName = "@override", SqlDbType = SqlDbType.VarChar, Direction = ParameterDirection.Input, Value = @override, Size = 25 };
            if (@overrideParam.Value == null)
                @overrideParam.Value = DBNull.Value;

            var @readonlyParam = new SqlParameter { ParameterName = "@readonly", SqlDbType = SqlDbType.SmallInt, Direction = ParameterDirection.Input, Value = @readonly.GetValueOrDefault(), Precision = 5, Scale = 0 };
            if (!@readonly.HasValue)
                @readonlyParam.Value = DBNull.Value;

            var @classParam = new SqlParameter { ParameterName = "@class", SqlDbType = SqlDbType.SmallInt, Direction = ParameterDirection.Input, Value = @class.GetValueOrDefault(), Precision = 5, Scale = 0 };
            if (!@class.HasValue)
                @classParam.Value = DBNull.Value;

            var @enumParam = new SqlParameter { ParameterName = "@enum", SqlDbType = SqlDbType.SmallInt, Direction = ParameterDirection.Input, Value = @enum.GetValueOrDefault(), Precision = 5, Scale = 0 };
            if (!@enum.HasValue)
                @enumParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };

            Database.ExecuteSqlRaw("EXEC @procResult = [dbo].[StupidStoredProcedureParams2] @override, @readonly, @class, @enum", @overrideParam, @readonlyParam, @classParam, @enumParam, procResultParam);

            return (int)procResultParam.Value;
        }

        public async Task<int> StupidStoredProcedureParams2Async(string @override, short? @readonly = null, short? @class = null, short? @enum = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            var @overrideParam = new SqlParameter { ParameterName = "@override", SqlDbType = SqlDbType.VarChar, Direction = ParameterDirection.Input, Value = @override, Size = 25 };
            if (@overrideParam.Value == null)
                @overrideParam.Value = DBNull.Value;

            var @readonlyParam = new SqlParameter { ParameterName = "@readonly", SqlDbType = SqlDbType.SmallInt, Direction = ParameterDirection.Input, Value = @readonly.GetValueOrDefault(), Precision = 5, Scale = 0 };
            if (!@readonly.HasValue)
                @readonlyParam.Value = DBNull.Value;

            var @classParam = new SqlParameter { ParameterName = "@class", SqlDbType = SqlDbType.SmallInt, Direction = ParameterDirection.Input, Value = @class.GetValueOrDefault(), Precision = 5, Scale = 0 };
            if (!@class.HasValue)
                @classParam.Value = DBNull.Value;

            var @enumParam = new SqlParameter { ParameterName = "@enum", SqlDbType = SqlDbType.SmallInt, Direction = ParameterDirection.Input, Value = @enum.GetValueOrDefault(), Precision = 5, Scale = 0 };
            if (!@enum.HasValue)
                @enumParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };

            await Database.ExecuteSqlRawAsync("EXEC @procResult = [dbo].[StupidStoredProcedureParams2] @override, @readonly, @class, @enum",  new[] {@overrideParam, @readonlyParam, @classParam, @enumParam, procResultParam}, cancellationToken);

            return (int)procResultParam.Value;
        }

        public List<Synonyms_SimpleStoredProcReturnModel> Synonyms_SimpleStoredProc(int? inputInt = null)
        {
            int procResult;
            return Synonyms_SimpleStoredProc(inputInt, out procResult);
        }

        public List<Synonyms_SimpleStoredProcReturnModel> Synonyms_SimpleStoredProc(int? inputInt, out int procResult)
        {
            var inputIntParam = new SqlParameter { ParameterName = "@InputInt", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = inputInt.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!inputInt.HasValue)
                inputIntParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };
            const string sqlCommand = "EXEC @procResult = [Synonyms].[SimpleStoredProc] @InputInt";
            var procResultData = Set<Synonyms_SimpleStoredProcReturnModel>()
                .FromSqlRaw(sqlCommand, inputIntParam, procResultParam)
                .ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async Task<List<Synonyms_SimpleStoredProcReturnModel>> Synonyms_SimpleStoredProcAsync(int? inputInt = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            var inputIntParam = new SqlParameter { ParameterName = "@InputInt", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = inputInt.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!inputInt.HasValue)
                inputIntParam.Value = DBNull.Value;

            const string sqlCommand = "EXEC [Synonyms].[SimpleStoredProc] @InputInt";
            var procResultData = await Set<Synonyms_SimpleStoredProcReturnModel>()
                .FromSqlRaw(sqlCommand, inputIntParam)
                .ToListAsync(cancellationToken);

            return procResultData;
        }

        public List<TestReturnStringReturnModel> TestReturnString()
        {
            int procResult;
            return TestReturnString(out procResult);
        }

        public List<TestReturnStringReturnModel> TestReturnString(out int procResult)
        {
            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };
            const string sqlCommand = "EXEC @procResult = [dbo].[TestReturnString]";
            var procResultData = Set<TestReturnStringReturnModel>()
                .FromSqlRaw(sqlCommand, procResultParam)
                .ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async Task<List<TestReturnStringReturnModel>> TestReturnStringAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            const string sqlCommand = "EXEC [dbo].[TestReturnString]";
            var procResultData = await Set<TestReturnStringReturnModel>()
                .FromSqlRaw(sqlCommand)
                .ToListAsync(cancellationToken);

            return procResultData;
        }

        public int ThisHasMixedOutParameters(DateTime? foo, out int? firstOutParam, DateTime? bar, out int? secondOutParam, DateTime? baz = null)
        {
            var fooParam = new SqlParameter { ParameterName = "@Foo", SqlDbType = SqlDbType.DateTime, Direction = ParameterDirection.Input, Value = foo.GetValueOrDefault() };
            if (!foo.HasValue)
                fooParam.Value = DBNull.Value;

            var firstOutParamParam = new SqlParameter { ParameterName = "@FirstOutParam", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output, Precision = 10, Scale = 0 };
            var barParam = new SqlParameter { ParameterName = "@Bar", SqlDbType = SqlDbType.DateTime, Direction = ParameterDirection.Input, Value = bar.GetValueOrDefault() };
            if (!bar.HasValue)
                barParam.Value = DBNull.Value;

            var secondOutParamParam = new SqlParameter { ParameterName = "@SecondOutParam", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output, Precision = 10, Scale = 0 };
            var bazParam = new SqlParameter { ParameterName = "@Baz", SqlDbType = SqlDbType.DateTime, Direction = ParameterDirection.Input, Value = baz.GetValueOrDefault() };
            if (!baz.HasValue)
                bazParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };

            Database.ExecuteSqlRaw("EXEC @procResult = [dbo].[ThisHasMixedOutParameters] @Foo, @FirstOutParam OUTPUT, @Bar, @SecondOutParam OUTPUT, @Baz", fooParam, firstOutParamParam, barParam, secondOutParamParam, bazParam, procResultParam);

            if (IsSqlParameterNull(firstOutParamParam))
                firstOutParam = null;
            else
                firstOutParam = (int) firstOutParamParam.Value;

            if (IsSqlParameterNull(secondOutParamParam))
                secondOutParam = null;
            else
                secondOutParam = (int) secondOutParamParam.Value;

            return (int)procResultParam.Value;
        }

        // ThisHasMixedOutParametersAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public int UserDefinedTypeSampleStoredProc(int? a, DataTable type, int? b = null)
        {
            var aParam = new SqlParameter { ParameterName = "@a", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = a.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!a.HasValue)
                aParam.Value = DBNull.Value;

            var typeParam = new SqlParameter { ParameterName = "@type", SqlDbType = SqlDbType.Structured, Direction = ParameterDirection.Input, Value = type, TypeName = "dbo.UserDefinedTypeSample" };
            if (typeParam.Value == null)
                typeParam.Value = DBNull.Value;

            var bParam = new SqlParameter { ParameterName = "@b", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = b.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!b.HasValue)
                bParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };

            Database.ExecuteSqlRaw("EXEC @procResult = [dbo].[UserDefinedTypeSampleStoredProc] @a, @type, @b", aParam, typeParam, bParam, procResultParam);

            return (int)procResultParam.Value;
        }

        public async Task<int> UserDefinedTypeSampleStoredProcAsync(int? a, DataTable type, int? b = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            var aParam = new SqlParameter { ParameterName = "@a", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = a.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!a.HasValue)
                aParam.Value = DBNull.Value;

            var typeParam = new SqlParameter { ParameterName = "@type", SqlDbType = SqlDbType.Structured, Direction = ParameterDirection.Input, Value = type, TypeName = "dbo.UserDefinedTypeSample" };
            if (typeParam.Value == null)
                typeParam.Value = DBNull.Value;

            var bParam = new SqlParameter { ParameterName = "@b", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = b.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!b.HasValue)
                bParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };

            await Database.ExecuteSqlRawAsync("EXEC @procResult = [dbo].[UserDefinedTypeSampleStoredProc] @a, @type, @b",  new[] {aParam, typeParam, bParam, procResultParam}, cancellationToken);

            return (int)procResultParam.Value;
        }

        public List<XmlDataV1ReturnModel> XmlDataV1()
        {
            int procResult;
            return XmlDataV1(out procResult);
        }

        public List<XmlDataV1ReturnModel> XmlDataV1(out int procResult)
        {
            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };
            const string sqlCommand = "EXEC @procResult = [dbo].[XmlDataV1]";
            var procResultData = Set<XmlDataV1ReturnModel>()
                .FromSqlRaw(sqlCommand, procResultParam)
                .ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async Task<List<XmlDataV1ReturnModel>> XmlDataV1Async(CancellationToken cancellationToken = default(CancellationToken))
        {
            const string sqlCommand = "EXEC [dbo].[XmlDataV1]";
            var procResultData = await Set<XmlDataV1ReturnModel>()
                .FromSqlRaw(sqlCommand)
                .ToListAsync(cancellationToken);

            return procResultData;
        }

        public int XmlDataV2()
        {
            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };

            Database.ExecuteSqlRaw("EXEC @procResult = [dbo].[XmlDataV2] ", procResultParam);

            return (int)procResultParam.Value;
        }

        public async Task<int> XmlDataV2Async(CancellationToken cancellationToken = default(CancellationToken))
        {
            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };

            await Database.ExecuteSqlRawAsync("EXEC @procResult = [dbo].[XmlDataV2]",  new[] {procResultParam}, cancellationToken);

            return (int)procResultParam.Value;
        }


        // Table Valued Functions

        // dbo.182_test1
        public IQueryable<C182Test1ReturnModel> C182Test1(int? test = null)
        {
            return Set<C182Test1ReturnModel>()
                .FromSqlRaw("SELECT * FROM [dbo].[182_test1]({0})", test)
                .AsNoTracking();
        }

        // dbo.CsvToInt
        public IQueryable<CsvToIntReturnModel> CsvToInt(string array, string array2)
        {
            return Set<CsvToIntReturnModel>()
                .FromSqlRaw("SELECT * FROM [dbo].[CsvToInt]({0}, {1})", array, array2)
                .AsNoTracking();
        }

        // CustomSchema.CsvToIntWithSchema
        public IQueryable<CustomSchema_CsvToIntWithSchemaReturnModel> CustomSchema_CsvToIntWithSchema(string array, string array2)
        {
            return Set<CustomSchema_CsvToIntWithSchemaReturnModel>()
                .FromSqlRaw("SELECT * FROM [CustomSchema].[CsvToIntWithSchema]({0}, {1})", array, array2)
                .AsNoTracking();
        }

        // FFRS.CsvToInt2
        public IQueryable<FFRS_CsvToInt2ReturnModel> FFRS_CsvToInt2(string array, string array2)
        {
            return Set<FFRS_CsvToInt2ReturnModel>()
                .FromSqlRaw("SELECT * FROM [FFRS].[CsvToInt2]({0}, {1})", array, array2)
                .AsNoTracking();
        }

        // Scalar Valued Functions

        [DbFunction("udfNetSale", "dbo")]
        public decimal UdfNetSale(int? quantity = null, decimal? listPrice = null, decimal? discount = null)
        {
            throw new Exception("Don't call this directly. Use LINQ to call the scalar valued function as part of your query");
        }
    }

    #endregion

    #region Database context factory

    public class V8EfrpgTestDbContextFactory : IDesignTimeDbContextFactory<V8EfrpgTestDbContext>
    {
        public V8EfrpgTestDbContext CreateDbContext(string[] args)
        {
            return new V8EfrpgTestDbContext();
        }
    }

    #endregion

    #region Fake Database context

    public class FakeV8EfrpgTestDbContext : IV8EfrpgTestDbContext
    {
        public DbSet<AllColumnsNull> AllColumnsNulls { get; set; } // AllColumnsNull
        public DbSet<ComplexView> ComplexViews { get; set; } // ComplexView
        public DbSet<SmallDecimalTestView> SmallDecimalTestViews { get; set; } // SmallDecimalTestView

        public FakeV8EfrpgTestDbContext()
        {
            _database = new FakeDatabaseFacade(new V8EfrpgTestDbContext());

            AllColumnsNulls = new FakeDbSet<AllColumnsNull>();
            ComplexViews = new FakeDbSet<ComplexView>();
            SmallDecimalTestViews = new FakeDbSet<SmallDecimalTestView>();

        }

        public int SaveChangesCount { get; private set; }
        public virtual int SaveChanges()
        {
            ++SaveChangesCount;
            return 1;
        }

        public virtual int SaveChanges(bool acceptAllChangesOnSuccess)
        {
            return SaveChanges();
        }

        public virtual Task<int> SaveChangesAsync(CancellationToken cancellationToken)
        {
            ++SaveChangesCount;
            return Task<int>.Factory.StartNew(() => 1, cancellationToken);
        }
        public virtual Task<int> SaveChangesAsync(bool acceptAllChangesOnSuccess, CancellationToken cancellationToken)
        {
            ++SaveChangesCount;
            return Task<int>.Factory.StartNew(x => 1, acceptAllChangesOnSuccess, cancellationToken);
        }

        protected virtual void Dispose(bool disposing)
        {
        }

        public void Dispose()
        {
            Dispose(true);
        }

        private DatabaseFacade _database;
        public DatabaseFacade Database { get { return _database; } }

        public DbSet<TEntity> Set<TEntity>() where TEntity : class
        {
            throw new NotImplementedException();
        }

        public override string ToString()
        {
            throw new NotImplementedException();
        }

        public virtual EntityEntry Add(object entity)
        {
            throw new NotImplementedException();
        }

        public virtual EntityEntry<TEntity> Add<TEntity>(TEntity entity) where TEntity : class
        {
            throw new NotImplementedException();
        }

        public virtual Task AddRangeAsync(params object[] entities)
        {
            throw new NotImplementedException();
        }

        public virtual async Task AddRangeAsync(IEnumerable<object> entities, CancellationToken cancellationToken = default)
        {
            await Task.CompletedTask;
            throw new NotImplementedException();
        }

        public virtual async ValueTask<EntityEntry<TEntity>> AddAsync<TEntity>(TEntity entity, CancellationToken cancellationToken = default) where TEntity : class
        {
            await Task.CompletedTask;
            throw new NotImplementedException();
        }

        public virtual async ValueTask<EntityEntry> AddAsync(object entity, CancellationToken cancellationToken = default)
        {
            await Task.CompletedTask;
            throw new NotImplementedException();
        }

        public virtual void AddRange(IEnumerable<object> entities)
        {
            throw new NotImplementedException();
        }

        public virtual void AddRange(params object[] entities)
        {
            throw new NotImplementedException();
        }

        public virtual EntityEntry Attach(object entity)
        {
            throw new NotImplementedException();
        }

        public virtual EntityEntry<TEntity> Attach<TEntity>(TEntity entity) where TEntity : class
        {
            throw new NotImplementedException();
        }

        public virtual void AttachRange(IEnumerable<object> entities)
        {
            throw new NotImplementedException();
        }

        public virtual void AttachRange(params object[] entities)
        {
            throw new NotImplementedException();
        }

        public virtual EntityEntry Entry(object entity)
        {
            throw new NotImplementedException();
        }

        public virtual EntityEntry<TEntity> Entry<TEntity>(TEntity entity) where TEntity : class
        {
            throw new NotImplementedException();
        }

        public virtual TEntity Find<TEntity>(params object[] keyValues) where TEntity : class
        {
            throw new NotImplementedException();
        }

        public virtual ValueTask<TEntity> FindAsync<TEntity>(object[] keyValues, CancellationToken cancellationToken) where TEntity : class
        {
            throw new NotImplementedException();
        }

        public virtual ValueTask<TEntity> FindAsync<TEntity>(params object[] keyValues) where TEntity : class
        {
            throw new NotImplementedException();
        }

        public virtual ValueTask<object> FindAsync(Type entityType, object[] keyValues, CancellationToken cancellationToken)
        {
            throw new NotImplementedException();
        }

        public virtual ValueTask<object> FindAsync(Type entityType, params object[] keyValues)
        {
            throw new NotImplementedException();
        }

        public virtual object Find(Type entityType, params object[] keyValues)
        {
            throw new NotImplementedException();
        }

        public virtual EntityEntry Remove(object entity)
        {
            throw new NotImplementedException();
        }

        public virtual EntityEntry<TEntity> Remove<TEntity>(TEntity entity) where TEntity : class
        {
            throw new NotImplementedException();
        }

        public virtual void RemoveRange(IEnumerable<object> entities)
        {
            throw new NotImplementedException();
        }

        public virtual void RemoveRange(params object[] entities)
        {
            throw new NotImplementedException();
        }

        public virtual EntityEntry Update(object entity)
        {
            throw new NotImplementedException();
        }

        public virtual EntityEntry<TEntity> Update<TEntity>(TEntity entity) where TEntity : class
        {
            throw new NotImplementedException();
        }

        public virtual void UpdateRange(IEnumerable<object> entities)
        {
            throw new NotImplementedException();
        }

        public virtual void UpdateRange(params object[] entities)
        {
            throw new NotImplementedException();
        }

        public virtual IQueryable<TResult> FromExpression<TResult> (Expression<Func<IQueryable<TResult>>> expression)
        {
            throw new NotImplementedException();
        }


        // Stored Procedures

        public int AddTwoValues(int? a = null, int? b = null)
        {
            return 0;
        }

        public Task<int> AddTwoValuesAsync(int? a = null, int? b = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            return Task.FromResult(0);
        }

        public int AddTwoValuesWithResult(int? a, int? b, out int? result, out int? result2)
        {
            result = default(int);
            result2 = default(int);
            return 0;
        }

        // AddTwoValuesWithResultAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public int Alpha_Overclock(DateTime? parameter = null)
        {
            return 0;
        }

        public Task<int> Alpha_OverclockAsync(DateTime? parameter = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            return Task.FromResult(0);
        }

        public int App_UspCmtUserFsrUpdate(int? userId, int? fsrId, out int? ufsrId)
        {
            ufsrId = default(int);
            return 0;
        }

        // App_UspCmtUserFsrUpdateAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public DbSet<ASimpleExampleReturnModel> ASimpleExampleReturnModel { get; set; }
        public List<ASimpleExampleReturnModel> ASimpleExample()
        {
            int procResult;
            return ASimpleExample(out procResult);
        }

        public List<ASimpleExampleReturnModel> ASimpleExample(out int procResult)
        {
            procResult = 0;
            return new List<ASimpleExampleReturnModel>();
        }

        public Task<List<ASimpleExampleReturnModel>> ASimpleExampleAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            int procResult;
            return Task.FromResult(ASimpleExample(out procResult));
        }

        public int Beta_Overclock(DateTime? parameter = null)
        {
            return 0;
        }

        public Task<int> Beta_OverclockAsync(DateTime? parameter = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            return Task.FromResult(0);
        }

        public DbSet<C182Test2ReturnModel> C182Test2ReturnModel { get; set; }
        public C182Test2ReturnModel C182Test2(int? flag = null)
        {
            int procResult;
            return C182Test2(flag, out procResult);
        }

        public C182Test2ReturnModel C182Test2(int? flag, out int procResult)
        {
            procResult = 0;
            return new C182Test2ReturnModel();
        }

        // C182Test2Async() cannot be created due to having out parameters, or is relying on the procedure result (C182Test2ReturnModel)

        public DbSet<CheckIfApplicationIsCompleteReturnModel> CheckIfApplicationIsCompleteReturnModel { get; set; }
        public List<CheckIfApplicationIsCompleteReturnModel> CheckIfApplicationIsComplete(int? applicationId, out bool? isApplicationComplete)
        {
            int procResult;
            return CheckIfApplicationIsComplete(applicationId, out isApplicationComplete, out procResult);
        }

        public List<CheckIfApplicationIsCompleteReturnModel> CheckIfApplicationIsComplete(int? applicationId, out bool? isApplicationComplete, out int procResult)
        {
            isApplicationComplete = default(bool);
            procResult = 0;
            return new List<CheckIfApplicationIsCompleteReturnModel>();
        }

        // CheckIfApplicationIsCompleteAsync() cannot be created due to having out parameters, or is relying on the procedure result (List<CheckIfApplicationIsCompleteReturnModel>)

        public DbSet<ColourPivotReturnModel> ColourPivotReturnModel { get; set; }
        public List<ColourPivotReturnModel> ColourPivot()
        {
            int procResult;
            return ColourPivot(out procResult);
        }

        public List<ColourPivotReturnModel> ColourPivot(out int procResult)
        {
            procResult = 0;
            return new List<ColourPivotReturnModel>();
        }

        public Task<List<ColourPivotReturnModel>> ColourPivotAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            int procResult;
            return Task.FromResult(ColourPivot(out procResult));
        }

        public DbSet<ColumnNameAndTypesProcReturnModel> ColumnNameAndTypesProcReturnModel { get; set; }
        public List<ColumnNameAndTypesProcReturnModel> ColumnNameAndTypesProc()
        {
            int procResult;
            return ColumnNameAndTypesProc(out procResult);
        }

        public List<ColumnNameAndTypesProcReturnModel> ColumnNameAndTypesProc(out int procResult)
        {
            procResult = 0;
            return new List<ColumnNameAndTypesProcReturnModel>();
        }

        public Task<List<ColumnNameAndTypesProcReturnModel>> ColumnNameAndTypesProcAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            int procResult;
            return Task.FromResult(ColumnNameAndTypesProc(out procResult));
        }

        public int ConvertToString(int? someValue, out string someString)
        {
            someString = default(string);
            return 0;
        }

        // ConvertToStringAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public DbSet<DboProcDataFromFfrsReturnModel> DboProcDataFromFfrsReturnModel { get; set; }
        public List<DboProcDataFromFfrsReturnModel> DboProcDataFromFfrs(int? maxId = null)
        {
            int procResult;
            return DboProcDataFromFfrs(maxId, out procResult);
        }

        public List<DboProcDataFromFfrsReturnModel> DboProcDataFromFfrs(int? maxId, out int procResult)
        {
            procResult = 0;
            return new List<DboProcDataFromFfrsReturnModel>();
        }

        public Task<List<DboProcDataFromFfrsReturnModel>> DboProcDataFromFfrsAsync(int? maxId = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            int procResult;
            return Task.FromResult(DboProcDataFromFfrs(maxId, out procResult));
        }

        public DbSet<DboProcDataFromFfrsAndDboReturnModel> DboProcDataFromFfrsAndDboReturnModel { get; set; }
        public List<DboProcDataFromFfrsAndDboReturnModel> DboProcDataFromFfrsAndDbo()
        {
            int procResult;
            return DboProcDataFromFfrsAndDbo(out procResult);
        }

        public List<DboProcDataFromFfrsAndDboReturnModel> DboProcDataFromFfrsAndDbo(out int procResult)
        {
            procResult = 0;
            return new List<DboProcDataFromFfrsAndDboReturnModel>();
        }

        public Task<List<DboProcDataFromFfrsAndDboReturnModel>> DboProcDataFromFfrsAndDboAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            int procResult;
            return Task.FromResult(DboProcDataFromFfrsAndDbo(out procResult));
        }

        public DbSet<DsOpeProcReturnModel> DsOpeProcReturnModel { get; set; }
        public List<DsOpeProcReturnModel> DsOpeProc()
        {
            int procResult;
            return DsOpeProc(out procResult);
        }

        public List<DsOpeProcReturnModel> DsOpeProc(out int procResult)
        {
            procResult = 0;
            return new List<DsOpeProcReturnModel>();
        }

        public Task<List<DsOpeProcReturnModel>> DsOpeProcAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            int procResult;
            return Task.FromResult(DsOpeProc(out procResult));
        }

        public DbSet<FFRS_CvDataReturnModel> FFRS_CvDataReturnModel { get; set; }
        public List<FFRS_CvDataReturnModel> FFRS_CvData(int? maxId = null)
        {
            int procResult;
            return FFRS_CvData(maxId, out procResult);
        }

        public List<FFRS_CvDataReturnModel> FFRS_CvData(int? maxId, out int procResult)
        {
            procResult = 0;
            return new List<FFRS_CvDataReturnModel>();
        }

        public Task<List<FFRS_CvDataReturnModel>> FFRS_CvDataAsync(int? maxId = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            int procResult;
            return Task.FromResult(FFRS_CvData(maxId, out procResult));
        }

        public DbSet<FFRS_DataFromDboReturnModel> FFRS_DataFromDboReturnModel { get; set; }
        public List<FFRS_DataFromDboReturnModel> FFRS_DataFromDbo()
        {
            int procResult;
            return FFRS_DataFromDbo(out procResult);
        }

        public List<FFRS_DataFromDboReturnModel> FFRS_DataFromDbo(out int procResult)
        {
            procResult = 0;
            return new List<FFRS_DataFromDboReturnModel>();
        }

        public Task<List<FFRS_DataFromDboReturnModel>> FFRS_DataFromDboAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            int procResult;
            return Task.FromResult(FFRS_DataFromDbo(out procResult));
        }

        public DbSet<FFRS_DataFromDboAndFfrsReturnModel> FFRS_DataFromDboAndFfrsReturnModel { get; set; }
        public List<FFRS_DataFromDboAndFfrsReturnModel> FFRS_DataFromDboAndFfrs()
        {
            int procResult;
            return FFRS_DataFromDboAndFfrs(out procResult);
        }

        public List<FFRS_DataFromDboAndFfrsReturnModel> FFRS_DataFromDboAndFfrs(out int procResult)
        {
            procResult = 0;
            return new List<FFRS_DataFromDboAndFfrsReturnModel>();
        }

        public Task<List<FFRS_DataFromDboAndFfrsReturnModel>> FFRS_DataFromDboAndFfrsAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            int procResult;
            return Task.FromResult(FFRS_DataFromDboAndFfrs(out procResult));
        }

        public DbSet<FkTest_HelloReturnModel> FkTest_HelloReturnModel { get; set; }
        public List<FkTest_HelloReturnModel> FkTest_Hello()
        {
            int procResult;
            return FkTest_Hello(out procResult);
        }

        public List<FkTest_HelloReturnModel> FkTest_Hello(out int procResult)
        {
            procResult = 0;
            return new List<FkTest_HelloReturnModel>();
        }

        public Task<List<FkTest_HelloReturnModel>> FkTest_HelloAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            int procResult;
            return Task.FromResult(FkTest_Hello(out procResult));
        }

        public DbSet<GetSmallDecimalTestReturnModel> GetSmallDecimalTestReturnModel { get; set; }
        public List<GetSmallDecimalTestReturnModel> GetSmallDecimalTest(int? maxId = null)
        {
            int procResult;
            return GetSmallDecimalTest(maxId, out procResult);
        }

        public List<GetSmallDecimalTestReturnModel> GetSmallDecimalTest(int? maxId, out int procResult)
        {
            procResult = 0;
            return new List<GetSmallDecimalTestReturnModel>();
        }

        public Task<List<GetSmallDecimalTestReturnModel>> GetSmallDecimalTestAsync(int? maxId = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            int procResult;
            return Task.FromResult(GetSmallDecimalTest(maxId, out procResult));
        }

        public int InsertRecord(string data, out int? insertedId)
        {
            insertedId = default(int);
            return 0;
        }

        // InsertRecordAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public int InsertRecordThree(string data, out int? insertedId, int? someId, out int? anotherInsertedId)
        {
            insertedId = default(int);
            anotherInsertedId = default(int);
            return 0;
        }

        // InsertRecordThreeAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public int InsertRecordTwo(string data, out int? insertedId, out int? anotherInsertedId)
        {
            insertedId = default(int);
            anotherInsertedId = default(int);
            return 0;
        }

        // InsertRecordTwoAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public int MinTripSequenceStart(out DateTime? minTripSequenceStartParam)
        {
            minTripSequenceStartParam = default(DateTime);
            return 0;
        }

        // MinTripSequenceStartAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public int MinTripSequenceStartNull(out DateTime? minTripSequenceStartParam)
        {
            minTripSequenceStartParam = default(DateTime);
            return 0;
        }

        // MinTripSequenceStartNullAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public int MultipleReturnColumnsFromTempTable()
        {
            return 0;
        }

        public Task<int> MultipleReturnColumnsFromTempTableAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            return Task.FromResult(0);
        }

        public int NvarcharTest(string maxOutputParam, string normalOutputParam)
        {
            return 0;
        }

        public Task<int> NvarcharTestAsync(string maxOutputParam, string normalOutputParam, CancellationToken cancellationToken = default(CancellationToken))
        {
            return Task.FromResult(0);
        }

        public int Omega_Overclock(DateTime? parameter = null)
        {
            return 0;
        }

        public Task<int> Omega_OverclockAsync(DateTime? parameter = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            return Task.FromResult(0);
        }

        public int ProcTestDecimalOutput(out decimal? perfectNumber)
        {
            perfectNumber = default(decimal);
            return 0;
        }

        // ProcTestDecimalOutputAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public int ProcTestDecimalOutputV2(out decimal? perfectNumber)
        {
            perfectNumber = default(decimal);
            return 0;
        }

        // ProcTestDecimalOutputV2Async() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public int ProcTestDecimalOutputV3Default(out decimal? perfectNumber)
        {
            perfectNumber = default(decimal);
            return 0;
        }

        // ProcTestDecimalOutputV3DefaultAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public DbSet<SpatialTypesNoParamsReturnModel> SpatialTypesNoParamsReturnModel { get; set; }
        public List<SpatialTypesNoParamsReturnModel> SpatialTypesNoParams()
        {
            int procResult;
            return SpatialTypesNoParams(out procResult);
        }

        public List<SpatialTypesNoParamsReturnModel> SpatialTypesNoParams(out int procResult)
        {
            procResult = 0;
            return new List<SpatialTypesNoParamsReturnModel>();
        }

        public Task<List<SpatialTypesNoParamsReturnModel>> SpatialTypesNoParamsAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            int procResult;
            return Task.FromResult(SpatialTypesNoParams(out procResult));
        }

        public DbSet<SpatialTypesWithParamsReturnModel> SpatialTypesWithParamsReturnModel { get; set; }
        public List<SpatialTypesWithParamsReturnModel> SpatialTypesWithParams(NetTopologySuite.Geometries.Geometry geometry, NetTopologySuite.Geometries.Point geography)
        {
            int procResult;
            return SpatialTypesWithParams(geometry, geography, out procResult);
        }

        public List<SpatialTypesWithParamsReturnModel> SpatialTypesWithParams(NetTopologySuite.Geometries.Geometry geometry, NetTopologySuite.Geometries.Point geography, out int procResult)
        {
            procResult = 0;
            return new List<SpatialTypesWithParamsReturnModel>();
        }

        public Task<List<SpatialTypesWithParamsReturnModel>> SpatialTypesWithParamsAsync(NetTopologySuite.Geometries.Geometry geometry, NetTopologySuite.Geometries.Point geography, CancellationToken cancellationToken = default(CancellationToken))
        {
            int procResult;
            return Task.FromResult(SpatialTypesWithParams(geometry, geography, out procResult));
        }

        public DbSet<StpMultipleIdenticalResultsReturnModel> StpMultipleIdenticalResultsReturnModel { get; set; }
        public List<StpMultipleIdenticalResultsReturnModel> StpMultipleIdenticalResults(int? someVar = null)
        {
            int procResult;
            return StpMultipleIdenticalResults(someVar, out procResult);
        }

        public List<StpMultipleIdenticalResultsReturnModel> StpMultipleIdenticalResults(int? someVar, out int procResult)
        {
            procResult = 0;
            return new List<StpMultipleIdenticalResultsReturnModel>();
        }

        public Task<List<StpMultipleIdenticalResultsReturnModel>> StpMultipleIdenticalResultsAsync(int? someVar = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            int procResult;
            return Task.FromResult(StpMultipleIdenticalResults(someVar, out procResult));
        }

        public DbSet<StpMultipleMultipleResultsWithParamsReturnModel> StpMultipleMultipleResultsWithParamsReturnModel { get; set; }
        public StpMultipleMultipleResultsWithParamsReturnModel StpMultipleMultipleResultsWithParams(int? firstVal = null, int? secondVal = null, int? thirdVal = null)
        {
            int procResult;
            return StpMultipleMultipleResultsWithParams(firstVal, secondVal, thirdVal, out procResult);
        }

        public StpMultipleMultipleResultsWithParamsReturnModel StpMultipleMultipleResultsWithParams(int? firstVal, int? secondVal, int? thirdVal, out int procResult)
        {
            procResult = 0;
            return new StpMultipleMultipleResultsWithParamsReturnModel();
        }

        // StpMultipleMultipleResultsWithParamsAsync() cannot be created due to having out parameters, or is relying on the procedure result (StpMultipleMultipleResultsWithParamsReturnModel)

        public DbSet<StpMultipleResultsReturnModel> StpMultipleResultsReturnModel { get; set; }
        public StpMultipleResultsReturnModel StpMultipleResults()
        {
            int procResult;
            return StpMultipleResults(out procResult);
        }

        public StpMultipleResultsReturnModel StpMultipleResults(out int procResult)
        {
            procResult = 0;
            return new StpMultipleResultsReturnModel();
        }

        // StpMultipleResultsAsync() cannot be created due to having out parameters, or is relying on the procedure result (StpMultipleResultsReturnModel)

        public DbSet<StpMultipleResultsWithParamsReturnModel> StpMultipleResultsWithParamsReturnModel { get; set; }
        public StpMultipleResultsWithParamsReturnModel StpMultipleResultsWithParams(int? firstVal = null, int? secondVal = null)
        {
            int procResult;
            return StpMultipleResultsWithParams(firstVal, secondVal, out procResult);
        }

        public StpMultipleResultsWithParamsReturnModel StpMultipleResultsWithParams(int? firstVal, int? secondVal, out int procResult)
        {
            procResult = 0;
            return new StpMultipleResultsWithParamsReturnModel();
        }

        // StpMultipleResultsWithParamsAsync() cannot be created due to having out parameters, or is relying on the procedure result (StpMultipleResultsWithParamsReturnModel)

        public DbSet<StpNoParamsTestReturnModel> StpNoParamsTestReturnModel { get; set; }
        public List<StpNoParamsTestReturnModel> StpNoParamsTest()
        {
            int procResult;
            return StpNoParamsTest(out procResult);
        }

        public List<StpNoParamsTestReturnModel> StpNoParamsTest(out int procResult)
        {
            procResult = 0;
            return new List<StpNoParamsTestReturnModel>();
        }

        public Task<List<StpNoParamsTestReturnModel>> StpNoParamsTestAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            int procResult;
            return Task.FromResult(StpNoParamsTest(out procResult));
        }

        public int StpNoReturnFields()
        {
            return 0;
        }

        public Task<int> StpNoReturnFieldsAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            return Task.FromResult(0);
        }

        public DbSet<StpNullableParamsTestReturnModel> StpNullableParamsTestReturnModel { get; set; }
        public List<StpNullableParamsTestReturnModel> StpNullableParamsTest(int? aVal = null, int? bVal = null)
        {
            int procResult;
            return StpNullableParamsTest(aVal, bVal, out procResult);
        }

        public List<StpNullableParamsTestReturnModel> StpNullableParamsTest(int? aVal, int? bVal, out int procResult)
        {
            procResult = 0;
            return new List<StpNullableParamsTestReturnModel>();
        }

        public Task<List<StpNullableParamsTestReturnModel>> StpNullableParamsTestAsync(int? aVal = null, int? bVal = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            int procResult;
            return Task.FromResult(StpNullableParamsTest(aVal, bVal, out procResult));
        }

        public DbSet<StpTestReturnModel> StpTestReturnModel { get; set; }
        public List<StpTestReturnModel> StpTest(string strDateFrom, string strDateTo, out bool? retBool)
        {
            int procResult;
            return StpTest(strDateFrom, strDateTo, out retBool, out procResult);
        }

        public List<StpTestReturnModel> StpTest(string strDateFrom, string strDateTo, out bool? retBool, out int procResult)
        {
            retBool = default(bool);
            procResult = 0;
            return new List<StpTestReturnModel>();
        }

        // StpTestAsync() cannot be created due to having out parameters, or is relying on the procedure result (List<StpTestReturnModel>)

        public DbSet<StpTestUnderscoreTestReturnModel> StpTestUnderscoreTestReturnModel { get; set; }
        public List<StpTestUnderscoreTestReturnModel> StpTestUnderscoreTest(string strDateFrom, string strDateTo)
        {
            int procResult;
            return StpTestUnderscoreTest(strDateFrom, strDateTo, out procResult);
        }

        public List<StpTestUnderscoreTestReturnModel> StpTestUnderscoreTest(string strDateFrom, string strDateTo, out int procResult)
        {
            procResult = 0;
            return new List<StpTestUnderscoreTestReturnModel>();
        }

        public Task<List<StpTestUnderscoreTestReturnModel>> StpTestUnderscoreTestAsync(string strDateFrom, string strDateTo, CancellationToken cancellationToken = default(CancellationToken))
        {
            int procResult;
            return Task.FromResult(StpTestUnderscoreTest(strDateFrom, strDateTo, out procResult));
        }

        public int StupidStoredProcedureParams(string reqType, short? dept = null, short? @class = null, short? item = null)
        {
            return 0;
        }

        public Task<int> StupidStoredProcedureParamsAsync(string reqType, short? dept = null, short? @class = null, short? item = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            return Task.FromResult(0);
        }

        public int StupidStoredProcedureParams2(string @override, short? @readonly = null, short? @class = null, short? @enum = null)
        {
            return 0;
        }

        public Task<int> StupidStoredProcedureParams2Async(string @override, short? @readonly = null, short? @class = null, short? @enum = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            return Task.FromResult(0);
        }

        public DbSet<Synonyms_SimpleStoredProcReturnModel> Synonyms_SimpleStoredProcReturnModel { get; set; }
        public List<Synonyms_SimpleStoredProcReturnModel> Synonyms_SimpleStoredProc(int? inputInt = null)
        {
            int procResult;
            return Synonyms_SimpleStoredProc(inputInt, out procResult);
        }

        public List<Synonyms_SimpleStoredProcReturnModel> Synonyms_SimpleStoredProc(int? inputInt, out int procResult)
        {
            procResult = 0;
            return new List<Synonyms_SimpleStoredProcReturnModel>();
        }

        public Task<List<Synonyms_SimpleStoredProcReturnModel>> Synonyms_SimpleStoredProcAsync(int? inputInt = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            int procResult;
            return Task.FromResult(Synonyms_SimpleStoredProc(inputInt, out procResult));
        }

        public DbSet<TestReturnStringReturnModel> TestReturnStringReturnModel { get; set; }
        public List<TestReturnStringReturnModel> TestReturnString()
        {
            int procResult;
            return TestReturnString(out procResult);
        }

        public List<TestReturnStringReturnModel> TestReturnString(out int procResult)
        {
            procResult = 0;
            return new List<TestReturnStringReturnModel>();
        }

        public Task<List<TestReturnStringReturnModel>> TestReturnStringAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            int procResult;
            return Task.FromResult(TestReturnString(out procResult));
        }

        public int ThisHasMixedOutParameters(DateTime? foo, out int? firstOutParam, DateTime? bar, out int? secondOutParam, DateTime? baz = null)
        {
            firstOutParam = default(int);
            secondOutParam = default(int);
            return 0;
        }

        // ThisHasMixedOutParametersAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public int UserDefinedTypeSampleStoredProc(int? a, DataTable type, int? b = null)
        {
            return 0;
        }

        public Task<int> UserDefinedTypeSampleStoredProcAsync(int? a, DataTable type, int? b = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            return Task.FromResult(0);
        }

        public DbSet<XmlDataV1ReturnModel> XmlDataV1ReturnModel { get; set; }
        public List<XmlDataV1ReturnModel> XmlDataV1()
        {
            int procResult;
            return XmlDataV1(out procResult);
        }

        public List<XmlDataV1ReturnModel> XmlDataV1(out int procResult)
        {
            procResult = 0;
            return new List<XmlDataV1ReturnModel>();
        }

        public Task<List<XmlDataV1ReturnModel>> XmlDataV1Async(CancellationToken cancellationToken = default(CancellationToken))
        {
            int procResult;
            return Task.FromResult(XmlDataV1(out procResult));
        }

        public int XmlDataV2()
        {
            return 0;
        }

        public Task<int> XmlDataV2Async(CancellationToken cancellationToken = default(CancellationToken))
        {
            return Task.FromResult(0);
        }

        // Table Valued Functions

        // dbo.182_test1
        public IQueryable<C182Test1ReturnModel> C182Test1(int? test = null)
        {
            return new List<C182Test1ReturnModel>().AsQueryable();
        }

        // dbo.CsvToInt
        public IQueryable<CsvToIntReturnModel> CsvToInt(string array, string array2)
        {
            return new List<CsvToIntReturnModel>().AsQueryable();
        }

        // CustomSchema.CsvToIntWithSchema
        public IQueryable<CustomSchema_CsvToIntWithSchemaReturnModel> CustomSchema_CsvToIntWithSchema(string array, string array2)
        {
            return new List<CustomSchema_CsvToIntWithSchemaReturnModel>().AsQueryable();
        }

        // FFRS.CsvToInt2
        public IQueryable<FFRS_CsvToInt2ReturnModel> FFRS_CsvToInt2(string array, string array2)
        {
            return new List<FFRS_CsvToInt2ReturnModel>().AsQueryable();
        }

        // Scalar Valued Functions

        // dbo.udfNetSale
        public decimal UdfNetSale(int? quantity = null, decimal? listPrice = null, decimal? discount = null)
        {
            return default(decimal);
        }
    }

    #endregion

    #region Fake DbSet

    // ************************************************************************
    // Fake DbSet
    // Implementing Find:
    //      The Find method is difficult to implement in a generic fashion. If
    //      you need to test code that makes use of the Find method it is
    //      easiest to create a test DbSet for each of the entity types that
    //      need to support find. You can then write logic to find that
    //      particular type of entity, as shown below:
    //      public class FakeBlogDbSet : FakeDbSet<Blog>
    //      {
    //          public override Blog Find(params object[] keyValues)
    //          {
    //              var id = (int) keyValues.Single();
    //              return this.SingleOrDefault(b => b.BlogId == id);
    //          }
    //      }
    //      Read more about it here: https://msdn.microsoft.com/en-us/data/dn314431.aspx
    public class FakeDbSet<TEntity> :
        DbSet<TEntity>,
        IQueryable<TEntity>,
        IAsyncEnumerable<TEntity>,
        IListSource,
        IResettableService
        where TEntity : class
    {
        private readonly PropertyInfo[] _primaryKeys;
        private ObservableCollection<TEntity> _data;
        private IQueryable _query;
        public override IEntityType EntityType { get; }

        public FakeDbSet()
        {
            _primaryKeys = null;
            _data        = new ObservableCollection<TEntity>();
            _query       = _data.AsQueryable();
        }

        public FakeDbSet(params string[] primaryKeys)
        {
            _primaryKeys = typeof(TEntity).GetProperties().Where(x => primaryKeys.Contains(x.Name)).ToArray();
            _data        = new ObservableCollection<TEntity>();
            _query       = _data.AsQueryable();
        }

        public override TEntity Find(params object[] keyValues)
        {
            if (_primaryKeys == null)
                throw new ArgumentException("No primary keys defined");
            if (keyValues.Length != _primaryKeys.Length)
                throw new ArgumentException("Incorrect number of keys passed to Find method");

            var keyQuery = this.AsQueryable();
            keyQuery = keyValues
                .Select((t, i) => i)
                .Aggregate(keyQuery,
                    (current, x) =>
                        current.Where(entity => _primaryKeys[x].GetValue(entity, null).Equals(keyValues[x])));

            return keyQuery.SingleOrDefault();
        }

        public override ValueTask<TEntity> FindAsync(object[] keyValues, CancellationToken cancellationToken)
        {
            return new ValueTask<TEntity>(Task<TEntity>.Factory.StartNew(() => Find(keyValues), cancellationToken));
        }

        public override ValueTask<TEntity> FindAsync(params object[] keyValues)
        {
            return new ValueTask<TEntity>(Task<TEntity>.Factory.StartNew(() => Find(keyValues)));
        }

        public override EntityEntry<TEntity> Add(TEntity entity)
        {
            _data.Add(entity);
            return null;
        }

        public override ValueTask<EntityEntry<TEntity>> AddAsync(TEntity entity, CancellationToken cancellationToken = default)
        {
            return new ValueTask<EntityEntry<TEntity>>(Task<EntityEntry<TEntity>>.Factory.StartNew(() => Add(entity), cancellationToken));
        }

        public override void AddRange(params TEntity[] entities)
        {
            if (entities == null) throw new ArgumentNullException("entities");
            foreach (var entity in entities)
                _data.Add(entity);
        }

        public override void AddRange(IEnumerable<TEntity> entities)
        {
            if (entities == null) throw new ArgumentNullException("entities");
            foreach (var entity in entities)
                _data.Add(entity);
        }

        public override Task AddRangeAsync(params TEntity[] entities)
        {
            if (entities == null) throw new ArgumentNullException("entities");
            return Task.Factory.StartNew(() => AddRange(entities));
        }

        public override Task AddRangeAsync(IEnumerable<TEntity> entities, CancellationToken cancellationToken = default)
        {
            if (entities == null) throw new ArgumentNullException("entities");
            return Task.Factory.StartNew(() => AddRange(entities), cancellationToken);
        }

        public override EntityEntry<TEntity> Attach(TEntity entity)
        {
            if (entity == null) throw new ArgumentNullException("entity");
            return Add(entity);
        }

        public override void AttachRange(params TEntity[] entities)
        {
            if (entities == null) throw new ArgumentNullException("entities");
            AddRange(entities);
        }

        public override void AttachRange(IEnumerable<TEntity> entities)
        {
            if (entities == null) throw new ArgumentNullException("entities");
            AddRange(entities);
        }

        public override EntityEntry<TEntity> Remove(TEntity entity)
        {
            _data.Remove(entity);
            return null;
        }

        public override void RemoveRange(params TEntity[] entities)
        {
            if (entities == null) throw new ArgumentNullException("entities");
            foreach (var entity in entities.ToList())
                _data.Remove(entity);
        }

        public override void RemoveRange(IEnumerable<TEntity> entities)
        {
            RemoveRange(entities.ToArray());
        }

        public override EntityEntry<TEntity> Update(TEntity entity)
        {
            _data.Remove(entity);
            _data.Add(entity);
            return null;
        }

        public override void UpdateRange(params TEntity[] entities)
        {
            if (entities == null) throw new ArgumentNullException("entities");
            RemoveRange(entities);
            AddRange(entities);
        }

        public override void UpdateRange(IEnumerable<TEntity> entities)
        {
            if (entities == null) throw new ArgumentNullException("entities");
            var array = entities.ToArray();        RemoveRange(array);
            AddRange(array);
        }

        bool IListSource.ContainsListCollection => true;

        public IList GetList()
        {
            return _data;
        }

        IList IListSource.GetList()
        {
            return _data;
        }

        Type IQueryable.ElementType
        {
            get { return _query.ElementType; }
        }

        Expression IQueryable.Expression
        {
            get { return _query.Expression; }
        }

        IQueryProvider IQueryable.Provider
        {
            get { return new FakeDbAsyncQueryProvider<TEntity>(_data); }
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return _data.GetEnumerator();
        }

        IEnumerator<TEntity> IEnumerable<TEntity>.GetEnumerator()
        {
            return _data.GetEnumerator();
        }

        public override IAsyncEnumerator<TEntity> GetAsyncEnumerator(CancellationToken cancellationToken = default)
        {
            return new FakeDbAsyncEnumerator<TEntity>(this.AsEnumerable().GetEnumerator());
        }

        public void ResetState()
        {
            _data  = new ObservableCollection<TEntity>();
            _query = _data.AsQueryable();
        }

        public Task ResetStateAsync(CancellationToken cancellationToken = new CancellationToken())
        {
            return Task.Factory.StartNew(() => ResetState());
        }
    }

    public class FakeDbAsyncQueryProvider<TEntity> : FakeQueryProvider<TEntity>, IAsyncEnumerable<TEntity>, IAsyncQueryProvider
    {
        public FakeDbAsyncQueryProvider(Expression expression) : base(expression)
        {
        }

        public FakeDbAsyncQueryProvider(IEnumerable<TEntity> enumerable) : base(enumerable)
        {
        }

        public TResult ExecuteAsync<TResult>(Expression expression, CancellationToken cancellationToken)
        {
            var expectedResultType = typeof(TResult).GetGenericArguments()[0];
            var executionResult = typeof(IQueryProvider)
                .GetMethods()
                .First(method => method.Name == nameof(IQueryProvider.Execute) && method.IsGenericMethod)
                .MakeGenericMethod(expectedResultType)
                .Invoke(this, new object[] { expression });

            return (TResult) typeof(Task).GetMethod(nameof(Task.FromResult))
                ?.MakeGenericMethod(expectedResultType)
                .Invoke(null, new[] { executionResult });
        }

        public IAsyncEnumerator<TEntity> GetAsyncEnumerator(CancellationToken cancellationToken = default)
        {
            return new FakeDbAsyncEnumerator<TEntity>(this.AsEnumerable().GetEnumerator());
        }
    }

    public class FakeDbAsyncEnumerable<T> : EnumerableQuery<T>, IAsyncEnumerable<T>, IQueryable<T>
    {
        public FakeDbAsyncEnumerable(IEnumerable<T> enumerable)
            : base(enumerable)
        {
        }

        public FakeDbAsyncEnumerable(Expression expression)
            : base(expression)
        {
        }

        public IAsyncEnumerator<T> GetAsyncEnumerator(CancellationToken cancellationToken = new CancellationToken())
        {
            return new FakeDbAsyncEnumerator<T>(this.AsEnumerable().GetEnumerator());
        }

        IAsyncEnumerator<T> IAsyncEnumerable<T>.GetAsyncEnumerator(CancellationToken cancellationToken)
        {
            return GetAsyncEnumerator(cancellationToken);
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return this.AsEnumerable().GetEnumerator();
        }
    }

    public class FakeDbAsyncEnumerator<T> : IAsyncEnumerator<T>
    {
        private readonly IEnumerator<T> _inner;

        public FakeDbAsyncEnumerator(IEnumerator<T> inner)
        {
            _inner = inner;
        }

        public T Current
        {
            get { return _inner.Current; }
        }

        public ValueTask<bool> MoveNextAsync()
        {
            return new ValueTask<bool>(_inner.MoveNext());
        }

        public ValueTask DisposeAsync()
        {
            _inner.Dispose();
            return new ValueTask(Task.CompletedTask);
        }
    }

    public abstract class FakeQueryProvider<T> : IOrderedQueryable<T>, IQueryProvider
    {
        private IEnumerable<T> _enumerable;

        protected FakeQueryProvider(Expression expression)
        {
            Expression = expression;
        }

        protected FakeQueryProvider(IEnumerable<T> enumerable)
        {
            _enumerable = enumerable;
            Expression = enumerable.AsQueryable().Expression;
        }

        public IQueryable CreateQuery(Expression expression)
        {
            if (expression is MethodCallExpression m)
            {
                var resultType = m.Method.ReturnType; // it should be IQueryable<T>
                var tElement = resultType.GetGenericArguments().First();
                return (IQueryable) CreateInstance(tElement, expression);
            }

            return CreateQuery<T>(expression);
        }

        public IQueryable<TEntity> CreateQuery<TEntity>(Expression expression)
        {
            return (IQueryable<TEntity>) CreateInstance(typeof(TEntity), expression);
        }

        private object CreateInstance(Type tElement, Expression expression)
        {
            var queryType = GetType().GetGenericTypeDefinition().MakeGenericType(tElement);
            return Activator.CreateInstance(queryType, expression);
        }

        public object Execute(Expression expression)
        {
            return CompileExpressionItem<object>(expression);
        }

        public TResult Execute<TResult>(Expression expression)
        {
            return CompileExpressionItem<TResult>(expression);
        }

        IEnumerator<T> IEnumerable<T>.GetEnumerator()
        {
            if (_enumerable == null) _enumerable = CompileExpressionItem<IEnumerable<T>>(Expression);
            return _enumerable.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            if (_enumerable == null) _enumerable = CompileExpressionItem<IEnumerable<T>>(Expression);
            return _enumerable.GetEnumerator();
        }

        public Type ElementType => typeof(T);

        public Expression Expression { get; }

        public IQueryProvider Provider => this;

        private static TResult CompileExpressionItem<TResult>(Expression expression)
        {
            var visitor = new FakeExpressionVisitor();
            var body = visitor.Visit(expression);
            var f = Expression.Lambda<Func<TResult>>(body ?? throw new InvalidOperationException(string.Format("{0} is null", nameof(body))), (IEnumerable<ParameterExpression>) null);
            return f.Compile()();
        }
    }

    public class FakeExpressionVisitor : ExpressionVisitor
    {
    }

    public class FakeDatabaseFacade : DatabaseFacade
    {
        public FakeDatabaseFacade(DbContext context) : base(context)
        {
        }

        public override bool EnsureCreated()
        {
            return true;
        }

        public override Task<bool> EnsureCreatedAsync(CancellationToken cancellationToken = new CancellationToken())
        {
            return Task.FromResult(EnsureCreated());
        }

        public override bool EnsureDeleted()
        {
            return true;
        }

        public override Task<bool> EnsureDeletedAsync(CancellationToken cancellationToken = new CancellationToken())
        {
            return Task.FromResult(EnsureDeleted());
        }

        public override bool CanConnect()
        {
            return true;
        }

        public override Task<bool> CanConnectAsync(CancellationToken cancellationToken = new CancellationToken())
        {
            return Task.FromResult(CanConnect());
        }

        public override IDbContextTransaction BeginTransaction()
        {
            return new FakeDbContextTransaction();
        }

        public override Task<IDbContextTransaction> BeginTransactionAsync(CancellationToken cancellationToken = new CancellationToken())
        {
            return Task.FromResult(BeginTransaction());
        }

        public override void CommitTransaction()
        {
        }

        public override Task CommitTransactionAsync(CancellationToken cancellationToken = new CancellationToken())
        {
            return Task.CompletedTask;
        }

        public override void RollbackTransaction()
        {
        }

        public override Task RollbackTransactionAsync(CancellationToken cancellationToken = new CancellationToken())
        {
            return Task.CompletedTask;
        }

        public override IExecutionStrategy CreateExecutionStrategy()
        {
            return null;
        }

        public override string ToString()
        {
            return string.Empty;
        }
    }

    public class FakeDbContextTransaction : IDbContextTransaction
    {
        public Guid TransactionId => Guid.NewGuid();
        public void Commit() { }
        public void Rollback() { }
        public Task CommitAsync(CancellationToken cancellationToken = new CancellationToken()) => Task.CompletedTask;
        public Task RollbackAsync(CancellationToken cancellationToken = new CancellationToken()) => Task.CompletedTask;
        public void Dispose() { }
        public ValueTask DisposeAsync() => default;
    }

    #endregion

    #region POCO classes

    // The table 'A' is not usable by entity framework because it
    // does not have a primary key. It is listed here for completeness.
    // A
    public class A
    {
        public int AId { get; set; }
        public int C1 { get; set; }
        public int C2 { get; set; }
    }

    // The table 'AAREF' is not usable by entity framework because it
    // does not have a primary key. It is listed here for completeness.
    // AAREF
    public class Aaref
    {
        public int C1 { get; set; }
        public int C2 { get; set; }
        public DateTime CreatedUtc { get; set; }
    }

    // The table 'AB_OrderLinesAB_' is not usable by entity framework because it
    // does not have a primary key. It is listed here for completeness.
    // AB_OrderLinesAB_
    public class AbOrderLinesAb
    {
        public int Id { get; set; }
        public int OrderId { get; set; }
        public string Sku { get; set; }
    }

    // The table 'AB_OrdersAB_' is not usable by entity framework because it
    // does not have a primary key. It is listed here for completeness.
    // AB_OrdersAB_
    public class AbOrdersAb
    {
        public int Id { get; set; }
        public DateTime Added { get; set; }

        public AbOrdersAb()
        {
            Added = DateTime.Now;
        }
    }

    // AllColumnsNull
    public class AllColumnsNull
    {
        public int? Total { get; set; }
        public string AName { get; set; }
    }

    // The table 'Harish3485' is not usable by entity framework because it
    // does not have a primary key. It is listed here for completeness.
    // Harish3485
    public class Alpha_Harish3485
    {
        public int Id { get; set; }
        public int HarishId { get; set; }
    }

    // The table 'Test' is not usable by entity framework because it
    // does not have a primary key. It is listed here for completeness.
    // Test
    public class Alpha_Test
    {
        public int? Id { get; set; }
        public int? ExclusionTest { get; set; }
    }

    // The table 'workflow' is not usable by entity framework because it
    // does not have a primary key. It is listed here for completeness.
    // workflow
    public class Alpha_Workflow
    {
        public int Id { get; set; }
        public string Description { get; set; }
    }

    // The table 'alpha_workflow_synonym' is not usable by entity framework because it
    // does not have a primary key. It is listed here for completeness.
    // alpha_workflow_synonym
    public class AlphaWorkflowSynonym
    {
        public int Id { get; set; }
        public string Description { get; set; }
    }

    // The table 'UserFacilityServiceRole' is not usable by entity framework because it
    // does not have a primary key. It is listed here for completeness.
    // UserFacilityServiceRole
    public class App_UserFacilityServiceRole
    {
        public int UserId { get; set; }
        public int AppId { get; set; }
        public int FsrId { get; set; }
    }

    // The table 'AppUser' is not usable by entity framework because it
    // does not have a primary key. It is listed here for completeness.
    // AppUser
    public class AppUser
    {
        public long Id { get; set; }
        public string Name { get; set; }
    }

    // The table 'Attendee' is not usable by entity framework because it
    // does not have a primary key. It is listed here for completeness.
    // Attendee
    public class Attendee
    {
        public long AttendeeId { get; set; }
        public string Lastname { get; set; }
        public string Firstname { get; set; }
        public int? PhoneCountryId { get; set; }
    }

    // The table 'BatchTest' is not usable by entity framework because it
    // does not have a primary key. It is listed here for completeness.
    // BatchTest
    public class BatchTest
    {
        public string Code { get; set; }
    }

    // The table 'Harish3485' is not usable by entity framework because it
    // does not have a primary key. It is listed here for completeness.
    // Harish3485
    public class Beta_Harish3485
    {
        public int Id { get; set; }
        public int AnotherId { get; set; }
    }

    // The table 'Test' is not usable by entity framework because it
    // does not have a primary key. It is listed here for completeness.
    // Test
    public class Beta_Test
    {
        public int? Id { get; set; }
        public int? ExclusionTest { get; set; }
    }

    // The table 'ToAlpha' is not usable by entity framework because it
    // does not have a primary key. It is listed here for completeness.
    // ToAlpha
    public class Beta_ToAlpha
    {
        public int Id { get; set; }
        public int AlphaId { get; set; }
    }

    // The table 'workflow' is not usable by entity framework because it
    // does not have a primary key. It is listed here for completeness.
    // workflow
    public class Beta_Workflow
    {
        public int Id { get; set; }
        public string Description { get; set; }
    }

    // The table 'BITFIDDLERALLCAPS' is not usable by entity framework because it
    // does not have a primary key. It is listed here for completeness.
    // BITFIDDLERALLCAPS
    public class Bitfiddlerallcap
    {
        public int Id { get; set; }
    }

    // The table 'BitFiddlerCATEGORIES' is not usable by entity framework because it
    // does not have a primary key. It is listed here for completeness.
    // BitFiddlerCATEGORIES
    public class BitFiddlerCategoRy
    {
        public int Id { get; set; }
    }

    // The table 'BitFiddlerCURRENCIES' is not usable by entity framework because it
    // does not have a primary key. It is listed here for completeness.
    // BitFiddlerCURRENCIES
    public class BitFiddlerCurrenCy
    {
        public int Id { get; set; }
    }

    // The table 'Blah' is not usable by entity framework because it
    // does not have a primary key. It is listed here for completeness.
    // Blah
    public class Blah
    {
        public int BlahId { get; set; }
    }

    // The table 'BlahBlahLink' is not usable by entity framework because it
    // does not have a primary key. It is listed here for completeness.
    // BlahBlahLink
    public class BlahBlahLink
    {
        public int BlahId { get; set; }
        public int BlahId2 { get; set; }
    }

    // The table 'BlahBlahLink_readonly' is not usable by entity framework because it
    // does not have a primary key. It is listed here for completeness.
    // BlahBlahLink_readonly
    public class BlahBlahLinkReadonly
    {
        public int BlahId { get; set; }
        public int BlahId2 { get; set; }
        public byte[] RowVersion { get; set; }
        public int Id { get; set; }
        public int? Id2 { get; private set; }
    }

    // The table 'BlahBlahLink_v2' is not usable by entity framework because it
    // does not have a primary key. It is listed here for completeness.
    // BlahBlahLink_v2
    public class BlahBlahLinkV2
    {
        public int BlahId { get; set; }
        public int BlahId2 { get; set; }
        public int? Dummy1 { get; set; }
        public int Dummy2 { get; set; }
        public int Hello { get; set; }
    }

    // The table 'BlahBlargLink' is not usable by entity framework because it
    // does not have a primary key. It is listed here for completeness.
    // BlahBlargLink
    public class BlahBlargLink
    {
        public int BlahId { get; set; }
        public int BlargId { get; set; }
    }

    // The table 'Blarg' is not usable by entity framework because it
    // does not have a primary key. It is listed here for completeness.
    // Blarg
    public class Blarg
    {
        public int BlargId { get; set; }
    }

    // The table 'Burak1' is not usable by entity framework because it
    // does not have a primary key. It is listed here for completeness.
    // Burak1
    public class Burak1
    {
        public long Id { get; set; }
        public long IdT { get; set; }
        public long Num { get; set; }
    }

    // The table 'Burak2' is not usable by entity framework because it
    // does not have a primary key. It is listed here for completeness.
    // Burak2
    public class Burak2
    {
        public long Id { get; set; }
        public long Num { get; set; }
    }

    // The table 'CalculatedColumnNotNull' is not usable by entity framework because it
    // does not have a primary key. It is listed here for completeness.
    // CalculatedColumnNotNull
    public class CalculatedColumnNotNull
    {
        public int Id { get; set; }
        public byte Type { get; set; }
        public bool IsCalendar { get; private set; }
        public bool IsUtilization { get; private set; }
    }

    // The table 'Car' is not usable by entity framework because it
    // does not have a primary key. It is listed here for completeness.
    // Car
    public class Car
    {
        public int Id { get; set; }
        public int PrimaryColourId { get; set; }
        public string CarMake { get; set; }
        public int? ComputedColumn { get; private set; }
        public int ComputedColumnPersisted { get; private set; }
    }

    // The table 'CarToColour' is not usable by entity framework because it
    // does not have a primary key. It is listed here for completeness.
    // CarToColour
    public class CarToColour
    {
        public int CarId { get; set; }
        public int ColourId { get; set; }
    }

    // The table 'ClientCreationState' is not usable by entity framework because it
    // does not have a primary key. It is listed here for completeness.
    // ClientCreationState
    public class ClientCreationState
    {
        public Guid Id { get; set; }
        public bool WebhookSetup { get; set; }
        public bool AuthSetup { get; set; }
        public bool AssignedCarrier { get; set; }
    }

    // The table 'CMS_File' is not usable by entity framework because it
    // does not have a primary key. It is listed here for completeness.
    // CMS_File
    public class CmsFile
    {
        public int FileId { get; set; }
        public string FileName { get; set; }
        public string FileDescription { get; set; }
        public string FileIdentifier { get; set; }
        public DateTime? ValidStartDate { get; set; }
        public DateTime? ValidEndDate { get; set; }
        public bool IsActive { get; set; }
    }

    // The table 'CMS_FileTag' is not usable by entity framework because it
    // does not have a primary key. It is listed here for completeness.
    // CMS_FileTag
    public class CmsFileTag
    {
        public int FileId { get; set; }
        public int TagId { get; set; }
    }

    // The table 'CMS_Tag' is not usable by entity framework because it
    // does not have a primary key. It is listed here for completeness.
    // CMS_Tag
    public class CmsTag
    {
        public int TagId { get; set; }
        public string TagName { get; set; }
    }

    // The table 'CODE_MeetingTopicDetails' is not usable by entity framework because it
    // does not have a primary key. It is listed here for completeness.
    // CODE_MeetingTopicDetails
    public class CodeMeetingTopicDetail
    {
        public int Id { get; set; }
        public int IdReuniao { get; set; }
        public int? OrdTrab { get; set; }
        public string Assunto { get; set; }
        public string Desenvolvimento { get; set; }
        public string Origem { get; set; }
        public int? IdOrigem { get; set; }
        public int? Estado { get; set; }
        public int CompanyId { get; set; }
        public DateTime DateCreated { get; set; }
        public DateTime? DateChanged { get; set; }
    }

    // The table 'CodeObject' is not usable by entity framework because it
    // does not have a primary key. It is listed here for completeness.
    // CodeObject
    public class CodeObject
    {
        public int CodeObjectNo { get; set; }
        public int? ApplicationNo { get; set; }
        public int Type { get; set; }
        public string EName { get; set; }
        public string AName { get; set; }
        public string Description { get; set; }
        public string CodeName { get; set; }
        public string Note { get; set; }
        public bool IsObject { get; set; }
        public byte[] VersionNumber { get; set; }

        public CodeObject()
        {
            CodeObjectNo = 0;
            IsObject = false;
        }
    }

    // The table 'CODE_PARAM_MeetingTopicDetailSource' is not usable by entity framework because it
    // does not have a primary key. It is listed here for completeness.
    // CODE_PARAM_MeetingTopicDetailSource
    public class CodeParamMeetingTopicDetailSource
    {
        public int Id { get; set; }
        public string Code { get; set; }
        public string Label { get; set; }
        public string LabelEng { get; set; }
        public string LabelEsp { get; set; }
        public string LabelFra { get; set; }
        public DateTime DateCreated { get; set; }
        public DateTime? DateChanged { get; set; }
    }

    // The table 'Colour' is not usable by entity framework because it
    // does not have a primary key. It is listed here for completeness.
    // Colour
    public class Colour
    {
        public int Id { get; set; }
        public string Name { get; set; }
    }

    // The table 'ColumnNameAndTypes' is not usable by entity framework because it
    // does not have a primary key. It is listed here for completeness.
    // ColumnNameAndTypes
    public class ColumnNameAndType
    {
        public int C36 { get; set; }
        public int? C37 { get; set; }
        public int? C163 { get; set; }
        public int? C38Fred { get; set; }
        public int? Abc4792 { get; set; }
        public int? JoeBloggs { get; set; }
        public int? SimonHughes { get; set; }
        public string Description { get; set; }
        public DateTime SomeDate { get; set; }
        public string Obs { get; set; }
        public string Obs1 { get; set; }
        public string Obs2 { get; set; }
        public string Obs3 { get; set; }
        public int? @Static { get; set; }
        public int? @Readonly { get; set; }
        public int? C123Hi { get; set; }
        public float? Areal { get; set; }
        public double? Afloat { get; set; }
        public float? Afloat8 { get; set; }
        public float? Afloat20 { get; set; }
        public float? Afloat24 { get; set; }
        public double? Afloat53 { get; set; }
        public decimal? Adecimal { get; set; }
        public decimal? Adecimal194 { get; set; }
        public decimal? Adecimal103 { get; set; }
        public decimal? Anumeric { get; set; }
        public decimal? Anumeric52 { get; set; }
        public decimal? Anumeric113 { get; set; }
        public decimal? Amoney { get; set; }
        public decimal? Asmallmoney { get; set; }
        public int? Brandon { get; set; }
        public NetTopologySuite.Geometries.Point GeographyType { get; set; }
        public NetTopologySuite.Geometries.Geometry GeometryType { get; set; }

        public ColumnNameAndType()
        {
            Description = "";
            SomeDate = DateTime.Now;
            Obs = "[{\"k\":\"en\",\"v\":\"\"},{\"k\":\"pt\",\"v\":\"\"}]";
            Obs1 = @"\";
            Obs2 = @"\\";
            Obs3 = @"\\\";
            Areal = 1.23f;
            Afloat = 999.0;
        }
    }

    // ComplexView
    public class ComplexView
    {
        public string LicenseType { get; set; }
        public int? Count { get; set; }
    }

    // The table 'Country' is not usable by entity framework because it
    // does not have a primary key. It is listed here for completeness.
    // Country
    public class Country
    {
        public int CountryId { get; set; }
        public string Code { get; set; }
    }

    // The table 'cross_database_synonym' is not usable by entity framework because it
    // does not have a primary key. It is listed here for completeness.
    // cross_database_synonym
    public class CrossDatabaseSynonym
    {
        public int Id { get; set; }
        public string Forename { get; set; }
    }

    // The table 'DateTimeDefaultTest' is not usable by entity framework because it
    // does not have a primary key. It is listed here for completeness.
    // DateTimeDefaultTest
    public class DateTimeDefaultTest
    {
        public int Id { get; set; }
        public DateTimeOffset? CreatedDate { get; set; }

        public DateTimeDefaultTest()
        {
            CreatedDate = DateTimeOffset.Now;
        }
    }

    // The table 'DefaultCheckForNull' is not usable by entity framework because it
    // does not have a primary key. It is listed here for completeness.
    // DefaultCheckForNull
    public class DefaultCheckForNull
    {
        public int Id { get; set; }
        public string DescUppercase { get; set; }
        public string DescLowercase { get; set; }
        public string DescMixedCase { get; set; }
        public string DescBrackets { get; set; }
        public string X1 { get; set; }
    }

    // The table 'DSOpe' is not usable by entity framework because it
    // does not have a primary key. It is listed here for completeness.
    // DSOpe
    public class DsOpe
    {
        public int Id { get; set; }
        public decimal DecimalDefault { get; set; }
        public Guid MyGuid { get; set; }
        public string @Default { get; set; }
        public Guid? MyGuidBadDefault { get; set; }

        public DsOpe()
        {
            DecimalDefault = 99.99m;
            MyGuid = Guid.Parse("9B7E1F67-5A81-4277-BC7D-06A3262A5C70");
            MyGuidBadDefault = null;
        }
    }

    // The table 'EnumsWithStringAsValue' is not usable by entity framework because it
    // does not have a primary key. It is listed here for completeness.
    // EnumsWithStringAsValue
    public class EnumsWithStringAsValue
    {
        public string EnumName { get; set; }
        public string Value { get; set; }
    }

    // The table 'EnumWithDefaultValue' is not usable by entity framework because it
    // does not have a primary key. It is listed here for completeness.
    // EnumWithDefaultValue
    public class EnumWithDefaultValue
    {
        public int Id { get; set; }
        public int SomeEnum { get; set; }

        public EnumWithDefaultValue()
        {
            SomeEnum = 1;
        }
    }

    // The table 'EventProcessor' is not usable by entity framework because it
    // does not have a primary key. It is listed here for completeness.
    // EventProcessor
    public class EventProcessor
    {
        public int Id { get; set; }
        public string Name { get; set; }
        public string Description { get; set; }
        public string EndpointAddress { get; set; }
        public bool Enabled { get; set; }
    }

    // The table 'EventProcessorEventFilter' is not usable by entity framework because it
    // does not have a primary key. It is listed here for completeness.
    // EventProcessorEventFilter
    public class EventProcessorEventFilter
    {
        public int Id { get; set; }
        public int EventProcessorId { get; set; }
        public int WantedEventId { get; set; }
    }

    // The table 'FinancialInstitutionOffice' is not usable by entity framework because it
    // does not have a primary key. It is listed here for completeness.
    // FinancialInstitutionOffice
    public class FinancialInstitutionOffice
    {
        public Guid Code { get; set; }
        public Guid FinancialInstitutionCode { get; set; }
        public string OfficeName { get; set; }
    }

    // The table 'footer' is not usable by entity framework because it
    // does not have a primary key. It is listed here for completeness.
    // footer
    public class Footer
    {
        public int Id { get; set; }
        public int OtherId { get; set; }
        public DateTime Added { get; set; }

        public Footer()
        {
            Added = DateTime.Now;
        }
    }

    // The table 'ForeignKeyIsNotEnforced' is not usable by entity framework because it
    // does not have a primary key. It is listed here for completeness.
    // ForeignKeyIsNotEnforced
    public class ForeignKeyIsNotEnforced
    {
        public int Id { get; set; }
        public int? NullValue { get; set; }
        public int NotNullValue { get; set; }
    }

    // The table 'ForeignKeyIsNotEnforcedItem' is not usable by entity framework because it
    // does not have a primary key. It is listed here for completeness.
    // ForeignKeyIsNotEnforcedItem
    public class ForeignKeyIsNotEnforcedItem
    {
        public int Id { get; set; }
        public int? NullValue { get; set; }
        public int NotNullValue { get; set; }
    }

    // The table 'HasPrincipalKeyTestChild' is not usable by entity framework because it
    // does not have a primary key. It is listed here for completeness.
    // HasPrincipalKeyTestChild
    public class HasPrincipalKeyTestChild
    {
        public int Id { get; set; }
        public int A { get; set; }
        public int B { get; set; }
        public int? C { get; set; }
        public int? D { get; set; }
    }

    // The table 'HasPrincipalKeyTestParent' is not usable by entity framework because it
    // does not have a primary key. It is listed here for completeness.
    // HasPrincipalKeyTestParent
    public class HasPrincipalKeyTestParent
    {
        public int Id { get; set; }
        public int Aa { get; set; }
        public int Bb { get; set; }
        public int? Cc { get; set; }
        public int? Dd { get; set; }
    }

    // The table 'header' is not usable by entity framework because it
    // does not have a primary key. It is listed here for completeness.
    // header
    public class Header
    {
        public int Id { get; set; }
        public int AnotherId { get; set; }
        public DateTime Added { get; set; }

        public Header()
        {
            Added = DateTime.Now;
        }
    }

    // The table 'hierarchy_test' is not usable by entity framework because it
    // does not have a primary key. It is listed here for completeness.
    // hierarchy_test
    public class HierarchyTest
    {
        public int Id { get; set; }
        public Hierarchy.HierarchyId Hid { get; set; }
    }

    // The table 'InflectorData' is not usable by entity framework because it
    // does not have a primary key. It is listed here for completeness.
    // InflectorData
    public class InflectorData
    {
        public int Id { get; set; }
    }

    // The table 'InflectorStatus' is not usable by entity framework because it
    // does not have a primary key. It is listed here for completeness.
    // InflectorStatus
    public class InflectorStatus
    {
        public int Id { get; set; }
        public int SayHelloTo { get; set; }
        public int SignalData { get; set; }
        public int NotificationStatus { get; set; }
        public int Status { get; set; }
        public int To { get; set; }
        public int Data { get; set; }
    }

    // The table 'InflectorTo' is not usable by entity framework because it
    // does not have a primary key. It is listed here for completeness.
    // InflectorTo
    public class InflectorTo
    {
        public int Id { get; set; }
    }

    // The table 'MultipleKeys' is not usable by entity framework because it
    // does not have a primary key. It is listed here for completeness.
    // MultipleKeys
    public class MultipleKey
    {
        public int UserId { get; set; }
        public int FavouriteColourId { get; set; }
        public int BestHolidayTypeId { get; set; }
        public int BankId { get; set; }
        public int CarId { get; set; }
    }

    // The table 'NoPrimaryKeys' is not usable by entity framework because it
    // does not have a primary key. It is listed here for completeness.
    // NoPrimaryKeys
    public class NoPrimaryKey
    {
        public int? Id { get; set; }
        public string Description { get; set; }
    }

    // The table 'Period.Table' is not usable by entity framework because it
    // does not have a primary key. It is listed here for completeness.
    // Period.Table
    public class PeriodTable
    {
        public int Id { get; set; }
        public int? JoeBloggs { get; set; }
    }

    // The table 'PeriodTestTable' is not usable by entity framework because it
    // does not have a primary key. It is listed here for completeness.
    // PeriodTestTable
    public class PeriodTestTable
    {
        public int Id { get; set; }
        public int? JoeBloggs { get; set; }
    }

    // The table 'Person' is not usable by entity framework because it
    // does not have a primary key. It is listed here for completeness.
    // Person
    public class Person
    {
        public int Id { get; set; }
        public string Name { get; set; }
    }

    // The table 'PersonPosts' is not usable by entity framework because it
    // does not have a primary key. It is listed here for completeness.
    // PersonPosts
    public class PersonPost
    {
        public int Id { get; set; }
        public string Title { get; set; }
        public string Body { get; set; }
        public int CreatedBy { get; set; }
        public int UpdatedBy { get; set; }
    }

    // The table 'pk_ordinal_test' is not usable by entity framework because it
    // does not have a primary key. It is listed here for completeness.
    // pk_ordinal_test
    public class PkOrdinalTest
    {
        public int C1 { get; set; }
        public int C2 { get; set; }
        public int C3 { get; set; }
    }

    // The table 'PropertyTypesToAdd' is not usable by entity framework because it
    // does not have a primary key. It is listed here for completeness.
    // PropertyTypesToAdd
    public class PropertyTypesToAdd
    {
        public int Id { get; set; }
        public DateTime? DtDefault { get; set; }
        public DateTime? Dt7 { get; set; }
        public string DefaultCheck { get; set; }
    }

    // The table 'SequenceTest' is not usable by entity framework because it
    // does not have a primary key. It is listed here for completeness.
    // SequenceTest
    public class SequenceTest
    {
        public int Id { get; set; }
        public long CntByBigInt { get; set; }
        public byte CntByTinyInt { get; set; }
        public short CntBySmallInt { get; set; }
        public decimal CntByDecimal { get; set; }
        public decimal CntByNumeric { get; set; }
    }

    // The table 'SequenceTestPartTwo' is not usable by entity framework because it
    // does not have a primary key. It is listed here for completeness.
    // SequenceTestPartTwo
    public class SequenceTestPartTwo
    {
        public int Id { get; set; }
        public long CntByBigInt { get; set; }
        public byte CntByTinyInt { get; set; }
    }

    // The table 'SmallDecimalTest' is not usable by entity framework because it
    // does not have a primary key. It is listed here for completeness.
    // SmallDecimalTest
    public class SmallDecimalTest
    {
        public int Id { get; set; }
        public decimal? KoeffVed { get; set; }

        public SmallDecimalTest()
        {
            KoeffVed = 0.5m;
        }
    }

    // SmallDecimalTestView
    public class SmallDecimalTestView
    {
        public int FkId { get; set; }
        public string Description { get; set; }
    }

    // The table 'Sorter' is not usable by entity framework because it
    // does not have a primary key. It is listed here for completeness.
    // Sorter
    public class Sorter
    {
        public int SorterId { get; set; }
        public string SorterName { get; set; }
    }

    // The table 'Sorters' is not usable by entity framework because it
    // does not have a primary key. It is listed here for completeness.
    // Sorters
    public class Sorters
    {
        public string SorterName { get; set; }
    }

    // The table 'SorterScannerGroup' is not usable by entity framework because it
    // does not have a primary key. It is listed here for completeness.
    // SorterScannerGroup
    public class SorterScannerGroup
    {
        public string SorterName { get; set; }
    }

    // The table 'TableA' is not usable by entity framework because it
    // does not have a primary key. It is listed here for completeness.
    // TableA
    public class TableA
    {
        public int TableAId { get; set; }
        public string TableADesc { get; set; }
    }

    // The table 'TableB' is not usable by entity framework because it
    // does not have a primary key. It is listed here for completeness.
    // TableB
    public class TableB
    {
        public int TableBId { get; set; }
        public int TableAId { get; set; }
        public int? ParentTableAId { get; set; }
        public string TableBDesc { get; set; }
    }

    // The table 'table mapping with space' is not usable by entity framework because it
    // does not have a primary key. It is listed here for completeness.
    // table mapping with space
    public class TableMappingWithSpace
    {
        public int Id { get; set; }
        public int IdValue { get; set; }
    }

    // The table 'table with duplicate column names' is not usable by entity framework because it
    // does not have a primary key. It is listed here for completeness.
    // table with duplicate column names
    public class TableWithDuplicateColumnName
    {
        public int Id { get; set; }
        public int UserId1 { get; set; }
        public int UserId2 { get; set; }
        public int UserId3 { get; set; }
        public int UserId4 { get; set; }
        public int UserId { get; set; }
    }

    // The table 'table.with.multiple.periods' is not usable by entity framework because it
    // does not have a primary key. It is listed here for completeness.
    // table.with.multiple.periods
    public class TableWithMultiplePeriod
    {
        public int Id { get; set; }
        public string Description { get; set; }
    }

    // The table 'table with space' is not usable by entity framework because it
    // does not have a primary key. It is listed here for completeness.
    // table with space
    public class TableWithSpace
    {
        public int Id { get; set; }
    }

    // The table 'table with space and in columns' is not usable by entity framework because it
    // does not have a primary key. It is listed here for completeness.
    // table with space and in columns
    public class TableWithSpaceAndInColumn
    {
        public int IdValue { get; set; }
    }

    // The table 'TableWithSpaceInColumnOnly' is not usable by entity framework because it
    // does not have a primary key. It is listed here for completeness.
    // TableWithSpaceInColumnOnly
    public class TableWithSpaceInColumnOnly
    {
        public int IdValue { get; set; }
    }

    // The table 'TadeuszSobol' is not usable by entity framework because it
    // does not have a primary key. It is listed here for completeness.
    // TadeuszSobol
    public class TadeuszSobol
    {
        public int Id { get; set; }
        public string Description { get; set; }
        public string Notes { get; set; }
        public string Name { get; set; }
    }


    #endregion

    #region POCO Configuration

    // AllColumnsNull
    public class AllColumnsNullConfiguration : IEntityTypeConfiguration<AllColumnsNull>
    {
        public void Configure(EntityTypeBuilder<AllColumnsNull> builder)
        {
            builder.ToView("AllColumnsNull", "dbo");
            builder.HasNoKey();

        }
    }

    // ComplexView
    public class ComplexViewConfiguration : IEntityTypeConfiguration<ComplexView>
    {
        public void Configure(EntityTypeBuilder<ComplexView> builder)
        {
            builder.ToView("ComplexView", "dbo");
            builder.HasNoKey();

        }
    }

    // SmallDecimalTestView
    public class SmallDecimalTestViewConfiguration : IEntityTypeConfiguration<SmallDecimalTestView>
    {
        public void Configure(EntityTypeBuilder<SmallDecimalTestView> builder)
        {
            builder.ToView("SmallDecimalTestView", "dbo");
            builder.HasNoKey();

        }
    }


    #endregion

    #region Enumerations

    public enum DaysOfWeek
    {
        Sun = 0,
        Mon = 1,
        Tue = 2,
        Wed = 3,
        Thu = 4,
        Fri = 6,
        Sat = 7,
    }


    #endregion

    #region Stored procedure return models

    public class ASimpleExampleReturnModel
    {
        public int? id { get; set; }
        public string stuff { get; set; }
    }

    public class C182Test1ReturnModel
    {
        public int? Id { get; set; }
        public string Description { get; set; }
    }

    public class C182Test2ReturnModel
    {
        public class ResultSetModel1
        {
            public int? Id { get; set; }
            public string DescriptionFlag1 { get; set; }
        }
        public List<ResultSetModel1> ResultSet1;
        public class ResultSetModel2
        {
            public int? Id { get; set; }
            public string DescriptionNotNull { get; set; }
        }
        public List<ResultSetModel2> ResultSet2;
        public class ResultSetModel3
        {
            public int? Id { get; set; }
            public string Description { get; set; }
        }
        public List<ResultSetModel3> ResultSet3;
    }

    public class CheckIfApplicationIsCompleteReturnModel
    {
        public string Key { get; set; }
        public string Value { get; set; }
    }

    public class ColourPivotReturnModel
    {
        public int? Blue { get; set; }
        public int? Green { get; set; }
        public int? Red { get; set; }
    }

    public class ColumnNameAndTypesProcReturnModel
    {
        public DateTime someDate { get; set; }
        public string Obs { get; set; }
        public int? @static { get; set; }
        public int? @readonly { get; set; }
        public Single? areal { get; set; }
        public double? afloat { get; set; }
        public Single? afloat8 { get; set; }
        public Single? afloat20 { get; set; }
        public Single? afloat24 { get; set; }
        public double? afloat53 { get; set; }
        public decimal? adecimal { get; set; }
        public decimal? adecimal_19_4 { get; set; }
        public decimal? adecimal_10_3 { get; set; }
        public decimal? anumeric { get; set; }
        public decimal? anumeric_5_2 { get; set; }
        public decimal? anumeric_11_3 { get; set; }
        public decimal? amoney { get; set; }
        public decimal? asmallmoney { get; set; }
        public NetTopologySuite.Geometries.Point GeographyType { get; set; }
        public NetTopologySuite.Geometries.Geometry GeometryType { get; set; }
    }

    public class CsvToIntReturnModel
    {
        public int? IntValue { get; set; }
    }

    public class CustomSchema_CsvToIntWithSchemaReturnModel
    {
        public int? IntValue { get; set; }
    }

    public class DboProcDataFromFfrsAndDboReturnModel
    {
        public int Id { get; set; }
        public int PrimaryColourId { get; set; }
        public string CarMake { get; set; }
        public string CVName { get; set; }
    }

    public class DboProcDataFromFfrsReturnModel
    {
        public Guid BatchUID { get; set; }
        public int CVID { get; set; }
        public string CVName { get; set; }
    }

    public class DsOpeProcReturnModel
    {
        public int ID { get; set; }
        public bool? Selected { get; set; }
    }

    public class FFRS_CsvToInt2ReturnModel
    {
        public int? IntValue { get; set; }
    }

    public class FFRS_CvDataReturnModel
    {
        public Guid BatchUID { get; set; }
        public int CVID { get; set; }
        public string CVName { get; set; }
    }

    public class FFRS_DataFromDboAndFfrsReturnModel
    {
        public int Id { get; set; }
        public int PrimaryColourId { get; set; }
        public string CarMake { get; set; }
        public string CVName { get; set; }
    }

    public class FFRS_DataFromDboReturnModel
    {
        public int Id { get; set; }
        public int PrimaryColourId { get; set; }
        public string CarMake { get; set; }
    }

    public class FkTest_HelloReturnModel
    {
        public int? @static { get; set; }
        public int? @readonly { get; set; }
    }

    public class GetSmallDecimalTestReturnModel
    {
        public int id { get; set; }
        public decimal? KoeffVed { get; set; }
    }

    public class SpatialTypesNoParamsReturnModel
    {
        public int Dollar { get; set; }
        public DateTime someDate { get; set; }
        public NetTopologySuite.Geometries.Point GeographyType { get; set; }
        public NetTopologySuite.Geometries.Geometry GeometryType { get; set; }
    }

    public class SpatialTypesWithParamsReturnModel
    {
        public int Dollar { get; set; }
        public NetTopologySuite.Geometries.Point GeographyType { get; set; }
        public NetTopologySuite.Geometries.Geometry GeometryType { get; set; }
    }

    public class StpMultipleIdenticalResultsReturnModel
    {
        public int Id { get; set; }
        public string Name { get; set; }
    }

    public class StpMultipleMultipleResultsWithParamsReturnModel
    {
        public class ResultSetModel1
        {
            public int codeObjectNo { get; set; }
            public int? applicationNo { get; set; }
        }
        public List<ResultSetModel1> ResultSet1;
        public class ResultSetModel2
        {
            public int Id { get; set; }
            public string Name { get; set; }
        }
        public List<ResultSetModel2> ResultSet2;
        public class ResultSetModel3
        {
            public string code { get; set; }
        }
        public List<ResultSetModel3> ResultSet3;
        public class ResultSetModel4
        {
            public long id { get; set; }
            public long id_t { get; set; }
            public long num { get; set; }
        }
        public List<ResultSetModel4> ResultSet4;
        public class ResultSetModel5
        {
            public int Id { get; set; }
            public int PrimaryColourId { get; set; }
            public string CarMake { get; set; }
            public int? computed_column { get; set; }
            public int? computed_column_persisted { get; set; }
        }
        public List<ResultSetModel5> ResultSet5;
        public class ResultSetModel6
        {
            public int ID { get; set; }
            public int OrderID { get; set; }
            public string sku { get; set; }
        }
        public List<ResultSetModel6> ResultSet6;
    }

    public class StpMultipleResultsReturnModel
    {
        public class ResultSetModel1
        {
            public int codeObjectNo { get; set; }
            public int? applicationNo { get; set; }
            public int type { get; set; }
            public string eName { get; set; }
            public string aName { get; set; }
            public string description { get; set; }
            public string codeName { get; set; }
            public string note { get; set; }
            public bool isObject { get; set; }
            public byte[] versionNumber { get; set; }
        }
        public List<ResultSetModel1> ResultSet1;
        public class ResultSetModel2
        {
            public int Id { get; set; }
            public int PrimaryColourId { get; set; }
            public string CarMake { get; set; }
            public int? computed_column { get; set; }
            public int? computed_column_persisted { get; set; }
        }
        public List<ResultSetModel2> ResultSet2;
        public class ResultSetModel3
        {
            public int Id { get; set; }
            public string Name { get; set; }
        }
        public List<ResultSetModel3> ResultSet3;
    }

    public class StpMultipleResultsWithParamsReturnModel
    {
        public class ResultSetModel1
        {
            public int codeObjectNo { get; set; }
            public int? applicationNo { get; set; }
        }
        public List<ResultSetModel1> ResultSet1;
        public class ResultSetModel2
        {
            public int Id { get; set; }
            public string Name { get; set; }
        }
        public List<ResultSetModel2> ResultSet2;
    }

    public class StpNoParamsTestReturnModel
    {
        public int codeObjectNo { get; set; }
        public int? applicationNo { get; set; }
    }

    public class StpNullableParamsTestReturnModel
    {
        public int codeObjectNo { get; set; }
        public int? applicationNo { get; set; }
    }

    public class StpTestReturnModel
    {
        public int codeObjectNo { get; set; }
        public int? applicationNo { get; set; }
        public int type { get; set; }
        public string eName { get; set; }
        public string aName { get; set; }
        public string description { get; set; }
        public string codeName { get; set; }
        public string note { get; set; }
        public bool isObject { get; set; }
        public byte[] versionNumber { get; set; }
    }

    public class StpTestUnderscoreTestReturnModel
    {
        public int code_object_no { get; set; }
        public int? application_no { get; set; }
    }

    public class Synonyms_SimpleStoredProcReturnModel
    {
        public string ReturnValue { get; set; }
    }

    public class TestReturnStringReturnModel
    {
        public string error { get; set; }
    }

    public class XmlDataV1ReturnModel
    {
        public DateTime? Column1 { get; set; }
        public string Column2 { get; set; }
    }


    #endregion

}
// </auto-generated>
