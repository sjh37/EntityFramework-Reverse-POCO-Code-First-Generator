<#@ include file="..\..\EntityFramework.Reverse.POCO.Generator\EF.Reverse.POCO.v3.ttinclude" #>
<#
    // Multi context file based template
    Settings.DatabaseType            = DatabaseType.SqlServer;
    Settings.TemplateType            = TemplateType.FileBasedCore3;
    Settings.FileManagerType         = FileManagerType.EfCore;
    Settings.ConnectionString        = "Data Source=(local);Initial Catalog=EfrpgTest;Integrated Security=True;Encrypt=false;TrustServerCertificate=true";
    Settings.ConnectionStringName    = "McsfMultiDatabase"; // ConnectionString key as specified in your app.config/web.config/appsettings.json
    Settings.OnConfiguration         = OnConfiguration.Configuration; // EFCore only. Determines the code generated within DbContext.OnConfiguration(). Please read https://github.com/sjh37/EntityFramework-Reverse-POCO-Code-First-Generator/wiki/OnConfiguration    Settings.GenerateSeparateFiles   = false;
    Settings.GenerateSeparateFiles   = false;
    Settings.Namespace               = DefaultNamespace; // Override the default namespace here
    Settings.AddUnitTestingDbContext = false;
    Settings.TemplateFolder          = Path.Combine(Settings.Root, "../../_File based templates/Templates.EFCore3"); // Only used if Settings.TemplateType = TemplateType.FileBased;

    Settings.GenerateSingleDbContext = false;
    Settings.MultiContextSettingsConnectionString = "Data Source=(local);Initial Catalog=EfrpgTest_Settings;Integrated Security=True;Encrypt=false;TrustServerCertificate=true";

    Settings.AdditionalNamespaces.Add("Tester");
    Settings.AdditionalNamespaces.Add("Generator.Tests.Common");
    
    FilterSettings.Reset();
    FilterSettings.AddDefaults();
    FilterSettings.IncludeTableValuedFunctions = true;
    FilterSettings.IncludeScalarValuedFunctions = true;
    FilterSettings.SchemaFilters.Add(new RegexExcludeFilter("Enum"));
    FilterSettings.TableFilters.Add(new RegexExcludeFilter("Enum"));
    FilterSettings.CheckSettings();

    Settings.Enumerations = new List<EnumerationSettings>
    {
        // Example
        new EnumerationSettings
        {
            Name       = "DaysOfWeek",          // Enum to generate. e.g. "DaysOfWeek" would result in "public enum DaysOfWeek {...}"
            Table      = "EnumTest.DaysOfWeek", // Database table containing enum values. e.g. "DaysOfWeek"
            NameField  = "TypeName",            // Column containing the name for the enum. e.g. "TypeName"
            ValueField = "TypeId"               // Column containing the values for the enum. e.g. "TypeId"
        },
        new EnumerationSettings
        {
            Name       = "CarOptions",
            Table      = "EnumsWithStringAsValue",
            NameField  = "enum_name",
            ValueField = "value"
        }
    };

    Inflector.PluralisationService = new EnglishPluralizationService();
    var outer = (GeneratedTextTransformation) this;
    var fileManagement = new FileManagementService(outer);
    var generator = GeneratorFactory.Create(fileManagement, FileManagerFactory.GetFileManagerType());
    if (generator != null && generator.InitialisationOk)
    {
        generator.ReadDatabase();
        generator.GenerateCode();
    }
    fileManagement.Process(true);#>
